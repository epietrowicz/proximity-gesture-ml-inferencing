
/Users/eric/Downloads/Proximity_Gesture_Detection_inferencing/target/6.3.0/b5som/Proximity_Gesture_Detection_inferencing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000152b8  000b4020  000b4020  00004020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000c92d8  000c92d8  000192d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .note.gnu.build-id 00000024  000c92e0  000c92e0  000192e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         000005a0  2003ceb8  000c9304  0001ceb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ba0  2003d458  2003d458  0002d458  2**3
                  ALLOC
  7 .backup       00000004  2003f400  000c98a4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_product 00000006  000c98a8  000c98a8  000298a8  2**0
                  ALLOC
  9 .module_info_suffix 00000024  000c98ae  000c98ae  000298ae  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .module_info_crc 00000004  000c98d2  000c98d2  000298d2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .debug_info   0035ea0e  00000000  00000000  000298d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0002c75c  00000000  00000000  003882e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    000b1ce8  00000000  00000000  003b4a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00005230  00000000  00000000  00466728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 0001a3c8  00000000  00000000  0046b958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0005f34e  00000000  00000000  00485d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000b13b5  00000000  00000000  004e506e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    002bb367  00000000  00000000  00596423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  000113d8  00000000  00000000  0085178c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2iz>:
   b48f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4900:	d215      	bcs.n	b492e <__aeabi_d2iz+0x36>
   b4902:	d511      	bpl.n	b4928 <__aeabi_d2iz+0x30>
   b4904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b490c:	d912      	bls.n	b4934 <__aeabi_d2iz+0x3c>
   b490e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b491a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b491e:	fa23 f002 	lsr.w	r0, r3, r2
   b4922:	bf18      	it	ne
   b4924:	4240      	negne	r0, r0
   b4926:	4770      	bx	lr
   b4928:	f04f 0000 	mov.w	r0, #0
   b492c:	4770      	bx	lr
   b492e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4932:	d105      	bne.n	b4940 <__aeabi_d2iz+0x48>
   b4934:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b4938:	bf08      	it	eq
   b493a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b493e:	4770      	bx	lr
   b4940:	f04f 0000 	mov.w	r0, #0
   b4944:	4770      	bx	lr
   b4946:	bf00      	nop

000b4948 <__aeabi_d2uiz>:
   b4948:	004a      	lsls	r2, r1, #1
   b494a:	d211      	bcs.n	b4970 <__aeabi_d2uiz+0x28>
   b494c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4950:	d211      	bcs.n	b4976 <__aeabi_d2uiz+0x2e>
   b4952:	d50d      	bpl.n	b4970 <__aeabi_d2uiz+0x28>
   b4954:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4958:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b495c:	d40e      	bmi.n	b497c <__aeabi_d2uiz+0x34>
   b495e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4966:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b496a:	fa23 f002 	lsr.w	r0, r3, r2
   b496e:	4770      	bx	lr
   b4970:	f04f 0000 	mov.w	r0, #0
   b4974:	4770      	bx	lr
   b4976:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b497a:	d102      	bne.n	b4982 <__aeabi_d2uiz+0x3a>
   b497c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4980:	4770      	bx	lr
   b4982:	f04f 0000 	mov.w	r0, #0
   b4986:	4770      	bx	lr

000b4988 <__aeabi_d2f>:
   b4988:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b498c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4990:	bf24      	itt	cs
   b4992:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b4996:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b499a:	d90d      	bls.n	b49b8 <__aeabi_d2f+0x30>
   b499c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b49a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b49a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b49a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b49ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b49b0:	bf08      	it	eq
   b49b2:	f020 0001 	biceq.w	r0, r0, #1
   b49b6:	4770      	bx	lr
   b49b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b49bc:	d121      	bne.n	b4a02 <__aeabi_d2f+0x7a>
   b49be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b49c2:	bfbc      	itt	lt
   b49c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b49c8:	4770      	bxlt	lr
   b49ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b49ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b49d2:	f1c2 0218 	rsb	r2, r2, #24
   b49d6:	f1c2 0c20 	rsb	ip, r2, #32
   b49da:	fa10 f30c 	lsls.w	r3, r0, ip
   b49de:	fa20 f002 	lsr.w	r0, r0, r2
   b49e2:	bf18      	it	ne
   b49e4:	f040 0001 	orrne.w	r0, r0, #1
   b49e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b49ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b49f0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b49f4:	ea40 000c 	orr.w	r0, r0, ip
   b49f8:	fa23 f302 	lsr.w	r3, r3, r2
   b49fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4a00:	e7cc      	b.n	b499c <__aeabi_d2f+0x14>
   b4a02:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b4a06:	d107      	bne.n	b4a18 <__aeabi_d2f+0x90>
   b4a08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4a0c:	bf1e      	ittt	ne
   b4a0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4a12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b4a16:	4770      	bxne	lr
   b4a18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b4a1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b4a20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4a24:	4770      	bx	lr
   b4a26:	bf00      	nop

000b4a28 <__aeabi_ldivmod>:
   b4a28:	b97b      	cbnz	r3, b4a4a <__aeabi_ldivmod+0x22>
   b4a2a:	b972      	cbnz	r2, b4a4a <__aeabi_ldivmod+0x22>
   b4a2c:	2900      	cmp	r1, #0
   b4a2e:	bfbe      	ittt	lt
   b4a30:	2000      	movlt	r0, #0
   b4a32:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   b4a36:	e006      	blt.n	b4a46 <__aeabi_ldivmod+0x1e>
   b4a38:	bf08      	it	eq
   b4a3a:	2800      	cmpeq	r0, #0
   b4a3c:	bf1c      	itt	ne
   b4a3e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   b4a42:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b4a46:	f000 b9dd 	b.w	b4e04 <__aeabi_idiv0>
   b4a4a:	f1ad 0c08 	sub.w	ip, sp, #8
   b4a4e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b4a52:	2900      	cmp	r1, #0
   b4a54:	db09      	blt.n	b4a6a <__aeabi_ldivmod+0x42>
   b4a56:	2b00      	cmp	r3, #0
   b4a58:	db1a      	blt.n	b4a90 <__aeabi_ldivmod+0x68>
   b4a5a:	f000 f86b 	bl	b4b34 <__udivmoddi4>
   b4a5e:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4a62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4a66:	b004      	add	sp, #16
   b4a68:	4770      	bx	lr
   b4a6a:	4240      	negs	r0, r0
   b4a6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4a70:	2b00      	cmp	r3, #0
   b4a72:	db1b      	blt.n	b4aac <__aeabi_ldivmod+0x84>
   b4a74:	f000 f85e 	bl	b4b34 <__udivmoddi4>
   b4a78:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4a80:	b004      	add	sp, #16
   b4a82:	4240      	negs	r0, r0
   b4a84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4a88:	4252      	negs	r2, r2
   b4a8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4a8e:	4770      	bx	lr
   b4a90:	4252      	negs	r2, r2
   b4a92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4a96:	f000 f84d 	bl	b4b34 <__udivmoddi4>
   b4a9a:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4a9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4aa2:	b004      	add	sp, #16
   b4aa4:	4240      	negs	r0, r0
   b4aa6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4aaa:	4770      	bx	lr
   b4aac:	4252      	negs	r2, r2
   b4aae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4ab2:	f000 f83f 	bl	b4b34 <__udivmoddi4>
   b4ab6:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4aba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4abe:	b004      	add	sp, #16
   b4ac0:	4252      	negs	r2, r2
   b4ac2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4ac6:	4770      	bx	lr

000b4ac8 <__aeabi_d2lz>:
   b4ac8:	b538      	push	{r3, r4, r5, lr}
   b4aca:	2200      	movs	r2, #0
   b4acc:	2300      	movs	r3, #0
   b4ace:	4604      	mov	r4, r0
   b4ad0:	460d      	mov	r5, r1
   b4ad2:	f7ff fed3 	bl	b487c <__aeabi_dcmplt>
   b4ad6:	b928      	cbnz	r0, b4ae4 <__aeabi_d2lz+0x1c>
   b4ad8:	4620      	mov	r0, r4
   b4ada:	4629      	mov	r1, r5
   b4adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4ae0:	f000 b80a 	b.w	b4af8 <__aeabi_d2ulz>
   b4ae4:	4620      	mov	r0, r4
   b4ae6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b4aea:	f000 f805 	bl	b4af8 <__aeabi_d2ulz>
   b4aee:	4240      	negs	r0, r0
   b4af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4af4:	bd38      	pop	{r3, r4, r5, pc}
   b4af6:	bf00      	nop

000b4af8 <__aeabi_d2ulz>:
   b4af8:	b5d0      	push	{r4, r6, r7, lr}
   b4afa:	4b0c      	ldr	r3, [pc, #48]	; (b4b2c <__aeabi_d2ulz+0x34>)
   b4afc:	2200      	movs	r2, #0
   b4afe:	4606      	mov	r6, r0
   b4b00:	460f      	mov	r7, r1
   b4b02:	f7ff fc49 	bl	b4398 <__aeabi_dmul>
   b4b06:	f7ff ff1f 	bl	b4948 <__aeabi_d2uiz>
   b4b0a:	4604      	mov	r4, r0
   b4b0c:	f7ff fbca 	bl	b42a4 <__aeabi_ui2d>
   b4b10:	4b07      	ldr	r3, [pc, #28]	; (b4b30 <__aeabi_d2ulz+0x38>)
   b4b12:	2200      	movs	r2, #0
   b4b14:	f7ff fc40 	bl	b4398 <__aeabi_dmul>
   b4b18:	4602      	mov	r2, r0
   b4b1a:	460b      	mov	r3, r1
   b4b1c:	4630      	mov	r0, r6
   b4b1e:	4639      	mov	r1, r7
   b4b20:	f7ff fa82 	bl	b4028 <__aeabi_dsub>
   b4b24:	f7ff ff10 	bl	b4948 <__aeabi_d2uiz>
   b4b28:	4621      	mov	r1, r4
   b4b2a:	bdd0      	pop	{r4, r6, r7, pc}
   b4b2c:	3df00000 	.word	0x3df00000
   b4b30:	41f00000 	.word	0x41f00000

000b4b34 <__udivmoddi4>:
   b4b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4b38:	9d08      	ldr	r5, [sp, #32]
   b4b3a:	4604      	mov	r4, r0
   b4b3c:	468e      	mov	lr, r1
   b4b3e:	2b00      	cmp	r3, #0
   b4b40:	d14d      	bne.n	b4bde <__udivmoddi4+0xaa>
   b4b42:	428a      	cmp	r2, r1
   b4b44:	4694      	mov	ip, r2
   b4b46:	d969      	bls.n	b4c1c <__udivmoddi4+0xe8>
   b4b48:	fab2 f282 	clz	r2, r2
   b4b4c:	b152      	cbz	r2, b4b64 <__udivmoddi4+0x30>
   b4b4e:	fa01 f302 	lsl.w	r3, r1, r2
   b4b52:	f1c2 0120 	rsb	r1, r2, #32
   b4b56:	fa20 f101 	lsr.w	r1, r0, r1
   b4b5a:	fa0c fc02 	lsl.w	ip, ip, r2
   b4b5e:	ea41 0e03 	orr.w	lr, r1, r3
   b4b62:	4094      	lsls	r4, r2
   b4b64:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b4b68:	0c21      	lsrs	r1, r4, #16
   b4b6a:	fbbe f6f8 	udiv	r6, lr, r8
   b4b6e:	fa1f f78c 	uxth.w	r7, ip
   b4b72:	fb08 e316 	mls	r3, r8, r6, lr
   b4b76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b4b7a:	fb06 f107 	mul.w	r1, r6, r7
   b4b7e:	4299      	cmp	r1, r3
   b4b80:	d90a      	bls.n	b4b98 <__udivmoddi4+0x64>
   b4b82:	eb1c 0303 	adds.w	r3, ip, r3
   b4b86:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   b4b8a:	f080 811f 	bcs.w	b4dcc <__udivmoddi4+0x298>
   b4b8e:	4299      	cmp	r1, r3
   b4b90:	f240 811c 	bls.w	b4dcc <__udivmoddi4+0x298>
   b4b94:	3e02      	subs	r6, #2
   b4b96:	4463      	add	r3, ip
   b4b98:	1a5b      	subs	r3, r3, r1
   b4b9a:	b2a4      	uxth	r4, r4
   b4b9c:	fbb3 f0f8 	udiv	r0, r3, r8
   b4ba0:	fb08 3310 	mls	r3, r8, r0, r3
   b4ba4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b4ba8:	fb00 f707 	mul.w	r7, r0, r7
   b4bac:	42a7      	cmp	r7, r4
   b4bae:	d90a      	bls.n	b4bc6 <__udivmoddi4+0x92>
   b4bb0:	eb1c 0404 	adds.w	r4, ip, r4
   b4bb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b4bb8:	f080 810a 	bcs.w	b4dd0 <__udivmoddi4+0x29c>
   b4bbc:	42a7      	cmp	r7, r4
   b4bbe:	f240 8107 	bls.w	b4dd0 <__udivmoddi4+0x29c>
   b4bc2:	4464      	add	r4, ip
   b4bc4:	3802      	subs	r0, #2
   b4bc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b4bca:	1be4      	subs	r4, r4, r7
   b4bcc:	2600      	movs	r6, #0
   b4bce:	b11d      	cbz	r5, b4bd8 <__udivmoddi4+0xa4>
   b4bd0:	40d4      	lsrs	r4, r2
   b4bd2:	2300      	movs	r3, #0
   b4bd4:	e9c5 4300 	strd	r4, r3, [r5]
   b4bd8:	4631      	mov	r1, r6
   b4bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4bde:	428b      	cmp	r3, r1
   b4be0:	d909      	bls.n	b4bf6 <__udivmoddi4+0xc2>
   b4be2:	2d00      	cmp	r5, #0
   b4be4:	f000 80ef 	beq.w	b4dc6 <__udivmoddi4+0x292>
   b4be8:	2600      	movs	r6, #0
   b4bea:	e9c5 0100 	strd	r0, r1, [r5]
   b4bee:	4630      	mov	r0, r6
   b4bf0:	4631      	mov	r1, r6
   b4bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4bf6:	fab3 f683 	clz	r6, r3
   b4bfa:	2e00      	cmp	r6, #0
   b4bfc:	d14a      	bne.n	b4c94 <__udivmoddi4+0x160>
   b4bfe:	428b      	cmp	r3, r1
   b4c00:	d302      	bcc.n	b4c08 <__udivmoddi4+0xd4>
   b4c02:	4282      	cmp	r2, r0
   b4c04:	f200 80f9 	bhi.w	b4dfa <__udivmoddi4+0x2c6>
   b4c08:	1a84      	subs	r4, r0, r2
   b4c0a:	eb61 0303 	sbc.w	r3, r1, r3
   b4c0e:	2001      	movs	r0, #1
   b4c10:	469e      	mov	lr, r3
   b4c12:	2d00      	cmp	r5, #0
   b4c14:	d0e0      	beq.n	b4bd8 <__udivmoddi4+0xa4>
   b4c16:	e9c5 4e00 	strd	r4, lr, [r5]
   b4c1a:	e7dd      	b.n	b4bd8 <__udivmoddi4+0xa4>
   b4c1c:	b902      	cbnz	r2, b4c20 <__udivmoddi4+0xec>
   b4c1e:	deff      	udf	#255	; 0xff
   b4c20:	fab2 f282 	clz	r2, r2
   b4c24:	2a00      	cmp	r2, #0
   b4c26:	f040 8092 	bne.w	b4d4e <__udivmoddi4+0x21a>
   b4c2a:	eba1 010c 	sub.w	r1, r1, ip
   b4c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b4c32:	fa1f fe8c 	uxth.w	lr, ip
   b4c36:	2601      	movs	r6, #1
   b4c38:	0c20      	lsrs	r0, r4, #16
   b4c3a:	fbb1 f3f7 	udiv	r3, r1, r7
   b4c3e:	fb07 1113 	mls	r1, r7, r3, r1
   b4c42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b4c46:	fb0e f003 	mul.w	r0, lr, r3
   b4c4a:	4288      	cmp	r0, r1
   b4c4c:	d908      	bls.n	b4c60 <__udivmoddi4+0x12c>
   b4c4e:	eb1c 0101 	adds.w	r1, ip, r1
   b4c52:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   b4c56:	d202      	bcs.n	b4c5e <__udivmoddi4+0x12a>
   b4c58:	4288      	cmp	r0, r1
   b4c5a:	f200 80cb 	bhi.w	b4df4 <__udivmoddi4+0x2c0>
   b4c5e:	4643      	mov	r3, r8
   b4c60:	1a09      	subs	r1, r1, r0
   b4c62:	b2a4      	uxth	r4, r4
   b4c64:	fbb1 f0f7 	udiv	r0, r1, r7
   b4c68:	fb07 1110 	mls	r1, r7, r0, r1
   b4c6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b4c70:	fb0e fe00 	mul.w	lr, lr, r0
   b4c74:	45a6      	cmp	lr, r4
   b4c76:	d908      	bls.n	b4c8a <__udivmoddi4+0x156>
   b4c78:	eb1c 0404 	adds.w	r4, ip, r4
   b4c7c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   b4c80:	d202      	bcs.n	b4c88 <__udivmoddi4+0x154>
   b4c82:	45a6      	cmp	lr, r4
   b4c84:	f200 80bb 	bhi.w	b4dfe <__udivmoddi4+0x2ca>
   b4c88:	4608      	mov	r0, r1
   b4c8a:	eba4 040e 	sub.w	r4, r4, lr
   b4c8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b4c92:	e79c      	b.n	b4bce <__udivmoddi4+0x9a>
   b4c94:	f1c6 0720 	rsb	r7, r6, #32
   b4c98:	40b3      	lsls	r3, r6
   b4c9a:	fa22 fc07 	lsr.w	ip, r2, r7
   b4c9e:	ea4c 0c03 	orr.w	ip, ip, r3
   b4ca2:	fa20 f407 	lsr.w	r4, r0, r7
   b4ca6:	fa01 f306 	lsl.w	r3, r1, r6
   b4caa:	431c      	orrs	r4, r3
   b4cac:	40f9      	lsrs	r1, r7
   b4cae:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b4cb2:	fa00 f306 	lsl.w	r3, r0, r6
   b4cb6:	fbb1 f8f9 	udiv	r8, r1, r9
   b4cba:	0c20      	lsrs	r0, r4, #16
   b4cbc:	fa1f fe8c 	uxth.w	lr, ip
   b4cc0:	fb09 1118 	mls	r1, r9, r8, r1
   b4cc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b4cc8:	fb08 f00e 	mul.w	r0, r8, lr
   b4ccc:	4288      	cmp	r0, r1
   b4cce:	fa02 f206 	lsl.w	r2, r2, r6
   b4cd2:	d90b      	bls.n	b4cec <__udivmoddi4+0x1b8>
   b4cd4:	eb1c 0101 	adds.w	r1, ip, r1
   b4cd8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   b4cdc:	f080 8088 	bcs.w	b4df0 <__udivmoddi4+0x2bc>
   b4ce0:	4288      	cmp	r0, r1
   b4ce2:	f240 8085 	bls.w	b4df0 <__udivmoddi4+0x2bc>
   b4ce6:	f1a8 0802 	sub.w	r8, r8, #2
   b4cea:	4461      	add	r1, ip
   b4cec:	1a09      	subs	r1, r1, r0
   b4cee:	b2a4      	uxth	r4, r4
   b4cf0:	fbb1 f0f9 	udiv	r0, r1, r9
   b4cf4:	fb09 1110 	mls	r1, r9, r0, r1
   b4cf8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b4cfc:	fb00 fe0e 	mul.w	lr, r0, lr
   b4d00:	458e      	cmp	lr, r1
   b4d02:	d908      	bls.n	b4d16 <__udivmoddi4+0x1e2>
   b4d04:	eb1c 0101 	adds.w	r1, ip, r1
   b4d08:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   b4d0c:	d26c      	bcs.n	b4de8 <__udivmoddi4+0x2b4>
   b4d0e:	458e      	cmp	lr, r1
   b4d10:	d96a      	bls.n	b4de8 <__udivmoddi4+0x2b4>
   b4d12:	3802      	subs	r0, #2
   b4d14:	4461      	add	r1, ip
   b4d16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b4d1a:	fba0 9402 	umull	r9, r4, r0, r2
   b4d1e:	eba1 010e 	sub.w	r1, r1, lr
   b4d22:	42a1      	cmp	r1, r4
   b4d24:	46c8      	mov	r8, r9
   b4d26:	46a6      	mov	lr, r4
   b4d28:	d356      	bcc.n	b4dd8 <__udivmoddi4+0x2a4>
   b4d2a:	d053      	beq.n	b4dd4 <__udivmoddi4+0x2a0>
   b4d2c:	b15d      	cbz	r5, b4d46 <__udivmoddi4+0x212>
   b4d2e:	ebb3 0208 	subs.w	r2, r3, r8
   b4d32:	eb61 010e 	sbc.w	r1, r1, lr
   b4d36:	fa01 f707 	lsl.w	r7, r1, r7
   b4d3a:	fa22 f306 	lsr.w	r3, r2, r6
   b4d3e:	40f1      	lsrs	r1, r6
   b4d40:	431f      	orrs	r7, r3
   b4d42:	e9c5 7100 	strd	r7, r1, [r5]
   b4d46:	2600      	movs	r6, #0
   b4d48:	4631      	mov	r1, r6
   b4d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4d4e:	f1c2 0320 	rsb	r3, r2, #32
   b4d52:	40d8      	lsrs	r0, r3
   b4d54:	fa0c fc02 	lsl.w	ip, ip, r2
   b4d58:	fa21 f303 	lsr.w	r3, r1, r3
   b4d5c:	4091      	lsls	r1, r2
   b4d5e:	4301      	orrs	r1, r0
   b4d60:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b4d64:	fa1f fe8c 	uxth.w	lr, ip
   b4d68:	fbb3 f0f7 	udiv	r0, r3, r7
   b4d6c:	fb07 3610 	mls	r6, r7, r0, r3
   b4d70:	0c0b      	lsrs	r3, r1, #16
   b4d72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b4d76:	fb00 f60e 	mul.w	r6, r0, lr
   b4d7a:	429e      	cmp	r6, r3
   b4d7c:	fa04 f402 	lsl.w	r4, r4, r2
   b4d80:	d908      	bls.n	b4d94 <__udivmoddi4+0x260>
   b4d82:	eb1c 0303 	adds.w	r3, ip, r3
   b4d86:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   b4d8a:	d22f      	bcs.n	b4dec <__udivmoddi4+0x2b8>
   b4d8c:	429e      	cmp	r6, r3
   b4d8e:	d92d      	bls.n	b4dec <__udivmoddi4+0x2b8>
   b4d90:	3802      	subs	r0, #2
   b4d92:	4463      	add	r3, ip
   b4d94:	1b9b      	subs	r3, r3, r6
   b4d96:	b289      	uxth	r1, r1
   b4d98:	fbb3 f6f7 	udiv	r6, r3, r7
   b4d9c:	fb07 3316 	mls	r3, r7, r6, r3
   b4da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b4da4:	fb06 f30e 	mul.w	r3, r6, lr
   b4da8:	428b      	cmp	r3, r1
   b4daa:	d908      	bls.n	b4dbe <__udivmoddi4+0x28a>
   b4dac:	eb1c 0101 	adds.w	r1, ip, r1
   b4db0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   b4db4:	d216      	bcs.n	b4de4 <__udivmoddi4+0x2b0>
   b4db6:	428b      	cmp	r3, r1
   b4db8:	d914      	bls.n	b4de4 <__udivmoddi4+0x2b0>
   b4dba:	3e02      	subs	r6, #2
   b4dbc:	4461      	add	r1, ip
   b4dbe:	1ac9      	subs	r1, r1, r3
   b4dc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b4dc4:	e738      	b.n	b4c38 <__udivmoddi4+0x104>
   b4dc6:	462e      	mov	r6, r5
   b4dc8:	4628      	mov	r0, r5
   b4dca:	e705      	b.n	b4bd8 <__udivmoddi4+0xa4>
   b4dcc:	4606      	mov	r6, r0
   b4dce:	e6e3      	b.n	b4b98 <__udivmoddi4+0x64>
   b4dd0:	4618      	mov	r0, r3
   b4dd2:	e6f8      	b.n	b4bc6 <__udivmoddi4+0x92>
   b4dd4:	454b      	cmp	r3, r9
   b4dd6:	d2a9      	bcs.n	b4d2c <__udivmoddi4+0x1f8>
   b4dd8:	ebb9 0802 	subs.w	r8, r9, r2
   b4ddc:	eb64 0e0c 	sbc.w	lr, r4, ip
   b4de0:	3801      	subs	r0, #1
   b4de2:	e7a3      	b.n	b4d2c <__udivmoddi4+0x1f8>
   b4de4:	4646      	mov	r6, r8
   b4de6:	e7ea      	b.n	b4dbe <__udivmoddi4+0x28a>
   b4de8:	4620      	mov	r0, r4
   b4dea:	e794      	b.n	b4d16 <__udivmoddi4+0x1e2>
   b4dec:	4640      	mov	r0, r8
   b4dee:	e7d1      	b.n	b4d94 <__udivmoddi4+0x260>
   b4df0:	46d0      	mov	r8, sl
   b4df2:	e77b      	b.n	b4cec <__udivmoddi4+0x1b8>
   b4df4:	3b02      	subs	r3, #2
   b4df6:	4461      	add	r1, ip
   b4df8:	e732      	b.n	b4c60 <__udivmoddi4+0x12c>
   b4dfa:	4630      	mov	r0, r6
   b4dfc:	e709      	b.n	b4c12 <__udivmoddi4+0xde>
   b4dfe:	4464      	add	r4, ip
   b4e00:	3802      	subs	r0, #2
   b4e02:	e742      	b.n	b4c8a <__udivmoddi4+0x156>

000b4e04 <__aeabi_idiv0>:
   b4e04:	4770      	bx	lr
   b4e06:	bf00      	nop

000b4e08 <strcmp>:
   b4e08:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4e0c:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4e10:	2a01      	cmp	r2, #1
   b4e12:	bf28      	it	cs
   b4e14:	429a      	cmpcs	r2, r3
   b4e16:	d0f7      	beq.n	b4e08 <strcmp>
   b4e18:	1ad0      	subs	r0, r2, r3
   b4e1a:	4770      	bx	lr

000b4e1c <strlen>:
   b4e1c:	4603      	mov	r3, r0
   b4e1e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4e22:	2a00      	cmp	r2, #0
   b4e24:	d1fb      	bne.n	b4e1e <strlen+0x2>
   b4e26:	1a18      	subs	r0, r3, r0
   b4e28:	3801      	subs	r0, #1
   b4e2a:	4770      	bx	lr

000b4e2c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4e2c:	4809      	ldr	r0, [pc, #36]	; (b4e54 <module_user_pre_init+0x28>)
   b4e2e:	490a      	ldr	r1, [pc, #40]	; (b4e58 <module_user_pre_init+0x2c>)
   b4e30:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4e32:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4e34:	d005      	beq.n	b4e42 <module_user_pre_init+0x16>
   b4e36:	4a09      	ldr	r2, [pc, #36]	; (b4e5c <module_user_pre_init+0x30>)
   b4e38:	4282      	cmp	r2, r0
   b4e3a:	d002      	beq.n	b4e42 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4e3c:	1a12      	subs	r2, r2, r0
   b4e3e:	f00e f9bf 	bl	c31c0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4e42:	4807      	ldr	r0, [pc, #28]	; (b4e60 <module_user_pre_init+0x34>)
   b4e44:	4a07      	ldr	r2, [pc, #28]	; (b4e64 <module_user_pre_init+0x38>)
   b4e46:	2100      	movs	r1, #0
   b4e48:	1a12      	subs	r2, r2, r0
   b4e4a:	f00e f9e1 	bl	c3210 <memset>
    return &link_global_data_start;
}
   b4e4e:	4801      	ldr	r0, [pc, #4]	; (b4e54 <module_user_pre_init+0x28>)
   b4e50:	bd08      	pop	{r3, pc}
   b4e52:	bf00      	nop
   b4e54:	2003ceb8 	.word	0x2003ceb8
   b4e58:	000c9304 	.word	0x000c9304
   b4e5c:	2003d458 	.word	0x2003d458
   b4e60:	2003d458 	.word	0x2003d458
   b4e64:	2003dff8 	.word	0x2003dff8

000b4e68 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4e68:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4e6a:	4e07      	ldr	r6, [pc, #28]	; (b4e88 <module_user_init+0x20>)
   b4e6c:	4c07      	ldr	r4, [pc, #28]	; (b4e8c <module_user_init+0x24>)
    module_user_init_hook();
   b4e6e:	f00c f8df 	bl	c1030 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4e72:	1ba4      	subs	r4, r4, r6
   b4e74:	08a4      	lsrs	r4, r4, #2
   b4e76:	2500      	movs	r5, #0
   b4e78:	42ac      	cmp	r4, r5
   b4e7a:	d100      	bne.n	b4e7e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4e7c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4e7e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4e82:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4e84:	3501      	adds	r5, #1
   b4e86:	e7f7      	b.n	b4e78 <module_user_init+0x10>
   b4e88:	000c92a4 	.word	0x000c92a4
   b4e8c:	000c92d8 	.word	0x000c92d8

000b4e90 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4e90:	f006 ba06 	b.w	bb2a0 <setup>

000b4e94 <module_user_loop>:
}

void module_user_loop() {
   b4e94:	b508      	push	{r3, lr}
    loop();
   b4e96:	f006 f8a1 	bl	bafdc <loop>
    _post_loop();
}
   b4e9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4e9e:	f00c b87f 	b.w	c0fa0 <_post_loop>

000b4ea2 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4ea2:	f00a b895 	b.w	befd0 <malloc>

000b4ea6 <_Znaj>:
   b4ea6:	f00a b893 	b.w	befd0 <malloc>

000b4eaa <_ZdaPv>:
   b4eaa:	f00a b899 	b.w	befe0 <free>

000b4eae <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4eae:	f00a b897 	b.w	befe0 <free>

000b4eb2 <_ZdaPvj>:
   b4eb2:	f00a b895 	b.w	befe0 <free>
	...

000b4eb8 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4eb8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4eba:	4a03      	ldr	r2, [pc, #12]	; (b4ec8 <__cxa_pure_virtual+0x10>)
   b4ebc:	4903      	ldr	r1, [pc, #12]	; (b4ecc <__cxa_pure_virtual+0x14>)
   b4ebe:	200c      	movs	r0, #12
   b4ec0:	f009 ffbe 	bl	bee40 <panic_>
  while (1);
   b4ec4:	e7fe      	b.n	b4ec4 <__cxa_pure_virtual+0xc>
   b4ec6:	bf00      	nop
   b4ec8:	000beb31 	.word	0x000beb31
   b4ecc:	000c5164 	.word	0x000c5164

000b4ed0 <__register_exitproc>:
int __cxa_atexit(void (*f)(void *), void *p, void *d) {
    return 0;
}

void __register_exitproc(int type, void (*fn)(void), void* arg, void* d) {
}
   b4ed0:	4770      	bx	lr

000b4ed2 <arm_mat_scale_f32>:

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
   b4ed2:	8803      	ldrh	r3, [r0, #0]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
   b4ed4:	6842      	ldr	r2, [r0, #4]
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
   b4ed6:	8840      	ldrh	r0, [r0, #2]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
   b4ed8:	6849      	ldr	r1, [r1, #4]
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
   b4eda:	4358      	muls	r0, r3
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
   b4edc:	b900      	cbnz	r0, b4ee0 <arm_mat_scale_f32+0xe>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
   b4ede:	4770      	bx	lr
      *pOut++ = (*pIn++) * scale;
   b4ee0:	ecf2 7a01 	vldmia	r2!, {s15}
   b4ee4:	ee67 7a80 	vmul.f32	s15, s15, s0
      blkCnt--;
   b4ee8:	3801      	subs	r0, #1
      *pOut++ = (*pIn++) * scale;
   b4eea:	ece1 7a01 	vstmia	r1!, {s15}
      blkCnt--;
   b4eee:	e7f5      	b.n	b4edc <arm_mat_scale_f32+0xa>

000b4ef0 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
   b4ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
  uint16_t nCols = pSrc->numCols;                /* number of columns */
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
   b4ef2:	8802      	ldrh	r2, [r0, #0]
   b4ef4:	684b      	ldr	r3, [r1, #4]
   b4ef6:	8845      	ldrh	r5, [r0, #2]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
   b4ef8:	6844      	ldr	r4, [r0, #4]
      {
        /* Read and store input element in destination */
        *px = *pIn++;

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
   b4efa:	ea4f 0c82 	mov.w	ip, r2, lsl #2
   b4efe:	00af      	lsls	r7, r5, #2
   b4f00:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      px = pOut + i;
   b4f04:	4619      	mov	r1, r3
      col = nCols;
   b4f06:	4628      	mov	r0, r5
      while (col > 0U)
   b4f08:	4626      	mov	r6, r4
   b4f0a:	b920      	cbnz	r0, b4f16 <arm_mat_trans_f32+0x26>
      i++;

      /* Decrement row loop counter */
      row--;

    } while (row > 0U);          /* row loop end */
   b4f0c:	3304      	adds	r3, #4
   b4f0e:	4293      	cmp	r3, r2
   b4f10:	443c      	add	r4, r7
   b4f12:	d1f7      	bne.n	b4f04 <arm_mat_trans_f32+0x14>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
   b4f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *px = *pIn++;
   b4f16:	f856 eb04 	ldr.w	lr, [r6], #4
   b4f1a:	f8c1 e000 	str.w	lr, [r1]
        col--;
   b4f1e:	3801      	subs	r0, #1
        px += nRows;
   b4f20:	4461      	add	r1, ip
        col--;
   b4f22:	e7f2      	b.n	b4f0a <arm_mat_trans_f32+0x1a>

000b4f24 <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
   b4f24:	b082      	sub	sp, #8
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
   b4f26:	ed9f 7a0a 	vldr	s14, [pc, #40]	; b4f50 <arm_mean_f32+0x2c>
{
   b4f2a:	9101      	str	r1, [sp, #4]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
   b4f2c:	460b      	mov	r3, r1

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
   b4f2e:	b94b      	cbnz	r3, b4f44 <arm_mean_f32+0x20>
    blkCnt--;
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
   b4f30:	eddd 7a01 	vldr	s15, [sp, #4]
   b4f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b4f38:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b4f3c:	edc2 6a00 	vstr	s13, [r2]
}
   b4f40:	b002      	add	sp, #8
   b4f42:	4770      	bx	lr
    sum += *pSrc++;
   b4f44:	ecf0 7a01 	vldmia	r0!, {s15}
    blkCnt--;
   b4f48:	3b01      	subs	r3, #1
    sum += *pSrc++;
   b4f4a:	ee37 7a27 	vadd.f32	s14, s14, s15
    blkCnt--;
   b4f4e:	e7ee      	b.n	b4f2e <arm_mean_f32+0xa>
   b4f50:	00000000 	.word	0x00000000

000b4f54 <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
   b4f54:	b513      	push	{r0, r1, r4, lr}
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
   b4f56:	ed9f 7a11 	vldr	s14, [pc, #68]	; b4f9c <arm_rms_f32+0x48>
{
   b4f5a:	9101      	str	r1, [sp, #4]
   b4f5c:	4614      	mov	r4, r2
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
   b4f5e:	460b      	mov	r3, r1
   b4f60:	eef0 6a47 	vmov.f32	s13, s14

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
   b4f64:	b983      	cbnz	r3, b4f88 <arm_rms_f32+0x34>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
   b4f66:	eddd 7a01 	vldr	s15, [sp, #4]
   b4f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b4f6e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
   b4f72:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   b4f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f7a:	db0b      	blt.n	b4f94 <arm_rms_f32+0x40>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
   b4f7c:	f00c fcb4 	bl	c18e8 <sqrtf>
   b4f80:	ed84 0a00 	vstr	s0, [r4]
}
   b4f84:	b002      	add	sp, #8
   b4f86:	bd10      	pop	{r4, pc}
    in = *pSrc++;
   b4f88:	ecf0 7a01 	vldmia	r0!, {s15}
    blkCnt--;
   b4f8c:	3b01      	subs	r3, #1
    sum += ( in * in);
   b4f8e:	eea7 7aa7 	vfma.f32	s14, s15, s15
    blkCnt--;
   b4f92:	e7e7      	b.n	b4f64 <arm_rms_f32+0x10>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
   b4f94:	edc4 6a00 	vstr	s13, [r4]
}
   b4f98:	e7f4      	b.n	b4f84 <arm_rms_f32+0x30>
   b4f9a:	bf00      	nop
   b4f9c:	00000000 	.word	0x00000000

000b4fa0 <arm_var_f32>:
        float32_t sum = 0.0f;                          /* Temporary result storage */
        float32_t fSum = 0.0f;
        float32_t fMean, fValue;
  const float32_t * pInput = pSrc;

  if (blockSize <= 1U)
   b4fa0:	2901      	cmp	r1, #1
{
   b4fa2:	b510      	push	{r4, lr}
   b4fa4:	eddf 7a12 	vldr	s15, [pc, #72]	; b4ff0 <arm_var_f32+0x50>
  if (blockSize <= 1U)
   b4fa8:	d802      	bhi.n	b4fb0 <arm_var_f32+0x10>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Variance */
  *pResult = fSum / (float32_t)(blockSize - 1.0f);
   b4faa:	edc2 7a00 	vstr	s15, [r2]
}
   b4fae:	bd10      	pop	{r4, pc}
   b4fb0:	460b      	mov	r3, r1
  const float32_t * pInput = pSrc;
   b4fb2:	4604      	mov	r4, r0
    sum += *pInput++;
   b4fb4:	ecb4 7a01 	vldmia	r4!, {s14}
  while (blkCnt > 0U)
   b4fb8:	3b01      	subs	r3, #1
    sum += *pInput++;
   b4fba:	ee77 7a87 	vadd.f32	s15, s15, s14
  while (blkCnt > 0U)
   b4fbe:	d1f9      	bne.n	b4fb4 <arm_var_f32+0x14>
  fMean = sum / (float32_t) blockSize;
   b4fc0:	ee07 1a10 	vmov	s14, r1
   b4fc4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
        float32_t fSum = 0.0f;
   b4fc8:	eddf 6a09 	vldr	s13, [pc, #36]	; b4ff0 <arm_var_f32+0x50>
  fMean = sum / (float32_t) blockSize;
   b4fcc:	ee87 6a87 	vdiv.f32	s12, s15, s14
  while (blkCnt > 0U)
   b4fd0:	3901      	subs	r1, #1
    fValue = *pInput++ - fMean;
   b4fd2:	ecf0 7a01 	vldmia	r0!, {s15}
   b4fd6:	ee77 7ac6 	vsub.f32	s15, s15, s12
    fSum += fValue * fValue;
   b4fda:	eee7 6aa7 	vfma.f32	s13, s15, s15
  while (blkCnt > 0U)
   b4fde:	d1f7      	bne.n	b4fd0 <arm_var_f32+0x30>
  *pResult = fSum / (float32_t)(blockSize - 1.0f);
   b4fe0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b4fe4:	ee37 7a67 	vsub.f32	s14, s14, s15
   b4fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
   b4fec:	e7dd      	b.n	b4faa <arm_var_f32+0xa>
   b4fee:	bf00      	nop
   b4ff0:	00000000 	.word	0x00000000

000b4ff4 <arm_fully_connected_s8>:
                                           const q7_t *kernel,
                                           const cmsis_nn_dims *bias_dims,
                                           const int32_t *bias,
                                           const cmsis_nn_dims *output_dims,
                                           q7_t *output)
{
   b4ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4ff8:	b08b      	sub	sp, #44	; 0x2c
   b4ffa:	e9dd 7814 	ldrd	r7, r8, [sp, #80]	; 0x50
   b4ffe:	e9dd 9a19 	ldrd	r9, sl, [sp, #100]	; 0x64
    (void)bias_dims;
    (void)ctx;
    (void)fc_params->filter_offset;

    int32_t batch_cnt = input_dims->n;
   b5002:	681d      	ldr	r5, [r3, #0]
{
   b5004:	460c      	mov	r4, r1
   b5006:	4616      	mov	r6, r2

    while (batch_cnt)
    {
        arm_nn_vec_mat_mult_t_s8(input,
   b5008:	f04f 0b00 	mov.w	fp, #0
    while (batch_cnt)
   b500c:	b91d      	cbnz	r5, b5016 <arm_fully_connected_s8+0x22>
        input += filter_dims->n;
        output += output_dims->c;
        batch_cnt--;
    }
    return (ARM_CMSIS_NN_SUCCESS);
}
   b500e:	4628      	mov	r0, r5
   b5010:	b00b      	add	sp, #44	; 0x2c
   b5012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        arm_nn_vec_mat_mult_t_s8(input,
   b5016:	2301      	movs	r3, #1
   b5018:	9309      	str	r3, [sp, #36]	; 0x24
   b501a:	6923      	ldr	r3, [r4, #16]
   b501c:	9308      	str	r3, [sp, #32]
   b501e:	68e3      	ldr	r3, [r4, #12]
   b5020:	9307      	str	r3, [sp, #28]
   b5022:	f8d9 300c 	ldr.w	r3, [r9, #12]
   b5026:	9306      	str	r3, [sp, #24]
   b5028:	f8d8 3000 	ldr.w	r3, [r8]
   b502c:	9305      	str	r3, [sp, #20]
   b502e:	6873      	ldr	r3, [r6, #4]
   b5030:	9304      	str	r3, [sp, #16]
   b5032:	6833      	ldr	r3, [r6, #0]
   b5034:	9303      	str	r3, [sp, #12]
   b5036:	68a3      	ldr	r3, [r4, #8]
   b5038:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b503a:	9916      	ldr	r1, [sp, #88]	; 0x58
   b503c:	e9cd b301 	strd	fp, r3, [sp, #4]
   b5040:	6823      	ldr	r3, [r4, #0]
   b5042:	9300      	str	r3, [sp, #0]
   b5044:	4638      	mov	r0, r7
   b5046:	4653      	mov	r3, sl
   b5048:	f000 f80a 	bl	b5060 <arm_nn_vec_mat_mult_t_s8>
        input += filter_dims->n;
   b504c:	f8d8 3000 	ldr.w	r3, [r8]
   b5050:	441f      	add	r7, r3
        output += output_dims->c;
   b5052:	f8d9 300c 	ldr.w	r3, [r9, #12]
        batch_cnt--;
   b5056:	3d01      	subs	r5, #1
        output += output_dims->c;
   b5058:	449a      	add	sl, r3
        batch_cnt--;
   b505a:	e7d7      	b.n	b500c <arm_fully_connected_s8+0x18>

000b505c <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
    (void)filter_dims;
    return 0;
}
   b505c:	2000      	movs	r0, #0
   b505e:	4770      	bx	lr

000b5060 <arm_nn_vec_mat_mult_t_s8>:
                                             const int32_t rhs_cols,
                                             const int32_t rhs_rows,
                                             const int32_t activation_min,
                                             const int32_t activation_max,
                                             const int32_t address_offset)
{
   b5060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5064:	b095      	sub	sp, #84	; 0x54
   b5066:	4681      	mov	r9, r0
   b5068:	9107      	str	r1, [sp, #28]
   b506a:	930f      	str	r3, [sp, #60]	; 0x3c
        *dst = MIN(acc_0, activation_max);
        dst += address_offset;
    }

#elif defined(ARM_MATH_DSP)
    const int32_t row_loop_cnt = rhs_rows / 2;
   b506c:	e9dd 3123 	ldrd	r3, r1, [sp, #140]	; 0x8c
   b5070:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5074:	1049      	asrs	r1, r1, #1
   b5076:	910a      	str	r1, [sp, #40]	; 0x28
    const int16_t lhs_offset_s16 = (int16_t)lhs_offset;
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
   b5078:	991e      	ldr	r1, [sp, #120]	; 0x78

    for (int32_t i = 0; i < row_loop_cnt; i++)
   b507a:	9e07      	ldr	r6, [sp, #28]
        {
            acc_0 = *bias++;
            acc_1 = *bias++;
        }

        const int32_t col_loop_cnt = rhs_cols / 4;
   b507c:	2b00      	cmp	r3, #0
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
   b507e:	b209      	sxth	r1, r1
   b5080:	eac1 4b01 	pkhbt	fp, r1, r1, lsl #16
        const int32_t col_loop_cnt = rhs_cols / 4;
   b5084:	4619      	mov	r1, r3
   b5086:	bfb8      	it	lt
   b5088:	1cd9      	addlt	r1, r3, #3
   b508a:	1088      	asrs	r0, r1, #2
   b508c:	9001      	str	r0, [sp, #4]

        const int8_t *lhs_vec = lhs;
        const int8_t *rhs_0 = rhs;
        const int8_t *rhs_1 = rhs + rhs_cols;
        rhs += 2 * rhs_cols;
   b508e:	0058      	lsls	r0, r3, #1
   b5090:	9009      	str	r0, [sp, #36]	; 0x24
   b5092:	9822      	ldr	r0, [sp, #136]	; 0x88

            acc_1 = __SMLAD(ker_1, vec_1, acc_1);
            acc_1 = __SMLAD(ker_0, vec_0, acc_1);
        }

        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
   b5094:	f021 0a03 	bic.w	sl, r1, #3
    int32_t result = new_val >> (total_shift - 1);
    result = (result + 1) >> 1;

    return result;
#else
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5098:	9922      	ldr	r1, [sp, #136]	; 0x88
   b509a:	2800      	cmp	r0, #0
   b509c:	f1c1 0100 	rsb	r1, r1, #0
   b50a0:	bfc8      	it	gt
   b50a2:	2100      	movgt	r1, #0
   b50a4:	9104      	str	r1, [sp, #16]
    const q31_t remainder_mask = (1 << exponent) - 1;
   b50a6:	9804      	ldr	r0, [sp, #16]
   b50a8:	2101      	movs	r1, #1
   b50aa:	4081      	lsls	r1, r0
   b50ac:	3901      	subs	r1, #1
   b50ae:	9105      	str	r1, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
   b50b0:	1049      	asrs	r1, r1, #1
   b50b2:	9106      	str	r1, [sp, #24]
        threshold++;
   b50b4:	3101      	adds	r1, #1
   b50b6:	910b      	str	r1, [sp, #44]	; 0x2c
        acc_0 = MIN(acc_0, activation_max);
        acc_1 = MAX(acc_1, activation_min);
        acc_1 = MIN(acc_1, activation_max);
        *dst = (int8_t)acc_0;
        *(dst + address_offset) = (int8_t)acc_1;
        dst += 2 * address_offset;
   b50b8:	9927      	ldr	r1, [sp, #156]	; 0x9c
   b50ba:	0049      	lsls	r1, r1, #1
   b50bc:	9108      	str	r1, [sp, #32]
   b50be:	9907      	ldr	r1, [sp, #28]
   b50c0:	eb01 050a 	add.w	r5, r1, sl
   b50c4:	eb09 010a 	add.w	r1, r9, sl
   b50c8:	910e      	str	r1, [sp, #56]	; 0x38
    for (int32_t i = 0; i < row_loop_cnt; i++)
   b50ca:	990f      	ldr	r1, [sp, #60]	; 0x3c
   b50cc:	9102      	str	r1, [sp, #8]
   b50ce:	2100      	movs	r1, #0
   b50d0:	9103      	str	r1, [sp, #12]
        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
   b50d2:	f1c9 0100 	rsb	r1, r9, #0
   b50d6:	9113      	str	r1, [sp, #76]	; 0x4c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b50d8:	9922      	ldr	r1, [sp, #136]	; 0x88
   b50da:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   b50de:	9111      	str	r1, [sp, #68]	; 0x44
    for (int32_t i = 0; i < row_loop_cnt; i++)
   b50e0:	9903      	ldr	r1, [sp, #12]
   b50e2:	980a      	ldr	r0, [sp, #40]	; 0x28
   b50e4:	4281      	cmp	r1, r0
   b50e6:	db4d      	blt.n	b5184 <arm_nn_vec_mat_mult_t_s8+0x124>
   b50e8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   b50ea:	9907      	ldr	r1, [sp, #28]
   b50ec:	9d08      	ldr	r5, [sp, #32]
   b50ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b50f2:	fb00 1104 	mla	r1, r0, r4, r1
    }

    if (rhs_rows & 0x1)
   b50f6:	9c24      	ldr	r4, [sp, #144]	; 0x90
   b50f8:	4345      	muls	r5, r0
   b50fa:	07e4      	lsls	r4, r4, #31
   b50fc:	4628      	mov	r0, r5
   b50fe:	d53d      	bpl.n	b517c <arm_nn_vec_mat_mult_t_s8+0x11c>
    {
        int32_t acc_0 = 0;
        if (bias)
   b5100:	b102      	cbz	r2, b5104 <arm_nn_vec_mat_mult_t_s8+0xa4>
        {
            acc_0 = *bias++;
   b5102:	6812      	ldr	r2, [r2, #0]
        const int32_t col_loop_cnt = rhs_cols / 4;

        const int8_t *lhs_vec = lhs;
        const int8_t *rhs_0 = rhs;

        for (int i = col_loop_cnt; i != 0; i--)
   b5104:	468c      	mov	ip, r1
   b5106:	9c01      	ldr	r4, [sp, #4]
   b5108:	2c00      	cmp	r4, #0
   b510a:	f040 80dc 	bne.w	b52c6 <arm_nn_vec_mat_mult_t_s8+0x266>

            acc_0 = __SMLAD(ker_1, vec_1, acc_0);
            acc_0 = __SMLAD(ker_0, vec_0, acc_0);
        }

        for (int j = col_loop_cnt * 4; j < rhs_cols; j++)
   b510e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   b5110:	4451      	add	r1, sl
   b5112:	ebaa 0506 	sub.w	r5, sl, r6
   b5116:	1977      	adds	r7, r6, r5
   b5118:	42bb      	cmp	r3, r7
   b511a:	f300 80e8 	bgt.w	b52ee <arm_nn_vec_mat_mult_t_s8+0x28e>
   b511e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b5120:	9c21      	ldr	r4, [sp, #132]	; 0x84
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5122:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b5126:	409a      	lsls	r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b5128:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   b512c:	2300      	movs	r3, #0
   b512e:	fbc2 1304 	smlal	r1, r3, r2, r4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b5132:	9a22      	ldr	r2, [sp, #136]	; 0x88
   b5134:	2a00      	cmp	r2, #0
   b5136:	bfdc      	itt	le
   b5138:	4252      	negle	r2, r2
   b513a:	9201      	strle	r2, [sp, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b513c:	461d      	mov	r5, r3
    result = (int32_t)(mult.long_long >> 31);
   b513e:	0fcb      	lsrs	r3, r1, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   b5140:	9901      	ldr	r1, [sp, #4]
    if (result < 0)
   b5142:	9c01      	ldr	r4, [sp, #4]
    const q31_t remainder_mask = (1 << exponent) - 1;
   b5144:	2201      	movs	r2, #1
   b5146:	408a      	lsls	r2, r1
    result = (int32_t)(mult.long_long >> 31);
   b5148:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   b514c:	3a01      	subs	r2, #1
    if (result < 0)
   b514e:	fa53 f404 	asrs.w	r4, r3, r4
    int32_t remainder = remainder_mask & dividend;
   b5152:	ea03 0102 	and.w	r1, r3, r2
    q31_t threshold = remainder_mask >> 1;
   b5156:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
   b515a:	bf48      	it	mi
   b515c:	3201      	addmi	r2, #1
        }

        acc_0 = arm_nn_requantize(acc_0, dst_multiplier, dst_shift);

        // Add offset
        acc_0 += dst_offset;
   b515e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    if (remainder > threshold)
   b5160:	4291      	cmp	r1, r2
        result++;
   b5162:	bfc8      	it	gt
   b5164:	3401      	addgt	r4, #1
   b5166:	441c      	add	r4, r3
        // Clamp the result
        acc_0 = MAX(acc_0, activation_min);
   b5168:	9b25      	ldr	r3, [sp, #148]	; 0x94
   b516a:	429c      	cmp	r4, r3
   b516c:	bfb8      	it	lt
   b516e:	461c      	movlt	r4, r3
        acc_0 = MIN(acc_0, activation_max);
   b5170:	9b26      	ldr	r3, [sp, #152]	; 0x98
   b5172:	429c      	cmp	r4, r3
   b5174:	bfa8      	it	ge
   b5176:	461c      	movge	r4, r3
        *dst = (int8_t)acc_0;
   b5178:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b517a:	541c      	strb	r4, [r3, r0]
        dst += address_offset;
        rhs += rhs_cols;
    }
#endif
    return ARM_CMSIS_NN_SUCCESS;
}
   b517c:	2000      	movs	r0, #0
   b517e:	b015      	add	sp, #84	; 0x54
   b5180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (bias)
   b5184:	2a00      	cmp	r2, #0
   b5186:	d06b      	beq.n	b5260 <arm_nn_vec_mat_mult_t_s8+0x200>
            acc_0 = *bias++;
   b5188:	4617      	mov	r7, r2
            acc_1 = *bias++;
   b518a:	6851      	ldr	r1, [r2, #4]
            acc_0 = *bias++;
   b518c:	f857 0b08 	ldr.w	r0, [r7], #8
            acc_1 = *bias++;
   b5190:	463a      	mov	r2, r7
        const int8_t *rhs_1 = rhs + rhs_cols;
   b5192:	18f7      	adds	r7, r6, r3
   b5194:	970d      	str	r7, [sp, #52]	; 0x34
        rhs += 2 * rhs_cols;
   b5196:	9f09      	ldr	r7, [sp, #36]	; 0x24
        for (int j = col_loop_cnt; j != 0; j--)
   b5198:	f8dd e004 	ldr.w	lr, [sp, #4]
        const int8_t *lhs_vec = lhs;
   b519c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
        rhs += 2 * rhs_cols;
   b51a0:	19f7      	adds	r7, r6, r7
   b51a2:	9712      	str	r7, [sp, #72]	; 0x48
        for (int j = col_loop_cnt; j != 0; j--)
   b51a4:	f1be 0f00 	cmp.w	lr, #0
   b51a8:	d15d      	bne.n	b5266 <arm_nn_vec_mat_mult_t_s8+0x206>
   b51aa:	eb05 0c03 	add.w	ip, r5, r3
   b51ae:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   b51b0:	46e6      	mov	lr, ip
        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
   b51b2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   b51b4:	193e      	adds	r6, r7, r4
   b51b6:	42b3      	cmp	r3, r6
   b51b8:	dc78      	bgt.n	b52ac <arm_nn_vec_mat_mult_t_s8+0x24c>
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b51ba:	9c11      	ldr	r4, [sp, #68]	; 0x44
   b51bc:	40a0      	lsls	r0, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b51be:	9c21      	ldr	r4, [sp, #132]	; 0x84
   b51c0:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   b51c4:	2500      	movs	r5, #0
   b51c6:	fbc0 6504 	smlal	r6, r5, r0, r4
    result = (int32_t)(mult.long_long >> 31);
   b51ca:	0ff0      	lsrs	r0, r6, #31
    int32_t remainder = remainder_mask & dividend;
   b51cc:	9c05      	ldr	r4, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
   b51ce:	9e06      	ldr	r6, [sp, #24]
    result = (int32_t)(mult.long_long >> 31);
   b51d0:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
    int32_t remainder = remainder_mask & dividend;
   b51d4:	ea00 0504 	and.w	r5, r0, r4
    q31_t threshold = remainder_mask >> 1;
   b51d8:	9c04      	ldr	r4, [sp, #16]
   b51da:	4120      	asrs	r0, r4
   b51dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   b51de:	bf48      	it	mi
   b51e0:	4626      	movmi	r6, r4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b51e2:	9c11      	ldr	r4, [sp, #68]	; 0x44
    if (remainder > threshold)
   b51e4:	42b5      	cmp	r5, r6
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   b51e6:	fa01 f604 	lsl.w	r6, r1, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   b51ea:	9c21      	ldr	r4, [sp, #132]	; 0x84
   b51ec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   b51f0:	f04f 0500 	mov.w	r5, #0
   b51f4:	fbc6 1504 	smlal	r1, r5, r6, r4
    result = (int32_t)(mult.long_long >> 31);
   b51f8:	ea4f 71d1 	mov.w	r1, r1, lsr #31
    int32_t remainder = remainder_mask & dividend;
   b51fc:	9c05      	ldr	r4, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
   b51fe:	9e06      	ldr	r6, [sp, #24]
    result = (int32_t)(mult.long_long >> 31);
   b5200:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    int32_t remainder = remainder_mask & dividend;
   b5204:	ea01 0504 	and.w	r5, r1, r4
    q31_t threshold = remainder_mask >> 1;
   b5208:	9c04      	ldr	r4, [sp, #16]
        result++;
   b520a:	bfc8      	it	gt
   b520c:	3001      	addgt	r0, #1
    q31_t threshold = remainder_mask >> 1;
   b520e:	4121      	asrs	r1, r4
   b5210:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   b5212:	bf48      	it	mi
   b5214:	4626      	movmi	r6, r4
    if (remainder > threshold)
   b5216:	42b5      	cmp	r5, r6
        acc_0 += dst_offset;
   b5218:	9c20      	ldr	r4, [sp, #128]	; 0x80
        rhs += 2 * rhs_cols;
   b521a:	9e12      	ldr	r6, [sp, #72]	; 0x48
        result++;
   b521c:	bfc8      	it	gt
   b521e:	3101      	addgt	r1, #1
        acc_0 += dst_offset;
   b5220:	4420      	add	r0, r4
        acc_1 += dst_offset;
   b5222:	4421      	add	r1, r4
        acc_0 = MAX(acc_0, activation_min);
   b5224:	9c25      	ldr	r4, [sp, #148]	; 0x94
   b5226:	42a0      	cmp	r0, r4
   b5228:	bfb8      	it	lt
   b522a:	4620      	movlt	r0, r4
        acc_1 = MAX(acc_1, activation_min);
   b522c:	42a1      	cmp	r1, r4
   b522e:	bfb8      	it	lt
   b5230:	4621      	movlt	r1, r4
        acc_0 = MIN(acc_0, activation_max);
   b5232:	9c26      	ldr	r4, [sp, #152]	; 0x98
   b5234:	42a0      	cmp	r0, r4
   b5236:	bfa8      	it	ge
   b5238:	4620      	movge	r0, r4
        *dst = (int8_t)acc_0;
   b523a:	9c02      	ldr	r4, [sp, #8]
   b523c:	7020      	strb	r0, [r4, #0]
        acc_1 = MIN(acc_1, activation_max);
   b523e:	9826      	ldr	r0, [sp, #152]	; 0x98
   b5240:	4281      	cmp	r1, r0
   b5242:	bfa8      	it	ge
   b5244:	4601      	movge	r1, r0
        *(dst + address_offset) = (int8_t)acc_1;
   b5246:	4620      	mov	r0, r4
   b5248:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   b524a:	5501      	strb	r1, [r0, r4]
        dst += 2 * address_offset;
   b524c:	4601      	mov	r1, r0
   b524e:	9808      	ldr	r0, [sp, #32]
   b5250:	4401      	add	r1, r0
   b5252:	9102      	str	r1, [sp, #8]
    for (int32_t i = 0; i < row_loop_cnt; i++)
   b5254:	9903      	ldr	r1, [sp, #12]
   b5256:	3101      	adds	r1, #1
   b5258:	9103      	str	r1, [sp, #12]
   b525a:	eb03 050c 	add.w	r5, r3, ip
   b525e:	e73f      	b.n	b50e0 <arm_nn_vec_mat_mult_t_s8+0x80>
        int32_t acc_1 = 0;
   b5260:	4611      	mov	r1, r2
        int32_t acc_0 = 0;
   b5262:	4610      	mov	r0, r2
   b5264:	e795      	b.n	b5192 <arm_nn_vec_mat_mult_t_s8+0x132>
    memcpy(&val, *in_q7, 4);
   b5266:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b5268:	f854 7b04 	ldr.w	r7, [r4], #4
   b526c:	940c      	str	r4, [sp, #48]	; 0x30

__STATIC_FORCEINLINE uint32_t __SXTAB16_RORn(uint32_t op1, uint32_t op2, uint32_t rotate)
{
  uint32_t result;
  if (__builtin_constant_p(rotate) && ((rotate == 8U) || (rotate == 16U) || (rotate == 24U))) {
    __ASM volatile ("sxtab16 %0, %1, %2, ROR %3" : "=r" (result) : "r" (op1) , "r" (op2) , "i" (rotate));
   b526e:	fa2b f497 	sxtab16	r4, fp, r7, ror #8
   b5272:	f856 cb04 	ldr.w	ip, [r6], #4
   b5276:	9410      	str	r4, [sp, #64]	; 0x40
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   b5278:	fa2b f787 	sxtab16	r7, fp, r7
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   b527c:	fa2f f89c 	sxtb16	r8, ip, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b5280:	fa2f fc8c 	sxtb16	ip, ip

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b5284:	fb28 0004 	smlad	r0, r8, r4, r0
   b5288:	fb2c 0007 	smlad	r0, ip, r7, r0
   b528c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   b528e:	f854 cb04 	ldr.w	ip, [r4], #4
   b5292:	940d      	str	r4, [sp, #52]	; 0x34
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   b5294:	fa2f f89c 	sxtb16	r8, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b5298:	9c10      	ldr	r4, [sp, #64]	; 0x40
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b529a:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b529e:	fb28 1104 	smlad	r1, r8, r4, r1
   b52a2:	fb2c 1107 	smlad	r1, ip, r7, r1
        for (int j = col_loop_cnt; j != 0; j--)
   b52a6:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   b52aa:	e77b      	b.n	b51a4 <arm_nn_vec_mat_mult_t_s8+0x144>
            const int32_t lhs_temp = (*lhs_vec + lhs_offset);
   b52ac:	f917 6b01 	ldrsb.w	r6, [r7], #1
   b52b0:	9c1e      	ldr	r4, [sp, #120]	; 0x78
            acc_0 += lhs_temp * (*rhs_0);
   b52b2:	f915 8b01 	ldrsb.w	r8, [r5], #1
            const int32_t lhs_temp = (*lhs_vec + lhs_offset);
   b52b6:	4426      	add	r6, r4
            acc_0 += lhs_temp * (*rhs_0);
   b52b8:	fb06 0008 	mla	r0, r6, r8, r0
            acc_1 += lhs_temp * (*rhs_1);
   b52bc:	f91e 8b01 	ldrsb.w	r8, [lr], #1
   b52c0:	fb06 1108 	mla	r1, r6, r8, r1
        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
   b52c4:	e775      	b.n	b51b2 <arm_nn_vec_mat_mult_t_s8+0x152>
   b52c6:	f859 6b04 	ldr.w	r6, [r9], #4
    __ASM volatile ("sxtab16 %0, %1, %2, ROR %3" : "=r" (result) : "r" (op1) , "r" (op2) , "i" (rotate));
   b52ca:	fa2b fe96 	sxtab16	lr, fp, r6, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   b52ce:	f85c 5b04 	ldr.w	r5, [ip], #4
   b52d2:	fa2b f686 	sxtab16	r6, fp, r6
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   b52d6:	fa2f f795 	sxtb16	r7, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   b52da:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   b52de:	fb27 220e 	smlad	r2, r7, lr, r2
   b52e2:	fb25 2206 	smlad	r2, r5, r6, r2
        for (int i = col_loop_cnt; i != 0; i--)
   b52e6:	9c01      	ldr	r4, [sp, #4]
   b52e8:	3c01      	subs	r4, #1
   b52ea:	9401      	str	r4, [sp, #4]
   b52ec:	e70b      	b.n	b5106 <arm_nn_vec_mat_mult_t_s8+0xa6>
            const int32_t lhs_temp = (*lhs_vec + lhs_offset);
   b52ee:	f916 7b01 	ldrsb.w	r7, [r6], #1
   b52f2:	9c1e      	ldr	r4, [sp, #120]	; 0x78
            acc_0 += lhs_temp * (*rhs_0);
   b52f4:	f911 cb01 	ldrsb.w	ip, [r1], #1
            const int32_t lhs_temp = (*lhs_vec + lhs_offset);
   b52f8:	4427      	add	r7, r4
            acc_0 += lhs_temp * (*rhs_0);
   b52fa:	fb07 220c 	mla	r2, r7, ip, r2
        for (int j = col_loop_cnt * 4; j < rhs_cols; j++)
   b52fe:	e70a      	b.n	b5116 <arm_nn_vec_mat_mult_t_s8+0xb6>

000b5300 <arm_nn_softmax_common_s8>:
                              const int32_t mult,
                              const int32_t shift,
                              const int32_t diff_min,
                              const bool int16_output,
                              void *output)
{
   b5300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5304:	b091      	sub	sp, #68	; 0x44
   b5306:	469b      	mov	fp, r3
   b5308:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   b530c:	930d      	str	r3, [sp, #52]	; 0x34
    const int32_t mask = (1 << shift);

    int32_t col = 0;
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
   b530e:	2300      	movs	r3, #0
{
   b5310:	900a      	str	r0, [sp, #40]	; 0x28
   b5312:	910c      	str	r1, [sp, #48]	; 0x30
   b5314:	9203      	str	r2, [sp, #12]
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
   b5316:	9301      	str	r3, [sp, #4]
   b5318:	9304      	str	r3, [sp, #16]
   b531a:	9a01      	ldr	r2, [sp, #4]
   b531c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b531e:	4413      	add	r3, r2
   b5320:	9305      	str	r3, [sp, #20]
   b5322:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   b5324:	9b04      	ldr	r3, [sp, #16]
   b5326:	4293      	cmp	r3, r2
   b5328:	db02      	blt.n	b5330 <arm_nn_softmax_common_s8+0x30>
            }
        }

        input += row_size;
    }
}
   b532a:	b011      	add	sp, #68	; 0x44
   b532c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int8_t max = *input;
   b5330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5332:	9a01      	ldr	r2, [sp, #4]
   b5334:	569b      	ldrsb	r3, [r3, r2]
   b5336:	9302      	str	r3, [sp, #8]
        for (col = 1; col < row_size; ++col)
   b5338:	2301      	movs	r3, #1
   b533a:	9a03      	ldr	r2, [sp, #12]
   b533c:	4293      	cmp	r3, r2
   b533e:	f2c0 817f 	blt.w	b5640 <arm_nn_softmax_common_s8+0x340>
        int32_t sum = 0;
   b5342:	2500      	movs	r5, #0
        mult = 1 - mult;
   b5344:	f8df 8310 	ldr.w	r8, [pc, #784]	; b5658 <arm_nn_softmax_common_s8+0x358>
        for (col = 0; col < row_size; ++col)
   b5348:	46ae      	mov	lr, r5
   b534a:	9b03      	ldr	r3, [sp, #12]
   b534c:	459e      	cmp	lr, r3
   b534e:	f2c0 8185 	blt.w	b565c <arm_nn_softmax_common_s8+0x35c>
  if (value == 0U)
   b5352:	2d00      	cmp	r5, #0
   b5354:	f000 82dd 	beq.w	b5912 <arm_nn_softmax_common_s8+0x612>
  return __builtin_clz(value);
   b5358:	fab5 f685 	clz	r6, r5
        const int32_t shifted_scale = ONE_OVER1((sum > 0 ? sum << headroom : 0) - (1 << 31));
   b535c:	40b5      	lsls	r5, r6
   b535e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
    return result;
}

__STATIC_FORCEINLINE int32_t arm_nn_one_over_one_plus_x_for_x_in_0_1(int32_t val)
{
    const int64_t sum = (int64_t)val + (int64_t)NN_Q31_MAX;
   b5362:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b5366:	17e9      	asrs	r1, r5, #31
   b5368:	18ed      	adds	r5, r5, r3
   b536a:	f141 0100 	adc.w	r1, r1, #0
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
   b536e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   b5372:	bf08      	it	eq
   b5374:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   b5378:	bf0b      	itete	eq
   b537a:	462b      	moveq	r3, r5
   b537c:	2301      	movne	r3, #1
   b537e:	460a      	moveq	r2, r1
   b5380:	2200      	movne	r2, #0
   b5382:	18eb      	adds	r3, r5, r3
   b5384:	eb41 0202 	adc.w	r2, r1, r2
   b5388:	0fd5      	lsrs	r5, r2, #31
   b538a:	18eb      	adds	r3, r5, r3
   b538c:	f142 0200 	adc.w	r2, r2, #0
   b5390:	085b      	lsrs	r3, r3, #1
   b5392:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
    mult = mult + (q63_t)m1 * m2;
   b5396:	49af      	ldr	r1, [pc, #700]	; (b5654 <arm_nn_softmax_common_s8+0x354>)
        mult = 1 - mult;
   b5398:	48af      	ldr	r0, [pc, #700]	; (b5658 <arm_nn_softmax_common_s8+0x358>)
   b539a:	1c5f      	adds	r7, r3, #1
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
   b539c:	ea4f 0262 	mov.w	r2, r2, asr #1
    mult = mult + (q63_t)m1 * m2;
   b53a0:	f1c3 0400 	rsb	r4, r3, #0
   b53a4:	fb01 4402 	mla	r4, r1, r2, r4
        mult = 1 - mult;
   b53a8:	bf08      	it	eq
   b53aa:	f04f 4080 	moveq.w	r0, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
   b53ae:	fba3 1c01 	umull	r1, ip, r3, r1
        mult = 1 - mult;
   b53b2:	bf0c      	ite	eq
   b53b4:	2500      	moveq	r5, #0
   b53b6:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
   b53ba:	4464      	add	r4, ip
   b53bc:	1809      	adds	r1, r1, r0
    result = (int32_t)(mult / (1ll << 31));
   b53be:	eb44 0405 	adc.w	r4, r4, r5
   b53c2:	2c00      	cmp	r4, #0
   b53c4:	da04      	bge.n	b53d0 <arm_nn_softmax_common_s8+0xd0>
   b53c6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   b53ca:	1809      	adds	r1, r1, r0
   b53cc:	f144 0400 	adc.w	r4, r4, #0
   b53d0:	0fc9      	lsrs	r1, r1, #31
   b53d2:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
   b53d6:	f101 315a 	add.w	r1, r1, #1515870810	; 0x5a5a5a5a
        mult = 1 - mult;
   b53da:	1c5c      	adds	r4, r3, #1
   b53dc:	4d9e      	ldr	r5, [pc, #632]	; (b5658 <arm_nn_softmax_common_s8+0x358>)
    mult = mult + (q63_t)m1 * m2;
   b53de:	ea4f 70e1 	mov.w	r0, r1, asr #31
   b53e2:	fb01 f402 	mul.w	r4, r1, r2
   b53e6:	fb03 4400 	mla	r4, r3, r0, r4
        mult = 1 - mult;
   b53ea:	bf18      	it	ne
   b53ec:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
   b53f0:	fba1 0803 	umull	r0, r8, r1, r3
        mult = 1 - mult;
   b53f4:	bf14      	ite	ne
   b53f6:	f04f 0e00 	movne.w	lr, #0
   b53fa:	f04f 3eff 	moveq.w	lr, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
   b53fe:	4444      	add	r4, r8
   b5400:	1940      	adds	r0, r0, r5
    result = (int32_t)(mult / (1ll << 31));
   b5402:	eb44 040e 	adc.w	r4, r4, lr
   b5406:	2c00      	cmp	r4, #0
    if ((m1 < 0) ^ (m2 < 0))
   b5408:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
    result = (int32_t)(mult / (1ll << 31));
   b540c:	da04      	bge.n	b5418 <arm_nn_softmax_common_s8+0x118>
   b540e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   b5412:	1940      	adds	r0, r0, r5
   b5414:	f144 0400 	adc.w	r4, r4, #0
   b5418:	0fc0      	lsrs	r0, r0, #31
   b541a:	ea40 0044 	orr.w	r0, r0, r4, lsl #1

    const int32_t shift = (1 << 29);
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   b541e:	f1c0 5000 	rsb	r0, r0, #536870912	; 0x20000000
        mult = 1 - mult;
   b5422:	2800      	cmp	r0, #0
   b5424:	4c8c      	ldr	r4, [pc, #560]	; (b5658 <arm_nn_softmax_common_s8+0x358>)
   b5426:	bfa6      	itte	ge
   b5428:	2500      	movge	r5, #0
   b542a:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
   b542e:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   b5432:	fbc1 4500 	smlal	r4, r5, r1, r0
   b5436:	2d00      	cmp	r5, #0
   b5438:	da04      	bge.n	b5444 <arm_nn_softmax_common_s8+0x144>
   b543a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   b543e:	1824      	adds	r4, r4, r0
   b5440:	f145 0500 	adc.w	r5, r5, #0
   b5444:	0fe4      	lsrs	r4, r4, #31
   b5446:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
   b544a:	f1b4 4f60 	cmp.w	r4, #3758096384	; 0xe0000000
   b544e:	bfcb      	itete	gt
   b5450:	f04f 35ff 	movgt.w	r5, #4294967295	; 0xffffffff
   b5454:	2500      	movle	r5, #0
   b5456:	f04f 0e00 	movgt.w	lr, #0
   b545a:	f04f 4e00 	movle.w	lr, #2147483648	; 0x80000000
   b545e:	ea05 0484 	and.w	r4, r5, r4, lsl #2
   b5462:	ea84 040e 	eor.w	r4, r4, lr
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   b5466:	1860      	adds	r0, r4, r1
    if ((m1 < 0) ^ (m2 < 0))
   b5468:	ea4f 7ed0 	mov.w	lr, r0, lsr #31
        mult = 1 - mult;
   b546c:	45f4      	cmp	ip, lr
   b546e:	4d7a      	ldr	r5, [pc, #488]	; (b5658 <arm_nn_softmax_common_s8+0x358>)
    mult = mult + (q63_t)m1 * m2;
   b5470:	ea4f 71e0 	mov.w	r1, r0, asr #31
   b5474:	fb00 f402 	mul.w	r4, r0, r2
   b5478:	fb03 4401 	mla	r4, r3, r1, r4
        mult = 1 - mult;
   b547c:	bf08      	it	eq
   b547e:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
   b5482:	fba0 1903 	umull	r1, r9, r0, r3
        mult = 1 - mult;
   b5486:	bf0c      	ite	eq
   b5488:	f04f 0800 	moveq.w	r8, #0
   b548c:	f04f 38ff 	movne.w	r8, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
   b5490:	444c      	add	r4, r9
   b5492:	1949      	adds	r1, r1, r5
    result = (int32_t)(mult / (1ll << 31));
   b5494:	eb44 0408 	adc.w	r4, r4, r8
   b5498:	2c00      	cmp	r4, #0
   b549a:	da04      	bge.n	b54a6 <arm_nn_softmax_common_s8+0x1a6>
   b549c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   b54a0:	1949      	adds	r1, r1, r5
   b54a2:	f144 0400 	adc.w	r4, r4, #0
   b54a6:	0fc9      	lsrs	r1, r1, #31
   b54a8:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   b54ac:	f1c1 5100 	rsb	r1, r1, #536870912	; 0x20000000
        mult = 1 - mult;
   b54b0:	4c69      	ldr	r4, [pc, #420]	; (b5658 <arm_nn_softmax_common_s8+0x358>)
   b54b2:	ebbe 7fd1 	cmp.w	lr, r1, lsr #31
   b54b6:	bf13      	iteet	ne
   b54b8:	46a6      	movne	lr, r4
   b54ba:	f04f 4e80 	moveq.w	lr, #1073741824	; 0x40000000
   b54be:	2400      	moveq	r4, #0
   b54c0:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   b54c4:	fbc0 e401 	smlal	lr, r4, r0, r1
   b54c8:	4625      	mov	r5, r4
   b54ca:	2d00      	cmp	r5, #0
   b54cc:	4674      	mov	r4, lr
   b54ce:	da04      	bge.n	b54da <arm_nn_softmax_common_s8+0x1da>
   b54d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b54d4:	1864      	adds	r4, r4, r1
   b54d6:	f145 0500 	adc.w	r5, r5, #0
   b54da:	0fe4      	lsrs	r4, r4, #31
   b54dc:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
   b54e0:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
   b54e4:	bfab      	itete	ge
   b54e6:	2100      	movge	r1, #0
   b54e8:	f04f 31ff 	movlt.w	r1, #4294967295	; 0xffffffff
   b54ec:	f06f 4500 	mvnge.w	r5, #2147483648	; 0x80000000
   b54f0:	2500      	movlt	r5, #0
   b54f2:	ea01 0184 	and.w	r1, r1, r4, lsl #2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
   b54f6:	f1b4 4f60 	cmp.w	r4, #3758096384	; 0xe0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
   b54fa:	ea81 0105 	eor.w	r1, r1, r5
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
   b54fe:	bfd5      	itete	le
   b5500:	2500      	movle	r5, #0
   b5502:	f04f 35ff 	movgt.w	r5, #4294967295	; 0xffffffff
   b5506:	f04f 4400 	movle.w	r4, #2147483648	; 0x80000000
   b550a:	2400      	movgt	r4, #0
   b550c:	4029      	ands	r1, r5
   b550e:	4061      	eors	r1, r4
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   b5510:	4408      	add	r0, r1
    if ((m1 < 0) ^ (m2 < 0))
   b5512:	0fc4      	lsrs	r4, r0, #31
        mult = 1 - mult;
   b5514:	45a4      	cmp	ip, r4
   b5516:	4950      	ldr	r1, [pc, #320]	; (b5658 <arm_nn_softmax_common_s8+0x358>)
    mult = mult + (q63_t)m1 * m2;
   b5518:	ea4f 7ce0 	mov.w	ip, r0, asr #31
   b551c:	fb00 f202 	mul.w	r2, r0, r2
   b5520:	fb03 220c 	mla	r2, r3, ip, r2
        mult = 1 - mult;
   b5524:	bf08      	it	eq
   b5526:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
   b552a:	fba0 3c03 	umull	r3, ip, r0, r3
        mult = 1 - mult;
   b552e:	bf0c      	ite	eq
   b5530:	2500      	moveq	r5, #0
   b5532:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
   b5536:	4462      	add	r2, ip
   b5538:	185b      	adds	r3, r3, r1
    result = (int32_t)(mult / (1ll << 31));
   b553a:	eb42 0205 	adc.w	r2, r2, r5
   b553e:	2a00      	cmp	r2, #0
   b5540:	da04      	bge.n	b554c <arm_nn_softmax_common_s8+0x24c>
   b5542:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5546:	185b      	adds	r3, r3, r1
   b5548:	f142 0200 	adc.w	r2, r2, #0
   b554c:	0fdb      	lsrs	r3, r3, #31
   b554e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   b5552:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
        mult = 1 - mult;
   b5556:	ebb4 7fd3 	cmp.w	r4, r3, lsr #31
   b555a:	4a3f      	ldr	r2, [pc, #252]	; (b5658 <arm_nn_softmax_common_s8+0x358>)
   b555c:	bf06      	itte	eq
   b555e:	2100      	moveq	r1, #0
   b5560:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
   b5564:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   b5568:	fbc0 2103 	smlal	r2, r1, r0, r3
   b556c:	2900      	cmp	r1, #0
   b556e:	da04      	bge.n	b557a <arm_nn_softmax_common_s8+0x27a>
   b5570:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b5574:	18d2      	adds	r2, r2, r3
   b5576:	f141 0100 	adc.w	r1, r1, #0
   b557a:	0fd2      	lsrs	r2, r2, #31
   b557c:	ea42 0141 	orr.w	r1, r2, r1, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
   b5580:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   b5584:	bfb5      	itete	lt
   b5586:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   b558a:	2300      	movge	r3, #0
   b558c:	2200      	movlt	r2, #0
   b558e:	f06f 4200 	mvnge.w	r2, #2147483648	; 0x80000000
   b5592:	ea03 0381 	and.w	r3, r3, r1, lsl #2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
   b5596:	f1b1 4f60 	cmp.w	r1, #3758096384	; 0xe0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
   b559a:	ea83 0302 	eor.w	r3, r3, r2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
   b559e:	bfd5      	itete	le
   b55a0:	2100      	movle	r1, #0
   b55a2:	f04f 31ff 	movgt.w	r1, #4294967295	; 0xffffffff
   b55a6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   b55aa:	2200      	movgt	r2, #0
   b55ac:	4019      	ands	r1, r3
   b55ae:	4051      	eors	r1, r2
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   b55b0:	4408      	add	r0, r1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
   b55b2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   b55b6:	bfab      	itete	ge
   b55b8:	2300      	movge	r3, #0
   b55ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   b55be:	f06f 4200 	mvnge.w	r2, #2147483648	; 0x80000000
   b55c2:	2200      	movlt	r2, #0
   b55c4:	ea03 0340 	and.w	r3, r3, r0, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
   b55c8:	f1b0 4f40 	cmp.w	r0, #3221225472	; 0xc0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
   b55cc:	ea83 0302 	eor.w	r3, r3, r2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
   b55d0:	bfd5      	itete	le
   b55d2:	2100      	movle	r1, #0
   b55d4:	f04f 31ff 	movgt.w	r1, #4294967295	; 0xffffffff
   b55d8:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   b55dc:	2200      	movgt	r2, #0
   b55de:	400b      	ands	r3, r1
   b55e0:	4053      	eors	r3, r2
   b55e2:	9306      	str	r3, [sp, #24]
        if (int16_output)
   b55e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b55e6:	2b00      	cmp	r3, #0
   b55e8:	f47f ae9f 	bne.w	b532a <arm_nn_softmax_common_s8+0x2a>
            int8_t *output_s8 = (int8_t *)output + row_idx * row_size;
   b55ec:	9a01      	ldr	r2, [sp, #4]
   b55ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        mult = 1 - mult;
   b55f0:	f8df e064 	ldr.w	lr, [pc, #100]	; b5658 <arm_nn_softmax_common_s8+0x358>
   b55f4:	4413      	add	r3, r2
   b55f6:	9309      	str	r3, [sp, #36]	; 0x24
            bits_over_unit = ACCUM_BITS - headroom + 23;
   b55f8:	9b06      	ldr	r3, [sp, #24]
   b55fa:	2b00      	cmp	r3, #0
   b55fc:	bfb9      	ittee	lt
   b55fe:	4a16      	ldrlt	r2, [pc, #88]	; (b5658 <arm_nn_softmax_common_s8+0x358>)
   b5600:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   b5604:	2300      	movge	r3, #0
   b5606:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
   b560a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   b560e:	f1c6 0a23 	rsb	sl, r6, #35	; 0x23
    const q31_t remainder_mask = (1 << exponent) - 1;
   b5612:	2301      	movs	r3, #1
   b5614:	fa03 f30a 	lsl.w	r3, r3, sl
   b5618:	3b01      	subs	r3, #1
   b561a:	9307      	str	r3, [sp, #28]
    q31_t threshold = remainder_mask >> 1;
   b561c:	105b      	asrs	r3, r3, #1
   b561e:	9308      	str	r3, [sp, #32]
        threshold++;
   b5620:	3301      	adds	r3, #1
   b5622:	930b      	str	r3, [sp, #44]	; 0x2c
            for (col = 0; col < row_size; ++col)
   b5624:	f04f 0c00 	mov.w	ip, #0
   b5628:	9b03      	ldr	r3, [sp, #12]
   b562a:	459c      	cmp	ip, r3
   b562c:	f2c0 8186 	blt.w	b593c <arm_nn_softmax_common_s8+0x63c>
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
   b5630:	9b04      	ldr	r3, [sp, #16]
   b5632:	9a01      	ldr	r2, [sp, #4]
   b5634:	3301      	adds	r3, #1
   b5636:	9304      	str	r3, [sp, #16]
   b5638:	9b03      	ldr	r3, [sp, #12]
   b563a:	441a      	add	r2, r3
   b563c:	9201      	str	r2, [sp, #4]
   b563e:	e66c      	b.n	b531a <arm_nn_softmax_common_s8+0x1a>
            max = MAX(max, input[col]);
   b5640:	9a05      	ldr	r2, [sp, #20]
   b5642:	9902      	ldr	r1, [sp, #8]
   b5644:	56d2      	ldrsb	r2, [r2, r3]
   b5646:	4291      	cmp	r1, r2
   b5648:	bfb8      	it	lt
   b564a:	4611      	movlt	r1, r2
   b564c:	9102      	str	r1, [sp, #8]
        for (col = 1; col < row_size; ++col)
   b564e:	3301      	adds	r3, #1
   b5650:	e673      	b.n	b533a <arm_nn_softmax_common_s8+0x3a>
   b5652:	bf00      	nop
   b5654:	c3c3c3c4 	.word	0xc3c3c3c4
   b5658:	c0000001 	.word	0xc0000001
            diff = input[col] - max;
   b565c:	9b05      	ldr	r3, [sp, #20]
   b565e:	f913 100e 	ldrsb.w	r1, [r3, lr]
   b5662:	9b02      	ldr	r3, [sp, #8]
   b5664:	1ac9      	subs	r1, r1, r3
            if (diff >= diff_min)
   b5666:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b5668:	428b      	cmp	r3, r1
   b566a:	f300 814f 	bgt.w	b590c <arm_nn_softmax_common_s8+0x60c>
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
   b566e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b5670:	4099      	lsls	r1, r3
    if ((m1 < 0) ^ (m2 < 0))
   b5672:	0fcb      	lsrs	r3, r1, #31
        mult = 1 - mult;
   b5674:	ebb3 7fdb 	cmp.w	r3, fp, lsr #31
   b5678:	bf0b      	itete	eq
   b567a:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
   b567e:	4642      	movne	r2, r8
   b5680:	2300      	moveq	r3, #0
   b5682:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   b5686:	fbc1 230b 	smlal	r2, r3, r1, fp
   b568a:	2b00      	cmp	r3, #0
   b568c:	4618      	mov	r0, r3
   b568e:	da04      	bge.n	b569a <arm_nn_softmax_common_s8+0x39a>
   b5690:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b5694:	18d2      	adds	r2, r2, r3
   b5696:	f140 0000 	adc.w	r0, r0, #0
   b569a:	0fd3      	lsrs	r3, r2, #31
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
   b569c:	4559      	cmp	r1, fp
    result = (int32_t)(mult / (1ll << 31));
   b569e:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
   b56a2:	d104      	bne.n	b56ae <arm_nn_softmax_common_s8+0x3ae>
        result = NN_Q31_MAX;
   b56a4:	f1bb 4f00 	cmp.w	fp, #2147483648	; 0x80000000
   b56a8:	bf08      	it	eq
   b56aa:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
   b56ae:	f043 4c7f 	orr.w	ip, r3, #4278190080	; 0xff000000
    const int32_t remainder = val_mod_minus_quarter - val;
   b56b2:	ebac 0103 	sub.w	r1, ip, r3
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
   b56b6:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
   b56ba:	f10c 5c80 	add.w	ip, ip, #268435456	; 0x10000000
    mult = mult + (q63_t)m1 * m2;
   b56be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
   b56c2:	2400      	movs	r4, #0
   b56c4:	fbcc 240c 	smlal	r2, r4, ip, ip
   b56c8:	2c00      	cmp	r4, #0
    mult = mult + (q63_t)m1 * m2;
   b56ca:	ea4f 76ec 	mov.w	r6, ip, asr #31
    result = (int32_t)(mult / (1ll << 31));
   b56ce:	da04      	bge.n	b56da <arm_nn_softmax_common_s8+0x3da>
   b56d0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   b56d4:	1812      	adds	r2, r2, r0
   b56d6:	f144 0400 	adc.w	r4, r4, #0
   b56da:	0fd2      	lsrs	r2, r2, #31
   b56dc:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    mult = mult + (q63_t)m1 * m2;
   b56e0:	fba2 0902 	umull	r0, r9, r2, r2
    result = (int32_t)(mult / (1ll << 31));
   b56e4:	17e4      	asrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
   b56e6:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
   b56ea:	fb02 fa04 	mul.w	sl, r2, r4
    result = (int32_t)(mult / (1ll << 31));
   b56ee:	eb49 094a 	adc.w	r9, r9, sl, lsl #1
   b56f2:	f1b9 0f00 	cmp.w	r9, #0
   b56f6:	da05      	bge.n	b5704 <arm_nn_softmax_common_s8+0x404>
   b56f8:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
   b56fc:	eb10 000a 	adds.w	r0, r0, sl
   b5700:	f149 0900 	adc.w	r9, r9, #0
   b5704:	0fc0      	lsrs	r0, r0, #31
   b5706:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
    int32_t remainder = remainder_mask & dividend;
   b570a:	f000 0903 	and.w	r9, r0, #3
        threshold++;
   b570e:	1080      	asrs	r0, r0, #2
   b5710:	bf54      	ite	pl
   b5712:	f04f 0a01 	movpl.w	sl, #1
   b5716:	f04f 0a02 	movmi.w	sl, #2
    if (remainder > threshold)
   b571a:	45d1      	cmp	r9, sl
    if ((m1 < 0) ^ (m2 < 0))
   b571c:	ea4f 79d2 	mov.w	r9, r2, lsr #31
        result++;
   b5720:	bfc8      	it	gt
   b5722:	3001      	addgt	r0, #1
    mult = mult + (q63_t)m1 * m2;
   b5724:	fb0c f404 	mul.w	r4, ip, r4
        mult = 1 - mult;
   b5728:	ebb9 7fdc 	cmp.w	r9, ip, lsr #31
    mult = mult + (q63_t)m1 * m2;
   b572c:	fb02 4406 	mla	r4, r2, r6, r4
        mult = 1 - mult;
   b5730:	bf08      	it	eq
   b5732:	f04f 4980 	moveq.w	r9, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
   b5736:	fbac 6702 	umull	r6, r7, ip, r2
        mult = 1 - mult;
   b573a:	bf16      	itet	ne
   b573c:	46c1      	movne	r9, r8
   b573e:	f04f 0a00 	moveq.w	sl, #0
   b5742:	f04f 3aff 	movne.w	sl, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
   b5746:	443c      	add	r4, r7
   b5748:	eb16 0609 	adds.w	r6, r6, r9
    result = (int32_t)(mult / (1ll << 31));
   b574c:	eb44 040a 	adc.w	r4, r4, sl
   b5750:	2c00      	cmp	r4, #0
   b5752:	da05      	bge.n	b5760 <arm_nn_softmax_common_s8+0x460>
   b5754:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   b5758:	eb16 0609 	adds.w	r6, r6, r9
   b575c:	f144 0400 	adc.w	r4, r4, #0
   b5760:	0ff6      	lsrs	r6, r6, #31
   b5762:	ea46 0644 	orr.w	r6, r6, r4, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   b5766:	4430      	add	r0, r6
        mult = 1 - mult;
   b5768:	2800      	cmp	r0, #0
    result = (int32_t)(mult / (1ll << 31));
   b576a:	4f6c      	ldr	r7, [pc, #432]	; (b591c <arm_nn_softmax_common_s8+0x61c>)
        mult = 1 - mult;
   b576c:	bfab      	itete	ge
   b576e:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
   b5772:	4644      	movlt	r4, r8
   b5774:	2600      	movge	r6, #0
   b5776:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   b577a:	fbc0 4607 	smlal	r4, r6, r0, r7
   b577e:	2e00      	cmp	r6, #0
   b5780:	da04      	bge.n	b578c <arm_nn_softmax_common_s8+0x48c>
   b5782:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   b5786:	1824      	adds	r4, r4, r0
   b5788:	f146 0600 	adc.w	r6, r6, #0
   b578c:	0fe4      	lsrs	r4, r4, #31
   b578e:	ea44 0446 	orr.w	r4, r4, r6, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   b5792:	4414      	add	r4, r2
    if (result < 0)
   b5794:	1062      	asrs	r2, r4, #1
   b5796:	d402      	bmi.n	b579e <arm_nn_softmax_common_s8+0x49e>
    if (remainder > threshold)
   b5798:	07e6      	lsls	r6, r4, #31
        result++;
   b579a:	bf48      	it	mi
   b579c:	3201      	addmi	r2, #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   b579e:	4494      	add	ip, r2
        mult = 1 - mult;
   b57a0:	f1bc 0f00 	cmp.w	ip, #0
    result = (int32_t)(mult / (1ll << 31));
   b57a4:	4a5e      	ldr	r2, [pc, #376]	; (b5920 <arm_nn_softmax_common_s8+0x620>)
        mult = 1 - mult;
   b57a6:	bfab      	itete	ge
   b57a8:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
   b57ac:	4644      	movlt	r4, r8
   b57ae:	2000      	movge	r0, #0
   b57b0:	f04f 30ff 	movlt.w	r0, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   b57b4:	fbcc 4002 	smlal	r4, r0, ip, r2
   b57b8:	2800      	cmp	r0, #0
   b57ba:	da04      	bge.n	b57c6 <arm_nn_softmax_common_s8+0x4c6>
   b57bc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b57c0:	18a4      	adds	r4, r4, r2
   b57c2:	f140 0000 	adc.w	r0, r0, #0
   b57c6:	0fe4      	lsrs	r4, r4, #31
   b57c8:	ea44 0440 	orr.w	r4, r4, r0, lsl #1
    int32_t result = 1895147668 +
   b57cc:	f104 44e2 	add.w	r4, r4, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
   b57d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   b57d4:	2000      	movs	r0, #0
   b57d6:	4f53      	ldr	r7, [pc, #332]	; (b5924 <arm_nn_softmax_common_s8+0x624>)
    int32_t result = 1895147668 +
   b57d8:	f5a4 2425 	sub.w	r4, r4, #675840	; 0xa5000
   b57dc:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
   b57e0:	4694      	mov	ip, r2
   b57e2:	4682      	mov	sl, r0
   b57e4:	fbc4 ca07 	smlal	ip, sl, r4, r7
    SELECT_IF_NON_ZERO(1672461947)
   b57e8:	f3c1 6600 	ubfx	r6, r1, #24, #1
    result = (int32_t)(mult / (1ll << 31));
   b57ec:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
   b57f0:	ea4c 0c4a 	orr.w	ip, ip, sl, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
   b57f4:	f341 6900 	sbfx	r9, r1, #24, #1
   b57f8:	3e01      	subs	r6, #1
   b57fa:	ea09 090c 	and.w	r9, r9, ip
    mult = mult + (q63_t)m1 * m2;
   b57fe:	4f4a      	ldr	r7, [pc, #296]	; (b5928 <arm_nn_softmax_common_s8+0x628>)
    SELECT_IF_NON_ZERO(1672461947)
   b5800:	4034      	ands	r4, r6
   b5802:	ea89 0404 	eor.w	r4, r9, r4
    mult = mult + (q63_t)m1 * m2;
   b5806:	4694      	mov	ip, r2
   b5808:	4606      	mov	r6, r0
   b580a:	fbc4 c607 	smlal	ip, r6, r4, r7
    SELECT_IF_NON_ZERO(1302514674)
   b580e:	f3c1 6a40 	ubfx	sl, r1, #25, #1
    result = (int32_t)(mult / (1ll << 31));
   b5812:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
   b5816:	ea4c 0c46 	orr.w	ip, ip, r6, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
   b581a:	f341 6940 	sbfx	r9, r1, #25, #1
   b581e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b5822:	ea0a 0a04 	and.w	sl, sl, r4
   b5826:	ea09 090c 	and.w	r9, r9, ip
    mult = mult + (q63_t)m1 * m2;
   b582a:	4f40      	ldr	r7, [pc, #256]	; (b592c <arm_nn_softmax_common_s8+0x62c>)
    SELECT_IF_NON_ZERO(1302514674)
   b582c:	ea89 090a 	eor.w	r9, r9, sl
    mult = mult + (q63_t)m1 * m2;
   b5830:	4616      	mov	r6, r2
   b5832:	4604      	mov	r4, r0
   b5834:	fbc9 6407 	smlal	r6, r4, r9, r7
    SELECT_IF_NON_ZERO(790015084)
   b5838:	f3c1 6a80 	ubfx	sl, r1, #26, #1
    result = (int32_t)(mult / (1ll << 31));
   b583c:	0ff6      	lsrs	r6, r6, #31
   b583e:	ea46 0644 	orr.w	r6, r6, r4, lsl #1
    SELECT_IF_NON_ZERO(790015084)
   b5842:	f341 6c80 	sbfx	ip, r1, #26, #1
   b5846:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b584a:	ea0a 0a09 	and.w	sl, sl, r9
   b584e:	ea0c 0c06 	and.w	ip, ip, r6
    mult = mult + (q63_t)m1 * m2;
   b5852:	4e37      	ldr	r6, [pc, #220]	; (b5930 <arm_nn_softmax_common_s8+0x630>)
    SELECT_IF_NON_ZERO(790015084)
   b5854:	ea8c 0c0a 	eor.w	ip, ip, sl
    mult = mult + (q63_t)m1 * m2;
   b5858:	4614      	mov	r4, r2
   b585a:	4682      	mov	sl, r0
   b585c:	fbcc 4a06 	smlal	r4, sl, ip, r6
    SELECT_IF_NON_ZERO(290630308)
   b5860:	f3c1 69c0 	ubfx	r9, r1, #27, #1
    result = (int32_t)(mult / (1ll << 31));
   b5864:	0fe4      	lsrs	r4, r4, #31
   b5866:	ea44 044a 	orr.w	r4, r4, sl, lsl #1
    SELECT_IF_NON_ZERO(290630308)
   b586a:	f341 66c0 	sbfx	r6, r1, #27, #1
   b586e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   b5872:	ea09 090c 	and.w	r9, r9, ip
   b5876:	4026      	ands	r6, r4
    mult = mult + (q63_t)m1 * m2;
   b5878:	4c2e      	ldr	r4, [pc, #184]	; (b5934 <arm_nn_softmax_common_s8+0x634>)
    SELECT_IF_NON_ZERO(290630308)
   b587a:	ea86 0609 	eor.w	r6, r6, r9
    mult = mult + (q63_t)m1 * m2;
   b587e:	4682      	mov	sl, r0
   b5880:	4691      	mov	r9, r2
   b5882:	fbc6 9a04 	smlal	r9, sl, r6, r4
    SELECT_IF_NON_ZERO(39332535)
   b5886:	f3c1 7c00 	ubfx	ip, r1, #28, #1
    result = (int32_t)(mult / (1ll << 31));
   b588a:	ea4f 79d9 	mov.w	r9, r9, lsr #31
   b588e:	ea49 094a 	orr.w	r9, r9, sl, lsl #1
    SELECT_IF_NON_ZERO(39332535)
   b5892:	f341 7400 	sbfx	r4, r1, #28, #1
   b5896:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   b589a:	ea0c 0c06 	and.w	ip, ip, r6
   b589e:	ea04 0409 	and.w	r4, r4, r9
    mult = mult + (q63_t)m1 * m2;
   b58a2:	f8df 9094 	ldr.w	r9, [pc, #148]	; b5938 <arm_nn_softmax_common_s8+0x638>
    SELECT_IF_NON_ZERO(39332535)
   b58a6:	ea84 040c 	eor.w	r4, r4, ip
    mult = mult + (q63_t)m1 * m2;
   b58aa:	4682      	mov	sl, r0
   b58ac:	4694      	mov	ip, r2
   b58ae:	fbc4 ca09 	smlal	ip, sl, r4, r9
    SELECT_IF_NON_ZERO(720401)
   b58b2:	f3c1 7640 	ubfx	r6, r1, #29, #1
    result = (int32_t)(mult / (1ll << 31));
   b58b6:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
   b58ba:	ea4c 0c4a 	orr.w	ip, ip, sl, lsl #1
    SELECT_IF_NON_ZERO(720401)
   b58be:	f341 7940 	sbfx	r9, r1, #29, #1
   b58c2:	3e01      	subs	r6, #1
   b58c4:	4026      	ands	r6, r4
   b58c6:	ea09 0c0c 	and.w	ip, r9, ip
   b58ca:	ea8c 0c06 	eor.w	ip, ip, r6
    mult = mult + (q63_t)m1 * m2;
   b58ce:	24f2      	movs	r4, #242	; 0xf2
   b58d0:	fbcc 2004 	smlal	r2, r0, ip, r4
    SELECT_IF_NON_ZERO(242)
   b58d4:	f3c1 7a80 	ubfx	sl, r1, #30, #1
    result = (int32_t)(mult / (1ll << 31));
   b58d8:	0fd2      	lsrs	r2, r2, #31
   b58da:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
    SELECT_IF_NON_ZERO(242)
   b58de:	f341 7180 	sbfx	r1, r1, #30, #1
   b58e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    mask = MASK_IF_ZERO(val);
   b58e6:	fab3 f383 	clz	r3, r3
    SELECT_IF_NON_ZERO(242)
   b58ea:	400a      	ands	r2, r1
    mask = MASK_IF_ZERO(val);
   b58ec:	095b      	lsrs	r3, r3, #5
    SELECT_IF_NON_ZERO(242)
   b58ee:	ea0a 0c0c 	and.w	ip, sl, ip
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
   b58f2:	1e58      	subs	r0, r3, #1
    SELECT_IF_NON_ZERO(242)
   b58f4:	ea82 020c 	eor.w	r2, r2, ip
    mask = MASK_IF_ZERO(val);
   b58f8:	425b      	negs	r3, r3
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
   b58fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   b58fe:	4002      	ands	r2, r0
   b5900:	405a      	eors	r2, r3
    result = dividend >> exponent;
   b5902:	1313      	asrs	r3, r2, #12
    if (remainder > threshold)
   b5904:	0511      	lsls	r1, r2, #20
        result++;
   b5906:	bf48      	it	mi
   b5908:	3301      	addmi	r3, #1
   b590a:	441d      	add	r5, r3
        for (col = 0; col < row_size; ++col)
   b590c:	f10e 0e01 	add.w	lr, lr, #1
   b5910:	e51b      	b.n	b534a <arm_nn_softmax_common_s8+0x4a>
    return 32U;
   b5912:	2620      	movs	r6, #32
        const int32_t shifted_scale = ONE_OVER1((sum > 0 ? sum << headroom : 0) - (1 << 31));
   b5914:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   b5918:	e523      	b.n	b5362 <arm_nn_softmax_common_s8+0x62>
   b591a:	bf00      	nop
   b591c:	2aaaaaab 	.word	0x2aaaaaab
   b5920:	70f5a894 	.word	0x70f5a894
   b5924:	63afbe7b 	.word	0x63afbe7b
   b5928:	4da2cbf2 	.word	0x4da2cbf2
   b592c:	2f16ac6c 	.word	0x2f16ac6c
   b5930:	1152aaa4 	.word	0x1152aaa4
   b5934:	02582ab7 	.word	0x02582ab7
   b5938:	000afe11 	.word	0x000afe11
                diff = input[col] - max;
   b593c:	9b05      	ldr	r3, [sp, #20]
   b593e:	f913 100c 	ldrsb.w	r1, [r3, ip]
   b5942:	9b02      	ldr	r3, [sp, #8]
   b5944:	1ac9      	subs	r1, r1, r3
                if (diff >= diff_min)
   b5946:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b5948:	4299      	cmp	r1, r3
   b594a:	f2c0 816a 	blt.w	b5c22 <arm_nn_softmax_common_s8+0x922>
                        DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) +
   b594e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b5950:	4099      	lsls	r1, r3
    if ((m1 < 0) ^ (m2 < 0))
   b5952:	0fcb      	lsrs	r3, r1, #31
        mult = 1 - mult;
   b5954:	ebb3 7fdb 	cmp.w	r3, fp, lsr #31
   b5958:	bf0b      	itete	eq
   b595a:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
   b595e:	4673      	movne	r3, lr
   b5960:	2200      	moveq	r2, #0
   b5962:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   b5966:	fbc1 320b 	smlal	r3, r2, r1, fp
   b596a:	2a00      	cmp	r2, #0
   b596c:	4610      	mov	r0, r2
   b596e:	da04      	bge.n	b597a <arm_nn_softmax_common_s8+0x67a>
   b5970:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b5974:	189b      	adds	r3, r3, r2
   b5976:	f140 0000 	adc.w	r0, r0, #0
   b597a:	0fda      	lsrs	r2, r3, #31
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
   b597c:	4559      	cmp	r1, fp
    result = (int32_t)(mult / (1ll << 31));
   b597e:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
   b5982:	d104      	bne.n	b598e <arm_nn_softmax_common_s8+0x68e>
        result = NN_Q31_MAX;
   b5984:	f1bb 4f00 	cmp.w	fp, #2147483648	; 0x80000000
   b5988:	bf08      	it	eq
   b598a:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
   b598e:	f042 467f 	orr.w	r6, r2, #4278190080	; 0xff000000
    const int32_t remainder = val_mod_minus_quarter - val;
   b5992:	1ab3      	subs	r3, r6, r2
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
   b5994:	0176      	lsls	r6, r6, #5
   b5996:	f106 5680 	add.w	r6, r6, #268435456	; 0x10000000
    mult = mult + (q63_t)m1 * m2;
   b599a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
   b599e:	2400      	movs	r4, #0
   b59a0:	fbc6 1406 	smlal	r1, r4, r6, r6
   b59a4:	2c00      	cmp	r4, #0
    mult = mult + (q63_t)m1 * m2;
   b59a6:	ea4f 75e6 	mov.w	r5, r6, asr #31
    result = (int32_t)(mult / (1ll << 31));
   b59aa:	da04      	bge.n	b59b6 <arm_nn_softmax_common_s8+0x6b6>
   b59ac:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   b59b0:	1809      	adds	r1, r1, r0
   b59b2:	f144 0400 	adc.w	r4, r4, #0
   b59b6:	0fc9      	lsrs	r1, r1, #31
   b59b8:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    mult = mult + (q63_t)m1 * m2;
   b59bc:	fba1 0801 	umull	r0, r8, r1, r1
    result = (int32_t)(mult / (1ll << 31));
   b59c0:	17e4      	asrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
   b59c2:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
   b59c6:	fb01 f904 	mul.w	r9, r1, r4
    result = (int32_t)(mult / (1ll << 31));
   b59ca:	eb48 0849 	adc.w	r8, r8, r9, lsl #1
   b59ce:	f1b8 0f00 	cmp.w	r8, #0
   b59d2:	da05      	bge.n	b59e0 <arm_nn_softmax_common_s8+0x6e0>
   b59d4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   b59d8:	eb10 0009 	adds.w	r0, r0, r9
   b59dc:	f148 0800 	adc.w	r8, r8, #0
   b59e0:	0fc0      	lsrs	r0, r0, #31
   b59e2:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
    int32_t remainder = remainder_mask & dividend;
   b59e6:	f000 0803 	and.w	r8, r0, #3
        threshold++;
   b59ea:	1080      	asrs	r0, r0, #2
   b59ec:	bf54      	ite	pl
   b59ee:	f04f 0901 	movpl.w	r9, #1
   b59f2:	f04f 0902 	movmi.w	r9, #2
    if (remainder > threshold)
   b59f6:	45c8      	cmp	r8, r9
    if ((m1 < 0) ^ (m2 < 0))
   b59f8:	ea4f 78d1 	mov.w	r8, r1, lsr #31
        result++;
   b59fc:	bfc8      	it	gt
   b59fe:	3001      	addgt	r0, #1
    mult = mult + (q63_t)m1 * m2;
   b5a00:	4374      	muls	r4, r6
        mult = 1 - mult;
   b5a02:	ebb8 7fd6 	cmp.w	r8, r6, lsr #31
    mult = mult + (q63_t)m1 * m2;
   b5a06:	fb01 4405 	mla	r4, r1, r5, r4
        mult = 1 - mult;
   b5a0a:	bf08      	it	eq
   b5a0c:	f04f 4880 	moveq.w	r8, #1073741824	; 0x40000000
    mult = mult + (q63_t)m1 * m2;
   b5a10:	fba6 5701 	umull	r5, r7, r6, r1
        mult = 1 - mult;
   b5a14:	bf16      	itet	ne
   b5a16:	46f0      	movne	r8, lr
   b5a18:	f04f 0900 	moveq.w	r9, #0
   b5a1c:	f04f 39ff 	movne.w	r9, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
   b5a20:	443c      	add	r4, r7
   b5a22:	eb15 0508 	adds.w	r5, r5, r8
    result = (int32_t)(mult / (1ll << 31));
   b5a26:	eb44 0409 	adc.w	r4, r4, r9
   b5a2a:	2c00      	cmp	r4, #0
   b5a2c:	da05      	bge.n	b5a3a <arm_nn_softmax_common_s8+0x73a>
   b5a2e:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
   b5a32:	eb15 0508 	adds.w	r5, r5, r8
   b5a36:	f144 0400 	adc.w	r4, r4, #0
   b5a3a:	0fed      	lsrs	r5, r5, #31
   b5a3c:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   b5a40:	4428      	add	r0, r5
        mult = 1 - mult;
   b5a42:	2800      	cmp	r0, #0
    result = (int32_t)(mult / (1ll << 31));
   b5a44:	4f78      	ldr	r7, [pc, #480]	; (b5c28 <arm_nn_softmax_common_s8+0x928>)
        mult = 1 - mult;
   b5a46:	bfab      	itete	ge
   b5a48:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
   b5a4c:	4674      	movlt	r4, lr
   b5a4e:	2500      	movge	r5, #0
   b5a50:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   b5a54:	fbc0 4507 	smlal	r4, r5, r0, r7
   b5a58:	2d00      	cmp	r5, #0
   b5a5a:	da04      	bge.n	b5a66 <arm_nn_softmax_common_s8+0x766>
   b5a5c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   b5a60:	1824      	adds	r4, r4, r0
   b5a62:	f145 0500 	adc.w	r5, r5, #0
   b5a66:	0fe4      	lsrs	r4, r4, #31
   b5a68:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   b5a6c:	440c      	add	r4, r1
    if (result < 0)
   b5a6e:	1061      	asrs	r1, r4, #1
   b5a70:	d402      	bmi.n	b5a78 <arm_nn_softmax_common_s8+0x778>
    if (remainder > threshold)
   b5a72:	07e0      	lsls	r0, r4, #31
        result++;
   b5a74:	bf48      	it	mi
   b5a76:	3101      	addmi	r1, #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   b5a78:	440e      	add	r6, r1
        mult = 1 - mult;
   b5a7a:	2e00      	cmp	r6, #0
    result = (int32_t)(mult / (1ll << 31));
   b5a7c:	486b      	ldr	r0, [pc, #428]	; (b5c2c <arm_nn_softmax_common_s8+0x92c>)
        mult = 1 - mult;
   b5a7e:	bfab      	itete	ge
   b5a80:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
   b5a84:	4674      	movlt	r4, lr
   b5a86:	2100      	movge	r1, #0
   b5a88:	f04f 31ff 	movlt.w	r1, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
   b5a8c:	fbc6 4100 	smlal	r4, r1, r6, r0
   b5a90:	2900      	cmp	r1, #0
   b5a92:	da04      	bge.n	b5a9e <arm_nn_softmax_common_s8+0x79e>
   b5a94:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   b5a98:	1824      	adds	r4, r4, r0
   b5a9a:	f141 0100 	adc.w	r1, r1, #0
   b5a9e:	0fe4      	lsrs	r4, r4, #31
   b5aa0:	ea44 0441 	orr.w	r4, r4, r1, lsl #1
    int32_t result = 1895147668 +
   b5aa4:	f104 44e2 	add.w	r4, r4, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
   b5aa8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   b5aac:	2000      	movs	r0, #0
   b5aae:	4f60      	ldr	r7, [pc, #384]	; (b5c30 <arm_nn_softmax_common_s8+0x930>)
    int32_t result = 1895147668 +
   b5ab0:	f5a4 2425 	sub.w	r4, r4, #675840	; 0xa5000
   b5ab4:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
   b5ab8:	460e      	mov	r6, r1
   b5aba:	4681      	mov	r9, r0
   b5abc:	fbc4 6907 	smlal	r6, r9, r4, r7
    SELECT_IF_NON_ZERO(1672461947)
   b5ac0:	f3c3 6500 	ubfx	r5, r3, #24, #1
    result = (int32_t)(mult / (1ll << 31));
   b5ac4:	0ff6      	lsrs	r6, r6, #31
   b5ac6:	ea46 0649 	orr.w	r6, r6, r9, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
   b5aca:	f343 6800 	sbfx	r8, r3, #24, #1
   b5ace:	3d01      	subs	r5, #1
   b5ad0:	ea08 0806 	and.w	r8, r8, r6
   b5ad4:	402c      	ands	r4, r5
    mult = mult + (q63_t)m1 * m2;
   b5ad6:	4f57      	ldr	r7, [pc, #348]	; (b5c34 <arm_nn_softmax_common_s8+0x934>)
    SELECT_IF_NON_ZERO(1672461947)
   b5ad8:	ea88 0404 	eor.w	r4, r8, r4
    mult = mult + (q63_t)m1 * m2;
   b5adc:	460e      	mov	r6, r1
   b5ade:	4605      	mov	r5, r0
   b5ae0:	fbc4 6507 	smlal	r6, r5, r4, r7
    SELECT_IF_NON_ZERO(1302514674)
   b5ae4:	f3c3 6940 	ubfx	r9, r3, #25, #1
    result = (int32_t)(mult / (1ll << 31));
   b5ae8:	0ff6      	lsrs	r6, r6, #31
   b5aea:	ea46 0645 	orr.w	r6, r6, r5, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
   b5aee:	f343 6840 	sbfx	r8, r3, #25, #1
   b5af2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   b5af6:	ea09 0904 	and.w	r9, r9, r4
   b5afa:	ea08 0806 	and.w	r8, r8, r6
    mult = mult + (q63_t)m1 * m2;
   b5afe:	4e4e      	ldr	r6, [pc, #312]	; (b5c38 <arm_nn_softmax_common_s8+0x938>)
    SELECT_IF_NON_ZERO(1302514674)
   b5b00:	ea88 0809 	eor.w	r8, r8, r9
    mult = mult + (q63_t)m1 * m2;
   b5b04:	460d      	mov	r5, r1
   b5b06:	4604      	mov	r4, r0
   b5b08:	fbc8 5406 	smlal	r5, r4, r8, r6
    SELECT_IF_NON_ZERO(790015084)
   b5b0c:	f3c3 6980 	ubfx	r9, r3, #26, #1
    result = (int32_t)(mult / (1ll << 31));
   b5b10:	0fed      	lsrs	r5, r5, #31
   b5b12:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    SELECT_IF_NON_ZERO(790015084)
   b5b16:	f343 6680 	sbfx	r6, r3, #26, #1
   b5b1a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   b5b1e:	ea09 0908 	and.w	r9, r9, r8
   b5b22:	402e      	ands	r6, r5
    mult = mult + (q63_t)m1 * m2;
   b5b24:	4d45      	ldr	r5, [pc, #276]	; (b5c3c <arm_nn_softmax_common_s8+0x93c>)
    SELECT_IF_NON_ZERO(790015084)
   b5b26:	ea86 0609 	eor.w	r6, r6, r9
    mult = mult + (q63_t)m1 * m2;
   b5b2a:	460c      	mov	r4, r1
   b5b2c:	4681      	mov	r9, r0
   b5b2e:	fbc6 4905 	smlal	r4, r9, r6, r5
    SELECT_IF_NON_ZERO(290630308)
   b5b32:	f3c3 68c0 	ubfx	r8, r3, #27, #1
    result = (int32_t)(mult / (1ll << 31));
   b5b36:	0fe4      	lsrs	r4, r4, #31
   b5b38:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
    SELECT_IF_NON_ZERO(290630308)
   b5b3c:	f343 65c0 	sbfx	r5, r3, #27, #1
   b5b40:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b5b44:	ea08 0806 	and.w	r8, r8, r6
   b5b48:	4025      	ands	r5, r4
    mult = mult + (q63_t)m1 * m2;
   b5b4a:	4c3d      	ldr	r4, [pc, #244]	; (b5c40 <arm_nn_softmax_common_s8+0x940>)
    SELECT_IF_NON_ZERO(290630308)
   b5b4c:	ea85 0508 	eor.w	r5, r5, r8
    mult = mult + (q63_t)m1 * m2;
   b5b50:	4681      	mov	r9, r0
   b5b52:	4688      	mov	r8, r1
   b5b54:	fbc5 8904 	smlal	r8, r9, r5, r4
    SELECT_IF_NON_ZERO(39332535)
   b5b58:	f3c3 7600 	ubfx	r6, r3, #28, #1
    result = (int32_t)(mult / (1ll << 31));
   b5b5c:	ea4f 78d8 	mov.w	r8, r8, lsr #31
   b5b60:	ea48 0849 	orr.w	r8, r8, r9, lsl #1
    SELECT_IF_NON_ZERO(39332535)
   b5b64:	f343 7400 	sbfx	r4, r3, #28, #1
   b5b68:	3e01      	subs	r6, #1
   b5b6a:	402e      	ands	r6, r5
   b5b6c:	ea04 0408 	and.w	r4, r4, r8
    mult = mult + (q63_t)m1 * m2;
   b5b70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; b5c44 <arm_nn_softmax_common_s8+0x944>
    SELECT_IF_NON_ZERO(39332535)
   b5b74:	4074      	eors	r4, r6
    mult = mult + (q63_t)m1 * m2;
   b5b76:	4681      	mov	r9, r0
   b5b78:	460e      	mov	r6, r1
   b5b7a:	fbc4 6908 	smlal	r6, r9, r4, r8
    SELECT_IF_NON_ZERO(720401)
   b5b7e:	f3c3 7540 	ubfx	r5, r3, #29, #1
    result = (int32_t)(mult / (1ll << 31));
   b5b82:	0ff6      	lsrs	r6, r6, #31
   b5b84:	ea46 0649 	orr.w	r6, r6, r9, lsl #1
    SELECT_IF_NON_ZERO(720401)
   b5b88:	f343 7840 	sbfx	r8, r3, #29, #1
   b5b8c:	3d01      	subs	r5, #1
   b5b8e:	4025      	ands	r5, r4
   b5b90:	ea08 0606 	and.w	r6, r8, r6
   b5b94:	406e      	eors	r6, r5
    mult = mult + (q63_t)m1 * m2;
   b5b96:	24f2      	movs	r4, #242	; 0xf2
   b5b98:	fbc6 1004 	smlal	r1, r0, r6, r4
    SELECT_IF_NON_ZERO(242)
   b5b9c:	f3c3 7980 	ubfx	r9, r3, #30, #1
    result = (int32_t)(mult / (1ll << 31));
   b5ba0:	0fc9      	lsrs	r1, r1, #31
   b5ba2:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    SELECT_IF_NON_ZERO(242)
   b5ba6:	f343 7380 	sbfx	r3, r3, #30, #1
   b5baa:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    mask = MASK_IF_ZERO(val);
   b5bae:	fab2 f282 	clz	r2, r2
    SELECT_IF_NON_ZERO(242)
   b5bb2:	4019      	ands	r1, r3
    mask = MASK_IF_ZERO(val);
   b5bb4:	0952      	lsrs	r2, r2, #5
    SELECT_IF_NON_ZERO(242)
   b5bb6:	ea09 0606 	and.w	r6, r9, r6
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
   b5bba:	1e50      	subs	r0, r2, #1
    SELECT_IF_NON_ZERO(242)
   b5bbc:	4071      	eors	r1, r6
    mask = MASK_IF_ZERO(val);
   b5bbe:	4252      	negs	r2, r2
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
   b5bc0:	4001      	ands	r1, r0
   b5bc2:	f022 4000 	bic.w	r0, r2, #2147483648	; 0x80000000
    result = (int32_t)(mult / (1ll << 31));
   b5bc6:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
   b5bca:	4048      	eors	r0, r1
    result = (int32_t)(mult / (1ll << 31));
   b5bcc:	9906      	ldr	r1, [sp, #24]
   b5bce:	fbc1 3200 	smlal	r3, r2, r1, r0
   b5bd2:	2a00      	cmp	r2, #0
   b5bd4:	4614      	mov	r4, r2
   b5bd6:	da04      	bge.n	b5be2 <arm_nn_softmax_common_s8+0x8e2>
   b5bd8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b5bdc:	189b      	adds	r3, r3, r2
   b5bde:	f144 0400 	adc.w	r4, r4, #0
    int32_t remainder = remainder_mask & dividend;
   b5be2:	9a07      	ldr	r2, [sp, #28]
    q31_t threshold = remainder_mask >> 1;
   b5be4:	9808      	ldr	r0, [sp, #32]
   b5be6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    result = (int32_t)(mult / (1ll << 31));
   b5be8:	0fdb      	lsrs	r3, r3, #31
   b5bea:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    int32_t remainder = remainder_mask & dividend;
   b5bee:	401a      	ands	r2, r3
    q31_t threshold = remainder_mask >> 1;
   b5bf0:	fa53 f30a 	asrs.w	r3, r3, sl
   b5bf4:	bf58      	it	pl
   b5bf6:	4601      	movpl	r1, r0
    if (remainder > threshold)
   b5bf8:	428a      	cmp	r2, r1
        result++;
   b5bfa:	bfc8      	it	gt
   b5bfc:	3301      	addgt	r3, #1
                    const int32_t res =
   b5bfe:	3b80      	subs	r3, #128	; 0x80
                    output_s8[col] = (int8_t)CLAMP(res, (int32_t)NN_Q7_MAX, (int32_t)NN_Q7_MIN);
   b5c00:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
   b5c04:	db08      	blt.n	b5c18 <arm_nn_softmax_common_s8+0x918>
   b5c06:	2b7e      	cmp	r3, #126	; 0x7e
   b5c08:	dc09      	bgt.n	b5c1e <arm_nn_softmax_common_s8+0x91e>
   b5c0a:	b25b      	sxtb	r3, r3
                    output_s8[col] = NN_Q7_MIN;
   b5c0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b5c0e:	f802 300c 	strb.w	r3, [r2, ip]
            for (col = 0; col < row_size; ++col)
   b5c12:	f10c 0c01 	add.w	ip, ip, #1
   b5c16:	e507      	b.n	b5628 <arm_nn_softmax_common_s8+0x328>
                    output_s8[col] = (int8_t)CLAMP(res, (int32_t)NN_Q7_MAX, (int32_t)NN_Q7_MIN);
   b5c18:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   b5c1c:	e7f6      	b.n	b5c0c <arm_nn_softmax_common_s8+0x90c>
   b5c1e:	237f      	movs	r3, #127	; 0x7f
   b5c20:	e7f4      	b.n	b5c0c <arm_nn_softmax_common_s8+0x90c>
                    output_s8[col] = NN_Q7_MIN;
   b5c22:	2380      	movs	r3, #128	; 0x80
   b5c24:	e7f2      	b.n	b5c0c <arm_nn_softmax_common_s8+0x90c>
   b5c26:	bf00      	nop
   b5c28:	2aaaaaab 	.word	0x2aaaaaab
   b5c2c:	70f5a894 	.word	0x70f5a894
   b5c30:	63afbe7b 	.word	0x63afbe7b
   b5c34:	4da2cbf2 	.word	0x4da2cbf2
   b5c38:	2f16ac6c 	.word	0x2f16ac6c
   b5c3c:	1152aaa4 	.word	0x1152aaa4
   b5c40:	02582ab7 	.word	0x02582ab7
   b5c44:	000afe11 	.word	0x000afe11

000b5c48 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
   b5c48:	b51f      	push	{r0, r1, r2, r3, r4, lr}

        input += row_size;
        output += row_size;
    }
#else
    arm_nn_softmax_common_s8(input, num_rows, row_size, mult, shift, diff_min, false, (void *)output);
   b5c4a:	9c08      	ldr	r4, [sp, #32]
   b5c4c:	9403      	str	r4, [sp, #12]
   b5c4e:	2400      	movs	r4, #0
   b5c50:	9402      	str	r4, [sp, #8]
   b5c52:	9c07      	ldr	r4, [sp, #28]
   b5c54:	9401      	str	r4, [sp, #4]
   b5c56:	9c06      	ldr	r4, [sp, #24]
   b5c58:	9400      	str	r4, [sp, #0]
   b5c5a:	f7ff fb51 	bl	b5300 <arm_nn_softmax_common_s8>
#endif
}
   b5c5e:	b004      	add	sp, #16
   b5c60:	bd10      	pop	{r4, pc}

000b5c62 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b5c62:	4770      	bx	lr

000b5c64 <_ZNSt17_Function_handlerIFvPvEZN2ei5numpy14welch_max_holdEPfjS4_jjjbEUlS0_E_E9_M_invokeERKSt9_Any_dataOS0_>:
};
#endif // #if EIDSP_TRACK_ALLOCATIONS

// This needs to be a real function so I can bind with a lambda
__attribute__((unused)) static void ei_dsp_free_func(void *ptr, size_t size) {
    ei_free(ptr);
   b5c64:	6808      	ldr	r0, [r1, #0]
   b5c66:	f006 b9cb 	b.w	bc000 <_Z7ei_freePv>
	...

000b5c6c <_Z20raw_feature_get_datajjPf>:
void loop();

static float features[200];

int raw_feature_get_data(size_t offset, size_t length, float *out_ptr)
{
   b5c6c:	b508      	push	{r3, lr}
   b5c6e:	4613      	mov	r3, r2
    memcpy(out_ptr, features + offset, length * sizeof(float));
   b5c70:	008a      	lsls	r2, r1, #2
   b5c72:	4904      	ldr	r1, [pc, #16]	; (b5c84 <_Z20raw_feature_get_datajjPf+0x18>)
   b5c74:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   b5c78:	4618      	mov	r0, r3
   b5c7a:	f00d faa1 	bl	c31c0 <memcpy>
    return 0;
}
   b5c7e:	2000      	movs	r0, #0
   b5c80:	bd08      	pop	{r3, pc}
   b5c82:	bf00      	nop
   b5c84:	2003d458 	.word	0x2003d458

000b5c88 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_highpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
   b5c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c8c:	ed2d 8b06 	vpush	{d8-d10}
   b5c90:	b093      	sub	sp, #76	; 0x4c
   b5c92:	4683      	mov	fp, r0
   b5c94:	ed8d 0a10 	vstr	s0, [sp, #64]	; 0x40
   b5c98:	edcd 0a11 	vstr	s1, [sp, #68]	; 0x44
   b5c9c:	9105      	str	r1, [sp, #20]
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
        int n_steps = filter_order / 2;
   b5c9e:	ea4f 0a61 	mov.w	sl, r1, asr #1
        for (size_t row = 0; row < matrix->rows; row++) {
   b5ca2:	2300      	movs	r3, #0
   b5ca4:	9301      	str	r3, [sp, #4]
   b5ca6:	9a01      	ldr	r2, [sp, #4]
   b5ca8:	f8db 3004 	ldr.w	r3, [fp, #4]
   b5cac:	4293      	cmp	r3, r2
   b5cae:	f240 8162 	bls.w	b5f76 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x2ee>
            filters::butterworth_highpass(
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
   b5cb2:	f8db 3000 	ldr.w	r3, [fp]
   b5cb6:	9306      	str	r3, [sp, #24]
   b5cb8:	f8db 3008 	ldr.w	r3, [fp, #8]
        float a = tan(M_PI * cutoff_freq / sampling_freq);
   b5cbc:	9811      	ldr	r0, [sp, #68]	; 0x44
   b5cbe:	9307      	str	r3, [sp, #28]
   b5cc0:	4353      	muls	r3, r2
   b5cc2:	9308      	str	r3, [sp, #32]
   b5cc4:	f7fe fb10 	bl	b42e8 <__aeabi_f2d>
   b5cc8:	a3af      	add	r3, pc, #700	; (adr r3, b5f88 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x300>)
   b5cca:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5cce:	f7fe fb63 	bl	b4398 <__aeabi_dmul>
   b5cd2:	4604      	mov	r4, r0
   b5cd4:	9810      	ldr	r0, [sp, #64]	; 0x40
   b5cd6:	460d      	mov	r5, r1
   b5cd8:	f7fe fb06 	bl	b42e8 <__aeabi_f2d>
   b5cdc:	460b      	mov	r3, r1
   b5cde:	4602      	mov	r2, r0
   b5ce0:	4629      	mov	r1, r5
   b5ce2:	4620      	mov	r0, r4
   b5ce4:	f7fe fc82 	bl	b45ec <__aeabi_ddiv>
   b5ce8:	ec41 0b10 	vmov	d0, r0, r1
   b5cec:	f00b fd08 	bl	c1700 <tan>
   b5cf0:	ec51 0b10 	vmov	r0, r1, d0
   b5cf4:	f7fe fe48 	bl	b4988 <__aeabi_d2f>
   b5cf8:	ee08 0a10 	vmov	s16, r0
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b5cfc:	f7fe faf4 	bl	b42e8 <__aeabi_f2d>
   b5d00:	ec41 0b1a 	vmov	d10, r0, r1
        float a2 = pow(a, 2);
        float *A = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b5d04:	2104      	movs	r1, #4
   b5d06:	4650      	mov	r0, sl
   b5d08:	f006 f978 	bl	bbffc <_Z9ei_callocjj>
        float *d1 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b5d0c:	2104      	movs	r1, #4
        float *A = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b5d0e:	9002      	str	r0, [sp, #8]
        float *d1 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b5d10:	4650      	mov	r0, sl
   b5d12:	f006 f973 	bl	bbffc <_Z9ei_callocjj>
        float *d2 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b5d16:	2104      	movs	r1, #4
        float *d1 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b5d18:	9003      	str	r0, [sp, #12]
        float *d2 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b5d1a:	4650      	mov	r0, sl
   b5d1c:	f006 f96e 	bl	bbffc <_Z9ei_callocjj>
        float *w0 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b5d20:	2104      	movs	r1, #4
        float *d2 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b5d22:	9004      	str	r0, [sp, #16]
        float *w0 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b5d24:	4650      	mov	r0, sl
   b5d26:	f006 f969 	bl	bbffc <_Z9ei_callocjj>
        float *w1 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b5d2a:	2104      	movs	r1, #4
        float *w0 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b5d2c:	9009      	str	r0, [sp, #36]	; 0x24
        float *w1 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b5d2e:	4650      	mov	r0, sl
   b5d30:	f006 f964 	bl	bbffc <_Z9ei_callocjj>
        float *w2 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b5d34:	2104      	movs	r1, #4
        float *w1 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b5d36:	900a      	str	r0, [sp, #40]	; 0x28
        float *w2 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b5d38:	4650      	mov	r0, sl
   b5d3a:	f006 f95f 	bl	bbffc <_Z9ei_callocjj>
   b5d3e:	e9dd 3503 	ldrd	r3, r5, [sp, #12]
   b5d42:	ee28 8a08 	vmul.f32	s16, s16, s16
   b5d46:	930d      	str	r3, [sp, #52]	; 0x34
   b5d48:	9b02      	ldr	r3, [sp, #8]
   b5d4a:	900b      	str	r0, [sp, #44]	; 0x2c
   b5d4c:	930c      	str	r3, [sp, #48]	; 0x30

        // Calculate the filter parameters
        for (int ix = 0; ix < n_steps; ix++) {
   b5d4e:	2400      	movs	r4, #0
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
            A[ix] = 1.0f / sampling_freq;
   b5d50:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
        for (int ix = 0; ix < n_steps; ix++) {
   b5d54:	45a2      	cmp	sl, r4
   b5d56:	dc6f      	bgt.n	b5e38 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x1b0>
   b5d58:	9a08      	ldr	r2, [sp, #32]
   b5d5a:	9b06      	ldr	r3, [sp, #24]
   b5d5c:	eb03 0982 	add.w	r9, r3, r2, lsl #2
   b5d60:	9b07      	ldr	r3, [sp, #28]
   b5d62:	4413      	add	r3, r2
   b5d64:	461e      	mov	r6, r3
   b5d66:	9b06      	ldr	r3, [sp, #24]
   b5d68:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   b5d6c:	9308      	str	r3, [sp, #32]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
   b5d6e:	9b08      	ldr	r3, [sp, #32]
   b5d70:	4599      	cmp	r9, r3
   b5d72:	f000 80eb 	beq.w	b5f4c <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x2c4>
   b5d76:	9b04      	ldr	r3, [sp, #16]
   b5d78:	9307      	str	r3, [sp, #28]
   b5d7a:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
   b5d7e:	9b03      	ldr	r3, [sp, #12]
   b5d80:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   b5d84:	9e02      	ldr	r6, [sp, #8]
   b5d86:	9306      	str	r3, [sp, #24]
            dest[sx] = src[sx];

            for (int i = 0; i < n_steps; i++) {
   b5d88:	2700      	movs	r7, #0
   b5d8a:	45ba      	cmp	sl, r7
   b5d8c:	f340 80db 	ble.w	b5f46 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x2be>
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
   b5d90:	9b06      	ldr	r3, [sp, #24]
   b5d92:	ed95 6a00 	vldr	s12, [r5]
   b5d96:	ecf3 6a01 	vldmia	r3!, {s13}
   b5d9a:	ed94 7a00 	vldr	s14, [r4]
   b5d9e:	9306      	str	r3, [sp, #24]
   b5da0:	9b07      	ldr	r3, [sp, #28]
   b5da2:	ecf3 7a01 	vldmia	r3!, {s15}
   b5da6:	ee67 7a86 	vmul.f32	s15, s15, s12
   b5daa:	9307      	str	r3, [sp, #28]
   b5dac:	eee6 7a87 	vfma.f32	s15, s13, s14
            for (int i = 0; i < n_steps; i++) {
   b5db0:	3701      	adds	r7, #1
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
   b5db2:	ed99 7a00 	vldr	s14, [r9]
   b5db6:	ee77 7a87 	vadd.f32	s15, s15, s14
   b5dba:	edc8 7a00 	vstr	s15, [r8]
                dest[sx] = A[i] * (w0[i] - (2.0 * w1[i]) + w2[i]);
   b5dbe:	ecb6 7a01 	vldmia	r6!, {s14}
   b5dc2:	ee17 0a90 	vmov	r0, s15
   b5dc6:	eeb0 8a47 	vmov.f32	s16, s14
   b5dca:	f7fe fa8d 	bl	b42e8 <__aeabi_f2d>
   b5dce:	ec41 0b19 	vmov	d9, r0, r1
   b5dd2:	f854 0b04 	ldr.w	r0, [r4], #4
   b5dd6:	f7fe fa87 	bl	b42e8 <__aeabi_f2d>
   b5dda:	4602      	mov	r2, r0
   b5ddc:	460b      	mov	r3, r1
   b5dde:	f7fe f925 	bl	b402c <__adddf3>
   b5de2:	4602      	mov	r2, r0
   b5de4:	460b      	mov	r3, r1
   b5de6:	ec51 0b19 	vmov	r0, r1, d9
   b5dea:	f7fe f91d 	bl	b4028 <__aeabi_dsub>
   b5dee:	ec41 0b19 	vmov	d9, r0, r1
   b5df2:	f855 0b04 	ldr.w	r0, [r5], #4
   b5df6:	f7fe fa77 	bl	b42e8 <__aeabi_f2d>
   b5dfa:	4602      	mov	r2, r0
   b5dfc:	460b      	mov	r3, r1
   b5dfe:	ec51 0b19 	vmov	r0, r1, d9
   b5e02:	f7fe f913 	bl	b402c <__adddf3>
   b5e06:	ec41 0b19 	vmov	d9, r0, r1
   b5e0a:	ee18 0a10 	vmov	r0, s16
   b5e0e:	f7fe fa6b 	bl	b42e8 <__aeabi_f2d>
   b5e12:	460b      	mov	r3, r1
   b5e14:	4602      	mov	r2, r0
   b5e16:	ec51 0b19 	vmov	r0, r1, d9
   b5e1a:	f7fe fabd 	bl	b4398 <__aeabi_dmul>
   b5e1e:	f7fe fdb3 	bl	b4988 <__aeabi_d2f>
   b5e22:	f8c9 0000 	str.w	r0, [r9]
                w2[i] = w1[i];
   b5e26:	f854 3c04 	ldr.w	r3, [r4, #-4]
   b5e2a:	f845 3c04 	str.w	r3, [r5, #-4]
                w1[i] = w0[i];
   b5e2e:	f858 3b04 	ldr.w	r3, [r8], #4
   b5e32:	f844 3c04 	str.w	r3, [r4, #-4]
            for (int i = 0; i < n_steps; i++) {
   b5e36:	e7a8      	b.n	b5d8a <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x102>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
   b5e38:	4620      	mov	r0, r4
   b5e3a:	f7fe fa43 	bl	b42c4 <__aeabi_i2d>
   b5e3e:	4602      	mov	r2, r0
   b5e40:	460b      	mov	r3, r1
   b5e42:	f7fe f8f3 	bl	b402c <__adddf3>
   b5e46:	4b52      	ldr	r3, [pc, #328]	; (b5f90 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x308>)
   b5e48:	2200      	movs	r2, #0
   b5e4a:	f7fe f8ef 	bl	b402c <__adddf3>
   b5e4e:	a34e      	add	r3, pc, #312	; (adr r3, b5f88 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x300>)
   b5e50:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5e54:	f7fe faa0 	bl	b4398 <__aeabi_dmul>
   b5e58:	4606      	mov	r6, r0
   b5e5a:	9805      	ldr	r0, [sp, #20]
   b5e5c:	460f      	mov	r7, r1
   b5e5e:	f7fe fa31 	bl	b42c4 <__aeabi_i2d>
   b5e62:	4602      	mov	r2, r0
   b5e64:	460b      	mov	r3, r1
   b5e66:	f7fe f8e1 	bl	b402c <__adddf3>
   b5e6a:	4602      	mov	r2, r0
   b5e6c:	460b      	mov	r3, r1
   b5e6e:	4630      	mov	r0, r6
   b5e70:	4639      	mov	r1, r7
   b5e72:	f7fe fbbb 	bl	b45ec <__aeabi_ddiv>
   b5e76:	ec41 0b10 	vmov	d0, r0, r1
   b5e7a:	f00b fbf9 	bl	c1670 <sin>
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
   b5e7e:	ee18 0a10 	vmov	r0, s16
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
   b5e82:	ec59 8b10 	vmov	r8, r9, d0
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
   b5e86:	f7fe fa2f 	bl	b42e8 <__aeabi_f2d>
   b5e8a:	ec53 2b1a 	vmov	r2, r3, d10
   b5e8e:	ec41 0b19 	vmov	d9, r0, r1
   b5e92:	ec51 0b1a 	vmov	r0, r1, d10
   b5e96:	f7fe f8c9 	bl	b402c <__adddf3>
   b5e9a:	4606      	mov	r6, r0
   b5e9c:	460f      	mov	r7, r1
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
   b5e9e:	4640      	mov	r0, r8
   b5ea0:	4649      	mov	r1, r9
   b5ea2:	f7fe fd71 	bl	b4988 <__aeabi_d2f>
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
   b5ea6:	f7fe fa1f 	bl	b42e8 <__aeabi_f2d>
   b5eaa:	4602      	mov	r2, r0
   b5eac:	460b      	mov	r3, r1
   b5eae:	4630      	mov	r0, r6
   b5eb0:	4639      	mov	r1, r7
   b5eb2:	f7fe fa71 	bl	b4398 <__aeabi_dmul>
   b5eb6:	4602      	mov	r2, r0
   b5eb8:	460b      	mov	r3, r1
   b5eba:	4680      	mov	r8, r0
   b5ebc:	4689      	mov	r9, r1
   b5ebe:	ec51 0b19 	vmov	r0, r1, d9
   b5ec2:	f7fe f8b3 	bl	b402c <__adddf3>
   b5ec6:	2200      	movs	r2, #0
   b5ec8:	4b31      	ldr	r3, [pc, #196]	; (b5f90 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x308>)
   b5eca:	f7fe f8af 	bl	b402c <__adddf3>
   b5ece:	f7fe fd5b 	bl	b4988 <__aeabi_d2f>
   b5ed2:	ee07 0a10 	vmov	s14, r0
            A[ix] = 1.0f / sampling_freq;
   b5ed6:	eec8 7a87 	vdiv.f32	s15, s17, s14
   b5eda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        for (int ix = 0; ix < n_steps; ix++) {
   b5edc:	3401      	adds	r4, #1
            A[ix] = 1.0f / sampling_freq;
   b5ede:	ece3 7a01 	vstmia	r3!, {s15}
   b5ee2:	930c      	str	r3, [sp, #48]	; 0x30
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
   b5ee4:	f7fe fa00 	bl	b42e8 <__aeabi_f2d>
   b5ee8:	ee78 7ac8 	vsub.f32	s15, s17, s16
   b5eec:	4606      	mov	r6, r0
   b5eee:	ee17 0a90 	vmov	r0, s15
   b5ef2:	460f      	mov	r7, r1
   b5ef4:	f7fe f9f8 	bl	b42e8 <__aeabi_f2d>
   b5ef8:	4602      	mov	r2, r0
   b5efa:	460b      	mov	r3, r1
   b5efc:	f7fe f896 	bl	b402c <__adddf3>
   b5f00:	4632      	mov	r2, r6
   b5f02:	463b      	mov	r3, r7
   b5f04:	f7fe fb72 	bl	b45ec <__aeabi_ddiv>
   b5f08:	f7fe fd3e 	bl	b4988 <__aeabi_d2f>
   b5f0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b5f0e:	f843 0b04 	str.w	r0, [r3], #4
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
   b5f12:	4642      	mov	r2, r8
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
   b5f14:	930d      	str	r3, [sp, #52]	; 0x34
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
   b5f16:	ec51 0b19 	vmov	r0, r1, d9
   b5f1a:	464b      	mov	r3, r9
   b5f1c:	f7fe f884 	bl	b4028 <__aeabi_dsub>
   b5f20:	4b1b      	ldr	r3, [pc, #108]	; (b5f90 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x308>)
   b5f22:	2200      	movs	r2, #0
   b5f24:	f7fe f882 	bl	b402c <__adddf3>
   b5f28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b5f2c:	930f      	str	r3, [sp, #60]	; 0x3c
   b5f2e:	900e      	str	r0, [sp, #56]	; 0x38
   b5f30:	4632      	mov	r2, r6
   b5f32:	463b      	mov	r3, r7
   b5f34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   b5f38:	f7fe fb58 	bl	b45ec <__aeabi_ddiv>
   b5f3c:	f7fe fd24 	bl	b4988 <__aeabi_d2f>
   b5f40:	f845 0b04 	str.w	r0, [r5], #4
        for (int ix = 0; ix < n_steps; ix++) {
   b5f44:	e706      	b.n	b5d54 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0xcc>
        for (size_t sx = 0; sx < size; sx++) {
   b5f46:	f109 0904 	add.w	r9, r9, #4
   b5f4a:	e710      	b.n	b5d6e <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0xe6>
            }
        }

        ei_dsp_free(A, n_steps*sizeof(float));
   b5f4c:	9802      	ldr	r0, [sp, #8]
   b5f4e:	f006 f857 	bl	bc000 <_Z7ei_freePv>
        ei_dsp_free(d1, n_steps*sizeof(float));
   b5f52:	9803      	ldr	r0, [sp, #12]
   b5f54:	f006 f854 	bl	bc000 <_Z7ei_freePv>
        ei_dsp_free(d2, n_steps*sizeof(float));
   b5f58:	9804      	ldr	r0, [sp, #16]
   b5f5a:	f006 f851 	bl	bc000 <_Z7ei_freePv>
        ei_dsp_free(w0, n_steps*sizeof(float));
   b5f5e:	9809      	ldr	r0, [sp, #36]	; 0x24
   b5f60:	f006 f84e 	bl	bc000 <_Z7ei_freePv>
        ei_dsp_free(w1, n_steps*sizeof(float));
   b5f64:	980a      	ldr	r0, [sp, #40]	; 0x28
   b5f66:	f006 f84b 	bl	bc000 <_Z7ei_freePv>
        ei_dsp_free(w2, n_steps*sizeof(float));
   b5f6a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   b5f6c:	f006 f848 	bl	bc000 <_Z7ei_freePv>
        for (size_t row = 0; row < matrix->rows; row++) {
   b5f70:	9b01      	ldr	r3, [sp, #4]
   b5f72:	3301      	adds	r3, #1
   b5f74:	e696      	b.n	b5ca4 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x1c>
                matrix->buffer + (row * matrix->cols),
                matrix->cols);
        }

        return EIDSP_OK;
    }
   b5f76:	2000      	movs	r0, #0
   b5f78:	b013      	add	sp, #76	; 0x4c
   b5f7a:	ecbd 8b06 	vpop	{d8-d10}
   b5f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5f82:	bf00      	nop
   b5f84:	f3af 8000 	nop.w
   b5f88:	54442d18 	.word	0x54442d18
   b5f8c:	400921fb 	.word	0x400921fb
   b5f90:	3ff00000 	.word	0x3ff00000

000b5f94 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
   b5f94:	b508      	push	{r3, lr}
	assert(ptr);
   b5f96:	b928      	cbnz	r0, b5fa4 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x10>
   b5f98:	4b06      	ldr	r3, [pc, #24]	; (b5fb4 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x20>)
   b5f9a:	4a07      	ldr	r2, [pc, #28]	; (b5fb8 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x24>)
   b5f9c:	4807      	ldr	r0, [pc, #28]	; (b5fbc <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x28>)
   b5f9e:	216b      	movs	r1, #107	; 0x6b
   b5fa0:	f009 f84e 	bl	bf040 <__assert_func>
	offset_t offset = *((offset_t *)ptr - 1);

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
   b5fa4:	f830 3c02 	ldrh.w	r3, [r0, #-2]
	ei_free(p);
   b5fa8:	1ac0      	subs	r0, r0, r3
}
   b5faa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ei_free(p);
   b5fae:	f006 b827 	b.w	bc000 <_Z7ei_freePv>
   b5fb2:	bf00      	nop
   b5fb4:	000c78a0 	.word	0x000c78a0
   b5fb8:	000c518f 	.word	0x000c518f
   b5fbc:	000c51b8 	.word	0x000c51b8

000b5fc0 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
	assert((align & (align - 1)) == 0);
   b5fc0:	1e43      	subs	r3, r0, #1
   b5fc2:	4203      	tst	r3, r0
{
   b5fc4:	b510      	push	{r4, lr}
   b5fc6:	4604      	mov	r4, r0
	assert((align & (align - 1)) == 0);
   b5fc8:	d005      	beq.n	b5fd6 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x16>
   b5fca:	4b0d      	ldr	r3, [pc, #52]	; (b6000 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x40>)
   b5fcc:	4a0d      	ldr	r2, [pc, #52]	; (b6004 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x44>)
   b5fce:	480e      	ldr	r0, [pc, #56]	; (b6008 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x48>)
   b5fd0:	2148      	movs	r1, #72	; 0x48
   b5fd2:	f009 f835 	bl	bf040 <__assert_func>
	if(align && size)
   b5fd6:	b910      	cbnz	r0, b5fde <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x1e>
	void * ptr = NULL;
   b5fd8:	2400      	movs	r4, #0
}
   b5fda:	4620      	mov	r0, r4
   b5fdc:	bd10      	pop	{r4, pc}
	if(align && size)
   b5fde:	2900      	cmp	r1, #0
   b5fe0:	d0fa      	beq.n	b5fd8 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x18>
		void * p = ei_calloc(size + hdr_size, 1);
   b5fe2:	1c48      	adds	r0, r1, #1
   b5fe4:	4420      	add	r0, r4
   b5fe6:	2101      	movs	r1, #1
   b5fe8:	f006 f808 	bl	bbffc <_Z9ei_callocjj>
		if(p)
   b5fec:	2800      	cmp	r0, #0
   b5fee:	d0f3      	beq.n	b5fd8 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x18>
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
   b5ff0:	1c63      	adds	r3, r4, #1
   b5ff2:	4403      	add	r3, r0
   b5ff4:	4264      	negs	r4, r4
   b5ff6:	401c      	ands	r4, r3
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
   b5ff8:	1a20      	subs	r0, r4, r0
   b5ffa:	f824 0c02 	strh.w	r0, [r4, #-2]
	return ptr;
   b5ffe:	e7ec      	b.n	b5fda <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x1a>
   b6000:	000c522b 	.word	0x000c522b
   b6004:	000c5246 	.word	0x000c5246
   b6008:	000c51b8 	.word	0x000c51b8

000b600c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
   b600c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        if (scale == 1.0f) return EIDSP_OK;

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
   b600e:	6842      	ldr	r2, [r0, #4]
   b6010:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   b6014:	d217      	bcs.n	b6046 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x3a>
   b6016:	6883      	ldr	r3, [r0, #8]
   b6018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   b601c:	d213      	bcs.n	b6046 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x3a>
            return EIDSP_NARROWING;
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   b601e:	6801      	ldr	r1, [r0, #0]
   b6020:	9101      	str	r1, [sp, #4]
   b6022:	b292      	uxth	r2, r2
   b6024:	b29b      	uxth	r3, r3
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   b6026:	9103      	str	r1, [sp, #12]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
   b6028:	4668      	mov	r0, sp
   b602a:	a902      	add	r1, sp, #8
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   b602c:	f8ad 2000 	strh.w	r2, [sp]
   b6030:	f8ad 3002 	strh.w	r3, [sp, #2]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
   b6034:	f8ad 2008 	strh.w	r2, [sp, #8]
   b6038:	f8ad 300a 	strh.w	r3, [sp, #10]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
   b603c:	f7fe ff49 	bl	b4ed2 <arm_mat_scale_f32>
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
    }
   b6040:	b005      	add	sp, #20
   b6042:	f85d fb04 	ldr.w	pc, [sp], #4
            return EIDSP_NARROWING;
   b6046:	4801      	ldr	r0, [pc, #4]	; (b604c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x40>)
   b6048:	e7fa      	b.n	b6040 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x34>
   b604a:	bf00      	nop
   b604c:	fffffc0c 	.word	0xfffffc0c

000b6050 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj.part.0>:
    constexpr EiAlloc(const EiAlloc<U> &) noexcept {}

    T *allocate(size_t n)
    {
        auto bytes = n * sizeof(T);
        auto ptr = ei_dsp_malloc(bytes);
   b6050:	0080      	lsls	r0, r0, #2
   b6052:	f005 bfd1 	b.w	bbff8 <_Z9ei_mallocj>
	...

000b6058 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvSt8functionIFvPvEEE.constprop.0>:
 * @param      output             Pointer to output tensor
 * @param      micro_tensor_arena Pointer to the arena that will be allocated
 *
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_setup(
   b6058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b605c:	4688      	mov	r8, r1
    TfLiteTensor* output,
    TfLiteTensor* output_labels,
    TfLiteTensor* output_scores,
    ei_unique_ptr_t& p_tensor_arena) {

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
   b605e:	6985      	ldr	r5, [r0, #24]
static EI_IMPULSE_ERROR inference_tflite_setup(
   b6060:	4617      	mov	r7, r2
   b6062:	461e      	mov	r6, r3
   b6064:	4604      	mov	r4, r0

    *ctx_start_us = ei_read_timer_us();
   b6066:	f005 feeb 	bl	bbe40 <_Z16ei_read_timer_usv>
   b606a:	e9c8 0100 	strd	r0, r1, [r8]

    TfLiteStatus init_status = graph_config->model_init(ei_aligned_calloc);
   b606e:	4814      	ldr	r0, [pc, #80]	; (b60c0 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvSt8functionIFvPvEEE.constprop.0+0x68>)
   b6070:	686b      	ldr	r3, [r5, #4]
   b6072:	4798      	blx	r3
    if (init_status != kTfLiteOk) {
   b6074:	4601      	mov	r1, r0
   b6076:	b130      	cbz	r0, b6086 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvSt8functionIFvPvEEE.constprop.0+0x2e>
        ei_printf("Failed to initialize the model (error code %d)\n", init_status);
   b6078:	4812      	ldr	r0, [pc, #72]	; (b60c4 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvSt8functionIFvPvEEE.constprop.0+0x6c>)
   b607a:	f005 fee7 	bl	bbe4c <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
   b607e:	f06f 0005 	mvn.w	r0, #5
            return EI_IMPULSE_TFLITE_ERROR;
        }
    }

    return EI_IMPULSE_OK;
}
   b6082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = graph_config->model_input(0, input);
   b6086:	692b      	ldr	r3, [r5, #16]
   b6088:	4639      	mov	r1, r7
   b608a:	4798      	blx	r3
    if (status != kTfLiteOk) {
   b608c:	b9a8      	cbnz	r0, b60ba <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvSt8functionIFvPvEEE.constprop.0+0x62>
    status = graph_config->model_output(block_config->output_data_tensor, output);
   b608e:	696b      	ldr	r3, [r5, #20]
   b6090:	7aa0      	ldrb	r0, [r4, #10]
   b6092:	4631      	mov	r1, r6
   b6094:	4798      	blx	r3
    if (status != kTfLiteOk) {
   b6096:	b980      	cbnz	r0, b60ba <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvSt8functionIFvPvEEE.constprop.0+0x62>
    if (block_config->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
   b6098:	f994 3009 	ldrsb.w	r3, [r4, #9]
   b609c:	2b01      	cmp	r3, #1
   b609e:	d001      	beq.n	b60a4 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvSt8functionIFvPvEEE.constprop.0+0x4c>
    return EI_IMPULSE_OK;
   b60a0:	2000      	movs	r0, #0
   b60a2:	e7ee      	b.n	b6082 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvSt8functionIFvPvEEE.constprop.0+0x2a>
        status = graph_config->model_output(block_config->output_score_tensor, output_scores);
   b60a4:	696b      	ldr	r3, [r5, #20]
   b60a6:	9907      	ldr	r1, [sp, #28]
   b60a8:	7b20      	ldrb	r0, [r4, #12]
   b60aa:	4798      	blx	r3
        if (status != kTfLiteOk) {
   b60ac:	b928      	cbnz	r0, b60ba <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvSt8functionIFvPvEEE.constprop.0+0x62>
        status = graph_config->model_output(block_config->output_labels_tensor, output_labels);
   b60ae:	696b      	ldr	r3, [r5, #20]
   b60b0:	9906      	ldr	r1, [sp, #24]
   b60b2:	7ae0      	ldrb	r0, [r4, #11]
   b60b4:	4798      	blx	r3
        if (status != kTfLiteOk) {
   b60b6:	2800      	cmp	r0, #0
   b60b8:	d0f2      	beq.n	b60a0 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvSt8functionIFvPvEEE.constprop.0+0x48>
            return EI_IMPULSE_TFLITE_ERROR;
   b60ba:	f06f 0002 	mvn.w	r0, #2
   b60be:	e7e0      	b.n	b6082 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvSt8functionIFvPvEEE.constprop.0+0x2a>
   b60c0:	000b5fc1 	.word	0x000b5fc1
   b60c4:	000c527b 	.word	0x000c527b

000b60c8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_.constprop.0>:

  template<typename _RandomAccessIterator, typename _Distance,
	   typename _Tp, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
   b60c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		  _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
   b60ca:	1e53      	subs	r3, r2, #1
   b60cc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   b60d0:	105f      	asrs	r7, r3, #1
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
   b60d2:	4604      	mov	r4, r0
   b60d4:	460d      	mov	r5, r1
   b60d6:	ed8d 0a00 	vstr	s0, [sp]
   b60da:	edcd 0a01 	vstr	s1, [sp, #4]
      while (__secondChild < (__len - 1) / 2)
   b60de:	460b      	mov	r3, r1
   b60e0:	429f      	cmp	r7, r3
   b60e2:	ea4f 06c3 	mov.w	r6, r3, lsl #3
   b60e6:	dd17      	ble.n	b6118 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_.constprop.0+0x50>
	{
	  __secondChild = 2 * (__secondChild + 1);
   b60e8:	1c59      	adds	r1, r3, #1
   b60ea:	004b      	lsls	r3, r1, #1
	  if (__comp(__first + __secondChild,
   b60ec:	1e58      	subs	r0, r3, #1
            peaks.push_back(d);
        }
        sort(peaks.begin(), peaks.end(),
            [](const freq_peak_t & a, const freq_peak_t & b) -> bool
        {
            return a.amplitude > b.amplitude;
   b60ee:	eb04 1101 	add.w	r1, r4, r1, lsl #4
   b60f2:	eb04 0cc0 	add.w	ip, r4, r0, lsl #3
   b60f6:	ed91 7a01 	vldr	s14, [r1, #4]
   b60fa:	eddc 7a01 	vldr	s15, [ip, #4]
		     __first + (__secondChild - 1)))
	    __secondChild--;
   b60fe:	eeb4 7a67 	vcmp.f32	s14, s15
   b6102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6106:	bfc8      	it	gt
   b6108:	4603      	movgt	r3, r0
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
   b610a:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
   b610e:	c903      	ldmia	r1, {r0, r1}
   b6110:	4426      	add	r6, r4
   b6112:	e886 0003 	stmia.w	r6, {r0, r1}
      while (__secondChild < (__len - 1) / 2)
   b6116:	e7e3      	b.n	b60e0 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_.constprop.0+0x18>
	  __holeIndex = __secondChild;
	}
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
   b6118:	07d1      	lsls	r1, r2, #31
   b611a:	d40d      	bmi.n	b6138 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_.constprop.0+0x70>
   b611c:	3a02      	subs	r2, #2
   b611e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b6122:	ebb3 0f62 	cmp.w	r3, r2, asr #1
   b6126:	d107      	bne.n	b6138 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_.constprop.0+0x70>
	{
	  __secondChild = 2 * (__secondChild + 1);
   b6128:	005b      	lsls	r3, r3, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
   b612a:	3301      	adds	r3, #1
   b612c:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
   b6130:	c903      	ldmia	r1, {r0, r1}
   b6132:	19a2      	adds	r2, r4, r6
   b6134:	e882 0003 	stmia.w	r2, {r0, r1}
      _Distance __parent = (__holeIndex - 1) / 2;
   b6138:	1e5a      	subs	r2, r3, #1
   b613a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b613e:	9f00      	ldr	r7, [sp, #0]
   b6140:	eddd 7a01 	vldr	s15, [sp, #4]
   b6144:	1052      	asrs	r2, r2, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
   b6146:	429d      	cmp	r5, r3
      { _M_current += __n; return *this; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current + __n); }
   b6148:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
   b614c:	da12      	bge.n	b6174 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_.constprop.0+0xac>
   b614e:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
   b6152:	ed93 7a01 	vldr	s14, [r3, #4]
   b6156:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b615a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b615e:	dd09      	ble.n	b6174 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_.constprop.0+0xac>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
   b6160:	e893 0003 	ldmia.w	r3, {r0, r1}
	  __parent = (__holeIndex - 1) / 2;
   b6164:	1e53      	subs	r3, r2, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
   b6166:	e886 0003 	stmia.w	r6, {r0, r1}
	  __parent = (__holeIndex - 1) / 2;
   b616a:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
	  __holeIndex = __parent;
   b616e:	4613      	mov	r3, r2
	  __parent = (__holeIndex - 1) / 2;
   b6170:	104a      	asrs	r2, r1, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
   b6172:	e7e8      	b.n	b6146 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_.constprop.0+0x7e>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
   b6174:	6037      	str	r7, [r6, #0]
   b6176:	edc6 7a01 	vstr	s15, [r6, #4]
	}
      __decltype(__gnu_cxx::__ops::__iter_comp_val(_GLIBCXX_MOVE(__comp)))
	__cmp(_GLIBCXX_MOVE(__comp));
      std::__push_heap(__first, __holeIndex, __topIndex,
		       _GLIBCXX_MOVE(__value), __cmp);
    }
   b617a:	b003      	add	sp, #12
   b617c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b617e <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>:

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
   b617e:	b417      	push	{r0, r1, r2, r4}
   b6180:	4603      	mov	r3, r0
   b6182:	460c      	mov	r4, r1
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
	_ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
	_DistanceType;

      _ValueType __value = _GLIBCXX_MOVE(*__result);
   b6184:	e892 0003 	ldmia.w	r2, {r0, r1}
   b6188:	f10d 0c08 	add.w	ip, sp, #8
   b618c:	e90c 0003 	stmdb	ip, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
   b6190:	e893 0003 	ldmia.w	r3, {r0, r1}
      std::__adjust_heap(__first, _DistanceType(0),
   b6194:	ed9d 0a00 	vldr	s0, [sp]
   b6198:	eddd 0a01 	vldr	s1, [sp, #4]
      *__result = _GLIBCXX_MOVE(*__first);
   b619c:	e882 0003 	stmia.w	r2, {r0, r1}
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b61a0:	1ae2      	subs	r2, r4, r3
      std::__adjust_heap(__first, _DistanceType(0),
   b61a2:	10d2      	asrs	r2, r2, #3
   b61a4:	2100      	movs	r1, #0
   b61a6:	4618      	mov	r0, r3
			 _DistanceType(__last - __first),
			 _GLIBCXX_MOVE(__value), __comp);
    }
   b61a8:	b003      	add	sp, #12
   b61aa:	f85d 4b04 	ldr.w	r4, [sp], #4
      std::__adjust_heap(__first, _DistanceType(0),
   b61ae:	f7ff bf8b 	b.w	b60c8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_.constprop.0>

000b61b2 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_.constprop.0>:

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __unguarded_linear_insert(_RandomAccessIterator __last,
   b61b2:	b510      	push	{r4, lr}
			      _Compare __comp)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
	__val = _GLIBCXX_MOVE(*__last);
   b61b4:	6804      	ldr	r4, [r0, #0]
   b61b6:	edd0 7a01 	vldr	s15, [r0, #4]
      operator--() _GLIBCXX_NOEXCEPT
   b61ba:	4603      	mov	r3, r0
   b61bc:	461a      	mov	r2, r3
      _RandomAccessIterator __next = __last;
      --__next;
      while (__comp(__val, __next))
   b61be:	ed13 7a01 	vldr	s14, [r3, #-4]
   b61c2:	eef4 7ac7 	vcmpe.f32	s15, s14
   b61c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b61ca:	f1a3 0308 	sub.w	r3, r3, #8
   b61ce:	dd06      	ble.n	b61de <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_.constprop.0+0x2c>
	{
	  *__last = _GLIBCXX_MOVE(*__next);
   b61d0:	e893 0003 	ldmia.w	r3, {r0, r1}
   b61d4:	f103 0208 	add.w	r2, r3, #8
   b61d8:	e882 0003 	stmia.w	r2, {r0, r1}
	return *this;
   b61dc:	e7ee      	b.n	b61bc <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_.constprop.0+0xa>
	  __last = __next;
	  --__next;
	}
      *__last = _GLIBCXX_MOVE(__val);
   b61de:	6014      	str	r4, [r2, #0]
   b61e0:	edc2 7a01 	vstr	s15, [r2, #4]
    }
   b61e4:	bd10      	pop	{r4, pc}

000b61e6 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_.constprop.0>:

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __insertion_sort(_RandomAccessIterator __first,
   b61e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;
   b61e8:	4288      	cmp	r0, r1
    __insertion_sort(_RandomAccessIterator __first,
   b61ea:	ed2d 8b02 	vpush	{d8}
   b61ee:	4604      	mov	r4, r0
   b61f0:	460e      	mov	r6, r1
      if (__first == __last) return;
   b61f2:	d01e      	beq.n	b6232 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_.constprop.0+0x4c>
      { return __normal_iterator(_M_current + __n); }
   b61f4:	f100 0508 	add.w	r5, r0, #8

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   b61f8:	42ae      	cmp	r6, r5
   b61fa:	d01a      	beq.n	b6232 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_.constprop.0+0x4c>
   b61fc:	ed95 8a01 	vldr	s16, [r5, #4]
	{
	  if (__comp(__i, __first))
   b6200:	edd4 7a01 	vldr	s15, [r4, #4]
   b6204:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b6208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b620c:	dd0d      	ble.n	b622a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_.constprop.0+0x44>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   b620e:	42ac      	cmp	r4, r5
	    {
	      typename iterator_traits<_RandomAccessIterator>::value_type
		__val = _GLIBCXX_MOVE(*__i);
   b6210:	682f      	ldr	r7, [r5, #0]
   b6212:	d005      	beq.n	b6220 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_.constprop.0+0x3a>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b6214:	1b2a      	subs	r2, r5, r4
   b6216:	4621      	mov	r1, r4
   b6218:	f104 0008 	add.w	r0, r4, #8
   b621c:	f00c ffde 	bl	c31dc <memmove>
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
	      *__first = _GLIBCXX_MOVE(__val);
   b6220:	6027      	str	r7, [r4, #0]
   b6222:	ed84 8a01 	vstr	s16, [r4, #4]
	return *this;
   b6226:	3508      	adds	r5, #8
   b6228:	e7e6      	b.n	b61f8 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_.constprop.0+0x12>
	    }
	  else
	    std::__unguarded_linear_insert(__i,
   b622a:	4628      	mov	r0, r5
   b622c:	f7ff ffc1 	bl	b61b2 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_.constprop.0>
   b6230:	e7f9      	b.n	b6226 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_.constprop.0+0x40>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
	}
    }
   b6232:	ecbd 8b02 	vpop	{d8}
   b6236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6238 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_.isra.0>:
      while (__secondChild < (__len - 1) / 2)
   b6238:	1e53      	subs	r3, r2, #1
   b623a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
   b623e:	b5f0      	push	{r4, r5, r6, r7, lr}
      while (__secondChild < (__len - 1) / 2)
   b6240:	105d      	asrs	r5, r3, #1
   b6242:	460b      	mov	r3, r1
   b6244:	429d      	cmp	r5, r3
   b6246:	ea4f 0483 	mov.w	r4, r3, lsl #2
   b624a:	dd16      	ble.n	b627a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_.isra.0+0x42>
	  __secondChild = 2 * (__secondChild + 1);
   b624c:	1c5e      	adds	r6, r3, #1
   b624e:	0073      	lsls	r3, r6, #1
	  if (__comp(__first + __secondChild,
   b6250:	1e5f      	subs	r7, r3, #1
  {
    template<typename _Iterator1, typename _Iterator2>
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 < *__it2; }
   b6252:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
   b6256:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
   b625a:	ed96 7a00 	vldr	s14, [r6]
   b625e:	eddc 7a00 	vldr	s15, [ip]
	    __secondChild--;
   b6262:	eeb4 7a67 	vcmp.f32	s14, s15
   b6266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b626a:	bf48      	it	mi
   b626c:	463b      	movmi	r3, r7
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
   b626e:	eb00 0683 	add.w	r6, r0, r3, lsl #2
   b6272:	4404      	add	r4, r0
   b6274:	6836      	ldr	r6, [r6, #0]
   b6276:	6026      	str	r6, [r4, #0]
      while (__secondChild < (__len - 1) / 2)
   b6278:	e7e4      	b.n	b6244 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_.isra.0+0xc>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
   b627a:	07d5      	lsls	r5, r2, #31
   b627c:	d40c      	bmi.n	b6298 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_.isra.0+0x60>
   b627e:	3a02      	subs	r2, #2
   b6280:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b6284:	ebb3 0f62 	cmp.w	r3, r2, asr #1
   b6288:	d106      	bne.n	b6298 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_.isra.0+0x60>
	  __secondChild = 2 * (__secondChild + 1);
   b628a:	005b      	lsls	r3, r3, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
   b628c:	3301      	adds	r3, #1
   b628e:	eb00 0283 	add.w	r2, r0, r3, lsl #2
   b6292:	4404      	add	r4, r0
   b6294:	6812      	ldr	r2, [r2, #0]
   b6296:	6022      	str	r2, [r4, #0]
      _Distance __parent = (__holeIndex - 1) / 2;
   b6298:	1e5a      	subs	r2, r3, #1
   b629a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b629e:	1052      	asrs	r2, r2, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
   b62a0:	4299      	cmp	r1, r3
      { return __normal_iterator(_M_current + __n); }
   b62a2:	eb00 0483 	add.w	r4, r0, r3, lsl #2
   b62a6:	da10      	bge.n	b62ca <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_.isra.0+0x92>

    template<typename _Iterator, typename _Value>
      _GLIBCXX20_CONSTEXPR
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it < __val; }
   b62a8:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   b62ac:	edd3 7a00 	vldr	s15, [r3]
   b62b0:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b62b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b62b8:	dd07      	ble.n	b62ca <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_.isra.0+0x92>
	  __parent = (__holeIndex - 1) / 2;
   b62ba:	1e53      	subs	r3, r2, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
   b62bc:	edc4 7a00 	vstr	s15, [r4]
	  __parent = (__holeIndex - 1) / 2;
   b62c0:	eb03 74d3 	add.w	r4, r3, r3, lsr #31
	  __holeIndex = __parent;
   b62c4:	4613      	mov	r3, r2
	  __parent = (__holeIndex - 1) / 2;
   b62c6:	1062      	asrs	r2, r4, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
   b62c8:	e7ea      	b.n	b62a0 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_.isra.0+0x68>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
   b62ca:	ed84 0a00 	vstr	s0, [r4]
    }
   b62ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b62d0 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_.isra.0>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   b62d0:	b530      	push	{r4, r5, lr}
	_ValueType;
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
   b62d2:	4603      	mov	r3, r0
   b62d4:	4614      	mov	r4, r2
      for (; __first != __last; ++__first, (void)++__cur)
   b62d6:	428b      	cmp	r3, r1
   b62d8:	d005      	beq.n	b62e6 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_.isra.0+0x16>
			       is_constructible<_Tp, _Args...>>>
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Tp, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   b62da:	b10c      	cbz	r4, b62e0 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_.isra.0+0x10>
   b62dc:	681d      	ldr	r5, [r3, #0]
   b62de:	6025      	str	r5, [r4, #0]
   b62e0:	3304      	adds	r3, #4
   b62e2:	3404      	adds	r4, #4
   b62e4:	e7f7      	b.n	b62d6 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_.isra.0+0x6>
	std::__relocate_object_a(std::__addressof(*__cur),
				 std::__addressof(*__first), __alloc);
      return __cur;
   b62e6:	1a18      	subs	r0, r3, r0
    }
   b62e8:	4410      	add	r0, r2
   b62ea:	bd30      	pop	{r4, r5, pc}

000b62ec <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
   b62ec:	2a01      	cmp	r2, #1
   b62ee:	d102      	bne.n	b62f6 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b62f0:	6001      	str	r1, [r0, #0]

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
   b62f2:	2000      	movs	r0, #0
   b62f4:	4770      	bx	lr
	  switch (__op)
   b62f6:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b62f8:	bf04      	itt	eq
   b62fa:	680b      	ldreq	r3, [r1, #0]
   b62fc:	6003      	streq	r3, [r0, #0]
	      break;
   b62fe:	e7f8      	b.n	b62f2 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6>

000b6300 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   b6300:	2a01      	cmp	r2, #1
   b6302:	d102      	bne.n	b630a <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6304:	6001      	str	r1, [r0, #0]
      }
   b6306:	2000      	movs	r0, #0
   b6308:	4770      	bx	lr
	  switch (__op)
   b630a:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b630c:	bf04      	itt	eq
   b630e:	680b      	ldreq	r3, [r1, #0]
   b6310:	6003      	streq	r3, [r0, #0]
	      break;
   b6312:	e7f8      	b.n	b6306 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000b6314 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6314:	b430      	push	{r4, r5}
   b6316:	460d      	mov	r5, r1
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6318:	6804      	ldr	r4, [r0, #0]
   b631a:	6828      	ldr	r0, [r5, #0]
   b631c:	4611      	mov	r1, r2
   b631e:	681a      	ldr	r2, [r3, #0]
   b6320:	6809      	ldr	r1, [r1, #0]
   b6322:	4623      	mov	r3, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b6324:	bc30      	pop	{r4, r5}
   b6326:	4718      	bx	r3

000b6328 <_ZNSt17_Function_handlerIFvPvEZN2ei5numpy14welch_max_holdEPfjS4_jjjbEUlS0_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	switch (__op)
   b6328:	2a01      	cmp	r2, #1
   b632a:	d102      	bne.n	b6332 <_ZNSt17_Function_handlerIFvPvEZN2ei5numpy14welch_max_holdEPfjS4_jjjbEUlS0_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b632c:	6001      	str	r1, [r0, #0]
      }
   b632e:	2000      	movs	r0, #0
   b6330:	4770      	bx	lr
	  switch (__op)
   b6332:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b6334:	bf04      	itt	eq
   b6336:	680b      	ldreq	r3, [r1, #0]
   b6338:	6003      	streq	r3, [r0, #0]
	      break;
   b633a:	e7f8      	b.n	b632e <_ZNSt17_Function_handlerIFvPvEZN2ei5numpy14welch_max_holdEPfjS4_jjjbEUlS0_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6>

000b633c <_ZNSt17_Function_handlerIFvPvEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   b633c:	2a01      	cmp	r2, #1
   b633e:	d102      	bne.n	b6346 <_ZNSt17_Function_handlerIFvPvEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6340:	6001      	str	r1, [r0, #0]
      }
   b6342:	2000      	movs	r0, #0
   b6344:	4770      	bx	lr
	  switch (__op)
   b6346:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b6348:	bf04      	itt	eq
   b634a:	680b      	ldreq	r3, [r1, #0]
   b634c:	6003      	streq	r3, [r0, #0]
	      break;
   b634e:	e7f8      	b.n	b6342 <_ZNSt17_Function_handlerIFvPvEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000b6350 <_ZNSt17_Function_handlerIFvPvEPS1_E9_M_invokeERKSt9_Any_dataOS0_>:
   b6350:	6803      	ldr	r3, [r0, #0]
   b6352:	6808      	ldr	r0, [r1, #0]
   b6354:	4718      	bx	r3
	...

000b6358 <_ZN5Print7printlnEfi.isra.0>:
        n += println();
        return n;
    }

#ifndef PARTICLE_WIRING_PRINT_NO_FLOAT
    size_t println(float num, int digits = FLOAT_DEFAULT_FRACTIONAL_DIGITS) {
   b6358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b635c:	4682      	mov	sl, r0
   b635e:	ed2d 8b02 	vpush	{d8}
        return println((double)num, digits);
   b6362:	ee10 0a10 	vmov	r0, s0
    size_t println(float num, int digits = FLOAT_DEFAULT_FRACTIONAL_DIGITS) {
   b6366:	eeb0 8a40 	vmov.f32	s16, s0
   b636a:	468b      	mov	fp, r1
        return println((double)num, digits);
   b636c:	f7fd ffbc 	bl	b42e8 <__aeabi_f2d>
        if (std::isnan(number)) {
   b6370:	4602      	mov	r2, r0
   b6372:	460b      	mov	r3, r1
        return println((double)num, digits);
   b6374:	4604      	mov	r4, r0
   b6376:	460d      	mov	r5, r1
   b6378:	4606      	mov	r6, r0
   b637a:	460f      	mov	r7, r1
        if (std::isnan(number)) {
   b637c:	f7fe faa6 	bl	b48cc <__aeabi_dcmpun>
   b6380:	b150      	cbz	r0, b6398 <_ZN5Print7printlnEfi.isra.0+0x40>
            return print("nan");
   b6382:	494d      	ldr	r1, [pc, #308]	; (b64b8 <_ZN5Print7printlnEfi.isra.0+0x160>)
            return print("inf");
   b6384:	4650      	mov	r0, sl
   b6386:	f00a faf1 	bl	c096c <_ZN5Print5printEPKc>
    }
   b638a:	ecbd 8b02 	vpop	{d8}

    size_t println(double num, int digits = FLOAT_DEFAULT_FRACTIONAL_DIGITS) {
        size_t n = print(num, digits);
        n += println();
   b638e:	4650      	mov	r0, sl
    }
   b6390:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        n += println();
   b6394:	f00a baf1 	b.w	c097a <_ZN5Print7printlnEv>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b6398:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
        if (std::isinf(number)) {
   b639c:	4b47      	ldr	r3, [pc, #284]	; (b64bc <_ZN5Print7printlnEfi.isra.0+0x164>)
   b639e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b63a2:	4620      	mov	r0, r4
   b63a4:	4649      	mov	r1, r9
   b63a6:	f7fe fa91 	bl	b48cc <__aeabi_dcmpun>
   b63aa:	b948      	cbnz	r0, b63c0 <_ZN5Print7printlnEfi.isra.0+0x68>
   b63ac:	4b43      	ldr	r3, [pc, #268]	; (b64bc <_ZN5Print7printlnEfi.isra.0+0x164>)
   b63ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b63b2:	4620      	mov	r0, r4
   b63b4:	4649      	mov	r1, r9
   b63b6:	f7fe fa6b 	bl	b4890 <__aeabi_dcmple>
   b63ba:	b908      	cbnz	r0, b63c0 <_ZN5Print7printlnEfi.isra.0+0x68>
            return print("inf");
   b63bc:	4940      	ldr	r1, [pc, #256]	; (b64c0 <_ZN5Print7printlnEfi.isra.0+0x168>)
   b63be:	e7e1      	b.n	b6384 <_ZN5Print7printlnEfi.isra.0+0x2c>
        if (number > 4294967040.0) {
   b63c0:	eddf 7a40 	vldr	s15, [pc, #256]	; b64c4 <_ZN5Print7printlnEfi.isra.0+0x16c>
   b63c4:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b63c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b63cc:	dd01      	ble.n	b63d2 <_ZN5Print7printlnEfi.isra.0+0x7a>
            return print ("ovf"); // constant determined empirically
   b63ce:	493e      	ldr	r1, [pc, #248]	; (b64c8 <_ZN5Print7printlnEfi.isra.0+0x170>)
   b63d0:	e7d8      	b.n	b6384 <_ZN5Print7printlnEfi.isra.0+0x2c>
        if (number <-4294967040.0) {
   b63d2:	eddf 7a3e 	vldr	s15, [pc, #248]	; b64cc <_ZN5Print7printlnEfi.isra.0+0x174>
   b63d6:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b63da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b63de:	d4f6      	bmi.n	b63ce <_ZN5Print7printlnEfi.isra.0+0x76>
        if (number < 0.0) {
   b63e0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b63e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b63e8:	d506      	bpl.n	b63f8 <_ZN5Print7printlnEfi.isra.0+0xa0>
            n += print('-');
   b63ea:	212d      	movs	r1, #45	; 0x2d
   b63ec:	4650      	mov	r0, sl
   b63ee:	f00a fac1 	bl	c0974 <_ZN5Print5printEc>
            number = -number;
   b63f2:	4626      	mov	r6, r4
   b63f4:	f105 4700 	add.w	r7, r5, #2147483648	; 0x80000000
        double rounding = 0.5;
   b63f8:	4935      	ldr	r1, [pc, #212]	; (b64d0 <_ZN5Print7printlnEfi.isra.0+0x178>)
            rounding /= 10.0;
   b63fa:	4d36      	ldr	r5, [pc, #216]	; (b64d4 <_ZN5Print7printlnEfi.isra.0+0x17c>)
        return printFloat(n, digits);
   b63fc:	fa5f f88b 	uxtb.w	r8, fp
   b6400:	f04f 0900 	mov.w	r9, #0
        double rounding = 0.5;
   b6404:	2000      	movs	r0, #0
            rounding /= 10.0;
   b6406:	2400      	movs	r4, #0
        for (uint8_t i = 0; i < digits; ++i) {
   b6408:	fa5f f389 	uxtb.w	r3, r9
   b640c:	4598      	cmp	r8, r3
   b640e:	d906      	bls.n	b641e <_ZN5Print7printlnEfi.isra.0+0xc6>
            rounding /= 10.0;
   b6410:	4622      	mov	r2, r4
   b6412:	462b      	mov	r3, r5
   b6414:	f7fe f8ea 	bl	b45ec <__aeabi_ddiv>
        for (uint8_t i = 0; i < digits; ++i) {
   b6418:	f109 0901 	add.w	r9, r9, #1
   b641c:	e7f4      	b.n	b6408 <_ZN5Print7printlnEfi.isra.0+0xb0>
        number += rounding;
   b641e:	4632      	mov	r2, r6
   b6420:	463b      	mov	r3, r7
   b6422:	f7fd fe03 	bl	b402c <__adddf3>
   b6426:	460d      	mov	r5, r1
   b6428:	4604      	mov	r4, r0
        unsigned long int_part = (unsigned long)number;
   b642a:	f7fe fa8d 	bl	b4948 <__aeabi_d2uiz>
   b642e:	4606      	mov	r6, r0
        double remainder = number - (double)int_part;
   b6430:	f7fd ff38 	bl	b42a4 <__aeabi_ui2d>
   b6434:	4602      	mov	r2, r0
   b6436:	460b      	mov	r3, r1
   b6438:	4620      	mov	r0, r4
   b643a:	4629      	mov	r1, r5
   b643c:	f7fd fdf4 	bl	b4028 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6440:	220a      	movs	r2, #10
        double remainder = number - (double)int_part;
   b6442:	4604      	mov	r4, r0
   b6444:	460d      	mov	r5, r1
        return printNumber(val, base) + t;
   b6446:	4650      	mov	r0, sl
   b6448:	4631      	mov	r1, r6
   b644a:	f00a faac 	bl	c09a6 <_ZN5Print11printNumberEmh>
        if (digits > 0) {
   b644e:	f1b8 0f00 	cmp.w	r8, #0
   b6452:	d09a      	beq.n	b638a <_ZN5Print7printlnEfi.isra.0+0x32>
            n += print(".");
   b6454:	4920      	ldr	r1, [pc, #128]	; (b64d8 <_ZN5Print7printlnEfi.isra.0+0x180>)
            remainder *= 10.0;
   b6456:	4f1f      	ldr	r7, [pc, #124]	; (b64d4 <_ZN5Print7printlnEfi.isra.0+0x17c>)
            n += print(".");
   b6458:	4650      	mov	r0, sl
   b645a:	f00a fa87 	bl	c096c <_ZN5Print5printEPKc>
            remainder *= 10.0;
   b645e:	2600      	movs	r6, #0
        while (digits-- > 0) {
   b6460:	f1b8 0f00 	cmp.w	r8, #0
   b6464:	d091      	beq.n	b638a <_ZN5Print7printlnEfi.isra.0+0x32>
            remainder *= 10.0;
   b6466:	4632      	mov	r2, r6
   b6468:	463b      	mov	r3, r7
   b646a:	4620      	mov	r0, r4
   b646c:	4629      	mov	r1, r5
   b646e:	f7fd ff93 	bl	b4398 <__aeabi_dmul>
   b6472:	4604      	mov	r4, r0
   b6474:	460d      	mov	r5, r1
            int toPrint = int(remainder);
   b6476:	f7fe fa3f 	bl	b48f8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b647a:	f1b0 0900 	subs.w	r9, r0, #0
   b647e:	da19      	bge.n	b64b4 <_ZN5Print7printlnEfi.isra.0+0x15c>
            t = print('-');
   b6480:	212d      	movs	r1, #45	; 0x2d
   b6482:	4650      	mov	r0, sl
   b6484:	f00a fa76 	bl	c0974 <_ZN5Print5printEc>
            val = -n;
   b6488:	f1c9 0100 	rsb	r1, r9, #0
        return printNumber(val, base) + t;
   b648c:	220a      	movs	r2, #10
   b648e:	4650      	mov	r0, sl
   b6490:	f00a fa89 	bl	c09a6 <_ZN5Print11printNumberEmh>
            remainder -= toPrint;
   b6494:	4648      	mov	r0, r9
   b6496:	f7fd ff15 	bl	b42c4 <__aeabi_i2d>
   b649a:	4602      	mov	r2, r0
   b649c:	460b      	mov	r3, r1
   b649e:	4620      	mov	r0, r4
   b64a0:	4629      	mov	r1, r5
   b64a2:	f7fd fdc1 	bl	b4028 <__aeabi_dsub>
   b64a6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b64aa:	4604      	mov	r4, r0
   b64ac:	460d      	mov	r5, r1
   b64ae:	fa5f f888 	uxtb.w	r8, r8
        while (digits-- > 0) {
   b64b2:	e7d5      	b.n	b6460 <_ZN5Print7printlnEfi.isra.0+0x108>
            val = n;
   b64b4:	4649      	mov	r1, r9
   b64b6:	e7e9      	b.n	b648c <_ZN5Print7printlnEfi.isra.0+0x134>
   b64b8:	000c52ab 	.word	0x000c52ab
   b64bc:	7fefffff 	.word	0x7fefffff
   b64c0:	000c52af 	.word	0x000c52af
   b64c4:	4f7fffff 	.word	0x4f7fffff
   b64c8:	000c52b3 	.word	0x000c52b3
   b64cc:	cf7fffff 	.word	0xcf7fffff
   b64d0:	3fe00000 	.word	0x3fe00000
   b64d4:	40240000 	.word	0x40240000
   b64d8:	000c78be 	.word	0x000c78be

000b64dc <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b64dc:	4b0a      	ldr	r3, [pc, #40]	; (b6508 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b64de:	b510      	push	{r4, lr}
   b64e0:	4604      	mov	r4, r0
   b64e2:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b64e4:	f009 fb4a 	bl	bfb7c <_ZN5spark10LogManager8instanceEv>
   b64e8:	4621      	mov	r1, r4
   b64ea:	f009 fd94 	bl	c0016 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b64ee:	f00a fd0f 	bl	c0f10 <_Z16_fetch_usbserialv>
   b64f2:	f00a fd01 	bl	c0ef8 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b64f6:	4620      	mov	r0, r4
   b64f8:	4b04      	ldr	r3, [pc, #16]	; (b650c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b64fa:	f840 3b04 	str.w	r3, [r0], #4
   b64fe:	f009 fc13 	bl	bfd28 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b6502:	4620      	mov	r0, r4
   b6504:	bd10      	pop	{r4, pc}
   b6506:	bf00      	nop
   b6508:	000c60cc 	.word	0x000c60cc
   b650c:	000c60b4 	.word	0x000c60b4

000b6510 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b6510:	b510      	push	{r4, lr}
   b6512:	4604      	mov	r4, r0
    }
   b6514:	f7ff ffe2 	bl	b64dc <_ZN5spark16SerialLogHandlerD1Ev>
   b6518:	4620      	mov	r0, r4
   b651a:	2124      	movs	r1, #36	; 0x24
   b651c:	f7fe fcc7 	bl	b4eae <_ZdlPvj>
   b6520:	4620      	mov	r0, r4
   b6522:	bd10      	pop	{r4, pc}
   b6524:	0000      	movs	r0, r0
	...

000b6528 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>:
    {
   b6528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b652c:	ed2d 8b06 	vpush	{d8-d10}
   b6530:	b093      	sub	sp, #76	; 0x4c
   b6532:	4683      	mov	fp, r0
   b6534:	ed8d 0a10 	vstr	s0, [sp, #64]	; 0x40
   b6538:	edcd 0a11 	vstr	s1, [sp, #68]	; 0x44
   b653c:	9105      	str	r1, [sp, #20]
        int n_steps = filter_order / 2;
   b653e:	ea4f 0a61 	mov.w	sl, r1, asr #1
        for (size_t row = 0; row < matrix->rows; row++) {
   b6542:	2300      	movs	r3, #0
   b6544:	9301      	str	r3, [sp, #4]
   b6546:	9a01      	ldr	r2, [sp, #4]
   b6548:	f8db 3004 	ldr.w	r3, [fp, #4]
   b654c:	4293      	cmp	r3, r2
   b654e:	f240 8162 	bls.w	b6816 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x2ee>
                matrix->buffer + (row * matrix->cols),
   b6552:	f8db 3000 	ldr.w	r3, [fp]
   b6556:	9306      	str	r3, [sp, #24]
   b6558:	f8db 3008 	ldr.w	r3, [fp, #8]
        float a = tan(M_PI * cutoff_freq / sampling_freq);
   b655c:	9811      	ldr	r0, [sp, #68]	; 0x44
   b655e:	9307      	str	r3, [sp, #28]
   b6560:	4353      	muls	r3, r2
   b6562:	9308      	str	r3, [sp, #32]
   b6564:	f7fd fec0 	bl	b42e8 <__aeabi_f2d>
   b6568:	a3af      	add	r3, pc, #700	; (adr r3, b6828 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x300>)
   b656a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b656e:	f7fd ff13 	bl	b4398 <__aeabi_dmul>
   b6572:	4604      	mov	r4, r0
   b6574:	9810      	ldr	r0, [sp, #64]	; 0x40
   b6576:	460d      	mov	r5, r1
   b6578:	f7fd feb6 	bl	b42e8 <__aeabi_f2d>
   b657c:	460b      	mov	r3, r1
   b657e:	4602      	mov	r2, r0
   b6580:	4629      	mov	r1, r5
   b6582:	4620      	mov	r0, r4
   b6584:	f7fe f832 	bl	b45ec <__aeabi_ddiv>
   b6588:	ec41 0b10 	vmov	d0, r0, r1
   b658c:	f00b f8b8 	bl	c1700 <tan>
   b6590:	ec51 0b10 	vmov	r0, r1, d0
   b6594:	f7fe f9f8 	bl	b4988 <__aeabi_d2f>
   b6598:	ee08 0a10 	vmov	s16, r0
      return pow(__type(__x), __type(__y));
   b659c:	f7fd fea4 	bl	b42e8 <__aeabi_f2d>
   b65a0:	ec41 0b1a 	vmov	d10, r0, r1
        float *A = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b65a4:	2104      	movs	r1, #4
   b65a6:	4650      	mov	r0, sl
   b65a8:	f005 fd28 	bl	bbffc <_Z9ei_callocjj>
        float *d1 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b65ac:	2104      	movs	r1, #4
        float *A = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b65ae:	9002      	str	r0, [sp, #8]
        float *d1 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b65b0:	4650      	mov	r0, sl
   b65b2:	f005 fd23 	bl	bbffc <_Z9ei_callocjj>
        float *d2 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b65b6:	2104      	movs	r1, #4
        float *d1 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b65b8:	9003      	str	r0, [sp, #12]
        float *d2 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b65ba:	4650      	mov	r0, sl
   b65bc:	f005 fd1e 	bl	bbffc <_Z9ei_callocjj>
        float *w0 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b65c0:	2104      	movs	r1, #4
        float *d2 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b65c2:	9004      	str	r0, [sp, #16]
        float *w0 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b65c4:	4650      	mov	r0, sl
   b65c6:	f005 fd19 	bl	bbffc <_Z9ei_callocjj>
        float *w1 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b65ca:	2104      	movs	r1, #4
        float *w0 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b65cc:	9009      	str	r0, [sp, #36]	; 0x24
        float *w1 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b65ce:	4650      	mov	r0, sl
   b65d0:	f005 fd14 	bl	bbffc <_Z9ei_callocjj>
        float *w2 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b65d4:	2104      	movs	r1, #4
        float *w1 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b65d6:	900a      	str	r0, [sp, #40]	; 0x28
        float *w2 = (float*)ei_dsp_calloc(n_steps, sizeof(float));
   b65d8:	4650      	mov	r0, sl
   b65da:	f005 fd0f 	bl	bbffc <_Z9ei_callocjj>
   b65de:	e9dd 3503 	ldrd	r3, r5, [sp, #12]
   b65e2:	ee28 8a08 	vmul.f32	s16, s16, s16
   b65e6:	930d      	str	r3, [sp, #52]	; 0x34
   b65e8:	9b02      	ldr	r3, [sp, #8]
   b65ea:	900b      	str	r0, [sp, #44]	; 0x2c
   b65ec:	930c      	str	r3, [sp, #48]	; 0x30
        for(int ix = 0; ix < n_steps; ix++) {
   b65ee:	2400      	movs	r4, #0
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
   b65f0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
        for(int ix = 0; ix < n_steps; ix++) {
   b65f4:	45a2      	cmp	sl, r4
   b65f6:	dc6f      	bgt.n	b66d8 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x1b0>
   b65f8:	9a08      	ldr	r2, [sp, #32]
   b65fa:	9b06      	ldr	r3, [sp, #24]
   b65fc:	eb03 0982 	add.w	r9, r3, r2, lsl #2
   b6600:	9b07      	ldr	r3, [sp, #28]
   b6602:	4413      	add	r3, r2
   b6604:	461e      	mov	r6, r3
   b6606:	9b06      	ldr	r3, [sp, #24]
   b6608:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   b660c:	9308      	str	r3, [sp, #32]
        for (size_t sx = 0; sx < size; sx++) {
   b660e:	9b08      	ldr	r3, [sp, #32]
   b6610:	4599      	cmp	r9, r3
   b6612:	f000 80eb 	beq.w	b67ec <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x2c4>
   b6616:	9b04      	ldr	r3, [sp, #16]
   b6618:	9307      	str	r3, [sp, #28]
   b661a:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
   b661e:	9b03      	ldr	r3, [sp, #12]
   b6620:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   b6624:	9e02      	ldr	r6, [sp, #8]
   b6626:	9306      	str	r3, [sp, #24]
            for (int i = 0; i < n_steps; i++) {
   b6628:	2700      	movs	r7, #0
   b662a:	45ba      	cmp	sl, r7
   b662c:	f340 80db 	ble.w	b67e6 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x2be>
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
   b6630:	9b06      	ldr	r3, [sp, #24]
   b6632:	edd5 6a00 	vldr	s13, [r5]
   b6636:	ecb3 7a01 	vldmia	r3!, {s14}
   b663a:	edd4 7a00 	vldr	s15, [r4]
   b663e:	9306      	str	r3, [sp, #24]
   b6640:	9b07      	ldr	r3, [sp, #28]
   b6642:	ecb3 8a01 	vldmia	r3!, {s16}
   b6646:	ee28 8a26 	vmul.f32	s16, s16, s13
   b664a:	9307      	str	r3, [sp, #28]
   b664c:	eea7 8a27 	vfma.f32	s16, s14, s15
            for (int i = 0; i < n_steps; i++) {
   b6650:	3701      	adds	r7, #1
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
   b6652:	edd9 7a00 	vldr	s15, [r9]
   b6656:	ee38 8a27 	vadd.f32	s16, s16, s15
   b665a:	ed88 8a00 	vstr	s16, [r8]
                dest[sx] = A[i] * (w0[i] + (2.0 * w1[i]) + w2[i]);
   b665e:	ecf6 7a01 	vldmia	r6!, {s15}
   b6662:	f854 0b04 	ldr.w	r0, [r4], #4
   b6666:	eef0 8a67 	vmov.f32	s17, s15
   b666a:	f7fd fe3d 	bl	b42e8 <__aeabi_f2d>
   b666e:	4602      	mov	r2, r0
   b6670:	460b      	mov	r3, r1
   b6672:	f7fd fcdb 	bl	b402c <__adddf3>
   b6676:	ec41 0b19 	vmov	d9, r0, r1
   b667a:	ee18 0a10 	vmov	r0, s16
   b667e:	f7fd fe33 	bl	b42e8 <__aeabi_f2d>
   b6682:	4602      	mov	r2, r0
   b6684:	460b      	mov	r3, r1
   b6686:	ec51 0b19 	vmov	r0, r1, d9
   b668a:	f7fd fccf 	bl	b402c <__adddf3>
   b668e:	ec41 0b19 	vmov	d9, r0, r1
   b6692:	f855 0b04 	ldr.w	r0, [r5], #4
   b6696:	f7fd fe27 	bl	b42e8 <__aeabi_f2d>
   b669a:	4602      	mov	r2, r0
   b669c:	460b      	mov	r3, r1
   b669e:	ec51 0b19 	vmov	r0, r1, d9
   b66a2:	f7fd fcc3 	bl	b402c <__adddf3>
   b66a6:	ec41 0b19 	vmov	d9, r0, r1
   b66aa:	ee18 0a90 	vmov	r0, s17
   b66ae:	f7fd fe1b 	bl	b42e8 <__aeabi_f2d>
   b66b2:	460b      	mov	r3, r1
   b66b4:	4602      	mov	r2, r0
   b66b6:	ec51 0b19 	vmov	r0, r1, d9
   b66ba:	f7fd fe6d 	bl	b4398 <__aeabi_dmul>
   b66be:	f7fe f963 	bl	b4988 <__aeabi_d2f>
   b66c2:	f8c9 0000 	str.w	r0, [r9]
                w2[i] = w1[i];
   b66c6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   b66ca:	f845 3c04 	str.w	r3, [r5, #-4]
                w1[i] = w0[i];
   b66ce:	f858 3b04 	ldr.w	r3, [r8], #4
   b66d2:	f844 3c04 	str.w	r3, [r4, #-4]
            for (int i = 0; i < n_steps; i++) {
   b66d6:	e7a8      	b.n	b662a <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x102>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
   b66d8:	4620      	mov	r0, r4
   b66da:	f7fd fdf3 	bl	b42c4 <__aeabi_i2d>
   b66de:	4602      	mov	r2, r0
   b66e0:	460b      	mov	r3, r1
   b66e2:	f7fd fca3 	bl	b402c <__adddf3>
   b66e6:	4b52      	ldr	r3, [pc, #328]	; (b6830 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x308>)
   b66e8:	2200      	movs	r2, #0
   b66ea:	f7fd fc9f 	bl	b402c <__adddf3>
   b66ee:	a34e      	add	r3, pc, #312	; (adr r3, b6828 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x300>)
   b66f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b66f4:	f7fd fe50 	bl	b4398 <__aeabi_dmul>
   b66f8:	4606      	mov	r6, r0
   b66fa:	9805      	ldr	r0, [sp, #20]
   b66fc:	460f      	mov	r7, r1
   b66fe:	f7fd fde1 	bl	b42c4 <__aeabi_i2d>
   b6702:	4602      	mov	r2, r0
   b6704:	460b      	mov	r3, r1
   b6706:	f7fd fc91 	bl	b402c <__adddf3>
   b670a:	4602      	mov	r2, r0
   b670c:	460b      	mov	r3, r1
   b670e:	4630      	mov	r0, r6
   b6710:	4639      	mov	r1, r7
   b6712:	f7fd ff6b 	bl	b45ec <__aeabi_ddiv>
   b6716:	ec41 0b10 	vmov	d0, r0, r1
   b671a:	f00a ffa9 	bl	c1670 <sin>
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
   b671e:	ee18 0a10 	vmov	r0, s16
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
   b6722:	ec59 8b10 	vmov	r8, r9, d0
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
   b6726:	f7fd fddf 	bl	b42e8 <__aeabi_f2d>
   b672a:	ec53 2b1a 	vmov	r2, r3, d10
   b672e:	ec41 0b19 	vmov	d9, r0, r1
   b6732:	ec51 0b1a 	vmov	r0, r1, d10
   b6736:	f7fd fc79 	bl	b402c <__adddf3>
   b673a:	4606      	mov	r6, r0
   b673c:	460f      	mov	r7, r1
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
   b673e:	4640      	mov	r0, r8
   b6740:	4649      	mov	r1, r9
   b6742:	f7fe f921 	bl	b4988 <__aeabi_d2f>
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
   b6746:	f7fd fdcf 	bl	b42e8 <__aeabi_f2d>
   b674a:	4602      	mov	r2, r0
   b674c:	460b      	mov	r3, r1
   b674e:	4630      	mov	r0, r6
   b6750:	4639      	mov	r1, r7
   b6752:	f7fd fe21 	bl	b4398 <__aeabi_dmul>
   b6756:	4602      	mov	r2, r0
   b6758:	460b      	mov	r3, r1
   b675a:	4680      	mov	r8, r0
   b675c:	4689      	mov	r9, r1
   b675e:	ec51 0b19 	vmov	r0, r1, d9
   b6762:	f7fd fc63 	bl	b402c <__adddf3>
   b6766:	2200      	movs	r2, #0
   b6768:	4b31      	ldr	r3, [pc, #196]	; (b6830 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x308>)
   b676a:	f7fd fc5f 	bl	b402c <__adddf3>
   b676e:	f7fe f90b 	bl	b4988 <__aeabi_d2f>
   b6772:	ee07 0a10 	vmov	s14, r0
            A[ix] = a2 / sampling_freq;
   b6776:	eec8 7a07 	vdiv.f32	s15, s16, s14
   b677a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        for(int ix = 0; ix < n_steps; ix++) {
   b677c:	3401      	adds	r4, #1
            A[ix] = a2 / sampling_freq;
   b677e:	ece3 7a01 	vstmia	r3!, {s15}
   b6782:	930c      	str	r3, [sp, #48]	; 0x30
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
   b6784:	f7fd fdb0 	bl	b42e8 <__aeabi_f2d>
   b6788:	ee78 7ac8 	vsub.f32	s15, s17, s16
   b678c:	4606      	mov	r6, r0
   b678e:	ee17 0a90 	vmov	r0, s15
   b6792:	460f      	mov	r7, r1
   b6794:	f7fd fda8 	bl	b42e8 <__aeabi_f2d>
   b6798:	4602      	mov	r2, r0
   b679a:	460b      	mov	r3, r1
   b679c:	f7fd fc46 	bl	b402c <__adddf3>
   b67a0:	4632      	mov	r2, r6
   b67a2:	463b      	mov	r3, r7
   b67a4:	f7fd ff22 	bl	b45ec <__aeabi_ddiv>
   b67a8:	f7fe f8ee 	bl	b4988 <__aeabi_d2f>
   b67ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b67ae:	f843 0b04 	str.w	r0, [r3], #4
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
   b67b2:	4642      	mov	r2, r8
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
   b67b4:	930d      	str	r3, [sp, #52]	; 0x34
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
   b67b6:	ec51 0b19 	vmov	r0, r1, d9
   b67ba:	464b      	mov	r3, r9
   b67bc:	f7fd fc34 	bl	b4028 <__aeabi_dsub>
   b67c0:	4b1b      	ldr	r3, [pc, #108]	; (b6830 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x308>)
   b67c2:	2200      	movs	r2, #0
   b67c4:	f7fd fc32 	bl	b402c <__adddf3>
   b67c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b67cc:	930f      	str	r3, [sp, #60]	; 0x3c
   b67ce:	900e      	str	r0, [sp, #56]	; 0x38
   b67d0:	4632      	mov	r2, r6
   b67d2:	463b      	mov	r3, r7
   b67d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   b67d8:	f7fd ff08 	bl	b45ec <__aeabi_ddiv>
   b67dc:	f7fe f8d4 	bl	b4988 <__aeabi_d2f>
   b67e0:	f845 0b04 	str.w	r0, [r5], #4
        for(int ix = 0; ix < n_steps; ix++) {
   b67e4:	e706      	b.n	b65f4 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0xcc>
        for (size_t sx = 0; sx < size; sx++) {
   b67e6:	f109 0904 	add.w	r9, r9, #4
   b67ea:	e710      	b.n	b660e <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0xe6>
        ei_dsp_free(A, n_steps*sizeof(float));
   b67ec:	9802      	ldr	r0, [sp, #8]
   b67ee:	f005 fc07 	bl	bc000 <_Z7ei_freePv>
        ei_dsp_free(d1, n_steps*sizeof(float));
   b67f2:	9803      	ldr	r0, [sp, #12]
   b67f4:	f005 fc04 	bl	bc000 <_Z7ei_freePv>
        ei_dsp_free(d2, n_steps*sizeof(float));
   b67f8:	9804      	ldr	r0, [sp, #16]
   b67fa:	f005 fc01 	bl	bc000 <_Z7ei_freePv>
        ei_dsp_free(w0, n_steps*sizeof(float));
   b67fe:	9809      	ldr	r0, [sp, #36]	; 0x24
   b6800:	f005 fbfe 	bl	bc000 <_Z7ei_freePv>
        ei_dsp_free(w1, n_steps*sizeof(float));
   b6804:	980a      	ldr	r0, [sp, #40]	; 0x28
   b6806:	f005 fbfb 	bl	bc000 <_Z7ei_freePv>
        ei_dsp_free(w2, n_steps*sizeof(float));
   b680a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   b680c:	f005 fbf8 	bl	bc000 <_Z7ei_freePv>
        for (size_t row = 0; row < matrix->rows; row++) {
   b6810:	9b01      	ldr	r3, [sp, #4]
   b6812:	3301      	adds	r3, #1
   b6814:	e696      	b.n	b6544 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x1c>
    }
   b6816:	2000      	movs	r0, #0
   b6818:	b013      	add	sp, #76	; 0x4c
   b681a:	ecbd 8b06 	vpop	{d8-d10}
   b681e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6822:	bf00      	nop
   b6824:	f3af 8000 	nop.w
   b6828:	54442d18 	.word	0x54442d18
   b682c:	400921fb 	.word	0x400921fb
   b6830:	3ff00000 	.word	0x3ff00000

000b6834 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_.isra.0>:
    __insertion_sort(_RandomAccessIterator __first,
   b6834:	b570      	push	{r4, r5, r6, lr}
      if (__first == __last) return;
   b6836:	4288      	cmp	r0, r1
    __insertion_sort(_RandomAccessIterator __first,
   b6838:	ed2d 8b02 	vpush	{d8}
   b683c:	4604      	mov	r4, r0
   b683e:	460e      	mov	r6, r1
      if (__first == __last) return;
   b6840:	d025      	beq.n	b688e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_.isra.0+0x5a>
   b6842:	1d05      	adds	r5, r0, #4
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   b6844:	42ae      	cmp	r6, r5
   b6846:	d022      	beq.n	b688e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_.isra.0+0x5a>
      { return *__it1 < *__it2; }
   b6848:	ed95 8a00 	vldr	s16, [r5]
	  if (__comp(__i, __first))
   b684c:	edd4 7a00 	vldr	s15, [r4]
   b6850:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b6854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6858:	d50a      	bpl.n	b6870 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_.isra.0+0x3c>
	  if (_Num)
   b685a:	42ac      	cmp	r4, r5
   b685c:	d004      	beq.n	b6868 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_.isra.0+0x34>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b685e:	1b2a      	subs	r2, r5, r4
   b6860:	4621      	mov	r1, r4
   b6862:	1d20      	adds	r0, r4, #4
   b6864:	f00c fcba 	bl	c31dc <memmove>
	      *__first = _GLIBCXX_MOVE(__val);
   b6868:	ed84 8a00 	vstr	s16, [r4]
	return *this;
   b686c:	3504      	adds	r5, #4
   b686e:	e7e9      	b.n	b6844 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_.isra.0+0x10>
   b6870:	462b      	mov	r3, r5
   b6872:	461a      	mov	r2, r3

    template<typename _Value, typename _Iterator>
      _GLIBCXX20_CONSTEXPR
      bool
      operator()(_Value& __val, _Iterator __it) const
      { return __val < *__it; }
   b6874:	ed73 7a01 	vldmdb	r3!, {s15}
      while (__comp(__val, __next))
   b6878:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b687c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6880:	d502      	bpl.n	b6888 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_.isra.0+0x54>
	  *__last = _GLIBCXX_MOVE(*__next);
   b6882:	edc3 7a01 	vstr	s15, [r3, #4]
	return *this;
   b6886:	e7f4      	b.n	b6872 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_.isra.0+0x3e>
      *__last = _GLIBCXX_MOVE(__val);
   b6888:	ed82 8a00 	vstr	s16, [r2]
   b688c:	e7ee      	b.n	b686c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_.isra.0+0x38>
    }
   b688e:	ecbd 8b02 	vpop	{d8}
   b6892:	bd70      	pop	{r4, r5, r6, pc}

000b6894 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>:

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __introsort_loop(_RandomAccessIterator __first,
   b6894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b6898:	4604      	mov	r4, r0
   b689a:	4617      	mov	r7, r2
   b689c:	4699      	mov	r9, r3
   b689e:	460d      	mov	r5, r1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b68a0:	f100 0808 	add.w	r8, r0, #8
    { return __lhs.base() - __rhs.base(); }
   b68a4:	1b2e      	subs	r6, r5, r4
		     _RandomAccessIterator __last,
		     _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
   b68a6:	2e80      	cmp	r6, #128	; 0x80
   b68a8:	f340 8093 	ble.w	b69d2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x13e>
   b68ac:	ea4f 0ae6 	mov.w	sl, r6, asr #3
	{
	  if (__depth_limit == 0)
   b68b0:	bb1f      	cbnz	r7, b68fa <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x66>

      if (__last - __first < 2)
	return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
   b68b2:	f1aa 0602 	sub.w	r6, sl, #2
   b68b6:	f88d 9004 	strb.w	r9, [sp, #4]
   b68ba:	1076      	asrs	r6, r6, #1
      while (true)
	{
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
   b68bc:	af02      	add	r7, sp, #8
   b68be:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   b68c2:	e893 0003 	ldmia.w	r3, {r0, r1}
   b68c6:	e887 0003 	stmia.w	r7, {r0, r1}
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
   b68ca:	4652      	mov	r2, sl
   b68cc:	ed9d 0a02 	vldr	s0, [sp, #8]
   b68d0:	eddd 0a03 	vldr	s1, [sp, #12]
   b68d4:	4631      	mov	r1, r6
   b68d6:	4620      	mov	r0, r4
   b68d8:	f7ff fbf6 	bl	b60c8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_.constprop.0>
			     __comp);
	  if (__parent == 0)
   b68dc:	b10e      	cbz	r6, b68e2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x4e>
	    return;
	  __parent--;
   b68de:	3e01      	subs	r6, #1
      while (true)
   b68e0:	e7ed      	b.n	b68be <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x2a>
   b68e2:	1b2b      	subs	r3, r5, r4
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
		_Compare& __comp)
    {
      while (__last - __first > 1)
   b68e4:	2b08      	cmp	r3, #8
   b68e6:	f1a5 0508 	sub.w	r5, r5, #8
   b68ea:	dd72      	ble.n	b69d2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x13e>
	{
	  --__last;
	  std::__pop_heap(__first, __last, __last, __comp);
   b68ec:	ab01      	add	r3, sp, #4
   b68ee:	462a      	mov	r2, r5
   b68f0:	4629      	mov	r1, r5
   b68f2:	4620      	mov	r0, r4
   b68f4:	f7ff fc43 	bl	b617e <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>
      while (__last - __first > 1)
   b68f8:	e7f3      	b.n	b68e2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x4e>
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
   b68fa:	1136      	asrs	r6, r6, #4
      { return __normal_iterator(_M_current + __n); }
   b68fc:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
            return a.amplitude > b.amplitude;
   b6900:	edd4 6a03 	vldr	s13, [r4, #12]
   b6904:	ed96 7a01 	vldr	s14, [r6, #4]
   b6908:	ed55 7a01 	vldr	s15, [r5, #-4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b690c:	6822      	ldr	r2, [r4, #0]
   b690e:	6863      	ldr	r3, [r4, #4]
      if (__comp(__a, __b))
   b6910:	eef4 6ac7 	vcmpe.f32	s13, s14
   b6914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	    {
	      std::__partial_sort(__first, __last, __last, __comp);
	      return;
	    }
	  --__depth_limit;
   b6918:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
      if (__comp(__a, __b))
   b691c:	dd19      	ble.n	b6952 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0xbe>
	  if (__comp(__b, __c))
   b691e:	eef4 7ac7 	vcmpe.f32	s15, s14
   b6922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6926:	d506      	bpl.n	b6936 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0xa2>
      __a = _GLIBCXX_MOVE(__b);
   b6928:	e896 0003 	ldmia.w	r6, {r0, r1}
   b692c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6930:	6032      	str	r2, [r6, #0]
   b6932:	6073      	str	r3, [r6, #4]
    }
   b6934:	e018      	b.n	b6968 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0xd4>
	  else if (__comp(__a, __c))
   b6936:	eef4 7ae6 	vcmpe.f32	s15, s13
   b693a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b693e:	d50d      	bpl.n	b695c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0xc8>
      __a = _GLIBCXX_MOVE(__b);
   b6940:	e915 0003 	ldmdb	r5, {r0, r1}
   b6944:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6948:	f845 2c08 	str.w	r2, [r5, #-8]
   b694c:	f845 3c04 	str.w	r3, [r5, #-4]
    }
   b6950:	e00a      	b.n	b6968 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0xd4>
      else if (__comp(__a, __c))
   b6952:	eef4 7ae6 	vcmpe.f32	s15, s13
   b6956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b695a:	d529      	bpl.n	b69b0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x11c>
      __a = _GLIBCXX_MOVE(__b);
   b695c:	e898 0003 	ldmia.w	r8, {r0, r1}
   b6960:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6964:	60a2      	str	r2, [r4, #8]
   b6966:	60e3      	str	r3, [r4, #12]
    __unguarded_partition(_RandomAccessIterator __first,
   b6968:	f104 0310 	add.w	r3, r4, #16
      while (__last - __first > int(_S_threshold))
   b696c:	462e      	mov	r6, r5
   b696e:	ed53 7a01 	vldr	s15, [r3, #-4]
   b6972:	ed94 7a01 	vldr	s14, [r4, #4]
	  while (__comp(__first, __pivot))
   b6976:	eef4 7ac7 	vcmpe.f32	s15, s14
   b697a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b697e:	f1a3 0a08 	sub.w	sl, r3, #8
   b6982:	dc24      	bgt.n	b69ce <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x13a>
	--_M_current;
   b6984:	f1a6 0208 	sub.w	r2, r6, #8
   b6988:	4616      	mov	r6, r2
	  while (__comp(__pivot, __last))
   b698a:	edd2 6a01 	vldr	s13, [r2, #4]
   b698e:	eeb4 7ae6 	vcmpe.f32	s14, s13
   b6992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6996:	f1a2 0208 	sub.w	r2, r2, #8
   b699a:	dcf5      	bgt.n	b6988 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0xf4>
	  if (!(__first < __last))
   b699c:	4556      	cmp	r6, sl
   b699e:	d80d      	bhi.n	b69bc <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x128>
	  _RandomAccessIterator __cut =
	    std::__unguarded_partition_pivot(__first, __last, __comp);
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   b69a0:	4629      	mov	r1, r5
   b69a2:	464b      	mov	r3, r9
   b69a4:	463a      	mov	r2, r7
   b69a6:	4650      	mov	r0, sl
   b69a8:	f7ff ff74 	bl	b6894 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>
      while (__last - __first > int(_S_threshold))
   b69ac:	4655      	mov	r5, sl
   b69ae:	e779      	b.n	b68a4 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x10>
      else if (__comp(__b, __c))
   b69b0:	eef4 7ac7 	vcmpe.f32	s15, s14
   b69b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b69b8:	d5b6      	bpl.n	b6928 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x94>
   b69ba:	e7c1      	b.n	b6940 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0xac>
      __a = _GLIBCXX_MOVE(__b);
   b69bc:	e896 0003 	ldmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b69c0:	f853 2c08 	ldr.w	r2, [r3, #-8]
      __a = _GLIBCXX_MOVE(__b);
   b69c4:	e88a 0003 	stmia.w	sl, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b69c8:	6032      	str	r2, [r6, #0]
   b69ca:	edc6 7a01 	vstr	s15, [r6, #4]
      operator++() _GLIBCXX_NOEXCEPT
   b69ce:	3308      	adds	r3, #8
   b69d0:	e7cd      	b.n	b696e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0xda>
	  __last = __cut;
	}
    }
   b69d2:	b004      	add	sp, #16
   b69d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b69d8 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0>:
    __introsort_loop(_RandomAccessIterator __first,
   b69d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b69dc:	4604      	mov	r4, r0
   b69de:	4616      	mov	r6, r2
   b69e0:	460d      	mov	r5, r1
      { return __normal_iterator(_M_current + __n); }
   b69e2:	1d07      	adds	r7, r0, #4
    { return __lhs.base() - __rhs.base(); }
   b69e4:	1b2b      	subs	r3, r5, r4
      while (__last - __first > int(_S_threshold))
   b69e6:	2b40      	cmp	r3, #64	; 0x40
   b69e8:	dd75      	ble.n	b6ad6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0xfe>
   b69ea:	ea4f 08a3 	mov.w	r8, r3, asr #2
	  if (__depth_limit == 0)
   b69ee:	b9e6      	cbnz	r6, b6a2a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0x52>
      _DistanceType __parent = (__len - 2) / 2;
   b69f0:	f1a8 0102 	sub.w	r1, r8, #2
   b69f4:	1049      	asrs	r1, r1, #1
   b69f6:	1c4e      	adds	r6, r1, #1
   b69f8:	eb04 0686 	add.w	r6, r4, r6, lsl #2
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
   b69fc:	ed36 0a01 	vldmdb	r6!, {s0}
   b6a00:	4642      	mov	r2, r8
   b6a02:	4620      	mov	r0, r4
   b6a04:	f7ff fc18 	bl	b6238 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_.isra.0>
	  if (__parent == 0)
   b6a08:	b109      	cbz	r1, b6a0e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0x36>
	  __parent--;
   b6a0a:	3901      	subs	r1, #1
      while (true)
   b6a0c:	e7f6      	b.n	b69fc <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0x24>
   b6a0e:	1b2b      	subs	r3, r5, r4
      while (__last - __first > 1)
   b6a10:	2b04      	cmp	r3, #4
   b6a12:	dd60      	ble.n	b6ad6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0xfe>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
   b6a14:	ed35 0a01 	vldmdb	r5!, {s0}
      *__result = _GLIBCXX_MOVE(*__first);
   b6a18:	6823      	ldr	r3, [r4, #0]
   b6a1a:	602b      	str	r3, [r5, #0]
   b6a1c:	1b2a      	subs	r2, r5, r4
      std::__adjust_heap(__first, _DistanceType(0),
   b6a1e:	1092      	asrs	r2, r2, #2
   b6a20:	2100      	movs	r1, #0
   b6a22:	4620      	mov	r0, r4
   b6a24:	f7ff fc08 	bl	b6238 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_.isra.0>
      while (__last - __first > 1)
   b6a28:	e7f1      	b.n	b6a0e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0x36>
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
   b6a2a:	10db      	asrs	r3, r3, #3
      { return __normal_iterator(_M_current + __n); }
   b6a2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
      { return *__it1 < *__it2; }
   b6a30:	edd4 6a01 	vldr	s13, [r4, #4]
   b6a34:	ed93 7a00 	vldr	s14, [r3]
   b6a38:	ed55 7a01 	vldr	s15, [r5, #-4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6a3c:	6822      	ldr	r2, [r4, #0]
      if (__comp(__a, __b))
   b6a3e:	eef4 6ac7 	vcmpe.f32	s13, s14
   b6a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  --__depth_limit;
   b6a46:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
      if (__comp(__a, __b))
   b6a4a:	d512      	bpl.n	b6a72 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0x9a>
	  if (__comp(__b, __c))
   b6a4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b6a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6a54:	d503      	bpl.n	b6a5e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0x86>
      __a = _GLIBCXX_MOVE(__b);
   b6a56:	ed84 7a00 	vstr	s14, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
   b6a5a:	601a      	str	r2, [r3, #0]
   b6a5c:	e011      	b.n	b6a82 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0xaa>
	  else if (__comp(__a, __c))
   b6a5e:	eef4 6ae7 	vcmpe.f32	s13, s15
   b6a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6a66:	d509      	bpl.n	b6a7c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0xa4>
      __a = _GLIBCXX_MOVE(__b);
   b6a68:	edc4 7a00 	vstr	s15, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
   b6a6c:	f845 2c04 	str.w	r2, [r5, #-4]
   b6a70:	e007      	b.n	b6a82 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0xaa>
      else if (__comp(__a, __c))
   b6a72:	eef4 6ae7 	vcmpe.f32	s13, s15
   b6a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6a7a:	d521      	bpl.n	b6ac0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0xe8>
      __a = _GLIBCXX_MOVE(__b);
   b6a7c:	edc4 6a00 	vstr	s13, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
   b6a80:	6062      	str	r2, [r4, #4]
    __unguarded_partition(_RandomAccessIterator __first,
   b6a82:	463a      	mov	r2, r7
      while (__last - __first > int(_S_threshold))
   b6a84:	4629      	mov	r1, r5
   b6a86:	edd4 6a00 	vldr	s13, [r4]
   b6a8a:	4690      	mov	r8, r2
   b6a8c:	ecf2 7a01 	vldmia	r2!, {s15}
	  while (__comp(__first, __pivot))
   b6a90:	eef4 7ae6 	vcmpe.f32	s15, s13
   b6a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6a98:	d4f5      	bmi.n	b6a86 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0xae>
   b6a9a:	460b      	mov	r3, r1
   b6a9c:	ed13 7a01 	vldr	s14, [r3, #-4]
	  while (__comp(__pivot, __last))
   b6aa0:	eef4 6ac7 	vcmpe.f32	s13, s14
   b6aa4:	3b04      	subs	r3, #4
   b6aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6aaa:	4619      	mov	r1, r3
   b6aac:	d4f6      	bmi.n	b6a9c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0xc4>
	  if (!(__first < __last))
   b6aae:	4598      	cmp	r8, r3
   b6ab0:	d30c      	bcc.n	b6acc <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0xf4>
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   b6ab2:	4629      	mov	r1, r5
   b6ab4:	4632      	mov	r2, r6
   b6ab6:	4640      	mov	r0, r8
   b6ab8:	f7ff ff8e 	bl	b69d8 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0>
      while (__last - __first > int(_S_threshold))
   b6abc:	4645      	mov	r5, r8
   b6abe:	e791      	b.n	b69e4 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0xc>
      else if (__comp(__b, __c))
   b6ac0:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b6ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6ac8:	d5c5      	bpl.n	b6a56 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0x7e>
   b6aca:	e7cd      	b.n	b6a68 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0x90>
      __a = _GLIBCXX_MOVE(__b);
   b6acc:	ed02 7a01 	vstr	s14, [r2, #-4]
      __b = _GLIBCXX_MOVE(__tmp);
   b6ad0:	edc3 7a00 	vstr	s15, [r3]
	return *this;
   b6ad4:	e7d7      	b.n	b6a86 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0xae>
    }
   b6ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6ada <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b6ada:	b510      	push	{r4, lr}
      if (_M_manager)
   b6adc:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b6ade:	4604      	mov	r4, r0
      if (_M_manager)
   b6ae0:	b113      	cbz	r3, b6ae8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6ae2:	2203      	movs	r2, #3
   b6ae4:	4601      	mov	r1, r0
   b6ae6:	4798      	blx	r3
    }
   b6ae8:	4620      	mov	r0, r4
   b6aea:	bd10      	pop	{r4, pc}

000b6aec <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
   b6aec:	b570      	push	{r4, r5, r6, lr}
   b6aee:	4604      	mov	r4, r0
   b6af0:	460e      	mov	r6, r1
   b6af2:	4615      	mov	r5, r2
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
   b6af4:	b133      	cbz	r3, b6b04 <_ZN2ei9ei_matrixC1EmmPf+0x18>
            buffer = a_buffer;
   b6af6:	6003      	str	r3, [r0, #0]
            buffer_managed_by_me = false;
   b6af8:	2300      	movs	r3, #0
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
            buffer_managed_by_me = true;
        }
        rows = n_rows;
        cols = n_cols;
   b6afa:	e9c4 6501 	strd	r6, r5, [r4, #4]
            buffer_managed_by_me = true;
   b6afe:	7323      	strb	r3, [r4, #12]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
   b6b00:	4620      	mov	r0, r4
   b6b02:	bd70      	pop	{r4, r5, r6, pc}
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   b6b04:	fb02 f001 	mul.w	r0, r2, r1
   b6b08:	0080      	lsls	r0, r0, #2
   b6b0a:	2101      	movs	r1, #1
   b6b0c:	f005 fa76 	bl	bbffc <_Z9ei_callocjj>
            buffer_managed_by_me = true;
   b6b10:	2301      	movs	r3, #1
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   b6b12:	6020      	str	r0, [r4, #0]
            buffer_managed_by_me = true;
   b6b14:	e7f1      	b.n	b6afa <_ZN2ei9ei_matrixC1EmmPf+0xe>

000b6b16 <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
   b6b16:	b510      	push	{r4, lr}
   b6b18:	4604      	mov	r4, r0
        if (buffer && buffer_managed_by_me) {
   b6b1a:	6800      	ldr	r0, [r0, #0]
   b6b1c:	b118      	cbz	r0, b6b26 <_ZN2ei9ei_matrixD1Ev+0x10>
   b6b1e:	7b23      	ldrb	r3, [r4, #12]
   b6b20:	b10b      	cbz	r3, b6b26 <_ZN2ei9ei_matrixD1Ev+0x10>
            ei_free(buffer);
   b6b22:	f005 fa6d 	bl	bc000 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
   b6b26:	4620      	mov	r0, r4
   b6b28:	bd10      	pop	{r4, pc}

000b6b2a <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_.isra.0>:

      __uniq_ptr_impl(__uniq_ptr_impl&& __u) noexcept
      : _M_t(std::move(__u._M_t))
      { __u._M_ptr() = nullptr; }

      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
   b6b2a:	b510      	push	{r4, lr}
      }

      pointer release() noexcept
      {
	pointer __p = _M_ptr();
	_M_ptr() = nullptr;
   b6b2c:	2200      	movs	r2, #0
	pointer __p = _M_ptr();
   b6b2e:	680b      	ldr	r3, [r1, #0]
	_M_ptr() = nullptr;
   b6b30:	600a      	str	r2, [r1, #0]
	const pointer __old_p = _M_ptr();
   b6b32:	6804      	ldr	r4, [r0, #0]
	_M_ptr() = __p;
   b6b34:	6003      	str	r3, [r0, #0]
	if (__old_p)
   b6b36:	b144      	cbz	r4, b6b4a <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_.isra.0+0x20>
	delete __ptr;
   b6b38:	4620      	mov	r0, r4
   b6b3a:	f7ff ffec 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
   b6b3e:	4620      	mov	r0, r4
   b6b40:	2110      	movs	r1, #16
      }
   b6b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delete __ptr;
   b6b46:	f7fe b9b2 	b.w	b4eae <_ZdlPvj>
      }
   b6b4a:	bd10      	pop	{r4, pc}

000b6b4c <_ZN2ei5numpy3sumEPfj>:
        float res = 0.0f;
   b6b4c:	ed9f 0a05 	vldr	s0, [pc, #20]	; b6b64 <_ZN2ei5numpy3sumEPfj+0x18>
   b6b50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        for (size_t ix = 0; ix < input_array_size; ix++) {
   b6b54:	4288      	cmp	r0, r1
   b6b56:	d004      	beq.n	b6b62 <_ZN2ei5numpy3sumEPfj+0x16>
            res += input_array[ix];
   b6b58:	ecf0 7a01 	vldmia	r0!, {s15}
   b6b5c:	ee30 0a27 	vadd.f32	s0, s0, s15
        for (size_t ix = 0; ix < input_array_size; ix++) {
   b6b60:	e7f8      	b.n	b6b54 <_ZN2ei5numpy3sumEPfj+0x8>
    }
   b6b62:	4770      	bx	lr
   b6b64:	00000000 	.word	0x00000000

000b6b68 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>:
    static int transpose(matrix_t *matrix) {
   b6b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
   b6b6c:	e9d0 7601 	ldrd	r7, r6, [r0, #4]
    static int transpose(matrix_t *matrix) {
   b6b70:	b088      	sub	sp, #32
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
   b6b72:	f8d0 8000 	ldr.w	r8, [r0]
        EI_DSP_MATRIX(temp_matrix, rows, columns);
   b6b76:	2300      	movs	r3, #0
    static int transpose(matrix_t *matrix) {
   b6b78:	4605      	mov	r5, r0
        EI_DSP_MATRIX(temp_matrix, rows, columns);
   b6b7a:	463a      	mov	r2, r7
   b6b7c:	4631      	mov	r1, r6
   b6b7e:	a804      	add	r0, sp, #16
   b6b80:	f7ff ffb4 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
   b6b84:	9b04      	ldr	r3, [sp, #16]
   b6b86:	b363      	cbz	r3, b6be2 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x7a>
        if (rows > EI_MAX_UINT16 || columns > EI_MAX_UINT16) {
   b6b88:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
   b6b8c:	da2b      	bge.n	b6be6 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x7e>
   b6b8e:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   b6b92:	da28      	bge.n	b6be6 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x7e>
        };
   b6b94:	b2b1      	uxth	r1, r6
   b6b96:	b2ba      	uxth	r2, r7
   b6b98:	f8ad 1002 	strh.w	r1, [sp, #2]
        };
   b6b9c:	f8ad 1008 	strh.w	r1, [sp, #8]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
   b6ba0:	4668      	mov	r0, sp
   b6ba2:	a902      	add	r1, sp, #8
        };
   b6ba4:	f8ad 2000 	strh.w	r2, [sp]
   b6ba8:	f8cd 8004 	str.w	r8, [sp, #4]
        };
   b6bac:	f8ad 200a 	strh.w	r2, [sp, #10]
   b6bb0:	9303      	str	r3, [sp, #12]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
   b6bb2:	f7fe f99d 	bl	b4ef0 <arm_mat_trans_f32>
        if (status != ARM_MATH_SUCCESS) {
   b6bb6:	4604      	mov	r4, r0
   b6bb8:	b930      	cbnz	r0, b6bc8 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x60>
        memcpy(matrix, temp_matrix.buffer, rows * columns * sizeof(float));
   b6bba:	fb07 f206 	mul.w	r2, r7, r6
   b6bbe:	9904      	ldr	r1, [sp, #16]
   b6bc0:	0092      	lsls	r2, r2, #2
   b6bc2:	4640      	mov	r0, r8
   b6bc4:	f00c fafc 	bl	c31c0 <memcpy>
        EI_DSP_MATRIX(temp_matrix, rows, columns);
   b6bc8:	a804      	add	r0, sp, #16
   b6bca:	f7ff ffa4 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
        if (r != 0) {
   b6bce:	b924      	cbnz	r4, b6bda <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x72>
        uint16_t old_rows = matrix->rows;
   b6bd0:	686b      	ldr	r3, [r5, #4]
        matrix->rows = old_cols;
   b6bd2:	892a      	ldrh	r2, [r5, #8]
   b6bd4:	606a      	str	r2, [r5, #4]
        matrix->cols = old_rows;
   b6bd6:	b29b      	uxth	r3, r3
   b6bd8:	60ab      	str	r3, [r5, #8]
    }
   b6bda:	4620      	mov	r0, r4
   b6bdc:	b008      	add	sp, #32
   b6bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        EI_DSP_MATRIX(temp_matrix, rows, columns);
   b6be2:	4c02      	ldr	r4, [pc, #8]	; (b6bec <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x84>)
   b6be4:	e7f0      	b.n	b6bc8 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x60>
            return EIDSP_NARROWING;
   b6be6:	4c02      	ldr	r4, [pc, #8]	; (b6bf0 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x88>)
   b6be8:	e7ee      	b.n	b6bc8 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x60>
   b6bea:	bf00      	nop
   b6bec:	fffffc16 	.word	0xfffffc16
   b6bf0:	fffffc0c 	.word	0xfffffc0c

000b6bf4 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
        if (scale == 1.0f) return EIDSP_OK;
   b6bf4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b6bf8:	eeb4 0a67 	vcmp.f32	s0, s15
   b6bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6c00:	d001      	beq.n	b6c06 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x12>
   b6c02:	f7ff ba03 	b.w	b600c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>
    }
   b6c06:	2000      	movs	r0, #0
   b6c08:	4770      	bx	lr

000b6c0a <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
     * @param matrix
     * @param subtraction
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, float subtraction) {
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   b6c0a:	2300      	movs	r3, #0
   b6c0c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
   b6c10:	434a      	muls	r2, r1
   b6c12:	429a      	cmp	r2, r3
   b6c14:	d90a      	bls.n	b6c2c <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x22>
            matrix->buffer[ix] -= subtraction;
   b6c16:	6802      	ldr	r2, [r0, #0]
   b6c18:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   b6c1c:	edd2 7a00 	vldr	s15, [r2]
   b6c20:	ee77 7ac0 	vsub.f32	s15, s15, s0
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   b6c24:	3301      	adds	r3, #1
            matrix->buffer[ix] -= subtraction;
   b6c26:	edc2 7a00 	vstr	s15, [r2]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   b6c2a:	e7ef      	b.n	b6c0c <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x2>
        }
        return EIDSP_OK;
    }
   b6c2c:	2000      	movs	r0, #0
   b6c2e:	4770      	bx	lr

000b6c30 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>:
     * Add on a matrix in place, per row
     * @param matrix Input matrix (MxN)
     * @param add Scale matrix (Mx1)
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, matrix_t *subtract_matrix) {
   b6c30:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (matrix->rows != subtract_matrix->rows) {
   b6c32:	6842      	ldr	r2, [r0, #4]
   b6c34:	684b      	ldr	r3, [r1, #4]
   b6c36:	429a      	cmp	r2, r3
    static int subtract(matrix_t *matrix, matrix_t *subtract_matrix) {
   b6c38:	b085      	sub	sp, #20
   b6c3a:	4605      	mov	r5, r0
   b6c3c:	460f      	mov	r7, r1
        if (matrix->rows != subtract_matrix->rows) {
   b6c3e:	d128      	bne.n	b6c92 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x62>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        if (subtract_matrix->cols != 1) {
   b6c40:	688b      	ldr	r3, [r1, #8]
   b6c42:	2b01      	cmp	r3, #1
   b6c44:	d125      	bne.n	b6c92 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x62>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        for (size_t row = 0; row < matrix->rows; row++) {
   b6c46:	2600      	movs	r6, #0
   b6c48:	686b      	ldr	r3, [r5, #4]
   b6c4a:	42b3      	cmp	r3, r6
   b6c4c:	d923      	bls.n	b6c96 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x66>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
   b6c4e:	68aa      	ldr	r2, [r5, #8]
   b6c50:	682b      	ldr	r3, [r5, #0]
   b6c52:	fb06 f102 	mul.w	r1, r6, r2
   b6c56:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   b6c5a:	4668      	mov	r0, sp
   b6c5c:	2101      	movs	r1, #1
   b6c5e:	f7ff ff45 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
   b6c62:	9b00      	ldr	r3, [sp, #0]
   b6c64:	b173      	cbz	r3, b6c84 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x54>
            int ret = subtract(&temp, subtract_matrix->buffer[row]);
   b6c66:	683b      	ldr	r3, [r7, #0]
   b6c68:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   b6c6c:	ed93 0a00 	vldr	s0, [r3]
   b6c70:	4668      	mov	r0, sp
   b6c72:	f7ff ffca 	bl	b6c0a <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
            if (ret != EIDSP_OK) {
   b6c76:	4604      	mov	r4, r0
   b6c78:	b928      	cbnz	r0, b6c86 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x56>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
   b6c7a:	4668      	mov	r0, sp
   b6c7c:	f7ff ff4b 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
        for (size_t row = 0; row < matrix->rows; row++) {
   b6c80:	3601      	adds	r6, #1
   b6c82:	e7e1      	b.n	b6c48 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x18>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
   b6c84:	4c05      	ldr	r4, [pc, #20]	; (b6c9c <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x6c>)
   b6c86:	4668      	mov	r0, sp
   b6c88:	f7ff ff45 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
                EIDSP_ERR(ret);
            }
        }

        return EIDSP_OK;
    }
   b6c8c:	4620      	mov	r0, r4
   b6c8e:	b005      	add	sp, #20
   b6c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   b6c92:	4c03      	ldr	r4, [pc, #12]	; (b6ca0 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x70>)
   b6c94:	e7fa      	b.n	b6c8c <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x5c>
        return EIDSP_OK;
   b6c96:	2400      	movs	r4, #0
   b6c98:	e7f8      	b.n	b6c8c <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x5c>
   b6c9a:	bf00      	nop
   b6c9c:	fffffc16 	.word	0xfffffc16
   b6ca0:	fffffc14 	.word	0xfffffc14

000b6ca4 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>:
     * Calculate the root mean square of a matrix, one per row
     * @param matrix Matrix of size (MxN)
     * @param output_matrix Matrix of size (Mx1)
     * @returns 0 if OK
     */
    static int rms(matrix_t *matrix, matrix_t *output_matrix) {
   b6ca4:	b573      	push	{r0, r1, r4, r5, r6, lr}
        if (matrix->rows != output_matrix->rows) {
   b6ca6:	6842      	ldr	r2, [r0, #4]
   b6ca8:	684b      	ldr	r3, [r1, #4]
   b6caa:	429a      	cmp	r2, r3
    static int rms(matrix_t *matrix, matrix_t *output_matrix) {
   b6cac:	4604      	mov	r4, r0
   b6cae:	460e      	mov	r6, r1
        if (matrix->rows != output_matrix->rows) {
   b6cb0:	d116      	bne.n	b6ce0 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x3c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        if (output_matrix->cols != 1) {
   b6cb2:	688b      	ldr	r3, [r1, #8]
   b6cb4:	2b01      	cmp	r3, #1
   b6cb6:	d113      	bne.n	b6ce0 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x3c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        for (size_t row = 0; row < matrix->rows; row++) {
   b6cb8:	2500      	movs	r5, #0
   b6cba:	6863      	ldr	r3, [r4, #4]
   b6cbc:	42ab      	cmp	r3, r5
   b6cbe:	d912      	bls.n	b6ce6 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x42>
#if EIDSP_USE_CMSIS_DSP
            float rms_result;
            arm_rms_f32(matrix->buffer + (row * matrix->cols), matrix->cols, &rms_result);
   b6cc0:	68a1      	ldr	r1, [r4, #8]
   b6cc2:	6823      	ldr	r3, [r4, #0]
   b6cc4:	fb01 f005 	mul.w	r0, r1, r5
   b6cc8:	aa01      	add	r2, sp, #4
   b6cca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b6cce:	f7fe f941 	bl	b4f54 <arm_rms_f32>
            output_matrix->buffer[row] = rms_result;
   b6cd2:	6833      	ldr	r3, [r6, #0]
   b6cd4:	9a01      	ldr	r2, [sp, #4]
   b6cd6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
        for (size_t row = 0; row < matrix->rows; row++) {
   b6cda:	3501      	adds	r5, #1
            output_matrix->buffer[row] = rms_result;
   b6cdc:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < matrix->rows; row++) {
   b6cde:	e7ec      	b.n	b6cba <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x16>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   b6ce0:	4802      	ldr	r0, [pc, #8]	; (b6cec <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x48>)
            output_matrix->buffer[row] = sqrt(sum / static_cast<float>(matrix->cols));
#endif
        }

        return EIDSP_OK;
    }
   b6ce2:	b002      	add	sp, #8
   b6ce4:	bd70      	pop	{r4, r5, r6, pc}
   b6ce6:	2000      	movs	r0, #0
   b6ce8:	e7fb      	b.n	b6ce2 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x3e>
   b6cea:	bf00      	nop
   b6cec:	fffffc14 	.word	0xfffffc14

000b6cf0 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>:
    /**
     * Calculate the mean over a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int mean(matrix_t *input_matrix, matrix_t *output_matrix) {
   b6cf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
        if (input_matrix->rows != output_matrix->rows) {
   b6cf2:	6842      	ldr	r2, [r0, #4]
   b6cf4:	684b      	ldr	r3, [r1, #4]
   b6cf6:	429a      	cmp	r2, r3
    static int mean(matrix_t *input_matrix, matrix_t *output_matrix) {
   b6cf8:	4604      	mov	r4, r0
   b6cfa:	460e      	mov	r6, r1
        if (input_matrix->rows != output_matrix->rows) {
   b6cfc:	d116      	bne.n	b6d2c <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x3c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }
        if (output_matrix->cols != 1) {
   b6cfe:	688b      	ldr	r3, [r1, #8]
   b6d00:	2b01      	cmp	r3, #1
   b6d02:	d113      	bne.n	b6d2c <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x3c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
   b6d04:	2500      	movs	r5, #0
   b6d06:	6863      	ldr	r3, [r4, #4]
   b6d08:	42ab      	cmp	r3, r5
   b6d0a:	d912      	bls.n	b6d32 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x42>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
   b6d0c:	68a1      	ldr	r1, [r4, #8]
   b6d0e:	6823      	ldr	r3, [r4, #0]
   b6d10:	fb01 f005 	mul.w	r0, r1, r5
   b6d14:	aa01      	add	r2, sp, #4
   b6d16:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b6d1a:	f7fe f903 	bl	b4f24 <arm_mean_f32>
            output_matrix->buffer[row] = mean;
   b6d1e:	6833      	ldr	r3, [r6, #0]
   b6d20:	9a01      	ldr	r2, [sp, #4]
   b6d22:	eb03 0385 	add.w	r3, r3, r5, lsl #2
        for (size_t row = 0; row < input_matrix->rows; row++) {
   b6d26:	3501      	adds	r5, #1
            output_matrix->buffer[row] = mean;
   b6d28:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
   b6d2a:	e7ec      	b.n	b6d06 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x16>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   b6d2c:	4802      	ldr	r0, [pc, #8]	; (b6d38 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x48>)
            output_matrix->buffer[row] = sum / input_matrix->cols;
#endif
        }

        return EIDSP_OK;
    }
   b6d2e:	b002      	add	sp, #8
   b6d30:	bd70      	pop	{r4, r5, r6, pc}
   b6d32:	2000      	movs	r0, #0
   b6d34:	e7fb      	b.n	b6d2e <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x3e>
   b6d36:	bf00      	nop
   b6d38:	fffffc14 	.word	0xfffffc14

000b6d3c <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>:
        ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));

        return EIDSP_OK;
    }

    static int subtract_mean(matrix_t* input_matrix) {
   b6d3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        // calculate the mean
        EI_DSP_MATRIX(mean_matrix, input_matrix->rows, 1);
   b6d3e:	2300      	movs	r3, #0
   b6d40:	6841      	ldr	r1, [r0, #4]
    static int subtract_mean(matrix_t* input_matrix) {
   b6d42:	4604      	mov	r4, r0
        EI_DSP_MATRIX(mean_matrix, input_matrix->rows, 1);
   b6d44:	2201      	movs	r2, #1
   b6d46:	4668      	mov	r0, sp
   b6d48:	f7ff fed0 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
   b6d4c:	9b00      	ldr	r3, [sp, #0]
   b6d4e:	b18b      	cbz	r3, b6d74 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x38>
        int ret = numpy::mean(input_matrix, &mean_matrix);
   b6d50:	4669      	mov	r1, sp
   b6d52:	4620      	mov	r0, r4
   b6d54:	f7ff ffcc 	bl	b6cf0 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
        if (ret != EIDSP_OK) {
   b6d58:	b928      	cbnz	r0, b6d66 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x2a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        // scale by the mean
        ret = numpy::subtract(input_matrix, &mean_matrix);
   b6d5a:	4620      	mov	r0, r4
   b6d5c:	4669      	mov	r1, sp
   b6d5e:	f7ff ff67 	bl	b6c30 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
        if (ret != EIDSP_OK) {
   b6d62:	4604      	mov	r4, r0
   b6d64:	b100      	cbz	r0, b6d68 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x2c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   b6d66:	4c04      	ldr	r4, [pc, #16]	; (b6d78 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x3c>)
        EI_DSP_MATRIX(mean_matrix, input_matrix->rows, 1);
   b6d68:	4668      	mov	r0, sp
   b6d6a:	f7ff fed4 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
        }

        return EIDSP_OK;
    }
   b6d6e:	4620      	mov	r0, r4
   b6d70:	b004      	add	sp, #16
   b6d72:	bd10      	pop	{r4, pc}
        EI_DSP_MATRIX(mean_matrix, input_matrix->rows, 1);
   b6d74:	4c01      	ldr	r4, [pc, #4]	; (b6d7c <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x40>)
   b6d76:	e7f7      	b.n	b6d68 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x2c>
   b6d78:	fffffc14 	.word	0xfffffc14
   b6d7c:	fffffc16 	.word	0xfffffc16

000b6d80 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, fft_complex_t *output, size_t output_size, size_t n_fft) {
   b6d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6d84:	b088      	sub	sp, #32
   b6d86:	4616      	mov	r6, r2
   b6d88:	9c0e      	ldr	r4, [sp, #56]	; 0x38
        size_t n_fft_out_features = (n_fft / 2) + 1;
   b6d8a:	0862      	lsrs	r2, r4, #1
   b6d8c:	3201      	adds	r2, #1
        if (output_size != n_fft_out_features) {
   b6d8e:	429a      	cmp	r2, r3
    static int rfft(const float *src, size_t src_size, fft_complex_t *output, size_t output_size, size_t n_fft) {
   b6d90:	4607      	mov	r7, r0
   b6d92:	460d      	mov	r5, r1
        if (output_size != n_fft_out_features) {
   b6d94:	d167      	bne.n	b6e66 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xe6>
            src_size = n_fft;
        }

        // Unfortunately, arm fft (at least) modifies the input buffer AND does not work in place
        // So we have to copy the input to a new buffer
        EI_DSP_MATRIX(fft_input, 1, n_fft);
   b6d96:	2300      	movs	r3, #0
   b6d98:	4622      	mov	r2, r4
   b6d9a:	2101      	movs	r1, #1
   b6d9c:	a804      	add	r0, sp, #16
   b6d9e:	f7ff fea5 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
   b6da2:	9804      	ldr	r0, [sp, #16]
   b6da4:	2800      	cmp	r0, #0
   b6da6:	d05c      	beq.n	b6e62 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xe2>
   b6da8:	42a5      	cmp	r5, r4
   b6daa:	bf28      	it	cs
   b6dac:	4625      	movcs	r5, r4
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }

        // If the buffer wasn't assigned to source above, let's copy and pad
        // copy from src to fft_input
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
   b6dae:	ea4f 0885 	mov.w	r8, r5, lsl #2
   b6db2:	4642      	mov	r2, r8
   b6db4:	4639      	mov	r1, r7
   b6db6:	f00c fa03 	bl	c31c0 <memcpy>
        // pad to the rigth with zeros
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(float));
   b6dba:	9804      	ldr	r0, [sp, #16]
   b6dbc:	1b65      	subs	r5, r4, r5
   b6dbe:	00aa      	lsls	r2, r5, #2
   b6dc0:	2100      	movs	r1, #0
   b6dc2:	4440      	add	r0, r8
   b6dc4:	f00c fa24 	bl	c3210 <memset>
}

static bool can_do_fft(size_t n_fft)
{
    return n_fft == 32 || n_fft == 64 || n_fft == 128 || n_fft == 256 || n_fft == 512 ||
        n_fft == 1024 || n_fft == 2048 || n_fft == 4096;
   b6dc8:	2c20      	cmp	r4, #32
   b6dca:	d042      	beq.n	b6e52 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xd2>
    return n_fft == 32 || n_fft == 64 || n_fft == 128 || n_fft == 256 || n_fft == 512 ||
   b6dcc:	2c40      	cmp	r4, #64	; 0x40
   b6dce:	d040      	beq.n	b6e52 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xd2>
   b6dd0:	2c80      	cmp	r4, #128	; 0x80
   b6dd2:	d03e      	beq.n	b6e52 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xd2>
   b6dd4:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   b6dd8:	d03b      	beq.n	b6e52 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xd2>
   b6dda:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
   b6dde:	d038      	beq.n	b6e52 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xd2>
   b6de0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   b6de4:	d035      	beq.n	b6e52 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xd2>
        n_fft == 1024 || n_fft == 2048 || n_fft == 4096;
   b6de6:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
   b6dea:	d032      	beq.n	b6e52 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xd2>
    if(!can_do_fft(n_fft)) { return ei::EIDSP_FFT_SIZE_NOT_SUPPORTED; }

    float *output = (float *)output_as_complex;

    // non zero is fail
    if(arm_rfft(input, output, n_fft)) { return ei::EIDSP_PARAMETER_INVALID; }
   b6dec:	4b1f      	ldr	r3, [pc, #124]	; (b6e6c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xec>)
   b6dee:	4a20      	ldr	r2, [pc, #128]	; (b6e70 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xf0>)
   b6df0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   b6df4:	bf08      	it	eq
   b6df6:	4613      	moveq	r3, r2
        if (res == EIDSP_OK) {
            return false;
        }

        // don't warn if we didn't include a DSP library
        if (res != EIDSP_NO_HW_ACCEL && first_time) {
   b6df8:	4a1e      	ldr	r2, [pc, #120]	; (b6e74 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xf4>)
   b6dfa:	7811      	ldrb	r1, [r2, #0]
   b6dfc:	b179      	cbz	r1, b6e1e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x9e>
            first_time = false; // only warn once
   b6dfe:	2100      	movs	r1, #0
   b6e00:	7011      	strb	r1, [r2, #0]
            if (res == EIDSP_FFT_SIZE_NOT_SUPPORTED) {
   b6e02:	4a1a      	ldr	r2, [pc, #104]	; (b6e6c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xec>)
                EI_LOGI("HW RFFT failed, FFT size not supported. Must be a power of 2 between %d and %d, (size was %d)",
   b6e04:	491c      	ldr	r1, [pc, #112]	; (b6e78 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xf8>)
   b6e06:	481d      	ldr	r0, [pc, #116]	; (b6e7c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xfc>)
            if (res == EIDSP_FFT_SIZE_NOT_SUPPORTED) {
   b6e08:	4293      	cmp	r3, r2
   b6e0a:	d124      	bne.n	b6e56 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xd6>
                EI_LOGI("HW RFFT failed, FFT size not supported. Must be a power of 2 between %d and %d, (size was %d)",
   b6e0c:	f005 f81e 	bl	bbe4c <_Z9ei_printfPKcz>
   b6e10:	481b      	ldr	r0, [pc, #108]	; (b6e80 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x100>)
   b6e12:	4623      	mov	r3, r4
   b6e14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   b6e18:	2120      	movs	r1, #32
   b6e1a:	f005 f817 	bl	bbe4c <_Z9ei_printfPKcz>
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
   b6e1e:	ab03      	add	r3, sp, #12
   b6e20:	9300      	str	r3, [sp, #0]
   b6e22:	2300      	movs	r3, #0
   b6e24:	4620      	mov	r0, r4
   b6e26:	461a      	mov	r2, r3
   b6e28:	4619      	mov	r1, r3
            return software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
   b6e2a:	9d04      	ldr	r5, [sp, #16]
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
   b6e2c:	f004 feb8 	bl	bbba0 <kiss_fftr_alloc>
        if (!cfg) {
   b6e30:	4604      	mov	r4, r0
   b6e32:	b1b0      	cbz	r0, b6e62 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xe2>
        kiss_fftr(cfg, fft_input, (kiss_fft_cpx*)output);
   b6e34:	4632      	mov	r2, r6
   b6e36:	4629      	mov	r1, r5
   b6e38:	f004 ff8a 	bl	bbd50 <kiss_fftr>
        ei_dsp_free(cfg, kiss_fftr_mem_length);
   b6e3c:	4620      	mov	r0, r4
   b6e3e:	f005 f8df 	bl	bc000 <_Z7ei_freePv>
        return EIDSP_OK;
   b6e42:	2400      	movs	r4, #0
        EI_DSP_MATRIX(fft_input, 1, n_fft);
   b6e44:	a804      	add	r0, sp, #16
   b6e46:	f7ff fe66 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
    }
   b6e4a:	4620      	mov	r0, r4
   b6e4c:	b008      	add	sp, #32
   b6e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6e52:	4b07      	ldr	r3, [pc, #28]	; (b6e70 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xf0>)
   b6e54:	e7d0      	b.n	b6df8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x78>
                    ei::fft::MIN_FFT_SIZE, ei::fft::MAX_FFT_SIZE, (int)n_fft);
            }
            else {
                EI_LOGI("HW RFFT failed, falling back to SW");
   b6e56:	f004 fff9 	bl	bbe4c <_Z9ei_printfPKcz>
   b6e5a:	480a      	ldr	r0, [pc, #40]	; (b6e84 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x104>)
   b6e5c:	f004 fff6 	bl	bbe4c <_Z9ei_printfPKcz>
   b6e60:	e7dd      	b.n	b6e1e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x9e>
        EI_DSP_MATRIX(fft_input, 1, n_fft);
   b6e62:	4c09      	ldr	r4, [pc, #36]	; (b6e88 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x108>)
   b6e64:	e7ee      	b.n	b6e44 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xc4>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
   b6e66:	4c09      	ldr	r4, [pc, #36]	; (b6e8c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x10c>)
   b6e68:	e7ef      	b.n	b6e4a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xca>
   b6e6a:	bf00      	nop
   b6e6c:	fffffc05 	.word	0xfffffc05
   b6e70:	fffffc10 	.word	0xfffffc10
   b6e74:	2003cfb8 	.word	0x2003cfb8
   b6e78:	000c52e1 	.word	0x000c52e1
   b6e7c:	000c6042 	.word	0x000c6042
   b6e80:	000c52e6 	.word	0x000c52e6
   b6e84:	000c5344 	.word	0x000c5344
   b6e88:	fffffc16 	.word	0xfffffc16
   b6e8c:	fffffc11 	.word	0xfffffc11

000b6e90 <_ZN2ei5numpy8linspaceEffmPf>:
    static int linspace(float start, float stop, uint32_t number, float *out)
   b6e90:	b510      	push	{r4, lr}
        if (number < 1 || !out) {
   b6e92:	b318      	cbz	r0, b6edc <_ZN2ei5numpy8linspaceEffmPf+0x4c>
   b6e94:	b311      	cbz	r1, b6edc <_ZN2ei5numpy8linspaceEffmPf+0x4c>
        if (number == 1) {
   b6e96:	2801      	cmp	r0, #1
   b6e98:	d103      	bne.n	b6ea2 <_ZN2ei5numpy8linspaceEffmPf+0x12>
            out[0] = start;
   b6e9a:	ed81 0a00 	vstr	s0, [r1]
        return EIDSP_OK;
   b6e9e:	2000      	movs	r0, #0
    }
   b6ea0:	bd10      	pop	{r4, pc}
        float step = (stop - start) / (number - 1);
   b6ea2:	1e42      	subs	r2, r0, #1
   b6ea4:	ee07 2a10 	vmov	s14, r2
   b6ea8:	ee70 7ac0 	vsub.f32	s15, s1, s0
   b6eac:	eef8 6a47 	vcvt.f32.u32	s13, s14
   b6eb0:	460c      	mov	r4, r1
   b6eb2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
        for (uint32_t ix = 0; ix < number - 1; ix++) {
   b6eb6:	2300      	movs	r3, #0
            out[ix] = start + ix * step;
   b6eb8:	ee07 3a90 	vmov	s15, r3
   b6ebc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   b6ec0:	eef0 7a40 	vmov.f32	s15, s0
   b6ec4:	eee6 7a87 	vfma.f32	s15, s13, s14
        for (uint32_t ix = 0; ix < number - 1; ix++) {
   b6ec8:	3301      	adds	r3, #1
   b6eca:	429a      	cmp	r2, r3
            out[ix] = start + ix * step;
   b6ecc:	ece4 7a01 	vstmia	r4!, {s15}
        for (uint32_t ix = 0; ix < number - 1; ix++) {
   b6ed0:	d8f2      	bhi.n	b6eb8 <_ZN2ei5numpy8linspaceEffmPf+0x28>
        out[number - 1] = stop;
   b6ed2:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   b6ed6:	ed41 0a01 	vstr	s1, [r1, #-4]
   b6eda:	e7e0      	b.n	b6e9e <_ZN2ei5numpy8linspaceEffmPf+0xe>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
   b6edc:	4800      	ldr	r0, [pc, #0]	; (b6ee0 <_ZN2ei5numpy8linspaceEffmPf+0x50>)
   b6ede:	e7df      	b.n	b6ea0 <_ZN2ei5numpy8linspaceEffmPf+0x10>
   b6ee0:	fffffc10 	.word	0xfffffc10

000b6ee4 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>:
        if (blockSize <= 1U) {
   b6ee4:	2901      	cmp	r1, #1
    static void cmsis_arm_variance(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)
   b6ee6:	b570      	push	{r4, r5, r6, lr}
   b6ee8:	eddf 7a2e 	vldr	s15, [pc, #184]	; b6fa4 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xc0>
        if (blockSize <= 1U) {
   b6eec:	d802      	bhi.n	b6ef4 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x10>
            *pResult = 0;
   b6eee:	edc2 7a00 	vstr	s15, [r2]
    }
   b6ef2:	bd70      	pop	{r4, r5, r6, pc}
        blkCnt = blockSize >> 2U;
   b6ef4:	088d      	lsrs	r5, r1, #2
   b6ef6:	4603      	mov	r3, r0
   b6ef8:	4604      	mov	r4, r0
   b6efa:	462e      	mov	r6, r5
        while (blkCnt > 0U) {
   b6efc:	3410      	adds	r4, #16
   b6efe:	b18e      	cbz	r6, b6f24 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x40>
            sum += *pInput++;
   b6f00:	ed14 7a04 	vldr	s14, [r4, #-16]
   b6f04:	ee77 7a87 	vadd.f32	s15, s15, s14
            sum += *pInput++;
   b6f08:	ed14 7a03 	vldr	s14, [r4, #-12]
   b6f0c:	ee77 7a87 	vadd.f32	s15, s15, s14
            sum += *pInput++;
   b6f10:	ed14 7a02 	vldr	s14, [r4, #-8]
   b6f14:	ee77 7a87 	vadd.f32	s15, s15, s14
            sum += *pInput++;
   b6f18:	ed14 7a01 	vldr	s14, [r4, #-4]
            blkCnt--;
   b6f1c:	3e01      	subs	r6, #1
            sum += *pInput++;
   b6f1e:	ee77 7a87 	vadd.f32	s15, s15, s14
        while (blkCnt > 0U) {
   b6f22:	e7eb      	b.n	b6efc <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x18>
   b6f24:	eb00 1005 	add.w	r0, r0, r5, lsl #4
        blkCnt = blockSize % 0x4U;
   b6f28:	f001 0403 	and.w	r4, r1, #3
   b6f2c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   b6f30:	4606      	mov	r6, r0
        while (blkCnt > 0U) {
   b6f32:	42a6      	cmp	r6, r4
   b6f34:	d004      	beq.n	b6f40 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x5c>
            sum += *pInput++;
   b6f36:	ecb6 7a01 	vldmia	r6!, {s14}
   b6f3a:	ee77 7a87 	vadd.f32	s15, s15, s14
        while (blkCnt > 0U) {
   b6f3e:	e7f8      	b.n	b6f32 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x4e>
        fMean = sum / (float32_t)blockSize;
   b6f40:	ee07 1a10 	vmov	s14, r1
   b6f44:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b6f48:	eec7 6a87 	vdiv.f32	s13, s15, s14
        float32_t fSum = 0.0f;
   b6f4c:	eddf 7a15 	vldr	s15, [pc, #84]	; b6fa4 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xc0>
        while (blkCnt > 0U) {
   b6f50:	3310      	adds	r3, #16
   b6f52:	b1cd      	cbz	r5, b6f88 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xa4>
            fValue = *pInput++ - fMean;
   b6f54:	ed13 6a04 	vldr	s12, [r3, #-16]
   b6f58:	ee36 6a66 	vsub.f32	s12, s12, s13
            blkCnt--;
   b6f5c:	3d01      	subs	r5, #1
            fSum += fValue * fValue;
   b6f5e:	eee6 7a06 	vfma.f32	s15, s12, s12
            fValue = *pInput++ - fMean;
   b6f62:	ed13 6a03 	vldr	s12, [r3, #-12]
   b6f66:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
   b6f6a:	eee6 7a06 	vfma.f32	s15, s12, s12
            fValue = *pInput++ - fMean;
   b6f6e:	ed13 6a02 	vldr	s12, [r3, #-8]
   b6f72:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
   b6f76:	eee6 7a06 	vfma.f32	s15, s12, s12
            fValue = *pInput++ - fMean;
   b6f7a:	ed13 6a01 	vldr	s12, [r3, #-4]
   b6f7e:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
   b6f82:	eee6 7a06 	vfma.f32	s15, s12, s12
        while (blkCnt > 0U) {
   b6f86:	e7e3      	b.n	b6f50 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x6c>
        while (blkCnt > 0U) {
   b6f88:	42a0      	cmp	r0, r4
   b6f8a:	d006      	beq.n	b6f9a <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xb6>
            fValue = *pInput++ - fMean;
   b6f8c:	ecb0 6a01 	vldmia	r0!, {s12}
   b6f90:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
   b6f94:	eee6 7a06 	vfma.f32	s15, s12, s12
        while (blkCnt > 0U) {
   b6f98:	e7f6      	b.n	b6f88 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xa4>
        *pResult = fSum / (float32_t)(blockSize);
   b6f9a:	eec7 6a87 	vdiv.f32	s13, s15, s14
   b6f9e:	edc2 6a00 	vstr	s13, [r2]
   b6fa2:	e7a6      	b.n	b6ef2 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xe>
   b6fa4:	00000000 	.word	0x00000000

000b6fa8 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_>:
    static int stdev(matrix_t *input_matrix, matrix_t *output_matrix) {
   b6fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (input_matrix->rows != output_matrix->rows) {
   b6faa:	6842      	ldr	r2, [r0, #4]
   b6fac:	684b      	ldr	r3, [r1, #4]
   b6fae:	429a      	cmp	r2, r3
    static int stdev(matrix_t *input_matrix, matrix_t *output_matrix) {
   b6fb0:	4604      	mov	r4, r0
   b6fb2:	460e      	mov	r6, r1
        if (input_matrix->rows != output_matrix->rows) {
   b6fb4:	d123      	bne.n	b6ffe <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x56>
        if (output_matrix->cols != 1) {
   b6fb6:	688b      	ldr	r3, [r1, #8]
   b6fb8:	2b01      	cmp	r3, #1
   b6fba:	d120      	bne.n	b6ffe <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x56>
        for (size_t row = 0; row < input_matrix->rows; row++) {
   b6fbc:	2500      	movs	r5, #0
   b6fbe:	2700      	movs	r7, #0
   b6fc0:	6863      	ldr	r3, [r4, #4]
   b6fc2:	42ab      	cmp	r3, r5
   b6fc4:	d91e      	bls.n	b7004 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x5c>
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
   b6fc6:	68a1      	ldr	r1, [r4, #8]
   b6fc8:	6823      	ldr	r3, [r4, #0]
   b6fca:	fb01 f005 	mul.w	r0, r1, r5
   b6fce:	aa01      	add	r2, sp, #4
   b6fd0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b6fd4:	f7ff ff86 	bl	b6ee4 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>
            arm_sqrt_f32(var, &std);
   b6fd8:	ed9d 0a01 	vldr	s0, [sp, #4]
    if (in >= 0.0f)
   b6fdc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   b6fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6fe4:	db08      	blt.n	b6ff8 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x50>
      *pOut = sqrtf(in);
   b6fe6:	f00a fc7f 	bl	c18e8 <sqrtf>
            output_matrix->buffer[row] = std;
   b6fea:	6833      	ldr	r3, [r6, #0]
   b6fec:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   b6ff0:	ed83 0a00 	vstr	s0, [r3]
        for (size_t row = 0; row < input_matrix->rows; row++) {
   b6ff4:	3501      	adds	r5, #1
   b6ff6:	e7e3      	b.n	b6fc0 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x18>
      *pOut = 0.0f;
   b6ff8:	ee00 7a10 	vmov	s0, r7
   b6ffc:	e7f5      	b.n	b6fea <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x42>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   b6ffe:	4802      	ldr	r0, [pc, #8]	; (b7008 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x60>)
    }
   b7000:	b003      	add	sp, #12
   b7002:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7004:	2000      	movs	r0, #0
   b7006:	e7fb      	b.n	b7000 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x58>
   b7008:	fffffc14 	.word	0xfffffc14

000b700c <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>:
    static int skew(matrix_t *input_matrix, matrix_t *output_matrix) {
   b700c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b700e:	ed2d 8b02 	vpush	{d8}
        if (input_matrix->rows != output_matrix->rows) {
   b7012:	6842      	ldr	r2, [r0, #4]
   b7014:	684b      	ldr	r3, [r1, #4]
   b7016:	429a      	cmp	r2, r3
    static int skew(matrix_t *input_matrix, matrix_t *output_matrix) {
   b7018:	b083      	sub	sp, #12
   b701a:	4604      	mov	r4, r0
   b701c:	460f      	mov	r7, r1
        if (input_matrix->rows != output_matrix->rows) {
   b701e:	f040 808c 	bne.w	b713a <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x12e>
        if (output_matrix->cols != 1) {
   b7022:	688b      	ldr	r3, [r1, #8]
   b7024:	2b01      	cmp	r3, #1
   b7026:	f040 8088 	bne.w	b713a <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x12e>
        for (size_t row = 0; row < input_matrix->rows; row++) {
   b702a:	2500      	movs	r5, #0
   b702c:	6863      	ldr	r3, [r4, #4]
   b702e:	42ab      	cmp	r3, r5
   b7030:	f240 8088 	bls.w	b7144 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x138>
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
   b7034:	68a1      	ldr	r1, [r4, #8]
   b7036:	6823      	ldr	r3, [r4, #0]
        float32_t sum = 0.0f;
   b7038:	ed9f 8a43 	vldr	s16, [pc, #268]	; b7148 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x13c>
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
   b703c:	fb05 f001 	mul.w	r0, r5, r1
   b7040:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b7044:	466a      	mov	r2, sp
   b7046:	f7fd ff6d 	bl	b4f24 <arm_mean_f32>
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
   b704a:	68a1      	ldr	r1, [r4, #8]
   b704c:	6823      	ldr	r3, [r4, #0]
   b704e:	fb05 f001 	mul.w	r0, r5, r1
   b7052:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b7056:	aa01      	add	r2, sp, #4
   b7058:	f7ff ff44 	bl	b6ee4 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>
            cmsis_arm_third_moment(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, mean, &m_3);
   b705c:	68a6      	ldr	r6, [r4, #8]
   b705e:	6823      	ldr	r3, [r4, #0]
   b7060:	ed9d 7a00 	vldr	s14, [sp]
   b7064:	fb05 f206 	mul.w	r2, r5, r6
   b7068:	eb03 0382 	add.w	r3, r3, r2, lsl #2
        blkCnt = blockSize >> 2U;
   b706c:	08b0      	lsrs	r0, r6, #2
   b706e:	461a      	mov	r2, r3
   b7070:	4601      	mov	r1, r0
   b7072:	eef0 8a48 	vmov.f32	s17, s16
        while (blkCnt > 0U) {
   b7076:	3210      	adds	r2, #16
   b7078:	b309      	cbz	r1, b70be <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xb2>
            in = *pSrc++;
   b707a:	ed52 7a04 	vldr	s15, [r2, #-16]
            in = in - mean;
   b707e:	ee77 7ac7 	vsub.f32	s15, s15, s14
            blkCnt--;
   b7082:	3901      	subs	r1, #1
            sum += in * in * in;
   b7084:	ee67 6aa7 	vmul.f32	s13, s15, s15
   b7088:	eea7 8aa6 	vfma.f32	s16, s15, s13
            in = *pSrc++;
   b708c:	ed52 7a03 	vldr	s15, [r2, #-12]
            in = in - mean;
   b7090:	ee77 7ac7 	vsub.f32	s15, s15, s14
            sum += in * in * in;
   b7094:	ee67 6aa7 	vmul.f32	s13, s15, s15
   b7098:	eea7 8aa6 	vfma.f32	s16, s15, s13
            in = *pSrc++;
   b709c:	ed52 7a02 	vldr	s15, [r2, #-8]
            in = in - mean;
   b70a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
            sum += in * in * in;
   b70a4:	ee67 6aa7 	vmul.f32	s13, s15, s15
   b70a8:	eea7 8aa6 	vfma.f32	s16, s15, s13
            in = *pSrc++;
   b70ac:	ed52 7a01 	vldr	s15, [r2, #-4]
            in = in - mean;
   b70b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
            sum += in * in * in;
   b70b4:	ee67 6aa7 	vmul.f32	s13, s15, s15
   b70b8:	eea7 8aa6 	vfma.f32	s16, s15, s13
        while (blkCnt > 0U) {
   b70bc:	e7db      	b.n	b7076 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x6a>
   b70be:	eb03 1300 	add.w	r3, r3, r0, lsl #4
        blkCnt = blockSize % 0x4U;
   b70c2:	f006 0203 	and.w	r2, r6, #3
   b70c6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        while (blkCnt > 0U) {
   b70ca:	429a      	cmp	r2, r3
   b70cc:	d008      	beq.n	b70e0 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xd4>
            in = *pSrc++;
   b70ce:	ecf3 7a01 	vldmia	r3!, {s15}
            in = in - mean;
   b70d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
            sum += in * in * in;
   b70d6:	ee67 6aa7 	vmul.f32	s13, s15, s15
   b70da:	eea7 8aa6 	vfma.f32	s16, s15, s13
        while (blkCnt > 0U) {
   b70de:	e7f4      	b.n	b70ca <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xbe>
            arm_sqrt_f32(var * var * var, &var);
   b70e0:	eddd 7a01 	vldr	s15, [sp, #4]
   b70e4:	ee27 0aa7 	vmul.f32	s0, s15, s15
   b70e8:	ee20 0a27 	vmul.f32	s0, s0, s15
    if (in >= 0.0f)
   b70ec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   b70f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b70f4:	db1e      	blt.n	b7134 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x128>
      *pOut = sqrtf(in);
   b70f6:	f00a fbf7 	bl	c18e8 <sqrtf>
   b70fa:	ed8d 0a01 	vstr	s0, [sp, #4]
            if (var == 0.0f) {
   b70fe:	ed9d 7a01 	vldr	s14, [sp, #4]
                output_matrix->buffer[row] = 0.0f;
   b7102:	683b      	ldr	r3, [r7, #0]
            if (var == 0.0f) {
   b7104:	eeb5 7a40 	vcmp.f32	s14, #0.0
   b7108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        sum = sum / blockSize;
   b710c:	bf1c      	itt	ne
   b710e:	ee07 6a90 	vmovne	s15, r6
   b7112:	eef8 7a67 	vcvtne.f32.u32	s15, s15
                output_matrix->buffer[row] = 0.0f;
   b7116:	eb03 0385 	add.w	r3, r3, r5, lsl #2
        sum = sum / blockSize;
   b711a:	bf18      	it	ne
   b711c:	eec8 6a27 	vdivne.f32	s13, s16, s15
        for (size_t row = 0; row < input_matrix->rows; row++) {
   b7120:	f105 0501 	add.w	r5, r5, #1
                output_matrix->buffer[row] = 0.0f;
   b7124:	bf0e      	itee	eq
   b7126:	edc3 8a00 	vstreq	s17, [r3]
                output_matrix->buffer[row] = m_3 / var;
   b712a:	eec6 7a87 	vdivne.f32	s15, s13, s14
   b712e:	edc3 7a00 	vstrne	s15, [r3]
        for (size_t row = 0; row < input_matrix->rows; row++) {
   b7132:	e77b      	b.n	b702c <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x20>
      *pOut = 0.0f;
   b7134:	edcd 8a01 	vstr	s17, [sp, #4]
      return (ARM_MATH_ARGUMENT_ERROR);
   b7138:	e7e1      	b.n	b70fe <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xf2>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   b713a:	4804      	ldr	r0, [pc, #16]	; (b714c <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x140>)
    }
   b713c:	b003      	add	sp, #12
   b713e:	ecbd 8b02 	vpop	{d8}
   b7142:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return EIDSP_OK;
   b7144:	2000      	movs	r0, #0
   b7146:	e7f9      	b.n	b713c <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x130>
   b7148:	00000000 	.word	0x00000000
   b714c:	fffffc14 	.word	0xfffffc14

000b7150 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>:
    static int kurtosis(matrix_t *input_matrix, matrix_t *output_matrix) {
   b7150:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7152:	ed2d 8b02 	vpush	{d8}
        if (input_matrix->rows != output_matrix->rows) {
   b7156:	6842      	ldr	r2, [r0, #4]
   b7158:	684b      	ldr	r3, [r1, #4]
   b715a:	429a      	cmp	r2, r3
    static int kurtosis(matrix_t *input_matrix, matrix_t *output_matrix) {
   b715c:	b083      	sub	sp, #12
   b715e:	4604      	mov	r4, r0
   b7160:	460e      	mov	r6, r1
        if (input_matrix->rows != output_matrix->rows) {
   b7162:	d17d      	bne.n	b7260 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x110>
        if (output_matrix->cols != 1) {
   b7164:	688b      	ldr	r3, [r1, #8]
   b7166:	2b01      	cmp	r3, #1
   b7168:	d17a      	bne.n	b7260 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x110>
        for (size_t row = 0; row < input_matrix->rows; row++) {
   b716a:	2500      	movs	r5, #0
                output_matrix->buffer[row] = (m_4 / var) - 3.0f;
   b716c:	eeb0 8a08 	vmov.f32	s16, #8	; 0x40400000  3.0
        for (size_t row = 0; row < input_matrix->rows; row++) {
   b7170:	6863      	ldr	r3, [r4, #4]
   b7172:	42ab      	cmp	r3, r5
   b7174:	d979      	bls.n	b726a <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x11a>
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
   b7176:	68a1      	ldr	r1, [r4, #8]
   b7178:	6823      	ldr	r3, [r4, #0]
   b717a:	fb05 f001 	mul.w	r0, r5, r1
   b717e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b7182:	466a      	mov	r2, sp
   b7184:	f7fd fece 	bl	b4f24 <arm_mean_f32>
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
   b7188:	68a1      	ldr	r1, [r4, #8]
   b718a:	6823      	ldr	r3, [r4, #0]
   b718c:	fb05 f001 	mul.w	r0, r5, r1
   b7190:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b7194:	aa01      	add	r2, sp, #4
   b7196:	f7ff fea5 	bl	b6ee4 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>
            cmsis_arm_fourth_moment(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, mean, &m_4);
   b719a:	68a2      	ldr	r2, [r4, #8]
   b719c:	6823      	ldr	r3, [r4, #0]
   b719e:	eddd 6a00 	vldr	s13, [sp]
        float32_t sum = 0.0f;
   b71a2:	eddf 7a33 	vldr	s15, [pc, #204]	; b7270 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x120>
            cmsis_arm_fourth_moment(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, mean, &m_4);
   b71a6:	fb05 f102 	mul.w	r1, r5, r2
   b71aa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
        blkCnt = blockSize >> 2U;
   b71ae:	0897      	lsrs	r7, r2, #2
   b71b0:	4618      	mov	r0, r3
   b71b2:	4639      	mov	r1, r7
        while (blkCnt > 0U) {
   b71b4:	3010      	adds	r0, #16
   b71b6:	b309      	cbz	r1, b71fc <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xac>
            in = *pSrc++;
   b71b8:	ed10 7a04 	vldr	s14, [r0, #-16]
            in = in - mean;
   b71bc:	ee37 7a66 	vsub.f32	s14, s14, s13
            blkCnt--;
   b71c0:	3901      	subs	r1, #1
            square = in * in;
   b71c2:	ee27 7a07 	vmul.f32	s14, s14, s14
            sum += square * square;
   b71c6:	eee7 7a07 	vfma.f32	s15, s14, s14
            in = *pSrc++;
   b71ca:	ed10 7a03 	vldr	s14, [r0, #-12]
            in = in - mean;
   b71ce:	ee37 7a66 	vsub.f32	s14, s14, s13
            square = in * in;
   b71d2:	ee27 7a07 	vmul.f32	s14, s14, s14
            sum += square * square;
   b71d6:	eee7 7a07 	vfma.f32	s15, s14, s14
            in = *pSrc++;
   b71da:	ed10 7a02 	vldr	s14, [r0, #-8]
            in = in - mean;
   b71de:	ee37 7a66 	vsub.f32	s14, s14, s13
            square = in * in;
   b71e2:	ee27 7a07 	vmul.f32	s14, s14, s14
            sum += square * square;
   b71e6:	eee7 7a07 	vfma.f32	s15, s14, s14
            in = *pSrc++;
   b71ea:	ed10 7a01 	vldr	s14, [r0, #-4]
            in = in - mean;
   b71ee:	ee37 7a66 	vsub.f32	s14, s14, s13
            square = in * in;
   b71f2:	ee27 7a07 	vmul.f32	s14, s14, s14
            sum += square * square;
   b71f6:	eee7 7a07 	vfma.f32	s15, s14, s14
        while (blkCnt > 0U) {
   b71fa:	e7db      	b.n	b71b4 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x64>
   b71fc:	eb03 1307 	add.w	r3, r3, r7, lsl #4
        blkCnt = blockSize % 0x4U;
   b7200:	f002 0103 	and.w	r1, r2, #3
   b7204:	eb03 0181 	add.w	r1, r3, r1, lsl #2
        while (blkCnt > 0U) {
   b7208:	4299      	cmp	r1, r3
   b720a:	d008      	beq.n	b721e <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xce>
            in = *pSrc++;
   b720c:	ecb3 7a01 	vldmia	r3!, {s14}
            in = in - mean;
   b7210:	ee37 7a66 	vsub.f32	s14, s14, s13
            square = in * in;
   b7214:	ee27 7a07 	vmul.f32	s14, s14, s14
            sum += square * square;
   b7218:	eee7 7a07 	vfma.f32	s15, s14, s14
        while (blkCnt > 0U) {
   b721c:	e7f4      	b.n	b7208 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xb8>
            var = var * var;
   b721e:	ed9d 7a01 	vldr	s14, [sp, #4]
                output_matrix->buffer[row] = -3.0f;
   b7222:	6833      	ldr	r3, [r6, #0]
            var = var * var;
   b7224:	ee27 7a07 	vmul.f32	s14, s14, s14
                output_matrix->buffer[row] = -3.0f;
   b7228:	eb03 0385 	add.w	r3, r3, r5, lsl #2
            if (var == 0.0f) {
   b722c:	eeb5 7a40 	vcmp.f32	s14, #0.0
   b7230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        sum = sum / blockSize;
   b7234:	bf1a      	itte	ne
   b7236:	ee06 2a90 	vmovne	s13, r2
   b723a:	eef8 6a66 	vcvtne.f32.u32	s13, s13
                output_matrix->buffer[row] = -3.0f;
   b723e:	4a0d      	ldreq	r2, [pc, #52]	; (b7274 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x124>)
            var = var * var;
   b7240:	ed8d 7a01 	vstr	s14, [sp, #4]
        sum = sum / blockSize;
   b7244:	bf14      	ite	ne
   b7246:	ee87 6aa6 	vdivne.f32	s12, s15, s13
                output_matrix->buffer[row] = -3.0f;
   b724a:	601a      	streq	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
   b724c:	f105 0501 	add.w	r5, r5, #1
                output_matrix->buffer[row] = (m_4 / var) - 3.0f;
   b7250:	bf1e      	ittt	ne
   b7252:	eec6 7a07 	vdivne.f32	s15, s12, s14
   b7256:	ee77 7ac8 	vsubne.f32	s15, s15, s16
   b725a:	edc3 7a00 	vstrne	s15, [r3]
        for (size_t row = 0; row < input_matrix->rows; row++) {
   b725e:	e787      	b.n	b7170 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x20>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   b7260:	4805      	ldr	r0, [pc, #20]	; (b7278 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x128>)
    }
   b7262:	b003      	add	sp, #12
   b7264:	ecbd 8b02 	vpop	{d8}
   b7268:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return EIDSP_OK;
   b726a:	2000      	movs	r0, #0
   b726c:	e7f9      	b.n	b7262 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x112>
   b726e:	bf00      	nop
   b7270:	00000000 	.word	0x00000000
   b7274:	c0400000 	.word	0xc0400000
   b7278:	fffffc14 	.word	0xfffffc14

000b727c <_ZN2ei5numpy13zero_handlingEPfj>:
                input[ix] = 1e-10;
   b727c:	4b07      	ldr	r3, [pc, #28]	; (b729c <_ZN2ei5numpy13zero_handlingEPfj+0x20>)
   b727e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        for (size_t ix = 0; ix < input_size; ix++) {
   b7282:	4288      	cmp	r0, r1
   b7284:	d009      	beq.n	b729a <_ZN2ei5numpy13zero_handlingEPfj+0x1e>
            if (input[ix] == 0) {
   b7286:	edd0 7a00 	vldr	s15, [r0]
   b728a:	eef5 7a40 	vcmp.f32	s15, #0.0
   b728e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                input[ix] = 1e-10;
   b7292:	bf08      	it	eq
   b7294:	6003      	streq	r3, [r0, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
   b7296:	3004      	adds	r0, #4
   b7298:	e7f3      	b.n	b7282 <_ZN2ei5numpy13zero_handlingEPfj+0x6>
    }
   b729a:	4770      	bx	lr
   b729c:	2edbe6ff 	.word	0x2edbe6ff

000b72a0 <_ZN2ei5numpy18underflow_handlingEPfjf>:
        for (size_t ix = 0; ix < input_size; ix++) {
   b72a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
                input[ix] = 0.0f;
   b72a4:	2300      	movs	r3, #0
        for (size_t ix = 0; ix < input_size; ix++) {
   b72a6:	4288      	cmp	r0, r1
   b72a8:	d00b      	beq.n	b72c2 <_ZN2ei5numpy18underflow_handlingEPfjf+0x22>
  { return __builtin_fabsf(__x); }
   b72aa:	edd0 7a00 	vldr	s15, [r0]
   b72ae:	eef0 7ae7 	vabs.f32	s15, s15
            if (fabs(input[ix]) < epsilon) {
   b72b2:	eef4 7ac0 	vcmpe.f32	s15, s0
   b72b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                input[ix] = 0.0f;
   b72ba:	bf48      	it	mi
   b72bc:	6003      	strmi	r3, [r0, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
   b72be:	3004      	adds	r0, #4
   b72c0:	e7f1      	b.n	b72a6 <_ZN2ei5numpy18underflow_handlingEPfjf+0x6>
    }
   b72c2:	4770      	bx	lr

000b72c4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
    ) {
   b72c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b72c8:	461e      	mov	r6, r3
        if (fft_matrix->rows != 1 || freq_matrix->rows != 1) {
   b72ca:	6843      	ldr	r3, [r0, #4]
   b72cc:	2b01      	cmp	r3, #1
    ) {
   b72ce:	b08a      	sub	sp, #40	; 0x28
   b72d0:	4607      	mov	r7, r0
   b72d2:	460d      	mov	r5, r1
   b72d4:	4614      	mov	r4, r2
        if (fft_matrix->rows != 1 || freq_matrix->rows != 1) {
   b72d6:	f040 809c 	bne.w	b7412 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x14e>
   b72da:	684b      	ldr	r3, [r1, #4]
   b72dc:	2b01      	cmp	r3, #1
   b72de:	f040 8098 	bne.w	b7412 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x14e>
        if (edges_matrix->cols != 1) {
   b72e2:	6893      	ldr	r3, [r2, #8]
   b72e4:	2b01      	cmp	r3, #1
   b72e6:	f040 8094 	bne.w	b7412 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x14e>
        if (output_matrix->rows != edges_matrix->rows - 1 || output_matrix->cols != edges_matrix->cols) {
   b72ea:	6853      	ldr	r3, [r2, #4]
   b72ec:	6872      	ldr	r2, [r6, #4]
   b72ee:	3b01      	subs	r3, #1
   b72f0:	429a      	cmp	r2, r3
   b72f2:	f040 808e 	bne.w	b7412 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x14e>
   b72f6:	68b1      	ldr	r1, [r6, #8]
   b72f8:	2901      	cmp	r1, #1
   b72fa:	f040 808a 	bne.w	b7412 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x14e>
        if (fft_matrix->cols != freq_matrix->cols) {
   b72fe:	6880      	ldr	r0, [r0, #8]
   b7300:	68ab      	ldr	r3, [r5, #8]
   b7302:	4298      	cmp	r0, r3
   b7304:	f040 8085 	bne.w	b7412 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x14e>
        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
   b7308:	2300      	movs	r3, #0
   b730a:	a802      	add	r0, sp, #8
   b730c:	9101      	str	r1, [sp, #4]
   b730e:	f7ff fbed 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
   b7312:	9b02      	ldr	r3, [sp, #8]
   b7314:	2b00      	cmp	r3, #0
   b7316:	d07a      	beq.n	b740e <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x14a>
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
   b7318:	6862      	ldr	r2, [r4, #4]
   b731a:	9901      	ldr	r1, [sp, #4]
   b731c:	2300      	movs	r3, #0
   b731e:	3a01      	subs	r2, #1
   b7320:	a806      	add	r0, sp, #24
   b7322:	f7ff fbe3 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
   b7326:	9b06      	ldr	r3, [sp, #24]
   b7328:	2b00      	cmp	r3, #0
   b732a:	d063      	beq.n	b73f4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x130>
   b732c:	2100      	movs	r1, #0
                    bucket_count.buffer[ex]++;
   b732e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
   b7332:	6863      	ldr	r3, [r4, #4]
   b7334:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
   b7338:	68ab      	ldr	r3, [r5, #8]
   b733a:	b288      	uxth	r0, r1
   b733c:	4283      	cmp	r3, r0
   b733e:	d935      	bls.n	b73ac <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xe8>
            float t = freq_matrix->buffer[ix];
   b7340:	682a      	ldr	r2, [r5, #0]
   b7342:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   b7346:	edd2 7a00 	vldr	s15, [r2]
   b734a:	0083      	lsls	r3, r0, #2
   b734c:	2000      	movs	r0, #0
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
   b734e:	fa1f f880 	uxth.w	r8, r0
   b7352:	45c4      	cmp	ip, r8
   b7354:	d926      	bls.n	b73a4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xe0>
                if (t >= edges_matrix->buffer[ex] && t < edges_matrix->buffer[ex + 1]) {
   b7356:	6822      	ldr	r2, [r4, #0]
   b7358:	eb02 0288 	add.w	r2, r2, r8, lsl #2
   b735c:	edd2 6a00 	vldr	s13, [r2]
   b7360:	eef4 6ae7 	vcmpe.f32	s13, s15
   b7364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7368:	ea4f 0e88 	mov.w	lr, r8, lsl #2
   b736c:	d81c      	bhi.n	b73a8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xe4>
   b736e:	edd2 6a01 	vldr	s13, [r2, #4]
   b7372:	eef4 6ae7 	vcmpe.f32	s13, s15
   b7376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b737a:	dd15      	ble.n	b73a8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xe4>
                    buckets.buffer[ex] += v;
   b737c:	9a02      	ldr	r2, [sp, #8]
            float v = fft_matrix->buffer[ix];
   b737e:	6838      	ldr	r0, [r7, #0]
                    buckets.buffer[ex] += v;
   b7380:	4472      	add	r2, lr
            float v = fft_matrix->buffer[ix];
   b7382:	4418      	add	r0, r3
                    buckets.buffer[ex] += v;
   b7384:	edd2 7a00 	vldr	s15, [r2]
   b7388:	edd0 6a00 	vldr	s13, [r0]
   b738c:	ee77 7aa6 	vadd.f32	s15, s15, s13
   b7390:	edc2 7a00 	vstr	s15, [r2]
                    bucket_count.buffer[ex]++;
   b7394:	9b06      	ldr	r3, [sp, #24]
   b7396:	4473      	add	r3, lr
   b7398:	edd3 7a00 	vldr	s15, [r3]
   b739c:	ee77 7a87 	vadd.f32	s15, s15, s14
   b73a0:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
   b73a4:	3101      	adds	r1, #1
   b73a6:	e7c4      	b.n	b7332 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x6e>
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
   b73a8:	3001      	adds	r0, #1
   b73aa:	e7d0      	b.n	b734e <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x8a>
   b73ac:	2100      	movs	r1, #0
            if (bucket_count.buffer[ex] == 0.0f) {
   b73ae:	2000      	movs	r0, #0
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
   b73b0:	6863      	ldr	r3, [r4, #4]
   b73b2:	b28a      	uxth	r2, r1
   b73b4:	3b01      	subs	r3, #1
   b73b6:	4293      	cmp	r3, r2
   b73b8:	d927      	bls.n	b740a <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x146>
            if (bucket_count.buffer[ex] == 0.0f) {
   b73ba:	9b06      	ldr	r3, [sp, #24]
   b73bc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   b73c0:	edd3 7a00 	vldr	s15, [r3]
                output_matrix->buffer[ex] = 0.0f;
   b73c4:	6833      	ldr	r3, [r6, #0]
            if (bucket_count.buffer[ex] == 0.0f) {
   b73c6:	eef5 7a40 	vcmp.f32	s15, #0.0
   b73ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                output_matrix->buffer[ex] = 0.0f;
   b73ce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
            if (bucket_count.buffer[ex] == 0.0f) {
   b73d2:	ea4f 0582 	mov.w	r5, r2, lsl #2
                output_matrix->buffer[ex] = buckets.buffer[ex] / bucket_count.buffer[ex];
   b73d6:	bf17      	itett	ne
   b73d8:	9a02      	ldrne	r2, [sp, #8]
                output_matrix->buffer[ex] = 0.0f;
   b73da:	6018      	streq	r0, [r3, #0]
                output_matrix->buffer[ex] = buckets.buffer[ex] / bucket_count.buffer[ex];
   b73dc:	1952      	addne	r2, r2, r5
   b73de:	edd2 6a00 	vldrne	s13, [r2]
   b73e2:	bf18      	it	ne
   b73e4:	ee86 7aa7 	vdivne.f32	s14, s13, s15
   b73e8:	f101 0101 	add.w	r1, r1, #1
   b73ec:	bf18      	it	ne
   b73ee:	ed83 7a00 	vstrne	s14, [r3]
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
   b73f2:	e7dd      	b.n	b73b0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xec>
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
   b73f4:	4c08      	ldr	r4, [pc, #32]	; (b7418 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x154>)
   b73f6:	a806      	add	r0, sp, #24
   b73f8:	f7ff fb8d 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
   b73fc:	a802      	add	r0, sp, #8
   b73fe:	f7ff fb8a 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
    }
   b7402:	4620      	mov	r0, r4
   b7404:	b00a      	add	sp, #40	; 0x28
   b7406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return EIDSP_OK;
   b740a:	2400      	movs	r4, #0
   b740c:	e7f3      	b.n	b73f6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x132>
        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
   b740e:	4c02      	ldr	r4, [pc, #8]	; (b7418 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x154>)
   b7410:	e7f4      	b.n	b73fc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x138>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   b7412:	4c02      	ldr	r4, [pc, #8]	; (b741c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x158>)
   b7414:	e7f5      	b.n	b7402 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x13e>
   b7416:	bf00      	nop
   b7418:	fffffc16 	.word	0xfffffc16
   b741c:	fffffc14 	.word	0xfffffc14

000b7420 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>:
    {
   b7420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7424:	ed2d 8b02 	vpush	{d8}
   b7428:	461e      	mov	r6, r3
        if (input_matrix->rows != 1) {
   b742a:	6843      	ldr	r3, [r0, #4]
   b742c:	2b01      	cmp	r3, #1
    {
   b742e:	b08e      	sub	sp, #56	; 0x38
   b7430:	4605      	mov	r5, r0
   b7432:	4688      	mov	r8, r1
   b7434:	4614      	mov	r4, r2
   b7436:	eef0 8a40 	vmov.f32	s17, s0
        if (input_matrix->rows != 1) {
   b743a:	f040 80cb 	bne.w	b75d4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1b4>
        if (out_fft_matrix->rows != 1 || out_fft_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
   b743e:	684b      	ldr	r3, [r1, #4]
   b7440:	2b01      	cmp	r3, #1
   b7442:	f040 80c7 	bne.w	b75d4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1b4>
   b7446:	688b      	ldr	r3, [r1, #8]
   b7448:	ea4f 0956 	mov.w	r9, r6, lsr #1
   b744c:	f109 0a01 	add.w	sl, r9, #1
   b7450:	4553      	cmp	r3, sl
   b7452:	f040 80bf 	bne.w	b75d4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1b4>
        if (out_freq_matrix->rows != 1 || out_freq_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
   b7456:	6851      	ldr	r1, [r2, #4]
   b7458:	2901      	cmp	r1, #1
   b745a:	f040 80bb 	bne.w	b75d4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1b4>
   b745e:	6893      	ldr	r3, [r2, #8]
   b7460:	459a      	cmp	sl, r3
   b7462:	f040 80b7 	bne.w	b75d4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1b4>
        if (input_matrix->buffer == NULL) {
   b7466:	6803      	ldr	r3, [r0, #0]
   b7468:	2b00      	cmp	r3, #0
   b746a:	f000 80b5 	beq.w	b75d8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1b8>
        if (out_fft_matrix->buffer == NULL) {
   b746e:	f8d8 2000 	ldr.w	r2, [r8]
   b7472:	2a00      	cmp	r2, #0
   b7474:	f000 80b0 	beq.w	b75d8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1b8>
        if (out_freq_matrix->buffer == NULL) {
   b7478:	6822      	ldr	r2, [r4, #0]
   b747a:	2a00      	cmp	r2, #0
   b747c:	f000 80ac 	beq.w	b75d8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1b8>
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
   b7480:	6882      	ldr	r2, [r0, #8]
   b7482:	a802      	add	r0, sp, #8
   b7484:	f7ff fb32 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
   b7488:	9b02      	ldr	r3, [sp, #8]
   b748a:	2b00      	cmp	r3, #0
   b748c:	f000 80a0 	beq.w	b75d0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1b0>
        if (n_fft > input_matrix->cols) {
   b7490:	68ad      	ldr	r5, [r5, #8]
   b7492:	42ae      	cmp	r6, r5
   b7494:	d917      	bls.n	b74c6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xa6>
            nperseg = input_matrix->cols;
   b7496:	b2ad      	uxth	r5, r5
        EI_DSP_MATRIX(triage_segments, 1, nperseg);
   b7498:	2300      	movs	r3, #0
   b749a:	462a      	mov	r2, r5
   b749c:	2101      	movs	r1, #1
   b749e:	a806      	add	r0, sp, #24
   b74a0:	f7ff fb24 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
   b74a4:	9b06      	ldr	r3, [sp, #24]
   b74a6:	2b00      	cmp	r3, #0
   b74a8:	f000 8090 	beq.w	b75cc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1ac>
   b74ac:	2300      	movs	r3, #0
   b74ae:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
        for (uint16_t ix = 0; ix < nperseg; ix++) {
   b74b2:	b29a      	uxth	r2, r3
   b74b4:	4295      	cmp	r5, r2
   b74b6:	d90a      	bls.n	b74ce <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xae>
            triage_segments.buffer[ix] = 1.0f;
   b74b8:	9a06      	ldr	r2, [sp, #24]
   b74ba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   b74be:	ed82 8a00 	vstr	s16, [r2]
        for (uint16_t ix = 0; ix < nperseg; ix++) {
   b74c2:	3301      	adds	r3, #1
   b74c4:	e7f5      	b.n	b74b2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x92>
            welch_matrix.cols = n_fft;
   b74c6:	bf38      	it	cc
   b74c8:	9604      	strcc	r6, [sp, #16]
        uint16_t nperseg = n_fft;
   b74ca:	4635      	mov	r5, r6
   b74cc:	e7e4      	b.n	b7498 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x78>
            out_freq_matrix->buffer[ix] = static_cast<float>(ix) * (1.0f / (n_fft * (1.0f / sampling_freq)));
   b74ce:	ee88 7a28 	vdiv.f32	s14, s16, s17
   b74d2:	2300      	movs	r3, #0
   b74d4:	ee07 6a90 	vmov	s15, r6
   b74d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b74dc:	ee67 7a87 	vmul.f32	s15, s15, s14
   b74e0:	ee88 7a27 	vdiv.f32	s14, s16, s15
   b74e4:	b299      	uxth	r1, r3
   b74e6:	6822      	ldr	r2, [r4, #0]
   b74e8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
   b74ec:	3301      	adds	r3, #1
            out_freq_matrix->buffer[ix] = static_cast<float>(ix) * (1.0f / (n_fft * (1.0f / sampling_freq)));
   b74ee:	ee07 1a90 	vmov	s15, r1
   b74f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b74f6:	ee67 7a87 	vmul.f32	s15, s15, s14
   b74fa:	edc2 7a00 	vstr	s15, [r2]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
   b74fe:	b29a      	uxth	r2, r3
   b7500:	4591      	cmp	r9, r2
   b7502:	d2ef      	bcs.n	b74e4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
        EI_DSP_MATRIX(mean_matrix, 1, 1);
   b7504:	2201      	movs	r2, #1
   b7506:	2300      	movs	r3, #0
   b7508:	4611      	mov	r1, r2
   b750a:	a80a      	add	r0, sp, #40	; 0x28
   b750c:	f7ff faee 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
   b7510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7512:	2b00      	cmp	r3, #0
   b7514:	d058      	beq.n	b75c8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1a8>
        ret = numpy::mean(&welch_matrix, &mean_matrix);
   b7516:	a90a      	add	r1, sp, #40	; 0x28
   b7518:	a802      	add	r0, sp, #8
   b751a:	f7ff fbe9 	bl	b6cf0 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
        if (ret != EIDSP_OK) {
   b751e:	4604      	mov	r4, r0
   b7520:	b9b8      	cbnz	r0, b7552 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x132>
        ret = numpy::subtract(&welch_matrix, &mean_matrix);
   b7522:	a90a      	add	r1, sp, #40	; 0x28
   b7524:	a802      	add	r0, sp, #8
   b7526:	f7ff fb83 	bl	b6c30 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
        if (ret != EIDSP_OK) {
   b752a:	4604      	mov	r4, r0
   b752c:	b988      	cbnz	r0, b7552 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x132>
        fft_complex_t *fft_output = (fft_complex_t*)ei_dsp_calloc((n_fft / 2 + 1) * sizeof(fft_complex_t), 1);
   b752e:	2101      	movs	r1, #1
   b7530:	ea4f 00ca 	mov.w	r0, sl, lsl #3
   b7534:	f004 fd62 	bl	bbffc <_Z9ei_callocjj>
        ret = numpy::rfft(welch_matrix.buffer, welch_matrix.cols, fft_output, n_fft / 2 + 1, n_fft);
   b7538:	9904      	ldr	r1, [sp, #16]
   b753a:	9600      	str	r6, [sp, #0]
   b753c:	4602      	mov	r2, r0
        fft_complex_t *fft_output = (fft_complex_t*)ei_dsp_calloc((n_fft / 2 + 1) * sizeof(fft_complex_t), 1);
   b753e:	4607      	mov	r7, r0
        ret = numpy::rfft(welch_matrix.buffer, welch_matrix.cols, fft_output, n_fft / 2 + 1, n_fft);
   b7540:	4653      	mov	r3, sl
   b7542:	9802      	ldr	r0, [sp, #8]
   b7544:	f7ff fc1c 	bl	b6d80 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>
        if (ret != EIDSP_OK) {
   b7548:	4604      	mov	r4, r0
   b754a:	b188      	cbz	r0, b7570 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x150>
        ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
   b754c:	4638      	mov	r0, r7
   b754e:	f004 fd57 	bl	bc000 <_Z7ei_freePv>
        EI_DSP_MATRIX(mean_matrix, 1, 1);
   b7552:	a80a      	add	r0, sp, #40	; 0x28
   b7554:	f7ff fadf 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(triage_segments, 1, nperseg);
   b7558:	a806      	add	r0, sp, #24
   b755a:	f7ff fadc 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
   b755e:	a802      	add	r0, sp, #8
   b7560:	f7ff fad9 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
    }
   b7564:	4620      	mov	r0, r4
   b7566:	b00e      	add	sp, #56	; 0x38
   b7568:	ecbd 8b02 	vpop	{d8}
   b756c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        float scale = 1.0f / (sampling_freq * nperseg);
   b7570:	ee07 5a90 	vmov	s15, r5
   b7574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b7578:	1d3b      	adds	r3, r7, #4
   b757a:	ee27 0aa8 	vmul.f32	s0, s15, s17
   b757e:	4602      	mov	r2, r0
   b7580:	eec8 6a00 	vdiv.f32	s13, s16, s0
            fft_output[ix].i = 0.0f;
   b7584:	2500      	movs	r5, #0
            if (ix != n_fft / 2) {
   b7586:	b291      	uxth	r1, r2
   b7588:	4589      	cmp	r9, r1
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
   b758a:	f103 0308 	add.w	r3, r3, #8
                (abs(fft_output[ix].i * fft_output[ix].i));
   b758e:	ed53 7a02 	vldr	s15, [r3, #-8]
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
   b7592:	ed13 7a03 	vldr	s14, [r3, #-12]
            fft_output[ix].i = 0.0f;
   b7596:	f843 5c08 	str.w	r5, [r3, #-8]
                (abs(fft_output[ix].i * fft_output[ix].i));
   b759a:	ee67 7aa7 	vmul.f32	s15, s15, s15
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
   b759e:	eee7 7a07 	vfma.f32	s15, s14, s14
            fft_output[ix].r *= scale;
   b75a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
                fft_output[ix].r *= 2;
   b75a6:	bf18      	it	ne
   b75a8:	ee77 7aa7 	vaddne.f32	s15, s15, s15
   b75ac:	ed43 7a03 	vstr	s15, [r3, #-12]
            out_fft_matrix->buffer[ix] = fft_output[ix].r;
   b75b0:	f8d8 1000 	ldr.w	r1, [r8]
   b75b4:	f853 0c0c 	ldr.w	r0, [r3, #-12]
   b75b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
   b75bc:	3201      	adds	r2, #1
            out_fft_matrix->buffer[ix] = fft_output[ix].r;
   b75be:	6008      	str	r0, [r1, #0]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
   b75c0:	b291      	uxth	r1, r2
   b75c2:	4589      	cmp	r9, r1
   b75c4:	d2df      	bcs.n	b7586 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x166>
   b75c6:	e7c1      	b.n	b754c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x12c>
        EI_DSP_MATRIX(mean_matrix, 1, 1);
   b75c8:	4c04      	ldr	r4, [pc, #16]	; (b75dc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1bc>)
   b75ca:	e7c2      	b.n	b7552 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x132>
        EI_DSP_MATRIX(triage_segments, 1, nperseg);
   b75cc:	4c03      	ldr	r4, [pc, #12]	; (b75dc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1bc>)
   b75ce:	e7c3      	b.n	b7558 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x138>
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
   b75d0:	4c02      	ldr	r4, [pc, #8]	; (b75dc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1bc>)
   b75d2:	e7c4      	b.n	b755e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x13e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   b75d4:	4c02      	ldr	r4, [pc, #8]	; (b75e0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1c0>)
   b75d6:	e7c5      	b.n	b7564 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x144>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
   b75d8:	4c00      	ldr	r4, [pc, #0]	; (b75dc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1bc>)
   b75da:	e7c3      	b.n	b7564 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x144>
   b75dc:	fffffc16 	.word	0xfffffc16
   b75e0:	fffffc14 	.word	0xfffffc14

000b75e4 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>:
            }
        }
        features.push_back(entropy);
    }

    static float get_percentile_from_sorted(const fvec &sorted, float percentile)
   b75e4:	b510      	push	{r4, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b75e6:	e9d0 4300 	ldrd	r4, r3, [r0]
   b75ea:	1b1b      	subs	r3, r3, r4
   b75ec:	109b      	asrs	r3, r3, #2
    {
        // adding 0.5 is a trick to get rounding out of C flooring behavior during cast
        size_t index = (size_t) ((percentile * (sorted.size()-1)) + 0.5);
   b75ee:	3b01      	subs	r3, #1
   b75f0:	ee07 3a90 	vmov	s15, r3
   b75f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b75f8:	ee67 7a80 	vmul.f32	s15, s15, s0
   b75fc:	ee17 0a90 	vmov	r0, s15
   b7600:	f7fc fe72 	bl	b42e8 <__aeabi_f2d>
   b7604:	4b05      	ldr	r3, [pc, #20]	; (b761c <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf+0x38>)
   b7606:	2200      	movs	r2, #0
   b7608:	f7fc fd10 	bl	b402c <__adddf3>
   b760c:	f7fd f99c 	bl	b4948 <__aeabi_d2uiz>
        return sorted[index];
   b7610:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    }
   b7614:	ed90 0a00 	vldr	s0, [r0]
   b7618:	bd10      	pop	{r4, pc}
   b761a:	bf00      	nop
   b761c:	3fe00000 	.word	0x3fe00000

000b7620 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_>:
            }
            d[jx - 1] = b[jx] * xx - a[jx] * y[ix];
        }
    }

    static void iir2(const float* x, float* y, size_t n, const float* b, const float* a, float* d)
   b7620:	b530      	push	{r4, r5, lr}
   b7622:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
        /*
         a[0]*y[n] = b[0] * x[n]               + d[0][n-1]
           d[0][n] = b[1] * x[n] - a[1] * y[n] + d[1][n-1]
           d[1][n] = b[2] * x[n] - a[2] * y[n]
         */
        const float one_over_a0 = 1.0f / a[0];
   b7626:	edd5 7a00 	vldr	s15, [r5]
   b762a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   b762e:	ee87 6a27 	vdiv.f32	s12, s14, s15
        for (size_t ix = 0; ix < n; ix++) {
   b7632:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   b7636:	4291      	cmp	r1, r2
   b7638:	d026      	beq.n	b7688 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_+0x68>
            const float xx = x[ix];
   b763a:	ecf0 6a01 	vldmia	r0!, {s13}
            y[ix] = b[0] * xx + d[0];
   b763e:	ed93 7a00 	vldr	s14, [r3]
   b7642:	edd4 7a00 	vldr	s15, [r4]
   b7646:	eee7 7a26 	vfma.f32	s15, s14, s13
            y[ix] *= one_over_a0;
   b764a:	ee67 7a86 	vmul.f32	s15, s15, s12
   b764e:	edc1 7a00 	vstr	s15, [r1]
            d[0] = b[1] * xx - a[1] * y[ix] + d[1];
   b7652:	ed95 7a01 	vldr	s14, [r5, #4]
   b7656:	ee67 7a67 	vnmul.f32	s15, s14, s15
   b765a:	ed93 7a01 	vldr	s14, [r3, #4]
   b765e:	eee7 7a26 	vfma.f32	s15, s14, s13
   b7662:	ed94 7a01 	vldr	s14, [r4, #4]
   b7666:	ee77 7a27 	vadd.f32	s15, s14, s15
   b766a:	edc4 7a00 	vstr	s15, [r4]
            d[1] = b[2] * xx - a[2] * y[ix];
   b766e:	ed95 7a02 	vldr	s14, [r5, #8]
   b7672:	ecf1 7a01 	vldmia	r1!, {s15}
   b7676:	ee67 7ac7 	vnmul.f32	s15, s15, s14
   b767a:	ed93 7a02 	vldr	s14, [r3, #8]
   b767e:	eee7 7a26 	vfma.f32	s15, s14, s13
   b7682:	edc4 7a01 	vstr	s15, [r4, #4]
        for (size_t ix = 0; ix < n; ix++) {
   b7686:	e7d6      	b.n	b7636 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_+0x16>
        }
    }
   b7688:	bd30      	pop	{r4, r5, pc}

000b768a <run_postprocessing>:

    return EI_IMPULSE_OK;
}

extern "C" EI_IMPULSE_ERROR run_postprocessing(ei_impulse_handle_t *handle,
                                               ei_impulse_result_t *result) {
   b768a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b768e:	4689      	mov	r9, r1
    if (!handle) {
   b7690:	4604      	mov	r4, r0
   b7692:	b1a8      	cbz	r0, b76c0 <run_postprocessing+0x36>
        return EI_IMPULSE_OUT_OF_MEMORY;
    }
    auto impulse = handle->impulse;
   b7694:	68c6      	ldr	r6, [r0, #12]

    for (size_t i = 0; i < impulse->postprocessing_blocks_size; i++) {
   b7696:	2500      	movs	r5, #0
        void* state = NULL;
        if (handle->post_processing_state != NULL) {
            state = handle->post_processing_state[i];
        }

        EI_IMPULSE_ERROR res = impulse->postprocessing_blocks[i].postprocess_fn(handle,
   b7698:	2718      	movs	r7, #24
    for (size_t i = 0; i < impulse->postprocessing_blocks_size; i++) {
   b769a:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   b769c:	42ab      	cmp	r3, r5
   b769e:	d913      	bls.n	b76c8 <run_postprocessing+0x3e>
        if (handle->post_processing_state != NULL) {
   b76a0:	6923      	ldr	r3, [r4, #16]
   b76a2:	b10b      	cbz	r3, b76a8 <run_postprocessing+0x1e>
            state = handle->post_processing_state[i];
   b76a4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
        EI_IMPULSE_ERROR res = impulse->postprocessing_blocks[i].postprocess_fn(handle,
   b76a8:	6e32      	ldr	r2, [r6, #96]	; 0x60
   b76aa:	fb07 2205 	mla	r2, r7, r5, r2
   b76ae:	4649      	mov	r1, r9
   b76b0:	f8d2 800c 	ldr.w	r8, [r2, #12]
   b76b4:	6952      	ldr	r2, [r2, #20]
   b76b6:	4620      	mov	r0, r4
   b76b8:	47c0      	blx	r8
                                                                                result,
                                                                                impulse->postprocessing_blocks[i].config,
                                                                                state);
        if (res != EI_IMPULSE_OK) {
   b76ba:	b918      	cbnz	r0, b76c4 <run_postprocessing+0x3a>
    for (size_t i = 0; i < impulse->postprocessing_blocks_size; i++) {
   b76bc:	3501      	adds	r5, #1
   b76be:	e7ec      	b.n	b769a <run_postprocessing+0x10>
        return EI_IMPULSE_OUT_OF_MEMORY;
   b76c0:	f06f 000a 	mvn.w	r0, #10
            return res;
        }
    }

    return EI_IMPULSE_OK;
}
   b76c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return EI_IMPULSE_OK;
   b76c8:	2000      	movs	r0, #0
   b76ca:	e7fb      	b.n	b76c4 <run_postprocessing+0x3a>

000b76cc <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj>:
    ei_feature_t *fmatrix,
    TfLiteTensor *input,
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    size_t mtx_size
) {
   b76cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t matrix_els = 0;
    uint32_t input_idx = 0;

    for (size_t i = 0; i < input_block_ids_size; i++) {
   b76d0:	f04f 0800 	mov.w	r8, #0
) {
   b76d4:	9000      	str	r0, [sp, #0]
   b76d6:	460c      	mov	r4, r1
   b76d8:	9301      	str	r3, [sp, #4]
    uint32_t input_idx = 0;
   b76da:	46c2      	mov	sl, r8
    size_t matrix_els = 0;
   b76dc:	4647      	mov	r7, r8
                break;
            }
            case kTfLiteInt8: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
                    float val = (float)matrix->buffer[ix];
                    input->data.int8[input_idx++] = static_cast<int8_t>(
   b76de:	f06f 097f 	mvn.w	r9, #127	; 0x7f
    for (size_t i = 0; i < input_block_ids_size; i++) {
   b76e2:	9b01      	ldr	r3, [sp, #4]
   b76e4:	4598      	cmp	r8, r3
   b76e6:	d071      	beq.n	b77cc <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x100>
        ei::matrix_t* matrix = fmatrix[0].matrix;
   b76e8:	9b00      	ldr	r3, [sp, #0]
        switch (input->type) {
   b76ea:	7821      	ldrb	r1, [r4, #0]
        ei::matrix_t* matrix = fmatrix[0].matrix;
   b76ec:	681d      	ldr	r5, [r3, #0]
        matrix_els += matrix->rows * matrix->cols;
   b76ee:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
        switch (input->type) {
   b76f2:	2903      	cmp	r1, #3
        matrix_els += matrix->rows * matrix->cols;
   b76f4:	fb02 7703 	mla	r7, r2, r3, r7
        switch (input->type) {
   b76f8:	d03b      	beq.n	b7772 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xa6>
   b76fa:	2909      	cmp	r1, #9
   b76fc:	d013      	beq.n	b7726 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x5a>
   b76fe:	2901      	cmp	r1, #1
   b7700:	d158      	bne.n	b77b4 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xe8>
   b7702:	4656      	mov	r6, sl
   b7704:	2100      	movs	r1, #0
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   b7706:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b770a:	4353      	muls	r3, r2
   b770c:	428b      	cmp	r3, r1
   b770e:	d959      	bls.n	b77c4 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xf8>
                    input->data.f[input_idx++] = matrix->buffer[ix];
   b7710:	682b      	ldr	r3, [r5, #0]
   b7712:	eb03 0381 	add.w	r3, r3, r1, lsl #2
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   b7716:	3101      	adds	r1, #1
                    input->data.f[input_idx++] = matrix->buffer[ix];
   b7718:	681a      	ldr	r2, [r3, #0]
   b771a:	6863      	ldr	r3, [r4, #4]
   b771c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   b7720:	3601      	adds	r6, #1
   b7722:	601a      	str	r2, [r3, #0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   b7724:	e7ef      	b.n	b7706 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x3a>
        switch (input->type) {
   b7726:	f04f 0b00 	mov.w	fp, #0
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   b772a:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b772e:	4353      	muls	r3, r2
   b7730:	455b      	cmp	r3, fp
   b7732:	eb0a 060b 	add.w	r6, sl, fp
   b7736:	d945      	bls.n	b77c4 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xf8>
                    float val = (float)matrix->buffer[ix];
   b7738:	682b      	ldr	r3, [r5, #0]
static int32_t pre_cast_quantize(float value, float scale, int32_t zero_point, bool is_signed) {

    int32_t max_value = is_signed ? 127 : 255;
    int32_t min_value = is_signed ? -128 : 0;
    // Saturate/clip any overflows post scaling
    return std::min( std::max( static_cast<int32_t>(round(value / scale)) + zero_point, min_value), max_value);
   b773a:	edd4 7a03 	vldr	s15, [r4, #12]
   b773e:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   b7742:	ed93 0a00 	vldr	s0, [r3]
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
   b7746:	ee80 0a27 	vdiv.f32	s0, s0, s15
   b774a:	f00a f837 	bl	c17bc <roundf>
   b774e:	6923      	ldr	r3, [r4, #16]
                    input->data.int8[input_idx++] = static_cast<int8_t>(
   b7750:	6862      	ldr	r2, [r4, #4]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   b7752:	f10b 0b01 	add.w	fp, fp, #1
   b7756:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b775a:	ee10 1a10 	vmov	r1, s0
   b775e:	4419      	add	r1, r3
                    input->data.int8[input_idx++] = static_cast<int8_t>(
   b7760:	297f      	cmp	r1, #127	; 0x7f
   b7762:	460b      	mov	r3, r1
   b7764:	bfa8      	it	ge
   b7766:	237f      	movge	r3, #127	; 0x7f
   b7768:	454b      	cmp	r3, r9
   b776a:	bfb8      	it	lt
   b776c:	464b      	movlt	r3, r9
   b776e:	5593      	strb	r3, [r2, r6]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   b7770:	e7db      	b.n	b772a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x5e>
        switch (input->type) {
   b7772:	f04f 0b00 	mov.w	fp, #0
                        pre_cast_quantize(val, input->params.scale, input->params.zero_point, true));
                }
                break;
            }
            case kTfLiteUInt8: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   b7776:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b777a:	4353      	muls	r3, r2
   b777c:	455b      	cmp	r3, fp
   b777e:	eb0a 060b 	add.w	r6, sl, fp
   b7782:	d91f      	bls.n	b77c4 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xf8>
                    float val = (float)matrix->buffer[ix];
   b7784:	682b      	ldr	r3, [r5, #0]
   b7786:	edd4 7a03 	vldr	s15, [r4, #12]
   b778a:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   b778e:	ed93 0a00 	vldr	s0, [r3]
   b7792:	ee80 0a27 	vdiv.f32	s0, s0, s15
   b7796:	f00a f811 	bl	c17bc <roundf>
   b779a:	6923      	ldr	r3, [r4, #16]
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
   b779c:	6862      	ldr	r2, [r4, #4]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   b779e:	f10b 0b01 	add.w	fp, fp, #1
   b77a2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b77a6:	ee10 1a10 	vmov	r1, s0
   b77aa:	4419      	add	r1, r3
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
   b77ac:	f381 0308 	usat	r3, #8, r1
   b77b0:	5593      	strb	r3, [r2, r6]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   b77b2:	e7e0      	b.n	b7776 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xaa>
                        pre_cast_quantize(val, input->params.scale, input->params.zero_point, false));            }
                break;
            }
            default: {
                ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
   b77b4:	480d      	ldr	r0, [pc, #52]	; (b77ec <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x120>)
   b77b6:	f004 fb49 	bl	bbe4c <_Z9ei_printfPKcz>
                return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
   b77ba:	f06f 000c 	mvn.w	r0, #12
            (int)input->bytes, (int)matrix_els);
        return EI_IMPULSE_INVALID_SIZE;
    }

    return EI_IMPULSE_OK;
}
   b77be:	b003      	add	sp, #12
   b77c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (size_t i = 0; i < input_block_ids_size; i++) {
   b77c4:	f108 0801 	add.w	r8, r8, #1
   b77c8:	46b2      	mov	sl, r6
   b77ca:	e78a      	b.n	b76e2 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x16>
    if (input->bytes / 4 != matrix_els && input->bytes != matrix_els) {
   b77cc:	69a1      	ldr	r1, [r4, #24]
   b77ce:	ebb7 0f91 	cmp.w	r7, r1, lsr #2
   b77d2:	d008      	beq.n	b77e6 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x11a>
   b77d4:	42b9      	cmp	r1, r7
   b77d6:	d006      	beq.n	b77e6 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x11a>
        ei_printf("ERR: input tensor has size %d bytes, but input matrix has has size %d bytes\n",
   b77d8:	4805      	ldr	r0, [pc, #20]	; (b77f0 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x124>)
   b77da:	463a      	mov	r2, r7
   b77dc:	f004 fb36 	bl	bbe4c <_Z9ei_printfPKcz>
        return EI_IMPULSE_INVALID_SIZE;
   b77e0:	f06f 0017 	mvn.w	r0, #23
   b77e4:	e7eb      	b.n	b77be <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xf2>
    return EI_IMPULSE_OK;
   b77e6:	2000      	movs	r0, #0
   b77e8:	e7e9      	b.n	b77be <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xf2>
   b77ea:	bf00      	nop
   b77ec:	000c5398 	.word	0x000c5398
   b77f0:	000c53bc 	.word	0x000c53bc

000b77f4 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE>:
}

EI_IMPULSE_ERROR fill_output_matrix_from_tensor(
    TfLiteTensor *output,
    matrix_t *output_matrix
) {
   b77f4:	b538      	push	{r3, r4, r5, lr}
   b77f6:	460c      	mov	r4, r1
    const size_t matrix_els = output_matrix->rows * output_matrix->cols;
   b77f8:	e9d1 2301 	ldrd	r2, r3, [r1, #4]

    switch (output->type) {
   b77fc:	7801      	ldrb	r1, [r0, #0]
   b77fe:	2903      	cmp	r1, #3
    const size_t matrix_els = output_matrix->rows * output_matrix->cols;
   b7800:	fb03 f202 	mul.w	r2, r3, r2
    switch (output->type) {
   b7804:	d032      	beq.n	b786c <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x78>
   b7806:	2909      	cmp	r1, #9
   b7808:	d016      	beq.n	b7838 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x44>
   b780a:	2901      	cmp	r1, #1
   b780c:	d148      	bne.n	b78a0 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xac>
        case kTfLiteFloat32: {
            if (output->bytes / 4 != matrix_els) {
   b780e:	6981      	ldr	r1, [r0, #24]
   b7810:	ebb2 0f91 	cmp.w	r2, r1, lsr #2
   b7814:	d009      	beq.n	b782a <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x36>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
   b7816:	2900      	cmp	r1, #0
   b7818:	bfb8      	it	lt
   b781a:	3103      	addlt	r1, #3
   b781c:	1089      	asrs	r1, r1, #2
            }
            break;
        }
        case kTfLiteUInt8: {
            if (output->bytes != matrix_els) {
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
   b781e:	4823      	ldr	r0, [pc, #140]	; (b78ac <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xb8>)
   b7820:	f004 fb14 	bl	bbe4c <_Z9ei_printfPKcz>
                    (int)output->bytes, (int)matrix_els);
                return EI_IMPULSE_INVALID_SIZE;
   b7824:	f06f 0017 	mvn.w	r0, #23
   b7828:	e005      	b.n	b7836 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x42>
            memcpy(output_matrix->buffer, output->data.f, output->bytes);
   b782a:	460a      	mov	r2, r1
   b782c:	6841      	ldr	r1, [r0, #4]
   b782e:	6820      	ldr	r0, [r4, #0]
   b7830:	f00b fcc6 	bl	c31c0 <memcpy>
            ei_printf("ERR: Cannot handle output type (%d)\n", output->type);
            return EI_IMPULSE_OUTPUT_TENSOR_WAS_NULL;
        }
    }

    return EI_IMPULSE_OK;
   b7834:	2000      	movs	r0, #0
}
   b7836:	bd38      	pop	{r3, r4, r5, pc}
            if (output->bytes != matrix_els) {
   b7838:	6981      	ldr	r1, [r0, #24]
   b783a:	4291      	cmp	r1, r2
   b783c:	d1ef      	bne.n	b781e <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x2a>
            for (size_t ix = 0; ix < output->bytes; ix++) {
   b783e:	2200      	movs	r2, #0
   b7840:	6983      	ldr	r3, [r0, #24]
   b7842:	4293      	cmp	r3, r2
   b7844:	d9f6      	bls.n	b7834 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x40>
                output_matrix->buffer[ix] = value;
   b7846:	6823      	ldr	r3, [r4, #0]
                float value = static_cast<float>(output->data.int8[ix] - output->params.zero_point) * output->params.scale;
   b7848:	6905      	ldr	r5, [r0, #16]
   b784a:	ed90 7a03 	vldr	s14, [r0, #12]
                output_matrix->buffer[ix] = value;
   b784e:	eb03 0182 	add.w	r1, r3, r2, lsl #2
                float value = static_cast<float>(output->data.int8[ix] - output->params.zero_point) * output->params.scale;
   b7852:	6843      	ldr	r3, [r0, #4]
   b7854:	569b      	ldrsb	r3, [r3, r2]
   b7856:	1b5b      	subs	r3, r3, r5
   b7858:	ee07 3a90 	vmov	s15, r3
   b785c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            for (size_t ix = 0; ix < output->bytes; ix++) {
   b7860:	3201      	adds	r2, #1
                float value = static_cast<float>(output->data.int8[ix] - output->params.zero_point) * output->params.scale;
   b7862:	ee67 7a87 	vmul.f32	s15, s15, s14
                output_matrix->buffer[ix] = value;
   b7866:	edc1 7a00 	vstr	s15, [r1]
            for (size_t ix = 0; ix < output->bytes; ix++) {
   b786a:	e7e9      	b.n	b7840 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x4c>
            if (output->bytes != matrix_els) {
   b786c:	6981      	ldr	r1, [r0, #24]
   b786e:	4291      	cmp	r1, r2
   b7870:	d1d5      	bne.n	b781e <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x2a>
            for (size_t ix = 0; ix < output->bytes; ix++) {
   b7872:	2200      	movs	r2, #0
   b7874:	6983      	ldr	r3, [r0, #24]
   b7876:	4293      	cmp	r3, r2
   b7878:	d9dc      	bls.n	b7834 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x40>
                output_matrix->buffer[ix] = value;
   b787a:	6823      	ldr	r3, [r4, #0]
                float value = static_cast<float>(output->data.uint8[ix] - output->params.zero_point) * output->params.scale;
   b787c:	6905      	ldr	r5, [r0, #16]
   b787e:	ed90 7a03 	vldr	s14, [r0, #12]
                output_matrix->buffer[ix] = value;
   b7882:	eb03 0182 	add.w	r1, r3, r2, lsl #2
                float value = static_cast<float>(output->data.uint8[ix] - output->params.zero_point) * output->params.scale;
   b7886:	6843      	ldr	r3, [r0, #4]
   b7888:	5c9b      	ldrb	r3, [r3, r2]
   b788a:	1b5b      	subs	r3, r3, r5
   b788c:	ee07 3a90 	vmov	s15, r3
   b7890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            for (size_t ix = 0; ix < output->bytes; ix++) {
   b7894:	3201      	adds	r2, #1
                float value = static_cast<float>(output->data.uint8[ix] - output->params.zero_point) * output->params.scale;
   b7896:	ee67 7a87 	vmul.f32	s15, s15, s14
                output_matrix->buffer[ix] = value;
   b789a:	edc1 7a00 	vstr	s15, [r1]
            for (size_t ix = 0; ix < output->bytes; ix++) {
   b789e:	e7e9      	b.n	b7874 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x80>
            ei_printf("ERR: Cannot handle output type (%d)\n", output->type);
   b78a0:	4803      	ldr	r0, [pc, #12]	; (b78b0 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xbc>)
   b78a2:	f004 fad3 	bl	bbe4c <_Z9ei_printfPKcz>
            return EI_IMPULSE_OUTPUT_TENSOR_WAS_NULL;
   b78a6:	f06f 000d 	mvn.w	r0, #13
   b78aa:	e7c4      	b.n	b7836 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x42>
   b78ac:	000c5409 	.word	0x000c5409
   b78b0:	000c544b 	.word	0x000c544b

000b78b4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    ei_impulse_result_t *result,
    bool debug
) {
   b78b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b78b8:	ed2d 8b04 	vpush	{d8-d9}
    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;

    if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_OBJECT_DETECTION) {
   b78bc:	788b      	ldrb	r3, [r1, #2]
) {
   b78be:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   b78c0:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
    if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_OBJECT_DETECTION) {
   b78c4:	2b03      	cmp	r3, #3
) {
   b78c6:	4605      	mov	r5, r0
    if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_OBJECT_DETECTION) {
   b78c8:	d157      	bne.n	b797a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xc6>
        switch (block_config->object_detection_last_layer) {
   b78ca:	f991 3009 	ldrsb.w	r3, [r1, #9]
   b78ce:	1e58      	subs	r0, r3, #1
   b78d0:	280b      	cmp	r0, #11
   b78d2:	d84f      	bhi.n	b7974 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xc0>
   b78d4:	e8df f000 	tbb	[pc, r0]
   b78d8:	1c0fb206 	.word	0x1c0fb206
   b78dc:	2828220f 	.word	0x2828220f
   b78e0:	454e3c33 	.word	0x454e3c33
                }
                break;
            }
#else
            case EI_CLASSIFIER_LAST_LAYER_SSD: {
                ei_printf("ERR: MobileNet SSD is not supported in EON or TensorFlow Lite Micro\n");
   b78e4:	4857      	ldr	r0, [pc, #348]	; (b7a44 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x190>)
                }
                break;
            }
            case EI_CLASSIFIER_LAST_LAYER_YOLOX: {
                if (block_config->quantized == 1) {
                    ei_printf("ERR: YOLOX does not support quantized inference\n");
   b78e6:	f004 fab1 	bl	bbe4c <_Z9ei_printfPKcz>
                break;
            }
            default: {
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
                    block_config->object_detection_last_layer);
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
   b78ea:	f06f 0009 	mvn.w	r0, #9
            }
        }
    }

    return fill_res;
}
   b78ee:	ecbd 8b04 	vpop	{d8-d9}
   b78f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (output->type == kTfLiteInt8) {
   b78f6:	7811      	ldrb	r1, [r2, #0]
   b78f8:	2909      	cmp	r1, #9
   b78fa:	f000 809f 	beq.w	b7a3c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x188>
                else if (output->type == kTfLiteFloat32) {
   b78fe:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
   b7902:	2b01      	cmp	r3, #1
   b7904:	f000 809a 	beq.w	b7a3c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x188>
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
   b7908:	484f      	ldr	r0, [pc, #316]	; (b7a48 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x194>)
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
   b790a:	f004 fa9f 	bl	bbe4c <_Z9ei_printfPKcz>
   b790e:	e7ec      	b.n	b78ea <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x36>
                if (block_config->quantized == 1) {
   b7910:	7d0b      	ldrb	r3, [r1, #20]
   b7912:	2b00      	cmp	r3, #0
   b7914:	f000 8092 	beq.w	b7a3c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x188>
                    ei_printf("ERR: YOLOX does not support quantized inference\n");
   b7918:	484c      	ldr	r0, [pc, #304]	; (b7a4c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x198>)
   b791a:	e7e4      	b.n	b78e6 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x32>
                if (block_config->quantized == 1) {
   b791c:	7d0b      	ldrb	r3, [r1, #20]
   b791e:	2b00      	cmp	r3, #0
   b7920:	f000 808c 	beq.w	b7a3c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x188>
                    ei_printf("ERR: YOLOV7 does not support quantized inference\n");
   b7924:	484a      	ldr	r0, [pc, #296]	; (b7a50 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x19c>)
   b7926:	e7de      	b.n	b78e6 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x32>
                if (output->type == kTfLiteInt8) {
   b7928:	7811      	ldrb	r1, [r2, #0]
   b792a:	2909      	cmp	r1, #9
   b792c:	f000 8086 	beq.w	b7a3c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x188>
                else if (output->type == kTfLiteFloat32) {
   b7930:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
   b7934:	2b01      	cmp	r3, #1
   b7936:	f000 8081 	beq.w	b7a3c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x188>
                    ei_printf("ERR: Invalid output type (%d) for TAO last layer\n", output->type);
   b793a:	4846      	ldr	r0, [pc, #280]	; (b7a54 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1a0>)
   b793c:	e7e5      	b.n	b790a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x56>
                if (output->type == kTfLiteInt8) {
   b793e:	7811      	ldrb	r1, [r2, #0]
   b7940:	2909      	cmp	r1, #9
   b7942:	d07b      	beq.n	b7a3c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x188>
                else if (output->type == kTfLiteFloat32) {
   b7944:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
   b7948:	2b01      	cmp	r3, #1
   b794a:	d077      	beq.n	b7a3c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x188>
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv3 layer\n", output->type);
   b794c:	4842      	ldr	r0, [pc, #264]	; (b7a58 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1a4>)
   b794e:	e7dc      	b.n	b790a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x56>
                if (output->type == kTfLiteInt8) {
   b7950:	7811      	ldrb	r1, [r2, #0]
   b7952:	2909      	cmp	r1, #9
   b7954:	d072      	beq.n	b7a3c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x188>
                else if (output->type == kTfLiteFloat32) {
   b7956:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
   b795a:	2b01      	cmp	r3, #1
   b795c:	d06e      	beq.n	b7a3c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x188>
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv4 layer\n", output->type);
   b795e:	483f      	ldr	r0, [pc, #252]	; (b7a5c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1a8>)
   b7960:	e7d3      	b.n	b790a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x56>
                if (output->type == kTfLiteInt8) {
   b7962:	7811      	ldrb	r1, [r2, #0]
   b7964:	2909      	cmp	r1, #9
   b7966:	d069      	beq.n	b7a3c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x188>
                else if (output->type == kTfLiteFloat32) {
   b7968:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
   b796c:	2b01      	cmp	r3, #1
   b796e:	d065      	beq.n	b7a3c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x188>
                    ei_printf("ERR: Invalid output type (%d) for YOLO PRO layer\n", output->type);
   b7970:	483b      	ldr	r0, [pc, #236]	; (b7a60 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1ac>)
   b7972:	e7ca      	b.n	b790a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x56>
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
   b7974:	483b      	ldr	r0, [pc, #236]	; (b7a64 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1b0>)
   b7976:	4619      	mov	r1, r3
   b7978:	e7c7      	b.n	b790a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x56>
    else if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_VISUAL_ANOMALY)
   b797a:	2b05      	cmp	r3, #5
   b797c:	d101      	bne.n	b7982 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xce>
    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;
   b797e:	2000      	movs	r0, #0
   b7980:	e7b5      	b.n	b78ee <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x3a>
        if (!result->copy_output) {
   b7982:	f897 4048 	ldrb.w	r4, [r7, #72]	; 0x48
   b7986:	2c00      	cmp	r4, #0
   b7988:	d1f9      	bne.n	b797e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xca>
            if (int8_output) {
   b798a:	7813      	ldrb	r3, [r2, #0]
                fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
   b798c:	f8d2 8004 	ldr.w	r8, [r2, #4]
            if (int8_output) {
   b7990:	2b09      	cmp	r3, #9
   b7992:	d022      	beq.n	b79da <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x126>
                                                                       float *data,
                                                                       bool debug) {
#ifdef EI_DSP_RESULT_OVERRIDE
    uint32_t stop_count = EI_DSP_RESULT_OVERRIDE;
#else
    uint32_t stop_count = impulse->label_count;
   b7994:	f8b0 9072 	ldrh.w	r9, [r0, #114]	; 0x72
    for (uint32_t ix = 0; ix < stop_count; ix++) {

        float value = data[ix];

        if (debug) {
            ei_printf("%s:\t", impulse->categories[ix]);
   b7998:	4a33      	ldr	r2, [pc, #204]	; (b7a68 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1b4>)
            ei_printf_float(value);
            ei_printf("\n");
   b799a:	f8df a0d0 	ldr.w	sl, [pc, #208]	; b7a6c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1b8>
    for (uint32_t ix = 0; ix < stop_count; ix++) {
   b799e:	454c      	cmp	r4, r9
   b79a0:	d2ed      	bcs.n	b797e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xca>
        float value = data[ix];
   b79a2:	ecb8 8a01 	vldmia	r8!, {s16}
        if (debug) {
   b79a6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   b79aa:	b16e      	cbz	r6, b79c8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x114>
            ei_printf("%s:\t", impulse->categories[ix]);
   b79ac:	6f6b      	ldr	r3, [r5, #116]	; 0x74
   b79ae:	4610      	mov	r0, r2
   b79b0:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   b79b4:	f004 fa4a 	bl	bbe4c <_Z9ei_printfPKcz>
            ei_printf_float(value);
   b79b8:	eeb0 0a48 	vmov.f32	s0, s16
   b79bc:	f004 fa68 	bl	bbe90 <_Z15ei_printf_floatf>
            ei_printf("\n");
   b79c0:	4650      	mov	r0, sl
   b79c2:	f004 fa43 	bl	bbe4c <_Z9ei_printfPKcz>
   b79c6:	4a28      	ldr	r2, [pc, #160]	; (b7a68 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1b4>)
        }
// For testing purposes, we will have more values than labels
#ifndef EI_DSP_RESULT_OVERRIDE
        result->classification[ix].label = impulse->categories[ix];
   b79c8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
   b79ca:	f853 300b 	ldr.w	r3, [r3, fp]
   b79ce:	60bb      	str	r3, [r7, #8]
#endif
        result->classification[ix].value = value;
   b79d0:	ed87 8a03 	vstr	s16, [r7, #12]
    for (uint32_t ix = 0; ix < stop_count; ix++) {
   b79d4:	3401      	adds	r4, #1
   b79d6:	3708      	adds	r7, #8
   b79d8:	e7e1      	b.n	b799e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xea>
                fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
   b79da:	edd2 7a04 	vldr	s15, [r2, #16]
   b79de:	ed92 9a03 	vldr	s18, [r2, #12]
            ei_printf("%s:\t", impulse->categories[ix]);
   b79e2:	f8df b084 	ldr.w	fp, [pc, #132]	; b7a68 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1b4>
            ei_printf("\n");
   b79e6:	f8df 9084 	ldr.w	r9, [pc, #132]	; b7a6c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1b8>
   b79ea:	eef8 8ae7 	vcvt.f32.s32	s17, s15
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   b79ee:	f8b5 3072 	ldrh.w	r3, [r5, #114]	; 0x72
   b79f2:	42a3      	cmp	r3, r4
   b79f4:	d9c3      	bls.n	b797e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xca>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
   b79f6:	f918 3004 	ldrsb.w	r3, [r8, r4]
   b79fa:	ee08 3a10 	vmov	s16, r3
   b79fe:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   b7a02:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   b7a06:	ee38 8a68 	vsub.f32	s16, s16, s17
   b7a0a:	ee28 8a09 	vmul.f32	s16, s16, s18
        if (debug) {
   b7a0e:	b166      	cbz	r6, b7a2a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x176>
            ei_printf("%s:\t", impulse->categories[ix]);
   b7a10:	6f6b      	ldr	r3, [r5, #116]	; 0x74
   b7a12:	4658      	mov	r0, fp
   b7a14:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   b7a18:	f004 fa18 	bl	bbe4c <_Z9ei_printfPKcz>
            ei_printf_float(value);
   b7a1c:	eeb0 0a48 	vmov.f32	s0, s16
   b7a20:	f004 fa36 	bl	bbe90 <_Z15ei_printf_floatf>
            ei_printf("\n");
   b7a24:	4648      	mov	r0, r9
   b7a26:	f004 fa11 	bl	bbe4c <_Z9ei_printfPKcz>
        result->classification[ix].label = impulse->categories[ix];
   b7a2a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
   b7a2c:	f853 300a 	ldr.w	r3, [r3, sl]
   b7a30:	60bb      	str	r3, [r7, #8]
        result->classification[ix].value = value;
   b7a32:	ed87 8a03 	vstr	s16, [r7, #12]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   b7a36:	3401      	adds	r4, #1
   b7a38:	3708      	adds	r7, #8
   b7a3a:	e7d8      	b.n	b79ee <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x13a>
                    fill_res = fill_result_struct_quantized_yolov5(
   b7a3c:	f06f 0014 	mvn.w	r0, #20
   b7a40:	e755      	b.n	b78ee <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x3a>
   b7a42:	bf00      	nop
   b7a44:	000c5470 	.word	0x000c5470
   b7a48:	000c54b5 	.word	0x000c54b5
   b7a4c:	000c54ea 	.word	0x000c54ea
   b7a50:	000c551b 	.word	0x000c551b
   b7a54:	000c554d 	.word	0x000c554d
   b7a58:	000c557f 	.word	0x000c557f
   b7a5c:	000c55b3 	.word	0x000c55b3
   b7a60:	000c55e7 	.word	0x000c55e7
   b7a64:	000c5619 	.word	0x000c5619
   b7a68:	000c564c 	.word	0x000c564c
   b7a6c:	000c603e 	.word	0x000c603e

000b7a70 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0>:
 * @param   result          Struct for results
 * @param   debug           Whether to print debug info
 *
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_run(
   b7a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7a74:	4699      	mov	r9, r3
    ei_impulse_result_t *result,
    bool debug) {

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;

    if (graph_config->model_invoke() != kTfLiteOk) {
   b7a76:	698b      	ldr	r3, [r1, #24]
static EI_IMPULSE_ERROR inference_tflite_run(
   b7a78:	b085      	sub	sp, #20
    if (graph_config->model_invoke() != kTfLiteOk) {
   b7a7a:	689b      	ldr	r3, [r3, #8]
static EI_IMPULSE_ERROR inference_tflite_run(
   b7a7c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   b7a7e:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   b7a82:	4607      	mov	r7, r0
   b7a84:	460d      	mov	r5, r1
   b7a86:	4614      	mov	r4, r2
    if (graph_config->model_invoke() != kTfLiteOk) {
   b7a88:	4798      	blx	r3
   b7a8a:	bb48      	cbnz	r0, b7ae0 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x70>
        return EI_IMPULSE_TFLITE_ERROR;
    }

    uint64_t ctx_end_us = ei_read_timer_us();
   b7a8c:	f004 f9d8 	bl	bbe40 <_Z16ei_read_timer_usv>

    result->timing.classification_us = ctx_end_us - ctx_start_us;
   b7a90:	1b00      	subs	r0, r0, r4
   b7a92:	eb61 0109 	sbc.w	r1, r1, r9
   b7a96:	e9c6 010e 	strd	r0, r1, [r6, #56]	; 0x38
    result->timing.classification = (int)(result->timing.classification_us / 1000);
   b7a9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7a9e:	2300      	movs	r3, #0
   b7aa0:	f7fc ffc2 	bl	b4a28 <__aeabi_ldivmod>
   b7aa4:	4601      	mov	r1, r0
   b7aa6:	62b0      	str	r0, [r6, #40]	; 0x28

    // Read the predicted y value from the model's output tensor
    if (debug) {
   b7aa8:	f1b8 0f00 	cmp.w	r8, #0
   b7aac:	d002      	beq.n	b7ab4 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x44>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
   b7aae:	480e      	ldr	r0, [pc, #56]	; (b7ae8 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x78>)
   b7ab0:	f004 f9cc 	bl	bbe4c <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR fill_res = fill_result_struct_from_output_tensor_tflite(
   b7ab4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b7ab6:	9300      	str	r3, [sp, #0]
   b7ab8:	e9cd 6801 	strd	r6, r8, [sp, #4]
   b7abc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   b7ac0:	4629      	mov	r1, r5
   b7ac2:	4638      	mov	r0, r7
   b7ac4:	f7ff fef6 	bl	b78b4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>
        impulse, block_config, output, labels_tensor, scores_tensor, result, debug);

    if (fill_res != EI_IMPULSE_OK) {
   b7ac8:	4604      	mov	r4, r0
   b7aca:	b928      	cbnz	r0, b7ad8 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x68>
        return fill_res;
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
   b7acc:	f004 f9b6 	bl	bbe3c <_Z29ei_run_impulse_check_canceledv>
        return EI_IMPULSE_CANCELED;
   b7ad0:	3002      	adds	r0, #2
   b7ad2:	bf08      	it	eq
   b7ad4:	f06f 0401 	mvneq.w	r4, #1
    }

    return EI_IMPULSE_OK;
}
   b7ad8:	4620      	mov	r0, r4
   b7ada:	b005      	add	sp, #20
   b7adc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return EI_IMPULSE_TFLITE_ERROR;
   b7ae0:	f06f 0402 	mvn.w	r4, #2
   b7ae4:	e7f8      	b.n	b7ad8 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x68>
   b7ae6:	bf00      	nop
   b7ae8:	000c5651 	.word	0x000c5651

000b7aec <run_inference>:
    extern "C" EI_IMPULSE_ERROR run_inference(
        ei_impulse_handle_t *handle,
        ei_feature_t *fmatrix,
        ei_impulse_result_t *result,
        bool debug = false)
    {
   b7aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b7af0:	4606      	mov	r6, r0
   b7af2:	468a      	mov	sl, r1
   b7af4:	4617      	mov	r7, r2
   b7af6:	4698      	mov	r8, r3
        auto &impulse = handle->impulse;
        for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++)
   b7af8:	2500      	movs	r5, #0
   b7afa:	68f3      	ldr	r3, [r6, #12]
   b7afc:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
   b7b00:	42aa      	cmp	r2, r5
   b7b02:	d914      	bls.n	b7b2e <run_inference+0x42>
        {

            ei_learning_block_t block = impulse->learning_blocks[ix];
   b7b04:	6d9c      	ldr	r4, [r3, #88]	; 0x58
   b7b06:	eb04 1445 	add.w	r4, r4, r5, lsl #5
   b7b0a:	e9d4 9002 	ldrd	r9, r0, [r4, #8]
   b7b0e:	7e22      	ldrb	r2, [r4, #24]
   b7b10:	6963      	ldr	r3, [r4, #20]
            {
                return scale_res;
            }
#endif

            result->copy_output = block.keep_output;
   b7b12:	7924      	ldrb	r4, [r4, #4]
   b7b14:	f887 4048 	strb.w	r4, [r7, #72]	; 0x48

            EI_IMPULSE_ERROR res = block.infer_fn(impulse, fmatrix, ix, (uint32_t *)block.input_block_ids, block.input_block_ids_size, result, block.config, debug);
   b7b18:	e9cd 0802 	strd	r0, r8, [sp, #8]
   b7b1c:	e9cd 2700 	strd	r2, r7, [sp]
   b7b20:	68f0      	ldr	r0, [r6, #12]
   b7b22:	462a      	mov	r2, r5
   b7b24:	4651      	mov	r1, sl
   b7b26:	47c8      	blx	r9
            if (res != EI_IMPULSE_OK)
   b7b28:	b930      	cbnz	r0, b7b38 <run_inference+0x4c>
        for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++)
   b7b2a:	3501      	adds	r5, #1
   b7b2c:	e7e5      	b.n	b7afa <run_inference+0xe>
                return scale_res;
            }
#endif
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED)
   b7b2e:	f004 f985 	bl	bbe3c <_Z29ei_run_impulse_check_canceledv>
        {
            return EI_IMPULSE_CANCELED;
        }

        return EI_IMPULSE_OK;
   b7b32:	1c83      	adds	r3, r0, #2
   b7b34:	bf18      	it	ne
   b7b36:	2000      	movne	r0, #0
    }
   b7b38:	b004      	add	sp, #16
   b7b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b7b3e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7b3e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7b40:	e9d0 5300 	ldrd	r5, r3, [r0]
   b7b44:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7b46:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7b48:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b7b4c:	42ae      	cmp	r6, r5
   b7b4e:	d004      	beq.n	b7b5a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b7b50:	4628      	mov	r0, r5
   b7b52:	f009 f836 	bl	c0bc2 <_ZN6StringD1Ev>
   b7b56:	3514      	adds	r5, #20
   b7b58:	e7f8      	b.n	b7b4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b7b5a:	6820      	ldr	r0, [r4, #0]
   b7b5c:	f007 fa40 	bl	befe0 <free>
    AllocatorT::free(data_);
}
   b7b60:	4620      	mov	r0, r4
   b7b62:	bd70      	pop	{r4, r5, r6, pc}

000b7b64 <_ZNSt6vectorIbN2ei7EiAllocIbEEEC1EjRKbRKS2_>:
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : vector(__n, false, __a)
      { }

      vector(size_type __n, const bool& __value,
   b7b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    : _M_p(__x), _M_offset(__y) { }
   b7b68:	f04f 0800 	mov.w	r8, #0
   b7b6c:	e9c0 8800 	strd	r8, r8, [r0]
   b7b70:	e9c0 8802 	strd	r8, r8, [r0, #8]
      vector(size_type __n, const bool& __value,
   b7b74:	4605      	mov	r5, r0
   b7b76:	4617      	mov	r7, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
   b7b78:	f8c0 8010 	str.w	r8, [r0, #16]
      }

      void
      _M_initialize(size_type __n)
      {
	if (__n)
   b7b7c:	460c      	mov	r4, r1
   b7b7e:	b151      	cbz	r1, b7b96 <_ZNSt6vectorIbN2ei7EiAllocIbEEEC1EjRKbRKS2_+0x32>
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
   b7b80:	f101 061f 	add.w	r6, r1, #31
   b7b84:	0976      	lsrs	r6, r6, #5
        auto bytes = n * sizeof(T);
   b7b86:	00b6      	lsls	r6, r6, #2
        auto ptr = ei_dsp_malloc(bytes);
   b7b88:	4630      	mov	r0, r6
   b7b8a:	f004 fa35 	bl	bbff8 <_Z9ei_mallocj>
	  {
	    _Bit_pointer __q = this->_M_allocate(__n);
	    this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
	    this->_M_impl._M_start = iterator(std::__addressof(*__q), 0);
   b7b8e:	e9c5 0800 	strd	r0, r8, [r5]
	    this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
   b7b92:	4406      	add	r6, r0
   b7b94:	612e      	str	r6, [r5, #16]
      _M_p += __n / int(_S_word_bit);
   b7b96:	2c00      	cmp	r4, #0
   b7b98:	4623      	mov	r3, r4
   b7b9a:	bfb8      	it	lt
   b7b9c:	f104 031f 	addlt.w	r3, r4, #31
      __n = __n % int(_S_word_bit);
   b7ba0:	4262      	negs	r2, r4
      iterator __tmp = __x;
   b7ba2:	6828      	ldr	r0, [r5, #0]
      __n = __n % int(_S_word_bit);
   b7ba4:	f002 021f 	and.w	r2, r2, #31
   b7ba8:	f004 041f 	and.w	r4, r4, #31
      _M_p += __n / int(_S_word_bit);
   b7bac:	ea4f 1363 	mov.w	r3, r3, asr #5
      __n = __n % int(_S_word_bit);
   b7bb0:	bf58      	it	pl
   b7bb2:	4254      	negpl	r4, r2
      _M_p += __n / int(_S_word_bit);
   b7bb4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      if (__n < 0)
   b7bb8:	2c00      	cmp	r4, #0
	  __n += int(_S_word_bit);
   b7bba:	bfbc      	itt	lt
   b7bbc:	3420      	addlt	r4, #32
	  --_M_p;
   b7bbe:	3b04      	sublt	r3, #4
	else
	  {
	    this->_M_impl._M_end_of_storage = _Bit_pointer();
	    this->_M_impl._M_start = iterator(0, 0);
	  }
	this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);
   b7bc0:	e9c5 3402 	strd	r3, r4, [r5, #8]
      }

      void
      _M_initialize_value(bool __x)
      {
	if (_Bit_type* __p = this->_M_impl._M_start._M_p)
   b7bc4:	b128      	cbz	r0, b7bd2 <_ZNSt6vectorIbN2ei7EiAllocIbEEEC1EjRKbRKS2_+0x6e>
	  __builtin_memset(__p, __x ? ~0 : 0,
			   (this->_M_impl._M_end_addr() - __p)
   b7bc6:	692a      	ldr	r2, [r5, #16]
	  __builtin_memset(__p, __x ? ~0 : 0,
   b7bc8:	7839      	ldrb	r1, [r7, #0]
   b7bca:	1a12      	subs	r2, r2, r0
   b7bcc:	4249      	negs	r1, r1
   b7bce:	f00b fb1f 	bl	c3210 <memset>
      }
   b7bd2:	4628      	mov	r0, r5
   b7bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7bd8 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>:
    static void transpose_in_place(matrix_t *matrix) {
   b7bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
        if( matrix->rows != 1 && matrix->cols != 1) {
   b7bda:	6841      	ldr	r1, [r0, #4]
   b7bdc:	2901      	cmp	r1, #1
    static void transpose_in_place(matrix_t *matrix) {
   b7bde:	b087      	sub	sp, #28
   b7be0:	4604      	mov	r4, r0
        if( matrix->rows != 1 && matrix->cols != 1) {
   b7be2:	d044      	beq.n	b7c6e <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x96>
   b7be4:	6883      	ldr	r3, [r0, #8]
   b7be6:	2b01      	cmp	r3, #1
   b7be8:	d041      	beq.n	b7c6e <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x96>
            size_t size = matrix->cols * matrix->rows - 1;
   b7bea:	4359      	muls	r1, r3
            ei_vector<bool> done(size+1,false);
   b7bec:	2300      	movs	r3, #0
   b7bee:	f88d 3003 	strb.w	r3, [sp, #3]
   b7bf2:	f10d 0203 	add.w	r2, sp, #3
   b7bf6:	466b      	mov	r3, sp
   b7bf8:	a801      	add	r0, sp, #4
            size_t size = matrix->cols * matrix->rows - 1;
   b7bfa:	1e4d      	subs	r5, r1, #1
            ei_vector<bool> done(size+1,false);
   b7bfc:	f7ff ffb2 	bl	b7b64 <_ZNSt6vectorIbN2ei7EiAllocIbEEEC1EjRKbRKS2_>
            i = 1; // Note that matrix[0] and last element of matrix won't move
   b7c00:	2201      	movs	r2, #1
    { return reference(_M_p, 1UL << _M_offset); }
   b7c02:	4616      	mov	r6, r2
                temp = matrix->buffer[i];
   b7c04:	6823      	ldr	r3, [r4, #0]
   b7c06:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   b7c0a:	f8d3 e000 	ldr.w	lr, [r3]
   b7c0e:	4613      	mov	r3, r2
                    size_t col = i % matrix->cols;
   b7c10:	68a1      	ldr	r1, [r4, #8]
   b7c12:	fbb3 f0f1 	udiv	r0, r3, r1
   b7c16:	fb01 3310 	mls	r3, r1, r0, r3
                    next = col*matrix->rows + row;
   b7c1a:	6861      	ldr	r1, [r4, #4]
   b7c1c:	fb01 0303 	mla	r3, r1, r3, r0
                    float temp2 = matrix->buffer[next];
   b7c20:	6821      	ldr	r1, [r4, #0]
   b7c22:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   b7c26:	4670      	mov	r0, lr
   b7c28:	f8d1 e000 	ldr.w	lr, [r1]
                    matrix->buffer[next] = temp;
   b7c2c:	6008      	str	r0, [r1, #0]
	return *iterator(this->_M_impl._M_start._M_p
   b7c2e:	9f01      	ldr	r7, [sp, #4]
			 + __n / int(_S_word_bit), __n % int(_S_word_bit));
   b7c30:	ea4f 1c53 	mov.w	ip, r3, lsr #5
	return *iterator(this->_M_impl._M_start._M_p
   b7c34:	f003 011f 	and.w	r1, r3, #31
    { return reference(_M_p, 1UL << _M_offset); }
   b7c38:	fa06 f001 	lsl.w	r0, r6, r1
	*_M_p |= _M_mask;
   b7c3c:	f857 102c 	ldr.w	r1, [r7, ip, lsl #2]
                while (i != cycleBegin);
   b7c40:	429a      	cmp	r2, r3
   b7c42:	ea41 0100 	orr.w	r1, r1, r0
   b7c46:	f847 102c 	str.w	r1, [r7, ip, lsl #2]
   b7c4a:	d1e1      	bne.n	b7c10 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x38>
                for (i = all_done_mark; done[i]; i++) {
   b7c4c:	9801      	ldr	r0, [sp, #4]
			 + __n / int(_S_word_bit), __n % int(_S_word_bit));
   b7c4e:	0959      	lsrs	r1, r3, #5
	return *iterator(this->_M_impl._M_start._M_p
   b7c50:	f003 021f 	and.w	r2, r3, #31
    { return !!(*_M_p & _M_mask); }
   b7c54:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    { return reference(_M_p, 1UL << _M_offset); }
   b7c58:	fa06 f202 	lsl.w	r2, r6, r2
   b7c5c:	420a      	tst	r2, r1
   b7c5e:	d00c      	beq.n	b7c7a <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xa2>
                    if(i>=size) { goto LOOP_END; }
   b7c60:	42ab      	cmp	r3, r5
                    all_done_mark++; // move the high water mark so we don't look again
   b7c62:	f103 0201 	add.w	r2, r3, #1
                    if(i>=size) { goto LOOP_END; }
   b7c66:	d30a      	bcc.n	b7c7e <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xa6>
	if (_M_impl._M_start._M_p)
   b7c68:	b108      	cbz	r0, b7c6e <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x96>
#if EIDSP_TRACK_ALLOCATIONS
        auto size_p = get_allocs().find(p);
        ei_dsp_free(p,size_p->second);
        get_allocs().erase(size_p);
#else
        ei_dsp_free(p,0);
   b7c6a:	f004 f9c9 	bl	bc000 <_Z7ei_freePv>
      __a = _GLIBCXX_MOVE(__b);
   b7c6e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b7c72:	e9c4 2301 	strd	r2, r3, [r4, #4]
    }
   b7c76:	b007      	add	sp, #28
   b7c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7c7a:	461a      	mov	r2, r3
   b7c7c:	e7c2      	b.n	b7c04 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x2c>
                for (i = all_done_mark; done[i]; i++) {
   b7c7e:	4613      	mov	r3, r2
   b7c80:	e7e4      	b.n	b7c4c <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x74>

000b7c82 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b7c82:	b510      	push	{r4, lr}
   b7c84:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b7c86:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b7c88:	b108      	cbz	r0, b7c8e <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev+0xc>
   b7c8a:	f004 f9b9 	bl	bc000 <_Z7ei_freePv>
      }
   b7c8e:	4620      	mov	r0, r4
   b7c90:	bd10      	pop	{r4, pc}

000b7c92 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   b7c92:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7c94:	9301      	str	r3, [sp, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b7c96:	6883      	ldr	r3, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7c98:	e9cd 2102 	strd	r2, r1, [sp, #8]
      if (_M_empty())
   b7c9c:	b90b      	cbnz	r3, b7ca2 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x10>
	__throw_bad_function_call();
   b7c9e:	f009 fafa 	bl	c1296 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7ca2:	68c4      	ldr	r4, [r0, #12]
   b7ca4:	ab01      	add	r3, sp, #4
   b7ca6:	aa02      	add	r2, sp, #8
   b7ca8:	a903      	add	r1, sp, #12
   b7caa:	47a0      	blx	r4
    }
   b7cac:	b004      	add	sp, #16
   b7cae:	bd10      	pop	{r4, pc}

000b7cb0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
   b7cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7cb4:	ed2d 8b02 	vpush	{d8}
   b7cb8:	4606      	mov	r6, r0
   b7cba:	b085      	sub	sp, #20
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
   b7cbc:	6950      	ldr	r0, [r2, #20]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
   b7cbe:	f8d2 b008 	ldr.w	fp, [r2, #8]

        for (size_t jx = 0; jx < elements_to_read; jx++) {
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
   b7cc2:	ed9f 8a41 	vldr	s16, [pc, #260]	; b7dc8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x118>
                output_matrix->buffer[output_ix++] = b;
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
   b7cc6:	eddf 8a41 	vldr	s17, [pc, #260]	; b7dcc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x11c>
__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
   b7cca:	460f      	mov	r7, r1
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
   b7ccc:	4940      	ldr	r1, [pc, #256]	; (b7dd0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x120>)
   b7cce:	f7fd f89b 	bl	b4e08 <strcmp>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
   b7cd2:	2400      	movs	r4, #0
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
   b7cd4:	2800      	cmp	r0, #0
    size_t bytes_left = signal->total_length;
   b7cd6:	f8d6 8010 	ldr.w	r8, [r6, #16]
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
   b7cda:	bf0c      	ite	eq
   b7cdc:	f04f 0a01 	moveq.w	sl, #1
   b7ce0:	f04f 0a03 	movne.w	sl, #3
    size_t output_ix = 0;
   b7ce4:	4625      	mov	r5, r4
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
   b7ce6:	6933      	ldr	r3, [r6, #16]
   b7ce8:	42a3      	cmp	r3, r4
   b7cea:	d96b      	bls.n	b7dc4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x114>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
   b7cec:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   b7cf0:	46c1      	mov	r9, r8
   b7cf2:	bf28      	it	cs
   b7cf4:	f44f 6980 	movcs.w	r9, #1024	; 0x400
        matrix_t input_matrix(elements_to_read, config.axes);
   b7cf8:	2300      	movs	r3, #0
   b7cfa:	465a      	mov	r2, fp
   b7cfc:	4649      	mov	r1, r9
   b7cfe:	4668      	mov	r0, sp
   b7d00:	f7fe fef4 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
        if (!input_matrix.buffer) {
   b7d04:	9b00      	ldr	r3, [sp, #0]
   b7d06:	b943      	cbnz	r3, b7d1a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6a>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
   b7d08:	4668      	mov	r0, sp
   b7d0a:	f7fe ff04 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
   b7d0e:	4831      	ldr	r0, [pc, #196]	; (b7dd4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x124>)

        bytes_left -= elements_to_read;
    }

    return EIDSP_OK;
}
   b7d10:	b005      	add	sp, #20
   b7d12:	ecbd 8b02 	vpop	{d8}
   b7d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
   b7d1a:	464a      	mov	r2, r9
   b7d1c:	4621      	mov	r1, r4
   b7d1e:	4630      	mov	r0, r6
   b7d20:	f7ff ffb7 	bl	b7c92 <_ZNKSt8functionIFijjPfEEclEjjS0_>
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
   b7d24:	eddf 5a2c 	vldr	s11, [pc, #176]	; b7dd8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x128>
   b7d28:	ed9f 5a2c 	vldr	s10, [pc, #176]	; b7ddc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x12c>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   b7d2c:	2200      	movs	r2, #0
   b7d2e:	454a      	cmp	r2, r9
   b7d30:	d040      	beq.n	b7db4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x104>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
   b7d32:	9b00      	ldr	r3, [sp, #0]
   b7d34:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   b7d38:	edd3 7a00 	vldr	s15, [r3]
   b7d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
            if (channel_count == 3) {
   b7d40:	f1ba 0f03 	cmp.w	sl, #3
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
   b7d44:	ee17 3a90 	vmov	r3, s15
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
   b7d48:	f3c3 4107 	ubfx	r1, r3, #16, #8
   b7d4c:	ee07 1a90 	vmov	s15, r1
   b7d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
   b7d54:	f3c3 2107 	ubfx	r1, r3, #8, #8
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
   b7d58:	ee87 6a88 	vdiv.f32	s12, s15, s16
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
   b7d5c:	b2db      	uxtb	r3, r3
                output_matrix->buffer[output_ix++] = r;
   b7d5e:	ea4f 0085 	mov.w	r0, r5, lsl #2
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
   b7d62:	ee07 1a90 	vmov	s15, r1
   b7d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                output_matrix->buffer[output_ix++] = r;
   b7d6a:	f105 0101 	add.w	r1, r5, #1
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
   b7d6e:	ee87 7a88 	vdiv.f32	s14, s15, s16
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
   b7d72:	ee07 3a90 	vmov	s15, r3
                output_matrix->buffer[output_ix++] = r;
   b7d76:	683b      	ldr	r3, [r7, #0]
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
   b7d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                output_matrix->buffer[output_ix++] = r;
   b7d7c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
   b7d80:	eec7 6a88 	vdiv.f32	s13, s15, s16
            if (channel_count == 3) {
   b7d84:	d10d      	bne.n	b7da2 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xf2>
                output_matrix->buffer[output_ix++] = b;
   b7d86:	1ce9      	adds	r1, r5, #3
                output_matrix->buffer[output_ix++] = r;
   b7d88:	ed83 6a00 	vstr	s12, [r3]
                output_matrix->buffer[output_ix++] = g;
   b7d8c:	683b      	ldr	r3, [r7, #0]
   b7d8e:	4403      	add	r3, r0
   b7d90:	ed83 7a01 	vstr	s14, [r3, #4]
                output_matrix->buffer[output_ix++] = b;
   b7d94:	683b      	ldr	r3, [r7, #0]
   b7d96:	4403      	add	r3, r0
   b7d98:	edc3 6a02 	vstr	s13, [r3, #8]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   b7d9c:	3201      	adds	r2, #1
   b7d9e:	460d      	mov	r5, r1
   b7da0:	e7c5      	b.n	b7d2e <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x7e>
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
   b7da2:	ee27 7a28 	vmul.f32	s14, s14, s17
   b7da6:	eea6 7a25 	vfma.f32	s14, s12, s11
   b7daa:	eea6 7a85 	vfma.f32	s14, s13, s10
                output_matrix->buffer[output_ix++] = v;
   b7dae:	ed83 7a00 	vstr	s14, [r3]
   b7db2:	e7f3      	b.n	b7d9c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xec>
        matrix_t input_matrix(elements_to_read, config.axes);
   b7db4:	4668      	mov	r0, sp
        bytes_left -= elements_to_read;
   b7db6:	eba8 0802 	sub.w	r8, r8, r2
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
   b7dba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        matrix_t input_matrix(elements_to_read, config.axes);
   b7dbe:	f7fe feaa 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
   b7dc2:	e790      	b.n	b7ce6 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x36>
    return EIDSP_OK;
   b7dc4:	2000      	movs	r0, #0
   b7dc6:	e7a3      	b.n	b7d10 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x60>
   b7dc8:	437f0000 	.word	0x437f0000
   b7dcc:	3f1645a2 	.word	0x3f1645a2
   b7dd0:	000c566e 	.word	0x000c566e
   b7dd4:	fffffc16 	.word	0xfffffc16
   b7dd8:	3e991687 	.word	0x3e991687
   b7ddc:	3de978d5 	.word	0x3de978d5

000b7de0 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7de4:	6805      	ldr	r5, [r0, #0]
   b7de6:	f8d3 9000 	ldr.w	r9, [r3]
#endif
        return &wrapped_signal;
    }

    int get_data(size_t offset, size_t length, float *out_ptr) {
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
   b7dea:	680c      	ldr	r4, [r1, #0]
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
   b7dec:	6816      	ldr	r6, [r2, #0]
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
   b7dee:	e9d5 0302 	ldrd	r0, r3, [r5, #8]
   b7df2:	6a1b      	ldr	r3, [r3, #32]
   b7df4:	fbb4 f4f0 	udiv	r4, r4, r0

        size_t out_ptr_ix = 0;

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
   b7df8:	435c      	muls	r4, r3
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
   b7dfa:	fbb6 f6f0 	udiv	r6, r6, r0
        size_t out_ptr_ix = 0;
   b7dfe:	f04f 0800 	mov.w	r8, #0
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
   b7e02:	fb03 4606 	mla	r6, r3, r6, r4
   b7e06:	42a6      	cmp	r6, r4
   b7e08:	d919      	bls.n	b7e3e <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x5e>
   b7e0a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
   b7e0e:	2700      	movs	r7, #0
   b7e10:	68aa      	ldr	r2, [r5, #8]
   b7e12:	42ba      	cmp	r2, r7
   b7e14:	eb07 0308 	add.w	r3, r7, r8
   b7e18:	d90c      	bls.n	b7e34 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x54>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
   b7e1a:	686b      	ldr	r3, [r5, #4]
   b7e1c:	6828      	ldr	r0, [r5, #0]
   b7e1e:	5dd9      	ldrb	r1, [r3, r7]
   b7e20:	2201      	movs	r2, #1
   b7e22:	4653      	mov	r3, sl
   b7e24:	4421      	add	r1, r4
   b7e26:	f7ff ff34 	bl	b7c92 <_ZNKSt8functionIFijjPfEEclEjjS0_>
                if (r != 0) {
   b7e2a:	f10a 0a04 	add.w	sl, sl, #4
   b7e2e:	b938      	cbnz	r0, b7e40 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x60>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
   b7e30:	3701      	adds	r7, #1
   b7e32:	e7ed      	b.n	b7e10 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x30>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
   b7e34:	68ea      	ldr	r2, [r5, #12]
   b7e36:	6a12      	ldr	r2, [r2, #32]
   b7e38:	4698      	mov	r8, r3
   b7e3a:	4414      	add	r4, r2
   b7e3c:	e7e3      	b.n	b7e06 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x26>
                    return r;
                }
            }
        }

        return 0;
   b7e3e:	2000      	movs	r0, #0
      }
   b7e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b7e44 <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>:
      vector(initializer_list<value_type> __l,
   b7e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7e46:	ab02      	add	r3, sp, #8
   b7e48:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b7e4c:	2300      	movs	r3, #0
   b7e4e:	e9c0 3300 	strd	r3, r3, [r0]
   b7e52:	6083      	str	r3, [r0, #8]
      vector(initializer_list<value_type> __l,
   b7e54:	4604      	mov	r4, r0
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   b7e56:	4613      	mov	r3, r2
   b7e58:	0096      	lsls	r6, r2, #2
   b7e5a:	eb01 0782 	add.w	r7, r1, r2, lsl #2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b7e5e:	f342 001d 	sbfx	r0, r2, #0, #30

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b7e62:	4a0d      	ldr	r2, [pc, #52]	; (b7e98 <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_+0x54>)
   b7e64:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   b7e68:	460d      	mov	r5, r1
   b7e6a:	d202      	bcs.n	b7e72 <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_+0x2e>
	  __throw_length_error(
   b7e6c:	480b      	ldr	r0, [pc, #44]	; (b7e9c <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_+0x58>)
   b7e6e:	f009 fa0f 	bl	c1290 <_ZSt20__throw_length_errorPKc>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b7e72:	b108      	cbz	r0, b7e78 <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_+0x34>
   b7e74:	f7fe f8ec 	bl	b6050 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj.part.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b7e78:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b7e7a:	6020      	str	r0, [r4, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b7e7c:	60a6      	str	r6, [r4, #8]
	  for (; __first != __last; ++__first, (void)++__cur)
   b7e7e:	42af      	cmp	r7, r5
   b7e80:	d005      	beq.n	b7e8e <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_+0x4a>
   b7e82:	b108      	cbz	r0, b7e88 <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_+0x44>
   b7e84:	682a      	ldr	r2, [r5, #0]
   b7e86:	6002      	str	r2, [r0, #0]
   b7e88:	3504      	adds	r5, #4
   b7e8a:	3004      	adds	r0, #4
   b7e8c:	e7f7      	b.n	b7e7e <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_+0x3a>
      }
   b7e8e:	4620      	mov	r0, r4
	  this->_M_impl._M_finish =
   b7e90:	6066      	str	r6, [r4, #4]
      }
   b7e92:	b003      	add	sp, #12
   b7e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7e96:	bf00      	nop
   b7e98:	7ffffffc 	.word	0x7ffffffc
   b7e9c:	000c5367 	.word	0x000c5367

000b7ea0 <_ZN2ei8spectral7feature15get_ratio_comboEi>:
        } else {
            return extract_spectral_analysis_features_v2(input_matrix, output_matrix, config, sampling_freq);
        }
    }

    static ei_vector<int> get_ratio_combo(int r)
   b7ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        if (r == 1 || r == 3 || r == 10) {
   b7ea2:	f021 0302 	bic.w	r3, r1, #2
    static ei_vector<int> get_ratio_combo(int r)
   b7ea6:	b08b      	sub	sp, #44	; 0x2c
        if (r == 1 || r == 3 || r == 10) {
   b7ea8:	2b01      	cmp	r3, #1
    static ei_vector<int> get_ratio_combo(int r)
   b7eaa:	4605      	mov	r5, r0
        if (r == 1 || r == 3 || r == 10) {
   b7eac:	ac07      	add	r4, sp, #28
   b7eae:	ae05      	add	r6, sp, #20
   b7eb0:	d001      	beq.n	b7eb6 <_ZN2ei8spectral7feature15get_ratio_comboEi+0x16>
   b7eb2:	290a      	cmp	r1, #10
   b7eb4:	d108      	bne.n	b7ec8 <_ZN2ei8spectral7feature15get_ratio_comboEi+0x28>
            return {r};
   b7eb6:	2301      	movs	r3, #1
   b7eb8:	9107      	str	r1, [sp, #28]
   b7eba:	9302      	str	r3, [sp, #8]
   b7ebc:	9401      	str	r4, [sp, #4]
   b7ebe:	4633      	mov	r3, r6
   b7ec0:	2201      	movs	r2, #1
   b7ec2:	4621      	mov	r1, r4
        } else if (r == 30) {
            return {3, 10};
        } else if (r == 100) {
            return {10, 10};
        } else if (r == 1000) {
            return {10, 10, 10};
   b7ec4:	4628      	mov	r0, r5
   b7ec6:	e00c      	b.n	b7ee2 <_ZN2ei8spectral7feature15get_ratio_comboEi+0x42>
        } else if (r == 30) {
   b7ec8:	291e      	cmp	r1, #30
   b7eca:	af03      	add	r7, sp, #12
   b7ecc:	d10e      	bne.n	b7eec <_ZN2ei8spectral7feature15get_ratio_comboEi+0x4c>
            return {3, 10};
   b7ece:	2203      	movs	r2, #3
   b7ed0:	230a      	movs	r3, #10
   b7ed2:	e9cd 2307 	strd	r2, r3, [sp, #28]
   b7ed6:	2302      	movs	r3, #2
   b7ed8:	9304      	str	r3, [sp, #16]
   b7eda:	9403      	str	r4, [sp, #12]
   b7edc:	e897 0006 	ldmia.w	r7, {r1, r2}
   b7ee0:	4633      	mov	r3, r6
            return {10, 10, 10};
   b7ee2:	f7ff ffaf 	bl	b7e44 <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>
        } else {
            assert(0);
        }
        return {0}; // to make linter happy
    }
   b7ee6:	4628      	mov	r0, r5
   b7ee8:	b00b      	add	sp, #44	; 0x2c
   b7eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if (r == 100) {
   b7eec:	2964      	cmp	r1, #100	; 0x64
   b7eee:	d109      	bne.n	b7f04 <_ZN2ei8spectral7feature15get_ratio_comboEi+0x64>
            return {10, 10};
   b7ef0:	230a      	movs	r3, #10
   b7ef2:	e9cd 3305 	strd	r3, r3, [sp, #20]
   b7ef6:	2302      	movs	r3, #2
   b7ef8:	9308      	str	r3, [sp, #32]
   b7efa:	9607      	str	r6, [sp, #28]
   b7efc:	e894 0006 	ldmia.w	r4, {r1, r2}
   b7f00:	463b      	mov	r3, r7
   b7f02:	e7ee      	b.n	b7ee2 <_ZN2ei8spectral7feature15get_ratio_comboEi+0x42>
        } else if (r == 1000) {
   b7f04:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
   b7f08:	d10b      	bne.n	b7f22 <_ZN2ei8spectral7feature15get_ratio_comboEi+0x82>
            return {10, 10, 10};
   b7f0a:	4b09      	ldr	r3, [pc, #36]	; (b7f30 <_ZN2ei8spectral7feature15get_ratio_comboEi+0x90>)
   b7f0c:	9405      	str	r4, [sp, #20]
   b7f0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   b7f12:	2303      	movs	r3, #3
   b7f14:	9306      	str	r3, [sp, #24]
   b7f16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   b7f1a:	463b      	mov	r3, r7
   b7f1c:	e896 0006 	ldmia.w	r6, {r1, r2}
   b7f20:	e7d0      	b.n	b7ec4 <_ZN2ei8spectral7feature15get_ratio_comboEi+0x24>
            assert(0);
   b7f22:	4b04      	ldr	r3, [pc, #16]	; (b7f34 <_ZN2ei8spectral7feature15get_ratio_comboEi+0x94>)
   b7f24:	4a04      	ldr	r2, [pc, #16]	; (b7f38 <_ZN2ei8spectral7feature15get_ratio_comboEi+0x98>)
   b7f26:	4805      	ldr	r0, [pc, #20]	; (b7f3c <_ZN2ei8spectral7feature15get_ratio_comboEi+0x9c>)
   b7f28:	f44f 7103 	mov.w	r1, #524	; 0x20c
   b7f2c:	f007 f888 	bl	bf040 <__assert_func>
   b7f30:	000c5144 	.word	0x000c5144
   b7f34:	000c5244 	.word	0x000c5244
   b7f38:	000c5678 	.word	0x000c5678
   b7f3c:	000c56ba 	.word	0x000c56ba

000b7f40 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
	{ }

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
   b7f40:	b510      	push	{r4, lr}
   b7f42:	4604      	mov	r4, r0
      {
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b7f44:	6800      	ldr	r0, [r0, #0]
   b7f46:	b108      	cbz	r0, b7f4c <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev+0xc>
	  delete [] __ptr;
   b7f48:	f7fc ffaf 	bl	b4eaa <_ZdaPv>
	  get_deleter()(__ptr);
	__ptr = pointer();
      }
   b7f4c:	4620      	mov	r0, r4
   b7f4e:	bd10      	pop	{r4, pc}

000b7f50 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
   b7f50:	b538      	push	{r3, r4, r5, lr}
	if (__ptr != nullptr)
   b7f52:	6805      	ldr	r5, [r0, #0]
      ~unique_ptr() noexcept
   b7f54:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   b7f56:	b135      	cbz	r5, b7f66 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev+0x16>
	delete __ptr;
   b7f58:	4628      	mov	r0, r5
   b7f5a:	f7fe fddc 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
   b7f5e:	2110      	movs	r1, #16
   b7f60:	4628      	mov	r0, r5
   b7f62:	f7fc ffa4 	bl	b4eae <_ZdlPvj>
      }
   b7f66:	4620      	mov	r0, r4
   b7f68:	bd38      	pop	{r3, r4, r5, pc}

000b7f6a <_ZNKSt8functionIFvPvEEclES0_>:
    function<_Res(_ArgTypes...)>::
   b7f6a:	b507      	push	{r0, r1, r2, lr}
      if (_M_empty())
   b7f6c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7f6e:	9101      	str	r1, [sp, #4]
      if (_M_empty())
   b7f70:	b90a      	cbnz	r2, b7f76 <_ZNKSt8functionIFvPvEEclES0_+0xc>
	__throw_bad_function_call();
   b7f72:	f009 f990 	bl	c1296 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7f76:	68c3      	ldr	r3, [r0, #12]
   b7f78:	a901      	add	r1, sp, #4
   b7f7a:	4798      	blx	r3
    }
   b7f7c:	b003      	add	sp, #12
   b7f7e:	f85d fb04 	ldr.w	pc, [sp], #4

000b7f82 <_ZNSt10unique_ptrIvSt8functionIFvPvEEED1Ev>:
      ~unique_ptr() noexcept
   b7f82:	b510      	push	{r4, lr}
	if (__ptr != nullptr)
   b7f84:	6901      	ldr	r1, [r0, #16]
      ~unique_ptr() noexcept
   b7f86:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   b7f88:	b109      	cbz	r1, b7f8e <_ZNSt10unique_ptrIvSt8functionIFvPvEEED1Ev+0xc>
	  get_deleter()(std::move(__ptr));
   b7f8a:	f7ff ffee 	bl	b7f6a <_ZNKSt8functionIFvPvEEclES0_>
	__ptr = pointer();
   b7f8e:	2300      	movs	r3, #0
   b7f90:	6123      	str	r3, [r4, #16]
    class function<_Res(_ArgTypes...)>
   b7f92:	4620      	mov	r0, r4
   b7f94:	f7fe fda1 	bl	b6ada <_ZNSt14_Function_baseD1Ev>
      }
   b7f98:	4620      	mov	r0, r4
   b7f9a:	bd10      	pop	{r4, pc}

000b7f9c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b7f9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7fa0:	e9d0 8600 	ldrd	r8, r6, [r0]
   b7fa4:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
   b7fa6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7faa:	eba6 0208 	sub.w	r2, r6, r8
	if (max_size() - size() < __n)
   b7fae:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
   b7fb2:	4607      	mov	r7, r0
   b7fb4:	4689      	mov	r9, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7fb6:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
   b7fba:	d102      	bne.n	b7fc2 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b7fbc:	4824      	ldr	r0, [pc, #144]	; (b8050 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0xb4>)
   b7fbe:	f009 f967 	bl	c1290 <_ZSt20__throw_length_errorPKc>
   b7fc2:	2c01      	cmp	r4, #1
   b7fc4:	4622      	mov	r2, r4
   b7fc6:	bf38      	it	cc
   b7fc8:	2201      	movcc	r2, #1
   b7fca:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b7fcc:	eba1 0a08 	sub.w	sl, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b7fd0:	d21a      	bcs.n	b8008 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x6c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b7fd2:	b1dc      	cbz	r4, b800c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x70>
   b7fd4:	429c      	cmp	r4, r3
   b7fd6:	bf28      	it	cs
   b7fd8:	461c      	movcs	r4, r3
        auto ptr = ei_dsp_malloc(bytes);
   b7fda:	00e0      	lsls	r0, r4, #3
   b7fdc:	f004 f80c 	bl	bbff8 <_Z9ei_mallocj>
   b7fe0:	4605      	mov	r5, r0
   b7fe2:	eb15 0a0a 	adds.w	sl, r5, sl
   b7fe6:	bf1c      	itt	ne
   b7fe8:	e9db 0100 	ldrdne	r0, r1, [fp]
   b7fec:	e9ca 0100 	strdne	r0, r1, [sl]
   b7ff0:	462a      	mov	r2, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7ff2:	4643      	mov	r3, r8
      for (; __first != __last; ++__first, (void)++__cur)
   b7ff4:	4599      	cmp	r9, r3
   b7ff6:	d00b      	beq.n	b8010 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x74>
   b7ff8:	b11a      	cbz	r2, b8002 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x66>
   b7ffa:	e893 0003 	ldmia.w	r3, {r0, r1}
   b7ffe:	e882 0003 	stmia.w	r2, {r0, r1}
   b8002:	3308      	adds	r3, #8
   b8004:	3208      	adds	r2, #8
   b8006:	e7f5      	b.n	b7ff4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x58>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b8008:	461c      	mov	r4, r3
   b800a:	e7e6      	b.n	b7fda <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b800c:	4625      	mov	r5, r4
   b800e:	e7e8      	b.n	b7fe2 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x46>
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   b8010:	eba3 0208 	sub.w	r2, r3, r8
   b8014:	3208      	adds	r2, #8
   b8016:	442a      	add	r2, r5
   b8018:	469e      	mov	lr, r3
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
   b801a:	4694      	mov	ip, r2
      for (; __first != __last; ++__first, (void)++__cur)
   b801c:	429e      	cmp	r6, r3
   b801e:	f10c 0c08 	add.w	ip, ip, #8
   b8022:	d005      	beq.n	b8030 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x94>
   b8024:	e893 0003 	ldmia.w	r3, {r0, r1}
   b8028:	3308      	adds	r3, #8
   b802a:	e90c 0003 	stmdb	ip, {r0, r1}
   b802e:	e7f5      	b.n	b801c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x80>
   b8030:	eba6 060e 	sub.w	r6, r6, lr
   b8034:	4416      	add	r6, r2
	if (__p)
   b8036:	f1b8 0f00 	cmp.w	r8, #0
   b803a:	d002      	beq.n	b8042 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0xa6>
        ei_dsp_free(p,0);
   b803c:	4640      	mov	r0, r8
   b803e:	f003 ffdf 	bl	bc000 <_Z7ei_freePv>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b8042:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
   b8046:	e9c7 5600 	strd	r5, r6, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b804a:	60bc      	str	r4, [r7, #8]
    }
   b804c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8050:	000c52c7 	.word	0x000c52c7

000b8054 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>:
      push_back(const value_type& __x)
   b8054:	b510      	push	{r4, lr}
   b8056:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b8058:	e9d0 4101 	ldrd	r4, r1, [r0, #4]
   b805c:	428c      	cmp	r4, r1
      push_back(const value_type& __x)
   b805e:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b8060:	d008      	beq.n	b8074 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x20>
   b8062:	b11c      	cbz	r4, b806c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x18>
   b8064:	e892 0003 	ldmia.w	r2, {r0, r1}
   b8068:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish;
   b806c:	685a      	ldr	r2, [r3, #4]
   b806e:	3208      	adds	r2, #8
   b8070:	605a      	str	r2, [r3, #4]
      }
   b8072:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
   b8074:	4621      	mov	r1, r4
   b8076:	f7ff ff91 	bl	b7f9c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_>
      }
   b807a:	e7fa      	b.n	b8072 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x1e>

000b807c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b807c:	b513      	push	{r0, r1, r4, lr}
   b807e:	460b      	mov	r3, r1
   b8080:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8082:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8086:	466c      	mov	r4, sp
   b8088:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b808c:	e893 0003 	ldmia.w	r3, {r0, r1}
   b8090:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b8094:	e894 0003 	ldmia.w	r4, {r0, r1}
   b8098:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b809c:	b002      	add	sp, #8
   b809e:	bd10      	pop	{r4, pc}

000b80a0 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
   b80a0:	b538      	push	{r3, r4, r5, lr}
   b80a2:	4605      	mov	r5, r0
   b80a4:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b80a6:	f7ff ffe9 	bl	b807c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b80aa:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b80ac:	68a2      	ldr	r2, [r4, #8]
   b80ae:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b80b0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b80b2:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b80b4:	68e2      	ldr	r2, [r4, #12]
   b80b6:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b80b8:	60e3      	str	r3, [r4, #12]
      }
   b80ba:	bd38      	pop	{r3, r4, r5, pc}

000b80bc <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
   b80bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
   b80be:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   b80c2:	6a19      	ldr	r1, [r3, #32]
            return this->_original_signal;
   b80c4:	6804      	ldr	r4, [r0, #0]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
   b80c6:	428a      	cmp	r2, r1
   b80c8:	d012      	beq.n	b80f0 <_ZN14SignalWithAxes10get_signalEv+0x34>
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
   b80ca:	6923      	ldr	r3, [r4, #16]
   b80cc:	fbb3 f3f1 	udiv	r3, r3, r1
   b80d0:	4353      	muls	r3, r2
   b80d2:	6203      	str	r3, [r0, #32]
        };
   b80d4:	f100 0410 	add.w	r4, r0, #16
	    _M_invoker = &_My_handler::_M_invoke;
   b80d8:	4b07      	ldr	r3, [pc, #28]	; (b80f8 <_ZN14SignalWithAxes10get_signalEv+0x3c>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b80da:	9000      	str	r0, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
   b80dc:	9303      	str	r3, [sp, #12]
	  function(std::forward<_Functor>(__f)).swap(*this);
   b80de:	4668      	mov	r0, sp
	    _M_manager = &_My_handler::_M_manager;
   b80e0:	4b06      	ldr	r3, [pc, #24]	; (b80fc <_ZN14SignalWithAxes10get_signalEv+0x40>)
   b80e2:	9302      	str	r3, [sp, #8]
	  function(std::forward<_Functor>(__f)).swap(*this);
   b80e4:	4621      	mov	r1, r4
   b80e6:	f7ff ffdb 	bl	b80a0 <_ZNSt8functionIFijjPfEE4swapERS2_>
    class function<_Res(_ArgTypes...)>
   b80ea:	4668      	mov	r0, sp
   b80ec:	f7fe fcf5 	bl	b6ada <_ZNSt14_Function_baseD1Ev>
    }
   b80f0:	4620      	mov	r0, r4
   b80f2:	b004      	add	sp, #16
   b80f4:	bd10      	pop	{r4, pc}
   b80f6:	bf00      	nop
   b80f8:	000b7de1 	.word	0x000b7de1
   b80fc:	000b62ed 	.word	0x000b62ed

000b8100 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0>:
	operator=(_Functor&& __f)
   b8100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   b8102:	2300      	movs	r3, #0
   b8104:	9302      	str	r3, [sp, #8]
	if (_My_handler::_M_not_empty_function(__f))
   b8106:	b121      	cbz	r1, b8112 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x12>
	    _M_invoker = &_My_handler::_M_invoke;
   b8108:	4b07      	ldr	r3, [pc, #28]	; (b8128 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x28>)
   b810a:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   b810c:	4b07      	ldr	r3, [pc, #28]	; (b812c <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x2c>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b810e:	9100      	str	r1, [sp, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8110:	9302      	str	r3, [sp, #8]
	  function(std::forward<_Functor>(__f)).swap(*this);
   b8112:	4601      	mov	r1, r0
   b8114:	4668      	mov	r0, sp
   b8116:	f7ff ffc3 	bl	b80a0 <_ZNSt8functionIFijjPfEE4swapERS2_>
    class function<_Res(_ArgTypes...)>
   b811a:	4668      	mov	r0, sp
   b811c:	f7fe fcdd 	bl	b6ada <_ZNSt14_Function_baseD1Ev>
	}
   b8120:	b005      	add	sp, #20
   b8122:	f85d fb04 	ldr.w	pc, [sp], #4
   b8126:	bf00      	nop
   b8128:	000b6315 	.word	0x000b6315
   b812c:	000b6301 	.word	0x000b6301

000b8130 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b8130:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8134:	4604      	mov	r4, r0
   b8136:	460d      	mov	r5, r1
   b8138:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b813a:	d916      	bls.n	b816a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b813c:	4290      	cmp	r0, r2
   b813e:	d215      	bcs.n	b816c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b8140:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b8144:	1a75      	subs	r5, r6, r1
   b8146:	f1a1 0714 	sub.w	r7, r1, #20
   b814a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b814c:	42b7      	cmp	r7, r6
   b814e:	d01c      	beq.n	b818a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b8150:	b12c      	cbz	r4, b815e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b8152:	4631      	mov	r1, r6
   b8154:	4620      	mov	r0, r4
   b8156:	f008 fd9d 	bl	c0c94 <_ZN6StringC1EOS_>
   b815a:	7c33      	ldrb	r3, [r6, #16]
   b815c:	7423      	strb	r3, [r4, #16]
   b815e:	4630      	mov	r0, r6
   b8160:	f008 fd2f 	bl	c0bc2 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b8164:	3e14      	subs	r6, #20
   b8166:	3c14      	subs	r4, #20
   b8168:	e7f0      	b.n	b814c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b816a:	d00e      	beq.n	b818a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b816c:	42b5      	cmp	r5, r6
   b816e:	d00c      	beq.n	b818a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b8170:	b12c      	cbz	r4, b817e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b8172:	4629      	mov	r1, r5
   b8174:	4620      	mov	r0, r4
   b8176:	f008 fd8d 	bl	c0c94 <_ZN6StringC1EOS_>
   b817a:	7c2b      	ldrb	r3, [r5, #16]
   b817c:	7423      	strb	r3, [r4, #16]
   b817e:	4628      	mov	r0, r5
   b8180:	f008 fd1f 	bl	c0bc2 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b8184:	3514      	adds	r5, #20
   b8186:	3414      	adds	r4, #20
   b8188:	e7f0      	b.n	b816c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b818a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b818c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b818c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b8190:	2300      	movs	r3, #0
   b8192:	e9c0 3300 	strd	r3, r3, [r0]
   b8196:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8198:	684f      	ldr	r7, [r1, #4]
   b819a:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b819c:	4604      	mov	r4, r0
   b819e:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b81a0:	dd23      	ble.n	b81ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b81a2:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b81a6:	fb08 f007 	mul.w	r0, r8, r7
   b81aa:	f006 ff11 	bl	befd0 <malloc>
            if (!d) {
   b81ae:	4605      	mov	r5, r0
   b81b0:	b1d8      	cbz	r0, b81ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b81b2:	e9d4 1200 	ldrd	r1, r2, [r4]
   b81b6:	fb08 1202 	mla	r2, r8, r2, r1
   b81ba:	f7ff ffb9 	bl	b8130 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b81be:	6820      	ldr	r0, [r4, #0]
   b81c0:	f006 ff0e 	bl	befe0 <free>
        data_ = d;
   b81c4:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b81c6:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b81c8:	e9d6 7300 	ldrd	r7, r3, [r6]
   b81cc:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b81d0:	45b8      	cmp	r8, r7
   b81d2:	d008      	beq.n	b81e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b81d4:	4639      	mov	r1, r7
   b81d6:	4628      	mov	r0, r5
   b81d8:	f008 fd76 	bl	c0cc8 <_ZN6StringC1ERKS_>
   b81dc:	7c3b      	ldrb	r3, [r7, #16]
   b81de:	742b      	strb	r3, [r5, #16]
   b81e0:	3714      	adds	r7, #20
   b81e2:	3514      	adds	r5, #20
   b81e4:	e7f4      	b.n	b81d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b81e6:	6873      	ldr	r3, [r6, #4]
   b81e8:	6063      	str	r3, [r4, #4]
}
   b81ea:	4620      	mov	r0, r4
   b81ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b81f0 <_ZNSt8functionIFvPvEEC1EOS2_>:
      function(function&& __x) noexcept : _Function_base()
   b81f0:	b538      	push	{r3, r4, r5, lr}
   b81f2:	4604      	mov	r4, r0
   b81f4:	460d      	mov	r5, r1
    _Function_base() : _M_manager(nullptr) { }
   b81f6:	2300      	movs	r3, #0
   b81f8:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b81fa:	4601      	mov	r1, r0
   b81fc:	4628      	mov	r0, r5
   b81fe:	f7ff ff3d 	bl	b807c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8202:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8204:	68a2      	ldr	r2, [r4, #8]
   b8206:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8208:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b820a:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b820c:	68eb      	ldr	r3, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b820e:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8210:	60ea      	str	r2, [r5, #12]
      }
   b8212:	4620      	mov	r0, r4
   b8214:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8218 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb>:
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false)
{
   b8218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b821c:	b0d1      	sub	sp, #324	; 0x144
   b821e:	4690      	mov	r8, r2
   b8220:	f8dd 9170 	ldr.w	r9, [sp, #368]	; 0x170
   b8224:	469a      	mov	sl, r3
    ei_learning_block_config_tflite_graph_t *block_config = (ei_learning_block_config_tflite_graph_t*)config_ptr;
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
   b8226:	f8d9 b018 	ldr.w	fp, [r9, #24]
{
   b822a:	4604      	mov	r4, r0
   b822c:	460d      	mov	r5, r1
    TfLiteTensor input;
    TfLiteTensor output;
    TfLiteTensor output_scores;
    TfLiteTensor output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
   b822e:	f003 fe07 	bl	bbe40 <_Z16ei_read_timer_usv>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b8232:	4b2d      	ldr	r3, [pc, #180]	; (b82e8 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xd0>)
   b8234:	9340      	str	r3, [sp, #256]	; 0x100
	    _M_invoker = &_My_handler::_M_invoke;
   b8236:	4b2d      	ldr	r3, [pc, #180]	; (b82ec <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xd4>)
   b8238:	9343      	str	r3, [sp, #268]	; 0x10c
   b823a:	e9cd 0108 	strd	r0, r1, [sp, #32]
	    _M_manager = &_My_handler::_M_manager;
   b823e:	4b2c      	ldr	r3, [pc, #176]	; (b82f0 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xd8>)
   b8240:	9342      	str	r3, [sp, #264]	; 0x108
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8242:	a940      	add	r1, sp, #256	; 0x100
   b8244:	a80b      	add	r0, sp, #44	; 0x2c
   b8246:	f7ff ffd3 	bl	b81f0 <_ZNSt8functionIFvPvEEC1EOS2_>
   b824a:	2300      	movs	r3, #0
    class function<_Res(_ArgTypes...)>
   b824c:	a840      	add	r0, sp, #256	; 0x100
   b824e:	930f      	str	r3, [sp, #60]	; 0x3c
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
   b8250:	ae20      	add	r6, sp, #128	; 0x80
   b8252:	f7fe fc42 	bl	b6ada <_ZNSt14_Function_baseD1Ev>
   b8256:	af30      	add	r7, sp, #192	; 0xc0
   b8258:	ab40      	add	r3, sp, #256	; 0x100
   b825a:	9300      	str	r3, [sp, #0]
   b825c:	9701      	str	r7, [sp, #4]
   b825e:	4633      	mov	r3, r6
   b8260:	aa10      	add	r2, sp, #64	; 0x40
   b8262:	a908      	add	r1, sp, #32
   b8264:	4648      	mov	r0, r9
   b8266:	f7fd fef7 	bl	b6058 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvSt8functionIFvPvEEE.constprop.0>
        &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
   b826a:	4603      	mov	r3, r0
   b826c:	bb30      	cbnz	r0, b82bc <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xa4>
        return init_res;
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());

    size_t mtx_size = impulse->dsp_blocks_size + impulse->learning_blocks_size;
   b826e:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
   b8272:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   b8276:	4413      	add	r3, r2
    auto input_res = fill_input_tensor_from_matrix(fmatrix, &input, input_block_ids, input_block_ids_size, mtx_size);
   b8278:	9300      	str	r3, [sp, #0]
   b827a:	4652      	mov	r2, sl
   b827c:	9b5a      	ldr	r3, [sp, #360]	; 0x168
   b827e:	a910      	add	r1, sp, #64	; 0x40
   b8280:	4628      	mov	r0, r5
   b8282:	f7ff fa23 	bl	b76cc <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj>
    if (input_res != EI_IMPULSE_OK) {
   b8286:	4603      	mov	r3, r0
   b8288:	b9c0      	cbnz	r0, b82bc <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xa4>
        return input_res;
    }

    EI_IMPULSE_ERROR run_res = inference_tflite_run(
   b828a:	f89d 3174 	ldrb.w	r3, [sp, #372]	; 0x174
   b828e:	9304      	str	r3, [sp, #16]
   b8290:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
   b8292:	e9cd 7302 	strd	r7, r3, [sp, #8]
   b8296:	ab40      	add	r3, sp, #256	; 0x100
   b8298:	e9cd 6300 	strd	r6, r3, [sp]
   b829c:	4649      	mov	r1, r9
   b829e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b82a2:	4620      	mov	r0, r4
   b82a4:	f7ff fbe4 	bl	b7a70 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0>
        &output,
        &output_labels,
        &output_scores,
        tensor_arena, result, debug);

    if (result->copy_output) {
   b82a8:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
   b82aa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
   b82ae:	4607      	mov	r7, r0
    if (result->copy_output) {
   b82b0:	b96b      	cbnz	r3, b82ce <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xb6>
        if (output_res != EI_IMPULSE_OK) {
            return output_res;
        }
    }

    graph_config->model_reset(ei_aligned_free);
   b82b2:	f8db 300c 	ldr.w	r3, [fp, #12]
   b82b6:	480c      	ldr	r0, [pc, #48]	; (b82e8 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xd0>)
   b82b8:	4798      	blx	r3

    if (run_res != EI_IMPULSE_OK) {
   b82ba:	463b      	mov	r3, r7
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
   b82bc:	a80b      	add	r0, sp, #44	; 0x2c
   b82be:	9307      	str	r3, [sp, #28]
   b82c0:	f7ff fe5f 	bl	b7f82 <_ZNSt10unique_ptrIvSt8functionIFvPvEEED1Ev>
        return run_res;
    }

    return EI_IMPULSE_OK;
}
   b82c4:	9b07      	ldr	r3, [sp, #28]
   b82c6:	4618      	mov	r0, r3
   b82c8:	b051      	add	sp, #324	; 0x144
   b82ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        auto output_res = fill_output_matrix_from_tensor(&output, fmatrix[impulse->dsp_blocks_size + learn_block_index].matrix);
   b82ce:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   b82d2:	4490      	add	r8, r2
   b82d4:	4630      	mov	r0, r6
   b82d6:	f855 1038 	ldr.w	r1, [r5, r8, lsl #3]
   b82da:	f7ff fa8b 	bl	b77f4 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE>
        if (output_res != EI_IMPULSE_OK) {
   b82de:	4603      	mov	r3, r0
   b82e0:	2800      	cmp	r0, #0
   b82e2:	d0e6      	beq.n	b82b2 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x9a>
   b82e4:	e7ea      	b.n	b82bc <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xa4>
   b82e6:	bf00      	nop
   b82e8:	000b5f95 	.word	0x000b5f95
   b82ec:	000b6351 	.word	0x000b6351
   b82f0:	000b633d 	.word	0x000b633d

000b82f4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb>:
EI_IMPULSE_ERROR run_nn_inference_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false) {
   b82f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b82f8:	ed2d 8b10 	vpush	{d8-d15}
   b82fc:	b0df      	sub	sp, #380	; 0x17c
   b82fe:	ee0e 3a90 	vmov	s29, r3
   b8302:	f89d 31e0 	ldrb.w	r3, [sp, #480]	; 0x1e0
   b8306:	930a      	str	r3, [sp, #40]	; 0x28

    ei_learning_block_config_tflite_graph_t *block_config = (ei_learning_block_config_tflite_graph_t*)config_ptr;
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
   b8308:	ee1e 3a90 	vmov	r3, s29
    bool debug = false) {
   b830c:	4617      	mov	r7, r2
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
   b830e:	699b      	ldr	r3, [r3, #24]
   b8310:	930b      	str	r3, [sp, #44]	; 0x2c

    memset(result, 0, sizeof(ei_impulse_result_t));
   b8312:	2250      	movs	r2, #80	; 0x50
    bool debug = false) {
   b8314:	4680      	mov	r8, r0
   b8316:	4689      	mov	r9, r1
    memset(result, 0, sizeof(ei_impulse_result_t));
   b8318:	4638      	mov	r0, r7
   b831a:	2100      	movs	r1, #0
   b831c:	f00a ff78 	bl	c3210 <memset>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b8320:	4bc0      	ldr	r3, [pc, #768]	; (b8624 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x330>)
   b8322:	934e      	str	r3, [sp, #312]	; 0x138
   b8324:	ac4e      	add	r4, sp, #312	; 0x138
	    _M_invoker = &_My_handler::_M_invoke;
   b8326:	4bc0      	ldr	r3, [pc, #768]	; (b8628 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x334>)
   b8328:	9351      	str	r3, [sp, #324]	; 0x144
   b832a:	4621      	mov	r1, r4
	    _M_manager = &_My_handler::_M_manager;
   b832c:	4bbf      	ldr	r3, [pc, #764]	; (b862c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x338>)
   b832e:	9350      	str	r3, [sp, #320]	; 0x140
   b8330:	a819      	add	r0, sp, #100	; 0x64
   b8332:	f7ff ff5d 	bl	b81f0 <_ZNSt8functionIFvPvEEC1EOS2_>
   b8336:	2300      	movs	r3, #0
    class function<_Res(_ArgTypes...)>
   b8338:	4620      	mov	r0, r4
   b833a:	931d      	str	r3, [sp, #116]	; 0x74
   b833c:	f7fe fbcd 	bl	b6ada <_ZNSt14_Function_baseD1Ev>
    TfLiteTensor output_scores;
    TfLiteTensor output_labels;

    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
   b8340:	ab3e      	add	r3, sp, #248	; 0xf8
   b8342:	e9cd 4300 	strd	r4, r3, [sp]
   b8346:	ee1e 0a90 	vmov	r0, s29
   b834a:	ab2e      	add	r3, sp, #184	; 0xb8
   b834c:	aa1e      	add	r2, sp, #120	; 0x78
   b834e:	a912      	add	r1, sp, #72	; 0x48
   b8350:	f7fd fe82 	bl	b6058 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvSt8functionIFvPvEEE.constprop.0>
        &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
   b8354:	4605      	mov	r5, r0
   b8356:	2800      	cmp	r0, #0
   b8358:	d15d      	bne.n	b8416 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x122>
        return init_res;
    }

    if (input.type != TfLiteType::kTfLiteInt8 && input.type != TfLiteType::kTfLiteUInt8) {
   b835a:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
   b835e:	2b09      	cmp	r3, #9
   b8360:	d002      	beq.n	b8368 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x74>
   b8362:	2b03      	cmp	r3, #3
   b8364:	f040 8225 	bne.w	b87b2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x4be>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    }

    uint64_t dsp_start_us = ei_read_timer_us();
   b8368:	f003 fd6a 	bl	bbe40 <_Z16ei_read_timer_usv>

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input.data.int8);
   b836c:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
   b836e:	f8d8 3018 	ldr.w	r3, [r8, #24]
   b8372:	9307      	str	r3, [sp, #28]
    uint64_t dsp_start_us = ei_read_timer_us();
   b8374:	e9cd 010d 	strd	r0, r1, [sp, #52]	; 0x34
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
   b8378:	2c00      	cmp	r4, #0
   b837a:	d155      	bne.n	b8428 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x134>
            buffer = a_buffer;
            buffer_managed_by_me = false;
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
   b837c:	4618      	mov	r0, r3
   b837e:	2101      	movs	r1, #1
   b8380:	f003 fe3c 	bl	bbffc <_Z9ei_callocjj>
            buffer_managed_by_me = true;
   b8384:	2301      	movs	r3, #1
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
   b8386:	4604      	mov	r4, r0
            buffer_managed_by_me = false;
   b8388:	9309      	str	r3, [sp, #36]	; 0x24

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(signal, &features_matrix, impulse->dsp_blocks[0].config, input.params.scale, input.params.zero_point,
   b838a:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
        impulse->frequency, impulse->learning_blocks[0].image_scaling);
   b838e:	f8d8 2058 	ldr.w	r2, [r8, #88]	; 0x58
    int ret = extract_image_features_quantized(signal, &features_matrix, impulse->dsp_blocks[0].config, input.params.scale, input.params.zero_point,
   b8392:	68db      	ldr	r3, [r3, #12]
        impulse->frequency, impulse->learning_blocks[0].image_scaling);
   b8394:	6916      	ldr	r6, [r2, #16]

#if (EI_CLASSIFIER_QUANTIZATION_ENABLED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)

__attribute__((unused)) int extract_image_features_quantized(signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, float scale, float zero_point, const float frequency,
                                                             int image_scaling) {
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
   b8396:	689a      	ldr	r2, [r3, #8]

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
   b8398:	6958      	ldr	r0, [r3, #20]
   b839a:	49a5      	ldr	r1, [pc, #660]	; (b8630 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x33c>)
    int ret = extract_image_features_quantized(signal, &features_matrix, impulse->dsp_blocks[0].config, input.params.scale, input.params.zero_point,
   b839c:	ed9d 8a22 	vldr	s16, [sp, #136]	; 0x88
   b83a0:	eddd 8a21 	vldr	s17, [sp, #132]	; 0x84
   b83a4:	ed9f 9aa3 	vldr	s18, [pc, #652]	; b8634 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x340>
                        b -= 128.0f;
                    }

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
   b83a8:	ed9f baa3 	vldr	s22, [pc, #652]	; b8638 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x344>
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
   b83ac:	ee0f 2a10 	vmov	s30, r2
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
   b83b0:	f7fc fd2a 	bl	b4e08 <strcmp>
   b83b4:	2800      	cmp	r0, #0
   b83b6:	bf0c      	ite	eq
   b83b8:	2301      	moveq	r3, #1
   b83ba:	2303      	movne	r3, #3
   b83bc:	930c      	str	r3, [sp, #48]	; 0x30
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
   b83be:	f04f 0a00 	mov.w	sl, #0
    size_t bytes_left = signal->total_length;
   b83c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b83c6:	9306      	str	r3, [sp, #24]
   b83c8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    size_t output_ix = 0;
   b83cc:	4655      	mov	r5, sl
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
   b83ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b83d2:	4553      	cmp	r3, sl
   b83d4:	f240 819c 	bls.w	b8710 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x41c>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
   b83d8:	9b06      	ldr	r3, [sp, #24]
   b83da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   b83de:	bf28      	it	cs
   b83e0:	f44f 6380 	movcs.w	r3, #1024	; 0x400
   b83e4:	469b      	mov	fp, r3
        matrix_t input_matrix(elements_to_read, config.axes);
   b83e6:	ee1f 2a10 	vmov	r2, s30
   b83ea:	2300      	movs	r3, #0
   b83ec:	4659      	mov	r1, fp
   b83ee:	a815      	add	r0, sp, #84	; 0x54
   b83f0:	f7fe fb7c 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
        if (!input_matrix.buffer) {
   b83f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b83f6:	b9cb      	cbnz	r3, b842c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x138>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
   b83f8:	a815      	add	r0, sp, #84	; 0x54
   b83fa:	f7fe fb8c 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>

    if (ret != EIDSP_OK) {
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
   b83fe:	498f      	ldr	r1, [pc, #572]	; (b863c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x348>)
   b8400:	488f      	ldr	r0, [pc, #572]	; (b8640 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x34c>)
   b8402:	f003 fd23 	bl	bbe4c <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
   b8406:	f06f 0504 	mvn.w	r5, #4
#endif
        }
    }

    ~ei_matrix_i8() {
        if (buffer && buffer_managed_by_me) {
   b840a:	b124      	cbz	r4, b8416 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x122>
   b840c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b840e:	b113      	cbz	r3, b8416 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x122>
            ei_free(buffer);
   b8410:	4620      	mov	r0, r4
   b8412:	f003 fdf5 	bl	bc000 <_Z7ei_freePv>
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
   b8416:	a819      	add	r0, sp, #100	; 0x64
   b8418:	f7ff fdb3 	bl	b7f82 <_ZNSt10unique_ptrIvSt8functionIFvPvEEED1Ev>
    if (run_res != EI_IMPULSE_OK) {
        return run_res;
    }

    return EI_IMPULSE_OK;
}
   b841c:	4628      	mov	r0, r5
   b841e:	b05f      	add	sp, #380	; 0x17c
   b8420:	ecbd 8b10 	vpop	{d8-d15}
   b8424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            buffer_managed_by_me = false;
   b8428:	2300      	movs	r3, #0
   b842a:	e7ad      	b.n	b8388 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x94>
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
   b842c:	465a      	mov	r2, fp
   b842e:	4651      	mov	r1, sl
   b8430:	4648      	mov	r0, r9
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
   b8432:	eddf ba84 	vldr	s23, [pc, #528]	; b8644 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x350>
   b8436:	ed9f ca84 	vldr	s24, [pc, #528]	; b8648 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x354>
                        r -= 128.0f;
   b843a:	ed9f da84 	vldr	s26, [pc, #528]	; b864c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x358>
                        r /= 255.0f;
   b843e:	eddf ca84 	vldr	s25, [pc, #528]	; b8650 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x35c>
                        r = (r - torch_mean[0]) / torch_std[0];
   b8442:	eddf 9a84 	vldr	s19, [pc, #528]	; b8654 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x360>
   b8446:	ed9f aa84 	vldr	s20, [pc, #528]	; b8658 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x364>
                        g = (g - torch_mean[1]) / torch_std[1];
   b844a:	eddf aa84 	vldr	s21, [pc, #528]	; b865c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x368>
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
   b844e:	f7ff fc20 	bl	b7c92 <_ZNKSt8functionIFijjPfEEclEjjS0_>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   b8452:	2300      	movs	r3, #0
   b8454:	459b      	cmp	fp, r3
   b8456:	f000 8151 	beq.w	b86fc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x408>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
   b845a:	9a15      	ldr	r2, [sp, #84]	; 0x54
            if (channel_count == 3) {
   b845c:	990c      	ldr	r1, [sp, #48]	; 0x30
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
   b845e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   b8462:	edd2 7a00 	vldr	s15, [r2]
   b8466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
            if (channel_count == 3) {
   b846a:	2903      	cmp	r1, #3
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
   b846c:	ee17 0a90 	vmov	r0, s15
            if (channel_count == 3) {
   b8470:	f3c0 4107 	ubfx	r1, r0, #16, #8
   b8474:	ee07 1a90 	vmov	s15, r1
   b8478:	f3c0 2107 	ubfx	r1, r0, #8, #8
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
   b847c:	f105 0201 	add.w	r2, r5, #1
   b8480:	ee00 1a10 	vmov	s0, r1
   b8484:	b2c1      	uxtb	r1, r0
   b8486:	9208      	str	r2, [sp, #32]
   b8488:	ee07 1a10 	vmov	s14, r1
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
   b848c:	ea4f 2c10 	mov.w	ip, r0, lsr #8
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
   b8490:	eb04 0205 	add.w	r2, r4, r5
            if (channel_count == 3) {
   b8494:	f040 8097 	bne.w	b85c6 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2d2>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
   b8498:	1c69      	adds	r1, r5, #1
   b849a:	4421      	add	r1, r4
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
   b849c:	eef4 8a49 	vcmp.f32	s17, s18
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
   b84a0:	468e      	mov	lr, r1
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
   b84a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
   b84a6:	f105 0103 	add.w	r1, r5, #3
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
   b84aa:	f105 0502 	add.w	r5, r5, #2
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
   b84ae:	9108      	str	r1, [sp, #32]
   b84b0:	4425      	add	r5, r4
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
   b84b2:	d126      	bne.n	b8502 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x20e>
   b84b4:	eddf 6a6a 	vldr	s13, [pc, #424]	; b8660 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x36c>
   b84b8:	eeb4 8a66 	vcmp.f32	s16, s13
   b84bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b84c0:	d11f      	bne.n	b8502 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x20e>
   b84c2:	b9f6      	cbnz	r6, b8502 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x20e>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
   b84c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
   b84c8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
   b84cc:	ee77 7acd 	vsub.f32	s15, s15, s26
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
   b84d0:	ee30 0a4d 	vsub.f32	s0, s0, s26
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
   b84d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
   b84d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
   b84dc:	ee17 0a90 	vmov	r0, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
   b84e0:	ee37 7a4d 	vsub.f32	s14, s14, s26
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
   b84e4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
   b84e8:	7010      	strb	r0, [r2, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
   b84ea:	ee17 2a90 	vmov	r2, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
   b84ee:	eefd 7ac7 	vcvt.s32.f32	s15, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
   b84f2:	f88e 2000 	strb.w	r2, [lr]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
   b84f6:	ee17 2a90 	vmov	r2, s15
   b84fa:	702a      	strb	r2, [r5, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   b84fc:	9d08      	ldr	r5, [sp, #32]
   b84fe:	3301      	adds	r3, #1
   b8500:	e7a8      	b.n	b8454 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x160>
                    float g = static_cast<float>(pixel >> 8 & 0xff);
   b8502:	fa5f fc8c 	uxtb.w	ip, ip
                    float r = static_cast<float>(pixel >> 16 & 0xff);
   b8506:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
                    float g = static_cast<float>(pixel >> 8 & 0xff);
   b850a:	ee07 ca90 	vmov	s15, ip
                    float b = static_cast<float>(pixel & 0xff);
   b850e:	b2c0      	uxtb	r0, r0
                    float g = static_cast<float>(pixel >> 8 & 0xff);
   b8510:	eeb8 eae7 	vcvt.f32.s32	s28, s15
                    float b = static_cast<float>(pixel & 0xff);
   b8514:	ee07 0a90 	vmov	s15, r0
   b8518:	eef8 dae7 	vcvt.f32.s32	s27, s15
                    if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
   b851c:	bb7e      	cbnz	r6, b857e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x28a>
                        r /= 255.0f;
   b851e:	ee80 0a2c 	vdiv.f32	s0, s0, s25
                        g /= 255.0f;
   b8522:	ee8e ea2c 	vdiv.f32	s28, s28, s25
                        b /= 255.0f;
   b8526:	eecd daac 	vdiv.f32	s27, s27, s25
   b852a:	e9cd e210 	strd	lr, r2, [sp, #64]	; 0x40
   b852e:	930f      	str	r3, [sp, #60]	; 0x3c
   b8530:	ee80 0a28 	vdiv.f32	s0, s0, s17
   b8534:	f009 f942 	bl	c17bc <roundf>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / scale) + zero_point);
   b8538:	9a11      	ldr	r2, [sp, #68]	; 0x44
   b853a:	ee38 0a00 	vadd.f32	s0, s16, s0
   b853e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b8542:	ee8e 0a28 	vdiv.f32	s0, s28, s17
   b8546:	ee17 0a90 	vmov	r0, s15
   b854a:	7010      	strb	r0, [r2, #0]
   b854c:	f009 f936 	bl	c17bc <roundf>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / scale) + zero_point);
   b8550:	ee38 0a00 	vadd.f32	s0, s16, s0
   b8554:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   b8558:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b855c:	ee8d 0aa8 	vdiv.f32	s0, s27, s17
   b8560:	ee17 2a90 	vmov	r2, s15
   b8564:	f88e 2000 	strb.w	r2, [lr]
   b8568:	f009 f928 	bl	c17bc <roundf>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / scale) + zero_point);
   b856c:	ee38 0a00 	vadd.f32	s0, s16, s0
   b8570:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b8574:	ee17 2a90 	vmov	r2, s15
   b8578:	702a      	strb	r2, [r5, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / scale) + zero_point);
   b857a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b857c:	e7be      	b.n	b84fc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x208>
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_TORCH) {
   b857e:	2e02      	cmp	r6, #2
   b8580:	d118      	bne.n	b85b4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2c0>
                        r /= 255.0f;
   b8582:	eec0 7a2c 	vdiv.f32	s15, s0, s25
                        g = (g - torch_mean[1]) / torch_std[1];
   b8586:	ed9f 7a37 	vldr	s14, [pc, #220]	; b8664 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x370>
                        r = (r - torch_mean[0]) / torch_std[0];
   b858a:	ee77 7ae9 	vsub.f32	s15, s15, s19
   b858e:	ee87 0a8a 	vdiv.f32	s0, s15, s20
                        g /= 255.0f;
   b8592:	eece 7a2c 	vdiv.f32	s15, s28, s25
                        g = (g - torch_mean[1]) / torch_std[1];
   b8596:	ee77 7aea 	vsub.f32	s15, s15, s21
   b859a:	ee87 ea87 	vdiv.f32	s28, s15, s14
                        b /= 255.0f;
   b859e:	eecd 7aac 	vdiv.f32	s15, s27, s25
                        b = (b - torch_mean[2]) / torch_std[2];
   b85a2:	ed9f 7a31 	vldr	s14, [pc, #196]	; b8668 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x374>
   b85a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
   b85aa:	ed9f 7a30 	vldr	s14, [pc, #192]	; b866c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x378>
   b85ae:	eec7 da87 	vdiv.f32	s27, s15, s14
   b85b2:	e7ba      	b.n	b852a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x236>
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_MIN128_127) {
   b85b4:	2e04      	cmp	r6, #4
                        r -= 128.0f;
   b85b6:	bf02      	ittt	eq
   b85b8:	ee30 0a4d 	vsubeq.f32	s0, s0, s26
                        g -= 128.0f;
   b85bc:	ee3e ea4d 	vsubeq.f32	s28, s28, s26
                        b -= 128.0f;
   b85c0:	ee7d dacd 	vsubeq.f32	s27, s27, s26
   b85c4:	e7b1      	b.n	b852a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x236>
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
   b85c6:	eef4 8a49 	vcmp.f32	s17, s18
   b85ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b85ce:	d14f      	bne.n	b8670 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x37c>
   b85d0:	eddf 6a23 	vldr	s13, [pc, #140]	; b8660 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x36c>
   b85d4:	eeb4 8a66 	vcmp.f32	s16, s13
   b85d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b85dc:	d148      	bne.n	b8670 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x37c>
   b85de:	2e00      	cmp	r6, #0
   b85e0:	d146      	bne.n	b8670 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x37c>
                    int32_t gray = (iRedToGray * r) + (iGreenToGray * g) + (iBlueToGray * b);
   b85e2:	ee10 1a10 	vmov	r1, s0
   b85e6:	f249 6045 	movw	r0, #38469	; 0x9645
   b85ea:	ee17 5a90 	vmov	r5, s15
   b85ee:	4341      	muls	r1, r0
   b85f0:	4608      	mov	r0, r1
   b85f2:	f644 418b 	movw	r1, #19595	; 0x4c8b
   b85f6:	fb01 0005 	mla	r0, r1, r5, r0
   b85fa:	ee17 5a10 	vmov	r5, s14
   b85fe:	f641 512f 	movw	r1, #7471	; 0x1d2f
   b8602:	fb01 0105 	mla	r1, r1, r5, r0
                    gray >>= 16; // scale down to int8_t
   b8606:	1409      	asrs	r1, r1, #16
   b8608:	ee07 1a90 	vmov	s15, r1
                    gray += zero_point;
   b860c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8610:	ee77 7acd 	vsub.f32	s15, s15, s26
   b8614:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b8618:	ee17 1a90 	vmov	r1, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
   b861c:	f301 0107 	ssat	r1, #8, r1
   b8620:	7011      	strb	r1, [r2, #0]
   b8622:	e76b      	b.n	b84fc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x208>
   b8624:	000b5f95 	.word	0x000b5f95
   b8628:	000b6351 	.word	0x000b6351
   b862c:	000b633d 	.word	0x000b633d
   b8630:	000c566e 	.word	0x000c566e
   b8634:	3b808081 	.word	0x3b808081
   b8638:	3f1645a2 	.word	0x3f1645a2
   b863c:	fffffc16 	.word	0xfffffc16
   b8640:	000c5727 	.word	0x000c5727
   b8644:	3e991687 	.word	0x3e991687
   b8648:	3de978d5 	.word	0x3de978d5
   b864c:	43000000 	.word	0x43000000
   b8650:	437f0000 	.word	0x437f0000
   b8654:	3ef851ec 	.word	0x3ef851ec
   b8658:	3e6a7efa 	.word	0x3e6a7efa
   b865c:	3ee978d5 	.word	0x3ee978d5
   b8660:	c3000000 	.word	0xc3000000
   b8664:	3e656042 	.word	0x3e656042
   b8668:	3ecfdf3b 	.word	0x3ecfdf3b
   b866c:	3e666666 	.word	0x3e666666
                    float r = static_cast<float>(pixel >> 16 & 0xff);
   b8670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    float g = static_cast<float>(pixel >> 8 & 0xff);
   b8674:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
                    float b = static_cast<float>(pixel & 0xff);
   b8678:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                    if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
   b867c:	b9d6      	cbnz	r6, b86b4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3c0>
                        r /= 255.0f;
   b867e:	eec7 7aac 	vdiv.f32	s15, s15, s25
                        g /= 255.0f;
   b8682:	ee80 0a2c 	vdiv.f32	s0, s0, s25
                        b /= 255.0f;
   b8686:	ee87 7a2c 	vdiv.f32	s14, s14, s25
   b868a:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
   b868e:	ee20 0a0b 	vmul.f32	s0, s0, s22
   b8692:	eea7 0aab 	vfma.f32	s0, s15, s23
   b8696:	eea7 0a0c 	vfma.f32	s0, s14, s24
   b869a:	ee80 0a28 	vdiv.f32	s0, s0, s17
   b869e:	f009 f88d 	bl	c17bc <roundf>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / scale) + zero_point);
   b86a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b86a4:	ee38 0a00 	vadd.f32	s0, s16, s0
   b86a8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b86ac:	ee17 1a90 	vmov	r1, s15
   b86b0:	7011      	strb	r1, [r2, #0]
   b86b2:	e762      	b.n	b857a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x286>
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_TORCH) {
   b86b4:	2e02      	cmp	r6, #2
   b86b6:	d118      	bne.n	b86ea <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3f6>
                        r /= 255.0f;
   b86b8:	eec7 6aac 	vdiv.f32	s13, s15, s25
                        g = (g - torch_mean[1]) / torch_std[1];
   b86bc:	ed1f 6a17 	vldr	s12, [pc, #-92]	; b8664 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x370>
                        r = (r - torch_mean[0]) / torch_std[0];
   b86c0:	ee76 6ae9 	vsub.f32	s13, s13, s19
   b86c4:	eec6 7a8a 	vdiv.f32	s15, s13, s20
                        g /= 255.0f;
   b86c8:	eec0 6a2c 	vdiv.f32	s13, s0, s25
                        g = (g - torch_mean[1]) / torch_std[1];
   b86cc:	ee76 6aea 	vsub.f32	s13, s13, s21
   b86d0:	ee86 0a86 	vdiv.f32	s0, s13, s12
                        b /= 255.0f;
   b86d4:	eec7 6a2c 	vdiv.f32	s13, s14, s25
                        b = (b - torch_mean[2]) / torch_std[2];
   b86d8:	ed1f 7a1d 	vldr	s14, [pc, #-116]	; b8668 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x374>
   b86dc:	ed1f 6a1d 	vldr	s12, [pc, #-116]	; b866c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x378>
   b86e0:	ee76 6ac7 	vsub.f32	s13, s13, s14
   b86e4:	ee86 7a86 	vdiv.f32	s14, s13, s12
   b86e8:	e7cf      	b.n	b868a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x396>
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_MIN128_127) {
   b86ea:	2e04      	cmp	r6, #4
                        r -= 128.0f;
   b86ec:	bf02      	ittt	eq
   b86ee:	ee77 7acd 	vsubeq.f32	s15, s15, s26
                        g -= 128.0f;
   b86f2:	ee30 0a4d 	vsubeq.f32	s0, s0, s26
                        b -= 128.0f;
   b86f6:	ee37 7a4d 	vsubeq.f32	s14, s14, s26
   b86fa:	e7c6      	b.n	b868a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x396>
                }
            }
        }

        bytes_left -= elements_to_read;
   b86fc:	9b06      	ldr	r3, [sp, #24]
        matrix_t input_matrix(elements_to_read, config.axes);
   b86fe:	a815      	add	r0, sp, #84	; 0x54
        bytes_left -= elements_to_read;
   b8700:	eba3 030b 	sub.w	r3, r3, fp
   b8704:	9306      	str	r3, [sp, #24]
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
   b8706:	f50a 6a80 	add.w	sl, sl, #1024	; 0x400
        matrix_t input_matrix(elements_to_read, config.axes);
   b870a:	f7fe fa04 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
   b870e:	e65e      	b.n	b83ce <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0xda>
    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
   b8710:	f003 fb94 	bl	bbe3c <_Z29ei_run_impulse_check_canceledv>
   b8714:	1c83      	adds	r3, r0, #2
   b8716:	4605      	mov	r5, r0
   b8718:	f43f ae77 	beq.w	b840a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x116>
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
   b871c:	f003 fb90 	bl	bbe40 <_Z16ei_read_timer_usv>
   b8720:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b8722:	1ac0      	subs	r0, r0, r3
   b8724:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b8726:	eb61 0103 	sbc.w	r1, r1, r3
   b872a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
   b872e:	2300      	movs	r3, #0
   b8730:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b8734:	f7fc f978 	bl	b4a28 <__aeabi_ldivmod>
    if (debug) {
   b8738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
   b873a:	6278      	str	r0, [r7, #36]	; 0x24
   b873c:	4601      	mov	r1, r0
    if (debug) {
   b873e:	b1f3      	cbz	r3, b877e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x48a>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
   b8740:	481d      	ldr	r0, [pc, #116]	; (b87b8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x4c4>)
            ei_printf(" ");
   b8742:	4e1e      	ldr	r6, [pc, #120]	; (b87bc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x4c8>)
        ei_printf("Features (%d ms.): ", result->timing.dsp);
   b8744:	f003 fb82 	bl	bbe4c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
   b8748:	9b07      	ldr	r3, [sp, #28]
   b874a:	4423      	add	r3, r4
   b874c:	4625      	mov	r5, r4
   b874e:	469a      	mov	sl, r3
   b8750:	45aa      	cmp	sl, r5
   b8752:	d011      	beq.n	b8778 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x484>
            ei_printf_float((features_matrix.buffer[ix] - input.params.zero_point) * input.params.scale);
   b8754:	f915 2b01 	ldrsb.w	r2, [r5], #1
   b8758:	9b22      	ldr	r3, [sp, #136]	; 0x88
   b875a:	ed9d 0a21 	vldr	s0, [sp, #132]	; 0x84
   b875e:	1ad3      	subs	r3, r2, r3
   b8760:	ee07 3a90 	vmov	s15, r3
   b8764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8768:	ee27 0a80 	vmul.f32	s0, s15, s0
   b876c:	f003 fb90 	bl	bbe90 <_Z15ei_printf_floatf>
            ei_printf(" ");
   b8770:	4630      	mov	r0, r6
   b8772:	f003 fb6b 	bl	bbe4c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
   b8776:	e7eb      	b.n	b8750 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x45c>
        ei_printf("\n");
   b8778:	4811      	ldr	r0, [pc, #68]	; (b87c0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x4cc>)
   b877a:	f003 fb67 	bl	bbe4c <_Z9ei_printfPKcz>
    ctx_start_us = ei_read_timer_us();
   b877e:	f003 fb5f 	bl	bbe40 <_Z16ei_read_timer_usv>
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
   b8782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8784:	e9cd 7303 	strd	r7, r3, [sp, #12]
   b8788:	ab3e      	add	r3, sp, #248	; 0xf8
   b878a:	9302      	str	r3, [sp, #8]
   b878c:	ab4e      	add	r3, sp, #312	; 0x138
   b878e:	9301      	str	r3, [sp, #4]
   b8790:	ab2e      	add	r3, sp, #184	; 0xb8
    ctx_start_us = ei_read_timer_us();
   b8792:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   b8796:	4602      	mov	r2, r0
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
   b8798:	9300      	str	r3, [sp, #0]
   b879a:	4640      	mov	r0, r8
   b879c:	460b      	mov	r3, r1
   b879e:	ee1e 1a90 	vmov	r1, s29
   b87a2:	f7ff f965 	bl	b7a70 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0>
    graph_config->model_reset(ei_aligned_free);
   b87a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
   b87a8:	4605      	mov	r5, r0
    graph_config->model_reset(ei_aligned_free);
   b87aa:	68db      	ldr	r3, [r3, #12]
   b87ac:	4805      	ldr	r0, [pc, #20]	; (b87c4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x4d0>)
   b87ae:	4798      	blx	r3
    if (run_res != EI_IMPULSE_OK) {
   b87b0:	e62b      	b.n	b840a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x116>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
   b87b2:	f06f 0508 	mvn.w	r5, #8
   b87b6:	e62e      	b.n	b8416 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x122>
   b87b8:	000c574c 	.word	0x000c574c
   b87bc:	000c8b48 	.word	0x000c8b48
   b87c0:	000c603e 	.word	0x000c603e
   b87c4:	000b5f95 	.word	0x000b5f95

000b87c8 <run_classifier_image_quantized>:
    extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
        const ei_impulse_t *impulse,
        signal_t *signal,
        ei_impulse_result_t *result,
        bool debug = false)
    {
   b87c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b87ca:	4604      	mov	r4, r0
   b87cc:	4615      	mov	r5, r2
   b87ce:	460e      	mov	r6, r1
        memset(result, 0, sizeof(ei_impulse_result_t));
   b87d0:	2250      	movs	r2, #80	; 0x50
   b87d2:	2100      	movs	r1, #0
   b87d4:	4628      	mov	r0, r5
    {
   b87d6:	461f      	mov	r7, r3
        memset(result, 0, sizeof(ei_impulse_result_t));
   b87d8:	f00a fd1a 	bl	c3210 <memset>

        return run_nn_inference_image_quantized(impulse, signal, result, impulse->learning_blocks[0].config, debug);
   b87dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
   b87de:	9700      	str	r7, [sp, #0]
   b87e0:	68db      	ldr	r3, [r3, #12]
   b87e2:	462a      	mov	r2, r5
   b87e4:	4631      	mov	r1, r6
   b87e6:	4620      	mov	r0, r4
   b87e8:	f7ff fd84 	bl	b82f4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb>
    }
   b87ec:	b003      	add	sp, #12
   b87ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b87f0 <process_impulse>:
    {
   b87f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b87f4:	ed2d 8b04 	vpush	{d8-d9}
   b87f8:	b099      	sub	sp, #100	; 0x64
   b87fa:	ee08 3a10 	vmov	s16, r3
   b87fe:	9105      	str	r1, [sp, #20]
   b8800:	4617      	mov	r7, r2
        if ((handle == nullptr) || (handle->impulse == nullptr) || (result == nullptr) || (signal == nullptr))
   b8802:	4604      	mov	r4, r0
   b8804:	2800      	cmp	r0, #0
   b8806:	f000 81a7 	beq.w	b8b58 <process_impulse+0x368>
   b880a:	68c0      	ldr	r0, [r0, #12]
   b880c:	2800      	cmp	r0, #0
   b880e:	f000 81a3 	beq.w	b8b58 <process_impulse+0x368>
   b8812:	2a00      	cmp	r2, #0
   b8814:	f000 81a0 	beq.w	b8b58 <process_impulse+0x368>
   b8818:	2900      	cmp	r1, #0
   b881a:	f000 819d 	beq.w	b8b58 <process_impulse+0x368>
        if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE && impulse->inferencing_engine != EI_CLASSIFIER_TENSAIFLOW && impulse->inferencing_engine != EI_CLASSIFIER_DRPAI && impulse->inferencing_engine != EI_CLASSIFIER_ONNX_TIDL && impulse->inferencing_engine != EI_CLASSIFIER_ATON) // check later
   b881e:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
        ei_learning_block_t block = handle->impulse->learning_blocks[0];
   b8822:	6d83      	ldr	r3, [r0, #88]	; 0x58
        if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE && impulse->inferencing_engine != EI_CLASSIFIER_TENSAIFLOW && impulse->inferencing_engine != EI_CLASSIFIER_DRPAI && impulse->inferencing_engine != EI_CLASSIFIER_ONNX_TIDL && impulse->inferencing_engine != EI_CLASSIFIER_ATON) // check later
   b8824:	2a0e      	cmp	r2, #14
        ei_learning_block_t block = handle->impulse->learning_blocks[0];
   b8826:	e9d3 5102 	ldrd	r5, r1, [r3, #8]
        if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE && impulse->inferencing_engine != EI_CLASSIFIER_TENSAIFLOW && impulse->inferencing_engine != EI_CLASSIFIER_DRPAI && impulse->inferencing_engine != EI_CLASSIFIER_ONNX_TIDL && impulse->inferencing_engine != EI_CLASSIFIER_ATON) // check later
   b882a:	d826      	bhi.n	b887a <process_impulse+0x8a>
   b882c:	f644 03a4 	movw	r3, #18596	; 0x48a4
   b8830:	40d3      	lsrs	r3, r2
   b8832:	07db      	lsls	r3, r3, #31
   b8834:	d521      	bpl.n	b887a <process_impulse+0x8a>
        if (impulse->has_anomaly)
   b8836:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
   b883a:	b9f3      	cbnz	r3, b887a <process_impulse+0x8a>
        if (block_ptr.infer_fn != run_nn_inference)
   b883c:	4b9a      	ldr	r3, [pc, #616]	; (b8aa8 <process_impulse+0x2b8>)
   b883e:	429d      	cmp	r5, r3
   b8840:	d11b      	bne.n	b887a <process_impulse+0x8a>
        if (block_config->quantized != 1)
   b8842:	7d0b      	ldrb	r3, [r1, #20]
   b8844:	b1cb      	cbz	r3, b887a <process_impulse+0x8a>
        if (impulse->dsp_blocks_size != 1 || impulse->dsp_blocks[0].extract_fn != extract_image_features)
   b8846:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   b884a:	2b01      	cmp	r3, #1
   b884c:	d115      	bne.n	b887a <process_impulse+0x8a>
   b884e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   b8850:	689a      	ldr	r2, [r3, #8]
   b8852:	4b96      	ldr	r3, [pc, #600]	; (b8aac <process_impulse+0x2bc>)
   b8854:	429a      	cmp	r2, r3
   b8856:	d110      	bne.n	b887a <process_impulse+0x8a>
            EI_IMPULSE_ERROR res = run_classifier_image_quantized(handle->impulse, signal, result, debug);
   b8858:	ee18 3a10 	vmov	r3, s16
   b885c:	9905      	ldr	r1, [sp, #20]
   b885e:	463a      	mov	r2, r7
   b8860:	f7ff ffb2 	bl	b87c8 <run_classifier_image_quantized>
            if (res != EI_IMPULSE_OK)
   b8864:	4682      	mov	sl, r0
   b8866:	bb28      	cbnz	r0, b88b4 <process_impulse+0xc4>
            res = run_postprocessing(handle, result);
   b8868:	4639      	mov	r1, r7
   b886a:	4620      	mov	r0, r4
    }
   b886c:	b019      	add	sp, #100	; 0x64
   b886e:	ecbd 8b04 	vpop	{d8-d9}
   b8872:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            res = run_postprocessing(handle, result);
   b8876:	f7fe bf08 	b.w	b768a <run_postprocessing>
        memset(result, 0, sizeof(ei_impulse_result_t));
   b887a:	2250      	movs	r2, #80	; 0x50
   b887c:	2100      	movs	r1, #0
   b887e:	4638      	mov	r0, r7
   b8880:	f00a fcc6 	bl	c3210 <memset>
        uint32_t block_num = handle->impulse->dsp_blocks_size + handle->impulse->learning_blocks_size;
   b8884:	68e3      	ldr	r3, [r4, #12]
   b8886:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
   b888a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
   b888e:	18d3      	adds	r3, r2, r3
        std::unique_ptr<ei_feature_t[]> features_ptr(new ei_feature_t[block_num]);
   b8890:	00da      	lsls	r2, r3, #3
   b8892:	4610      	mov	r0, r2
   b8894:	9203      	str	r2, [sp, #12]
        uint32_t block_num = handle->impulse->dsp_blocks_size + handle->impulse->learning_blocks_size;
   b8896:	9302      	str	r3, [sp, #8]
        std::unique_ptr<ei_feature_t[]> features_ptr(new ei_feature_t[block_num]);
   b8898:	f7fc fb05 	bl	b4ea6 <_Znaj>
        if (features == nullptr)
   b889c:	9a03      	ldr	r2, [sp, #12]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b889e:	900e      	str	r0, [sp, #56]	; 0x38
        std::unique_ptr<ei_feature_t[]> features_ptr(new ei_feature_t[block_num]);
   b88a0:	4680      	mov	r8, r0
        if (features == nullptr)
   b88a2:	b968      	cbnz	r0, b88c0 <process_impulse+0xd0>
            ei_printf("ERR: Out of memory, can't allocate features\n");
   b88a4:	4882      	ldr	r0, [pc, #520]	; (b8ab0 <process_impulse+0x2c0>)
            ei_printf("ERR: Out of memory, can't allocate matrix_ptrs\n");
   b88a6:	f003 fad1 	bl	bbe4c <_Z9ei_printfPKcz>
            return EI_IMPULSE_ALLOC_FAILED;
   b88aa:	f06f 0a07 	mvn.w	sl, #7
        std::unique_ptr<ei_feature_t[]> features_ptr(new ei_feature_t[block_num]);
   b88ae:	a80e      	add	r0, sp, #56	; 0x38
   b88b0:	f7ff fb46 	bl	b7f40 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev>
    }
   b88b4:	4650      	mov	r0, sl
   b88b6:	b019      	add	sp, #100	; 0x64
   b88b8:	ecbd 8b04 	vpop	{d8-d9}
   b88bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset(features, 0, sizeof(ei_feature_t) * block_num);
   b88c0:	2100      	movs	r1, #0
   b88c2:	f00a fca5 	bl	c3210 <memset>
        std::unique_ptr<std::unique_ptr<ei::matrix_t>[]> matrix_ptrs_ptr(new std::unique_ptr<ei::matrix_t>[block_num]);
   b88c6:	9b02      	ldr	r3, [sp, #8]
   b88c8:	1c98      	adds	r0, r3, #2
   b88ca:	0080      	lsls	r0, r0, #2
   b88cc:	f7fc faeb 	bl	b4ea6 <_Znaj>
   b88d0:	4606      	mov	r6, r0
   b88d2:	2800      	cmp	r0, #0
   b88d4:	d057      	beq.n	b8986 <process_impulse+0x196>
   b88d6:	2304      	movs	r3, #4
   b88d8:	6003      	str	r3, [r0, #0]
   b88da:	9b02      	ldr	r3, [sp, #8]
   b88dc:	6043      	str	r3, [r0, #4]
   b88de:	f100 0908 	add.w	r9, r0, #8
      : _M_head_impl() { }
   b88e2:	009a      	lsls	r2, r3, #2
   b88e4:	2100      	movs	r1, #0
   b88e6:	4648      	mov	r0, r9
   b88e8:	f00a fc92 	bl	c3210 <memset>
        uint64_t dsp_start_us = ei_read_timer_us();
   b88ec:	f003 faa8 	bl	bbe40 <_Z16ei_read_timer_usv>
   b88f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
        for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++)
   b88f4:	2500      	movs	r5, #0
   b88f6:	f8cd 9010 	str.w	r9, [sp, #16]
        size_t out_features_index = 0;
   b88fa:	9503      	str	r5, [sp, #12]
        for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++)
   b88fc:	68e3      	ldr	r3, [r4, #12]
   b88fe:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
   b8902:	42aa      	cmp	r2, r5
   b8904:	f240 80e6 	bls.w	b8ad4 <process_impulse+0x2e4>
            ei_model_dsp_t block = handle->impulse->dsp_blocks[ix];
   b8908:	016a      	lsls	r2, r5, #5
   b890a:	920b      	str	r2, [sp, #44]	; 0x2c
   b890c:	0169      	lsls	r1, r5, #5
   b890e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   b8910:	eb02 1345 	add.w	r3, r2, r5, lsl #5
   b8914:	5852      	ldr	r2, [r2, r1]
   b8916:	9209      	str	r2, [sp, #36]	; 0x24
   b8918:	e9d3 b201 	ldrd	fp, r2, [r3, #4]
   b891c:	9206      	str	r2, [sp, #24]
   b891e:	68da      	ldr	r2, [r3, #12]
   b8920:	ee08 2a90 	vmov	s17, r2
   b8924:	691a      	ldr	r2, [r3, #16]
   b8926:	9208      	str	r2, [sp, #32]
            matrix_ptrs[ix] = std::unique_ptr<ei::matrix_t>(new ei::matrix_t(1, block.n_output_features));
   b8928:	2010      	movs	r0, #16
            ei_model_dsp_t block = handle->impulse->dsp_blocks[ix];
   b892a:	695a      	ldr	r2, [r3, #20]
   b892c:	69db      	ldr	r3, [r3, #28]
   b892e:	9207      	str	r2, [sp, #28]
   b8930:	930a      	str	r3, [sp, #40]	; 0x28
            matrix_ptrs[ix] = std::unique_ptr<ei::matrix_t>(new ei::matrix_t(1, block.n_output_features));
   b8932:	f7fc fab6 	bl	b4ea2 <_Znwj>
   b8936:	4682      	mov	sl, r0
   b8938:	b120      	cbz	r0, b8944 <process_impulse+0x154>
   b893a:	2300      	movs	r3, #0
   b893c:	465a      	mov	r2, fp
   b893e:	2101      	movs	r1, #1
   b8940:	f7fe f8d4 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
   b8944:	9804      	ldr	r0, [sp, #16]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b8946:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
   b894a:	a90f      	add	r1, sp, #60	; 0x3c
   b894c:	f7fe f8ed 	bl	b6b2a <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_.isra.0>
   b8950:	a80f      	add	r0, sp, #60	; 0x3c
   b8952:	f7ff fafd 	bl	b7f50 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b8956:	9a04      	ldr	r2, [sp, #16]
   b8958:	f852 3b04 	ldr.w	r3, [r2], #4
   b895c:	9204      	str	r2, [sp, #16]
   b895e:	ea4f 0a85 	mov.w	sl, r5, lsl #2
            if (matrix_ptrs[ix] == nullptr)
   b8962:	b993      	cbnz	r3, b898a <process_impulse+0x19a>
                ei_printf("ERR: Out of memory, can't allocate matrix_ptrs[%u]\n", ix);
   b8964:	4853      	ldr	r0, [pc, #332]	; (b8ab4 <process_impulse+0x2c4>)
   b8966:	4629      	mov	r1, r5
   b8968:	f003 fa70 	bl	bbe4c <_Z9ei_printfPKcz>
                return EI_IMPULSE_ALLOC_FAILED;
   b896c:	f06f 0a07 	mvn.w	sl, #7
	  delete [] __ptr;
   b8970:	6874      	ldr	r4, [r6, #4]
   b8972:	eb09 0484 	add.w	r4, r9, r4, lsl #2
   b8976:	45a1      	cmp	r9, r4
   b8978:	f000 80e7 	beq.w	b8b4a <process_impulse+0x35a>
   b897c:	3c04      	subs	r4, #4
   b897e:	4620      	mov	r0, r4
   b8980:	f7ff fae6 	bl	b7f50 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
   b8984:	e7f7      	b.n	b8976 <process_impulse+0x186>
            ei_printf("ERR: Out of memory, can't allocate matrix_ptrs\n");
   b8986:	484c      	ldr	r0, [pc, #304]	; (b8ab8 <process_impulse+0x2c8>)
   b8988:	e78d      	b.n	b88a6 <process_impulse+0xb6>
            if (matrix_ptrs[ix]->buffer == nullptr)
   b898a:	681a      	ldr	r2, [r3, #0]
   b898c:	b9a2      	cbnz	r2, b89b8 <process_impulse+0x1c8>
                ei_printf("ERR: Out of memory, can't allocate matrix_ptrs[%u]\n", ix);
   b898e:	4849      	ldr	r0, [pc, #292]	; (b8ab4 <process_impulse+0x2c4>)
   b8990:	4629      	mov	r1, r5
   b8992:	f003 fa5b 	bl	bbe4c <_Z9ei_printfPKcz>
                delete[] matrix_ptrs;
   b8996:	6874      	ldr	r4, [r6, #4]
   b8998:	eb09 0484 	add.w	r4, r9, r4, lsl #2
   b899c:	454c      	cmp	r4, r9
   b899e:	d004      	beq.n	b89aa <process_impulse+0x1ba>
   b89a0:	3c04      	subs	r4, #4
   b89a2:	4620      	mov	r0, r4
   b89a4:	f7ff fad4 	bl	b7f50 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
   b89a8:	e7f8      	b.n	b899c <process_impulse+0x1ac>
   b89aa:	6871      	ldr	r1, [r6, #4]
   b89ac:	3102      	adds	r1, #2
   b89ae:	0089      	lsls	r1, r1, #2
   b89b0:	4630      	mov	r0, r6
   b89b2:	f7fc fa7e 	bl	b4eb2 <_ZdaPvj>
   b89b6:	e7d9      	b.n	b896c <process_impulse+0x17c>
            features[ix].matrix = matrix_ptrs[ix].get();
   b89b8:	f848 3035 	str.w	r3, [r8, r5, lsl #3]
            features[ix].blockId = block.blockId;
   b89bc:	f108 0304 	add.w	r3, r8, #4
   b89c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b89c2:	f843 2035 	str.w	r2, [r3, r5, lsl #3]
            if (out_features_index + block.n_output_features > handle->impulse->nn_input_frame_size)
   b89c6:	9b03      	ldr	r3, [sp, #12]
   b89c8:	445b      	add	r3, fp
   b89ca:	9303      	str	r3, [sp, #12]
   b89cc:	68e3      	ldr	r3, [r4, #12]
   b89ce:	9903      	ldr	r1, [sp, #12]
   b89d0:	699a      	ldr	r2, [r3, #24]
   b89d2:	4291      	cmp	r1, r2
   b89d4:	d905      	bls.n	b89e2 <process_impulse+0x1f2>
                ei_printf("ERR: Would write outside feature buffer\n");
   b89d6:	4839      	ldr	r0, [pc, #228]	; (b8abc <process_impulse+0x2cc>)
   b89d8:	f003 fa38 	bl	bbe4c <_Z9ei_printfPKcz>
                return EI_IMPULSE_DSP_ERROR;
   b89dc:	f06f 0a04 	mvn.w	sl, #4
   b89e0:	e7c6      	b.n	b8970 <process_impulse+0x180>
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
   b89e2:	9a05      	ldr	r2, [sp, #20]
   b89e4:	920f      	str	r2, [sp, #60]	; 0x3c
   b89e6:	9a08      	ldr	r2, [sp, #32]
   b89e8:	9210      	str	r2, [sp, #64]	; 0x40
   b89ea:	9a07      	ldr	r2, [sp, #28]
        auto internal_signal = swa.get_signal();
   b89ec:	a80f      	add	r0, sp, #60	; 0x3c
   b89ee:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
    _Function_base() : _M_manager(nullptr) { }
   b89f2:	2300      	movs	r3, #0
   b89f4:	9315      	str	r3, [sp, #84]	; 0x54
   b89f6:	f7ff fb61 	bl	b80bc <_ZN14SignalWithAxes10get_signalEv>
            if (block.factory)
   b89fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        auto internal_signal = swa.get_signal();
   b89fc:	ee09 0a10 	vmov	s18, r0
            if (block.factory)
   b8a00:	2b00      	cmp	r3, #0
   b8a02:	d039      	beq.n	b8a78 <process_impulse+0x288>
                if (!has_printed)
   b8a04:	4b2e      	ldr	r3, [pc, #184]	; (b8ac0 <process_impulse+0x2d0>)
   b8a06:	781b      	ldrb	r3, [r3, #0]
   b8a08:	b94b      	cbnz	r3, b8a1e <process_impulse+0x22e>
                    EI_LOGI("Impulse maintains state. Call run_classifier_init() to reset state (e.g. if data stream is interrupted.)\n");
   b8a0a:	492e      	ldr	r1, [pc, #184]	; (b8ac4 <process_impulse+0x2d4>)
   b8a0c:	482e      	ldr	r0, [pc, #184]	; (b8ac8 <process_impulse+0x2d8>)
   b8a0e:	f003 fa1d 	bl	bbe4c <_Z9ei_printfPKcz>
   b8a12:	482e      	ldr	r0, [pc, #184]	; (b8acc <process_impulse+0x2dc>)
   b8a14:	f003 fa1a 	bl	bbe4c <_Z9ei_printfPKcz>
                    has_printed = true;
   b8a18:	4a29      	ldr	r2, [pc, #164]	; (b8ac0 <process_impulse+0x2d0>)
   b8a1a:	2301      	movs	r3, #1
   b8a1c:	7013      	strb	r3, [r2, #0]
            dsp_handles[ix] = nullptr;
        }
    }

    DspHandle* get_dsp_handle(size_t ix) {
        if (dsp_handles[ix] == nullptr) {
   b8a1e:	f8d4 b004 	ldr.w	fp, [r4, #4]
   b8a22:	f85b 300a 	ldr.w	r3, [fp, sl]
   b8a26:	b953      	cbnz	r3, b8a3e <process_impulse+0x24e>
            dsp_handles[ix] = impulse->dsp_blocks[ix].factory(impulse->dsp_blocks[ix].config, impulse->frequency);
   b8a28:	6821      	ldr	r1, [r4, #0]
   b8a2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8a2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   b8a2e:	ed91 0a0e 	vldr	s0, [r1, #56]	; 0x38
   b8a32:	4413      	add	r3, r2
   b8a34:	69da      	ldr	r2, [r3, #28]
   b8a36:	68d8      	ldr	r0, [r3, #12]
   b8a38:	4790      	blx	r2
   b8a3a:	f84b 000a 	str.w	r0, [fp, sl]
        }
        return dsp_handles[ix];
   b8a3e:	6863      	ldr	r3, [r4, #4]
   b8a40:	f853 000a 	ldr.w	r0, [r3, sl]
                if (dsp_handle)
   b8a44:	b368      	cbz	r0, b8aa2 <process_impulse+0x2b2>
                        handle->impulse->frequency,
   b8a46:	68e3      	ldr	r3, [r4, #12]
                        result);
   b8a48:	6802      	ldr	r2, [r0, #0]
                    ret = dsp_handle->extract(
   b8a4a:	9700      	str	r7, [sp, #0]
   b8a4c:	f8d2 b004 	ldr.w	fp, [r2, #4]
   b8a50:	ed93 0a0e 	vldr	s0, [r3, #56]	; 0x38
   b8a54:	f858 2035 	ldr.w	r2, [r8, r5, lsl #3]
   b8a58:	ee18 3a90 	vmov	r3, s17
   b8a5c:	ee19 1a10 	vmov	r1, s18
   b8a60:	47d8      	blx	fp
            if (ret != EIDSP_OK)
   b8a62:	b198      	cbz	r0, b8a8c <process_impulse+0x29c>
                ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
   b8a64:	4601      	mov	r1, r0
   b8a66:	481a      	ldr	r0, [pc, #104]	; (b8ad0 <process_impulse+0x2e0>)
   b8a68:	f003 f9f0 	bl	bbe4c <_Z9ei_printfPKcz>
                return EI_IMPULSE_DSP_ERROR;
   b8a6c:	f06f 0a04 	mvn.w	sl, #4
    class function<_Res(_ArgTypes...)>
   b8a70:	a813      	add	r0, sp, #76	; 0x4c
   b8a72:	f7fe f832 	bl	b6ada <_ZNSt14_Function_baseD1Ev>
class SignalWithAxes {
   b8a76:	e77b      	b.n	b8970 <process_impulse+0x180>
                ret = block.extract_fn(internal_signal, features[ix].matrix, block.config, handle->impulse->frequency);
   b8a78:	68e3      	ldr	r3, [r4, #12]
   b8a7a:	f858 1035 	ldr.w	r1, [r8, r5, lsl #3]
   b8a7e:	ed93 0a0e 	vldr	s0, [r3, #56]	; 0x38
   b8a82:	9b06      	ldr	r3, [sp, #24]
   b8a84:	ee18 2a90 	vmov	r2, s17
   b8a88:	4798      	blx	r3
   b8a8a:	e7ea      	b.n	b8a62 <process_impulse+0x272>
            if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED)
   b8a8c:	f003 f9d6 	bl	bbe3c <_Z29ei_run_impulse_check_canceledv>
   b8a90:	f110 0f02 	cmn.w	r0, #2
   b8a94:	4682      	mov	sl, r0
   b8a96:	d0eb      	beq.n	b8a70 <process_impulse+0x280>
   b8a98:	a813      	add	r0, sp, #76	; 0x4c
   b8a9a:	f7fe f81e 	bl	b6ada <_ZNSt14_Function_baseD1Ev>
        for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++)
   b8a9e:	3501      	adds	r5, #1
   b8aa0:	e72c      	b.n	b88fc <process_impulse+0x10c>
                    return EI_IMPULSE_OUT_OF_MEMORY;
   b8aa2:	f06f 0a0a 	mvn.w	sl, #10
   b8aa6:	e7e3      	b.n	b8a70 <process_impulse+0x280>
   b8aa8:	000b8219 	.word	0x000b8219
   b8aac:	000b7cb1 	.word	0x000b7cb1
   b8ab0:	000c5760 	.word	0x000c5760
   b8ab4:	000c57bd 	.word	0x000c57bd
   b8ab8:	000c578d 	.word	0x000c578d
   b8abc:	000c57f1 	.word	0x000c57f1
   b8ac0:	2003d778 	.word	0x2003d778
   b8ac4:	000c52e1 	.word	0x000c52e1
   b8ac8:	000c6042 	.word	0x000c6042
   b8acc:	000c581a 	.word	0x000c581a
   b8ad0:	000c5727 	.word	0x000c5727
        result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
   b8ad4:	f003 f9b4 	bl	bbe40 <_Z16ei_read_timer_usv>
   b8ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8ada:	1ac0      	subs	r0, r0, r3
   b8adc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b8ade:	eb61 0103 	sbc.w	r1, r1, r3
   b8ae2:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
        result->timing.dsp = (int)(result->timing.dsp_us / 1000);
   b8ae6:	2300      	movs	r3, #0
   b8ae8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b8aec:	f7fb ff9c 	bl	b4a28 <__aeabi_ldivmod>
        if (debug)
   b8af0:	ee18 3a10 	vmov	r3, s16
        result->timing.dsp = (int)(result->timing.dsp_us / 1000);
   b8af4:	4601      	mov	r1, r0
   b8af6:	6278      	str	r0, [r7, #36]	; 0x24
        if (debug)
   b8af8:	b3a3      	cbz	r3, b8b64 <process_impulse+0x374>
            ei_printf("Features (%d ms.): ", result->timing.dsp);
   b8afa:	4823      	ldr	r0, [pc, #140]	; (b8b88 <process_impulse+0x398>)
                    ei_printf(" ");
   b8afc:	4d23      	ldr	r5, [pc, #140]	; (b8b8c <process_impulse+0x39c>)
                ei_printf("\n");
   b8afe:	f8df a094 	ldr.w	sl, [pc, #148]	; b8b94 <process_impulse+0x3a4>
            ei_printf("Features (%d ms.): ", result->timing.dsp);
   b8b02:	f003 f9a3 	bl	bbe4c <_Z9ei_printfPKcz>
            for (size_t ix = 0; ix < block_num; ix++)
   b8b06:	f04f 0b00 	mov.w	fp, #0
   b8b0a:	9b02      	ldr	r3, [sp, #8]
   b8b0c:	459b      	cmp	fp, r3
   b8b0e:	d026      	beq.n	b8b5e <process_impulse+0x36e>
                if (features[ix].matrix == nullptr)
   b8b10:	f858 303b 	ldr.w	r3, [r8, fp, lsl #3]
   b8b14:	b1b3      	cbz	r3, b8b44 <process_impulse+0x354>
                for (size_t jx = 0; jx < features[ix].matrix->cols; jx++)
   b8b16:	2300      	movs	r3, #0
   b8b18:	f858 203b 	ldr.w	r2, [r8, fp, lsl #3]
   b8b1c:	6891      	ldr	r1, [r2, #8]
   b8b1e:	4299      	cmp	r1, r3
   b8b20:	d90d      	bls.n	b8b3e <process_impulse+0x34e>
                    ei_printf_float(features[ix].matrix->buffer[jx]);
   b8b22:	6812      	ldr	r2, [r2, #0]
   b8b24:	9303      	str	r3, [sp, #12]
   b8b26:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   b8b2a:	ed92 0a00 	vldr	s0, [r2]
   b8b2e:	f003 f9af 	bl	bbe90 <_Z15ei_printf_floatf>
                    ei_printf(" ");
   b8b32:	4628      	mov	r0, r5
   b8b34:	f003 f98a 	bl	bbe4c <_Z9ei_printfPKcz>
                for (size_t jx = 0; jx < features[ix].matrix->cols; jx++)
   b8b38:	9b03      	ldr	r3, [sp, #12]
   b8b3a:	3301      	adds	r3, #1
   b8b3c:	e7ec      	b.n	b8b18 <process_impulse+0x328>
                ei_printf("\n");
   b8b3e:	4650      	mov	r0, sl
   b8b40:	f003 f984 	bl	bbe4c <_Z9ei_printfPKcz>
            for (size_t ix = 0; ix < block_num; ix++)
   b8b44:	f10b 0b01 	add.w	fp, fp, #1
   b8b48:	e7df      	b.n	b8b0a <process_impulse+0x31a>
   b8b4a:	6871      	ldr	r1, [r6, #4]
   b8b4c:	3102      	adds	r1, #2
   b8b4e:	0089      	lsls	r1, r1, #2
   b8b50:	4630      	mov	r0, r6
   b8b52:	f7fc f9ae 	bl	b4eb2 <_ZdaPvj>
      }
   b8b56:	e6aa      	b.n	b88ae <process_impulse+0xbe>
            return EI_IMPULSE_INFERENCE_ERROR;
   b8b58:	f06f 0a15 	mvn.w	sl, #21
   b8b5c:	e6aa      	b.n	b88b4 <process_impulse+0xc4>
            ei_printf("Running impulse...\n");
   b8b5e:	480c      	ldr	r0, [pc, #48]	; (b8b90 <process_impulse+0x3a0>)
   b8b60:	f003 f974 	bl	bbe4c <_Z9ei_printfPKcz>
    EI_IMPULSE_ERROR res = run_inference(handle, features, result, debug);
   b8b64:	ee18 3a10 	vmov	r3, s16
   b8b68:	463a      	mov	r2, r7
   b8b6a:	4641      	mov	r1, r8
   b8b6c:	4620      	mov	r0, r4
   b8b6e:	f7fe ffbd 	bl	b7aec <run_inference>
    if (res != EI_IMPULSE_OK)
   b8b72:	4682      	mov	sl, r0
   b8b74:	2800      	cmp	r0, #0
   b8b76:	f47f aefb 	bne.w	b8970 <process_impulse+0x180>
        return run_postprocessing(handle, result);
   b8b7a:	4639      	mov	r1, r7
   b8b7c:	4620      	mov	r0, r4
   b8b7e:	f7fe fd84 	bl	b768a <run_postprocessing>
   b8b82:	4682      	mov	sl, r0
   b8b84:	e6f4      	b.n	b8970 <process_impulse+0x180>
   b8b86:	bf00      	nop
   b8b88:	000c574c 	.word	0x000c574c
   b8b8c:	000c8b48 	.word	0x000c8b48
   b8b90:	000c5884 	.word	0x000c5884
   b8b94:	000c603e 	.word	0x000c603e

000b8b98 <run_classifier>:
     */
    extern "C" EI_IMPULSE_ERROR run_classifier(
        signal_t *signal,
        ei_impulse_result_t *result,
        bool debug = false)
    {
   b8b98:	4613      	mov	r3, r2
        return process_impulse(&ei_default_impulse, signal, result, debug);
   b8b9a:	460a      	mov	r2, r1
   b8b9c:	4601      	mov	r1, r0
   b8b9e:	4801      	ldr	r0, [pc, #4]	; (b8ba4 <run_classifier+0xc>)
   b8ba0:	f7ff be26 	b.w	b87f0 <process_impulse>
   b8ba4:	2003d7e0 	.word	0x2003d7e0

000b8ba8 <_ZN2ei5numpy4rfftEPKfjPfjj>:
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
   b8ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8bac:	b08c      	sub	sp, #48	; 0x30
   b8bae:	4680      	mov	r8, r0
   b8bb0:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
        size_t n_fft_out_features = (n_fft / 2) + 1;
   b8bb4:	ea4f 055a 	mov.w	r5, sl, lsr #1
   b8bb8:	3501      	adds	r5, #1
        if (output_size != n_fft_out_features) {
   b8bba:	429d      	cmp	r5, r3
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
   b8bbc:	4689      	mov	r9, r1
   b8bbe:	4617      	mov	r7, r2
        if (output_size != n_fft_out_features) {
   b8bc0:	d144      	bne.n	b8c4c <_ZN2ei5numpy4rfftEPKfjPfjj+0xa4>
        auto ptr = EI_MAKE_TRACKED_POINTER(fft_output, n_fft_out_features);
   b8bc2:	00ee      	lsls	r6, r5, #3
*/
__attribute__((warn_unused_result)) __attribute__((unused))
static ei_unique_ptr_t make_tracked_unique_ptr(void* ptr_in, size_t size)
{
    auto ptr = reinterpret_cast<void**>(ptr_in);
    *ptr = ei_malloc(size);
   b8bc4:	4630      	mov	r0, r6
   b8bc6:	f003 fa17 	bl	bbff8 <_Z9ei_mallocj>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b8bca:	4b21      	ldr	r3, [pc, #132]	; (b8c50 <_ZN2ei5numpy4rfftEPKfjPfjj+0xa8>)
   b8bcc:	9303      	str	r3, [sp, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b8bce:	4b21      	ldr	r3, [pc, #132]	; (b8c54 <_ZN2ei5numpy4rfftEPKfjPfjj+0xac>)
   b8bd0:	9306      	str	r3, [sp, #24]
   b8bd2:	4604      	mov	r4, r0
	    _M_manager = &_My_handler::_M_manager;
   b8bd4:	4b20      	ldr	r3, [pc, #128]	; (b8c58 <_ZN2ei5numpy4rfftEPKfjPfjj+0xb0>)
   b8bd6:	9305      	str	r3, [sp, #20]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8bd8:	a903      	add	r1, sp, #12
   b8bda:	a807      	add	r0, sp, #28
   b8bdc:	f7ff fb08 	bl	b81f0 <_ZNSt8functionIFvPvEEC1EOS2_>
    class function<_Res(_ArgTypes...)>
   b8be0:	a803      	add	r0, sp, #12
   b8be2:	940b      	str	r4, [sp, #44]	; 0x2c
   b8be4:	f7fd ff79 	bl	b6ada <_ZNSt14_Function_baseD1Ev>
        EI_ERR_AND_RETURN_ON_NULL(fft_output, EIDSP_OUT_OF_MEM);
   b8be8:	b954      	cbnz	r4, b8c00 <_ZN2ei5numpy4rfftEPKfjPfjj+0x58>
   b8bea:	481c      	ldr	r0, [pc, #112]	; (b8c5c <_ZN2ei5numpy4rfftEPKfjPfjj+0xb4>)
   b8bec:	4d1c      	ldr	r5, [pc, #112]	; (b8c60 <_ZN2ei5numpy4rfftEPKfjPfjj+0xb8>)
   b8bee:	f003 f92d 	bl	bbe4c <_Z9ei_printfPKcz>
        auto ptr = EI_MAKE_TRACKED_POINTER(fft_output, n_fft_out_features);
   b8bf2:	a807      	add	r0, sp, #28
   b8bf4:	f7ff f9c5 	bl	b7f82 <_ZNSt10unique_ptrIvSt8functionIFvPvEEED1Ev>
    }
   b8bf8:	4628      	mov	r0, r5
   b8bfa:	b00c      	add	sp, #48	; 0x30
   b8bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        int ret = rfft(src, src_size, fft_output, n_fft_out_features, n_fft);
   b8c00:	462b      	mov	r3, r5
   b8c02:	f8cd a000 	str.w	sl, [sp]
   b8c06:	4622      	mov	r2, r4
   b8c08:	4649      	mov	r1, r9
   b8c0a:	4640      	mov	r0, r8
   b8c0c:	f7fe f8b8 	bl	b6d80 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>
        if (ret != EIDSP_OK) {
   b8c10:	4605      	mov	r5, r0
   b8c12:	2800      	cmp	r0, #0
   b8c14:	d1ed      	bne.n	b8bf2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x4a>
   b8c16:	4426      	add	r6, r4
      *pOut = 0.0f;
   b8c18:	f04f 0800 	mov.w	r8, #0
            output[ix] = sqrt(fft_output[ix].r * fft_output[ix].r + fft_output[ix].i * fft_output[ix].i);
   b8c1c:	ed94 0a01 	vldr	s0, [r4, #4]
   b8c20:	edd4 7a00 	vldr	s15, [r4]
   b8c24:	ee20 0a00 	vmul.f32	s0, s0, s0
   b8c28:	eea7 0aa7 	vfma.f32	s0, s15, s15
    if (in >= 0.0f)
   b8c2c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   b8c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b8c34:	db07      	blt.n	b8c46 <_ZN2ei5numpy4rfftEPKfjPfjj+0x9e>
      *pOut = sqrtf(in);
   b8c36:	f008 fe57 	bl	c18e8 <sqrtf>
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
   b8c3a:	3408      	adds	r4, #8
   b8c3c:	42a6      	cmp	r6, r4
            output[ix] = sqrt(fft_output[ix].r * fft_output[ix].r + fft_output[ix].i * fft_output[ix].i);
   b8c3e:	eca7 0a01 	vstmia	r7!, {s0}
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
   b8c42:	d1eb      	bne.n	b8c1c <_ZN2ei5numpy4rfftEPKfjPfjj+0x74>
   b8c44:	e7d5      	b.n	b8bf2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x4a>
      *pOut = 0.0f;
   b8c46:	ee00 8a10 	vmov	s0, r8
   b8c4a:	e7f6      	b.n	b8c3a <_ZN2ei5numpy4rfftEPKfjPfjj+0x92>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
   b8c4c:	4d05      	ldr	r5, [pc, #20]	; (b8c64 <_ZN2ei5numpy4rfftEPKfjPfjj+0xbc>)
   b8c4e:	e7d3      	b.n	b8bf8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x50>
   b8c50:	000bc001 	.word	0x000bc001
   b8c54:	000b6351 	.word	0x000b6351
   b8c58:	000b633d 	.word	0x000b633d
   b8c5c:	000c5898 	.word	0x000c5898
   b8c60:	fffffc16 	.word	0xfffffc16
   b8c64:	fffffc11 	.word	0xfffffc11

000b8c68 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>:
    static int power_spectrum(
   b8c68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b8c6c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
   b8c70:	0875      	lsrs	r5, r6, #1
   b8c72:	3501      	adds	r5, #1
   b8c74:	429d      	cmp	r5, r3
    static int power_spectrum(
   b8c76:	4614      	mov	r4, r2
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
   b8c78:	d12c      	bne.n	b8cd4 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x6c>
        int r = numpy::rfft(frame, frame_size, out_buffer, out_buffer_size, fft_points);
   b8c7a:	9600      	str	r6, [sp, #0]
   b8c7c:	f7ff ff94 	bl	b8ba8 <_ZN2ei5numpy4rfftEPKfjPfjj>
        if (r != EIDSP_OK) {
   b8c80:	4680      	mov	r8, r0
   b8c82:	bb18      	cbnz	r0, b8ccc <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x64>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
   b8c84:	ee07 6a90 	vmov	s15, r6
   b8c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b8c8c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   b8c90:	ee17 0a90 	vmov	r0, s15
   b8c94:	f7fb fb28 	bl	b42e8 <__aeabi_f2d>
   b8c98:	4602      	mov	r2, r0
   b8c9a:	460b      	mov	r3, r1
   b8c9c:	2000      	movs	r0, #0
   b8c9e:	490f      	ldr	r1, [pc, #60]	; (b8cdc <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x74>)
   b8ca0:	f7fb fca4 	bl	b45ec <__aeabi_ddiv>
   b8ca4:	4606      	mov	r6, r0
   b8ca6:	460f      	mov	r7, r1
                (out_buffer[ix] * out_buffer[ix]);
   b8ca8:	edd4 7a00 	vldr	s15, [r4]
   b8cac:	ee67 7aa7 	vmul.f32	s15, s15, s15
   b8cb0:	ee17 0a90 	vmov	r0, s15
   b8cb4:	f7fb fb18 	bl	b42e8 <__aeabi_f2d>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
   b8cb8:	4632      	mov	r2, r6
   b8cba:	463b      	mov	r3, r7
   b8cbc:	f7fb fb6c 	bl	b4398 <__aeabi_dmul>
   b8cc0:	f7fb fe62 	bl	b4988 <__aeabi_d2f>
   b8cc4:	f844 0b04 	str.w	r0, [r4], #4
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
   b8cc8:	42a5      	cmp	r5, r4
   b8cca:	d1ed      	bne.n	b8ca8 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x40>
    }
   b8ccc:	4640      	mov	r0, r8
   b8cce:	b002      	add	sp, #8
   b8cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   b8cd4:	f8df 8008 	ldr.w	r8, [pc, #8]	; b8ce0 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x78>
   b8cd8:	e7f8      	b.n	b8ccc <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x64>
   b8cda:	bf00      	nop
   b8cdc:	3ff00000 	.word	0x3ff00000
   b8ce0:	fffffc14 	.word	0xfffffc14

000b8ce4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>:
    static int spectral_analysis(
   b8ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8ce8:	ed2d 8b04 	vpush	{d8-d9}
   b8cec:	b0a9      	sub	sp, #164	; 0xa4
   b8cee:	460d      	mov	r5, r1
   b8cf0:	4619      	mov	r1, r3
   b8cf2:	f8bd 30d8 	ldrh.w	r3, [sp, #216]	; 0xd8
   b8cf6:	9302      	str	r3, [sp, #8]
   b8cf8:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
        if (out_features->rows != input_matrix->rows) {
   b8cfc:	686e      	ldr	r6, [r5, #4]
    static int spectral_analysis(
   b8cfe:	9303      	str	r3, [sp, #12]
        if (out_features->rows != input_matrix->rows) {
   b8d00:	6843      	ldr	r3, [r0, #4]
   b8d02:	42b3      	cmp	r3, r6
    static int spectral_analysis(
   b8d04:	4680      	mov	r8, r0
   b8d06:	eeb0 8a40 	vmov.f32	s16, s0
   b8d0a:	4617      	mov	r7, r2
   b8d0c:	eeb0 9a41 	vmov.f32	s18, s2
        if (out_features->rows != input_matrix->rows) {
   b8d10:	d006      	beq.n	b8d20 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   b8d12:	4cb0      	ldr	r4, [pc, #704]	; (b8fd4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
    }
   b8d14:	4620      	mov	r0, r4
   b8d16:	b029      	add	sp, #164	; 0xa4
   b8d18:	ecbd 8b04 	vpop	{d8-d9}
   b8d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (out_features->cols != calculate_spectral_buffer_size(true, fft_peaks, edges_matrix_in->rows)) {
   b8d20:	9b38      	ldr	r3, [sp, #224]	; 0xe0
        count += (peaks_count * 2);
   b8d22:	9c03      	ldr	r4, [sp, #12]
        if (out_features->cols != calculate_spectral_buffer_size(true, fft_peaks, edges_matrix_in->rows)) {
   b8d24:	685b      	ldr	r3, [r3, #4]
   b8d26:	6882      	ldr	r2, [r0, #8]
        count += (peaks_count * 2);
   b8d28:	2001      	movs	r0, #1
   b8d2a:	eb00 0044 	add.w	r0, r0, r4, lsl #1
        if (spectral_edges_count > 0) {
   b8d2e:	b10b      	cbz	r3, b8d34 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x50>
            count += (spectral_edges_count - 1);
   b8d30:	3b01      	subs	r3, #1
   b8d32:	4418      	add	r0, r3
        if (out_features->cols != calculate_spectral_buffer_size(true, fft_peaks, edges_matrix_in->rows)) {
   b8d34:	4282      	cmp	r2, r0
   b8d36:	9105      	str	r1, [sp, #20]
   b8d38:	edcd 0a04 	vstr	s1, [sp, #16]
   b8d3c:	d1e9      	bne.n	b8d12 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2e>
        if (edges_matrix_in->cols != 1) {
   b8d3e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   b8d40:	689b      	ldr	r3, [r3, #8]
   b8d42:	2b01      	cmp	r3, #1
   b8d44:	d1e5      	bne.n	b8d12 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2e>
        EI_TRY(processing::subtract_mean(input_matrix) );
   b8d46:	4628      	mov	r0, r5
   b8d48:	f7fd fff8 	bl	b6d3c <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
   b8d4c:	4604      	mov	r4, r0
   b8d4e:	2800      	cmp	r0, #0
   b8d50:	d1e0      	bne.n	b8d14 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x30>
        if (filter_type == filter_lowpass) {
   b8d52:	2f01      	cmp	r7, #1
   b8d54:	eddd 0a04 	vldr	s1, [sp, #16]
   b8d58:	9905      	ldr	r1, [sp, #20]
   b8d5a:	d110      	bne.n	b8d7e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x9a>
            ret = spectral::processing::butterworth_lowpass_filter(
   b8d5c:	eeb0 0a48 	vmov.f32	s0, s16
   b8d60:	4628      	mov	r0, r5
   b8d62:	f7fd fbe1 	bl	b6528 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
            if (ret != EIDSP_OK) {
   b8d66:	2800      	cmp	r0, #0
   b8d68:	d1d3      	bne.n	b8d12 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2e>
        EI_DSP_MATRIX(rms_matrix, axes, 1);
   b8d6a:	2300      	movs	r3, #0
   b8d6c:	2201      	movs	r2, #1
   b8d6e:	4631      	mov	r1, r6
   b8d70:	a808      	add	r0, sp, #32
   b8d72:	f7fd febb 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
   b8d76:	9b08      	ldr	r3, [sp, #32]
   b8d78:	b94b      	cbnz	r3, b8d8e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xaa>
   b8d7a:	4c97      	ldr	r4, [pc, #604]	; (b8fd8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f4>)
   b8d7c:	e1e2      	b.n	b9144 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x460>
        else if (filter_type == filter_highpass) {
   b8d7e:	2f02      	cmp	r7, #2
   b8d80:	d1f3      	bne.n	b8d6a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x86>
            ret = spectral::processing::butterworth_highpass_filter(
   b8d82:	eeb0 0a48 	vmov.f32	s0, s16
   b8d86:	4628      	mov	r0, r5
   b8d88:	f7fc ff7e 	bl	b5c88 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
   b8d8c:	e7eb      	b.n	b8d66 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x82>
        ret = numpy::rms(input_matrix, &rms_matrix);
   b8d8e:	a908      	add	r1, sp, #32
   b8d90:	4628      	mov	r0, r5
   b8d92:	f7fd ff87 	bl	b6ca4 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
        if (ret != EIDSP_OK) {
   b8d96:	4604      	mov	r4, r0
   b8d98:	2800      	cmp	r0, #0
   b8d9a:	f040 81e5 	bne.w	b9168 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x484>
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
   b8d9e:	9a03      	ldr	r2, [sp, #12]
   b8da0:	4603      	mov	r3, r0
   b8da2:	0052      	lsls	r2, r2, #1
   b8da4:	4631      	mov	r1, r6
   b8da6:	a80c      	add	r0, sp, #48	; 0x30
   b8da8:	f7fd fea0 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
   b8dac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8dae:	2b00      	cmp	r3, #0
   b8db0:	f000 81d8 	beq.w	b9164 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x480>
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
   b8db4:	9b02      	ldr	r3, [sp, #8]
        ret = numpy::linspace(0.0f, 1.0f / (2.0f * T), floor(N / 2), freq_space.buffer);
   b8db6:	eddf 8a89 	vldr	s17, [pc, #548]	; b8fdc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f8>
   b8dba:	ea4f 0953 	mov.w	r9, r3, lsr #1
   b8dbe:	105b      	asrs	r3, r3, #1
   b8dc0:	ee09 3a90 	vmov	s19, r3
   b8dc4:	f109 0901 	add.w	r9, r9, #1
        for (size_t row = 0; row < input_matrix->rows; row++) {
   b8dc8:	4627      	mov	r7, r4
   b8dca:	686b      	ldr	r3, [r5, #4]
   b8dcc:	42bb      	cmp	r3, r7
   b8dce:	f240 81b6 	bls.w	b913e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x45a>
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
   b8dd2:	68aa      	ldr	r2, [r5, #8]
   b8dd4:	682b      	ldr	r3, [r5, #0]
   b8dd6:	fb07 f102 	mul.w	r1, r7, r2
   b8dda:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   b8dde:	a810      	add	r0, sp, #64	; 0x40
   b8de0:	2101      	movs	r1, #1
   b8de2:	f7fd fe83 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
   b8de6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b8de8:	2b00      	cmp	r3, #0
   b8dea:	f000 81b9 	beq.w	b9160 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x47c>
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
   b8dee:	464a      	mov	r2, r9
   b8df0:	2300      	movs	r3, #0
   b8df2:	2101      	movs	r1, #1
   b8df4:	a814      	add	r0, sp, #80	; 0x50
   b8df6:	f7fd fe79 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
   b8dfa:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b8dfc:	2a00      	cmp	r2, #0
   b8dfe:	f000 81ab 	beq.w	b9158 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x474>
            ret = numpy::rfft(axis_matrix.buffer, axis_matrix.cols, fft_matrix.buffer, fft_matrix.cols, fft_length);
   b8e02:	9b02      	ldr	r3, [sp, #8]
   b8e04:	9300      	str	r3, [sp, #0]
   b8e06:	9912      	ldr	r1, [sp, #72]	; 0x48
   b8e08:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b8e0a:	9810      	ldr	r0, [sp, #64]	; 0x40
   b8e0c:	f7ff fecc 	bl	b8ba8 <_ZN2ei5numpy4rfftEPKfjPfjj>
            if (ret != EIDSP_OK) {
   b8e10:	9004      	str	r0, [sp, #16]
   b8e12:	2800      	cmp	r0, #0
   b8e14:	f040 81a2 	bne.w	b915c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
            numpy::scale(&fft_matrix, (2.0f / static_cast<float>(fft_length)));
   b8e18:	eddd 7a02 	vldr	s15, [sp, #8]
   b8e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b8e20:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
   b8e24:	ee80 0a27 	vdiv.f32	s0, s0, s15
   b8e28:	a814      	add	r0, sp, #80	; 0x50
   b8e2a:	f7fd fee3 	bl	b6bf4 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
   b8e2e:	2202      	movs	r2, #2
   b8e30:	9b04      	ldr	r3, [sp, #16]
   b8e32:	9903      	ldr	r1, [sp, #12]
   b8e34:	a818      	add	r0, sp, #96	; 0x60
   b8e36:	f7fd fe59 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
   b8e3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b8e3c:	2a00      	cmp	r2, #0
   b8e3e:	f000 8189 	beq.w	b9154 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x470>
        if (fft_matrix->rows != 1) {
   b8e42:	9915      	ldr	r1, [sp, #84]	; 0x54
   b8e44:	9b04      	ldr	r3, [sp, #16]
   b8e46:	2901      	cmp	r1, #1
   b8e48:	d001      	beq.n	b8e4e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x16a>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   b8e4a:	4c62      	ldr	r4, [pc, #392]	; (b8fd4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
   b8e4c:	e16e      	b.n	b912c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x448>
        if (output_matrix->cols != 2) {
   b8e4e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b8e50:	2a02      	cmp	r2, #2
   b8e52:	d1fa      	bne.n	b8e4a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x166>
        if (output_matrix->rows == 0) {
   b8e54:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b8e56:	2a00      	cmp	r2, #0
   b8e58:	f000 80ce 	beq.w	b8ff8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x314>
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
   b8e5c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   b8e5e:	a820      	add	r0, sp, #128	; 0x80
   b8e60:	f7fd fe44 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
   b8e64:	9920      	ldr	r1, [sp, #128]	; 0x80
   b8e66:	2900      	cmp	r1, #0
   b8e68:	f000 812b 	beq.w	b90c2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3de>
        float T = 1.0f / sampling_freq;
   b8e6c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   b8e70:	eec0 7a88 	vdiv.f32	s15, s1, s16
        ret = numpy::linspace(0.0f, 1.0f / (2.0f * T), floor(N / 2), freq_space.buffer);
   b8e74:	ee19 0a90 	vmov	r0, s19
   b8e78:	ee77 7aa7 	vadd.f32	s15, s15, s15
   b8e7c:	eeb0 0a68 	vmov.f32	s0, s17
   b8e80:	eec0 0aa7 	vdiv.f32	s1, s1, s15
   b8e84:	f7fe f804 	bl	b6e90 <_ZN2ei5numpy8linspaceEffmPf>
        if (ret != EIDSP_OK) {
   b8e88:	4606      	mov	r6, r0
   b8e8a:	2800      	cmp	r0, #0
   b8e8c:	f040 80ae 	bne.w	b8fec <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x308>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
   b8e90:	9919      	ldr	r1, [sp, #100]	; 0x64
   b8e92:	200a      	movs	r0, #10
   b8e94:	4341      	muls	r1, r0
   b8e96:	2300      	movs	r3, #0
   b8e98:	2201      	movs	r2, #1
   b8e9a:	a824      	add	r0, sp, #144	; 0x90
   b8e9c:	f7fd fe26 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
   b8ea0:	9824      	ldr	r0, [sp, #144]	; 0x90
   b8ea2:	2800      	cmp	r0, #0
   b8ea4:	f000 8109 	beq.w	b90ba <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3d6>
        if (input_matrix->rows != 1) {
   b8ea8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b8eaa:	2b01      	cmp	r3, #1
   b8eac:	f040 8107 	bne.w	b90be <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3da>
        if (output_matrix->cols != 1) {
   b8eb0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   b8eb2:	2a01      	cmp	r2, #1
   b8eb4:	f040 8103 	bne.w	b90be <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3da>
        float prev = in[0];
   b8eb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
        for (size_t ix = 0; ix < in_size - 1; ix++) {
   b8eba:	9916      	ldr	r1, [sp, #88]	; 0x58
        size_t out_size = output_matrix->rows;
   b8ebc:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
        float prev = in[0];
   b8ec0:	ecf3 7a01 	vldmia	r3!, {s15}
        for (size_t ix = 0; ix < in_size - 1; ix++) {
   b8ec4:	3901      	subs	r1, #1
        uint16_t out_ix = 0;
   b8ec6:	f04f 0a00 	mov.w	sl, #0
        for (size_t ix = 1; ix < in_size - 1; ix++) {
   b8eca:	428a      	cmp	r2, r1
   b8ecc:	f080 814e 	bcs.w	b916c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x488>
            if (in[ix] > prev && in[ix] > in[ix+1]) {
   b8ed0:	ed93 7a00 	vldr	s14, [r3]
   b8ed4:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b8ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b8edc:	dd20      	ble.n	b8f20 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x23c>
   b8ede:	edd3 6a01 	vldr	s13, [r3, #4]
   b8ee2:	eeb4 7ae6 	vcmpe.f32	s14, s13
   b8ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b8eea:	dd19      	ble.n	b8f20 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x23c>
                float height = (in[ix] - prev) + (in[ix] - in[ix + 1]);
   b8eec:	ee77 7a67 	vsub.f32	s15, s14, s15
   b8ef0:	ee37 7a66 	vsub.f32	s14, s14, s13
   b8ef4:	ee77 7a87 	vadd.f32	s15, s15, s14
                if (height > threshold) {
   b8ef8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b8efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b8f00:	dd0e      	ble.n	b8f20 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x23c>
                    out[out_ix] = ix;
   b8f02:	ee07 2a90 	vmov	s15, r2
   b8f06:	eb00 0e8a 	add.w	lr, r0, sl, lsl #2
                    out_ix++;
   b8f0a:	f10a 0a01 	add.w	sl, sl, #1
                    out[out_ix] = ix;
   b8f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    out_ix++;
   b8f12:	fa1f fa8a 	uxth.w	sl, sl
                    if (out_ix == out_size) break;
   b8f16:	45d4      	cmp	ip, sl
                    out[out_ix] = ix;
   b8f18:	edce 7a00 	vstr	s15, [lr]
                    if (out_ix == out_size) break;
   b8f1c:	f000 8126 	beq.w	b916c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x488>
            prev = in[ix];
   b8f20:	ecf3 7a01 	vldmia	r3!, {s15}
        for (size_t ix = 1; ix < in_size - 1; ix++) {
   b8f24:	3201      	adds	r2, #1
   b8f26:	e7d0      	b.n	b8eca <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1e6>
      : _M_current(__i) { }
   b8f28:	e9dd 0a1c 	ldrd	r0, sl, [sp, #112]	; 0x70
    _GLIBCXX20_CONSTEXPR
    inline void
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
	   _Compare __comp)
    {
      if (__first != __last)
   b8f2c:	4550      	cmp	r0, sl
   b8f2e:	d022      	beq.n	b8f76 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x292>
    { return __lhs.base() - __rhs.base(); }
   b8f30:	ebaa 0b00 	sub.w	fp, sl, r0
   b8f34:	ea4f 02eb 	mov.w	r2, fp, asr #3

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
   b8f38:	fab2 f282 	clz	r2, r2
   b8f3c:	f1c2 021f 	rsb	r2, r2, #31
	{
	  std::__introsort_loop(__first, __last,
   b8f40:	f04f 0300 	mov.w	r3, #0
   b8f44:	0052      	lsls	r2, r2, #1
   b8f46:	4651      	mov	r1, sl
   b8f48:	9004      	str	r0, [sp, #16]
   b8f4a:	f7fd fca3 	bl	b6894 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>
      if (__last - __first > int(_S_threshold))
   b8f4e:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
   b8f52:	9804      	ldr	r0, [sp, #16]
   b8f54:	dd0c      	ble.n	b8f70 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x28c>
      { return __normal_iterator(_M_current + __n); }
   b8f56:	f100 0b80 	add.w	fp, r0, #128	; 0x80
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   b8f5a:	4659      	mov	r1, fp
   b8f5c:	f7fd f943 	bl	b61e6 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_.constprop.0>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
   b8f60:	45da      	cmp	sl, fp
   b8f62:	d008      	beq.n	b8f76 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x292>
	std::__unguarded_linear_insert(__i,
   b8f64:	4658      	mov	r0, fp
   b8f66:	f7fd f924 	bl	b61b2 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_.constprop.0>
      operator++() _GLIBCXX_NOEXCEPT
   b8f6a:	f10b 0b08 	add.w	fp, fp, #8
	return *this;
   b8f6e:	e7f7      	b.n	b8f60 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x27c>
	std::__insertion_sort(__first, __last, __comp);
   b8f70:	4651      	mov	r1, sl
   b8f72:	f7fd f938 	bl	b61e6 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_.constprop.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b8f76:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
   b8f7a:	1a9b      	subs	r3, r3, r2
   b8f7c:	ea4f 0ae3 	mov.w	sl, r3, asr #3
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
   b8f80:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b8f82:	4553      	cmp	r3, sl
   b8f84:	d90a      	bls.n	b8f9c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2b8>
            peaks.push_back(d);
   b8f86:	a906      	add	r1, sp, #24
   b8f88:	a81c      	add	r0, sp, #112	; 0x70
            d.freq = 0;
   b8f8a:	edcd 8a06 	vstr	s17, [sp, #24]
            d.amplitude = 0;
   b8f8e:	edcd 8a07 	vstr	s17, [sp, #28]
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
   b8f92:	f10a 0a01 	add.w	sl, sl, #1
            peaks.push_back(d);
   b8f96:	f7ff f85d 	bl	b8054 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
   b8f9a:	e7f1      	b.n	b8f80 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x29c>
        for (size_t row = 0; row < output_matrix->rows; row++) {
   b8f9c:	2300      	movs	r3, #0
   b8f9e:	9a19      	ldr	r2, [sp, #100]	; 0x64
	return *(this->_M_impl._M_start + __n);
   b8fa0:	981c      	ldr	r0, [sp, #112]	; 0x70
   b8fa2:	429a      	cmp	r2, r3
   b8fa4:	d91c      	bls.n	b8fe0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2fc>
            output_matrix->buffer[row * output_matrix->cols + 0] = peaks[row].freq;
   b8fa6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b8fa8:	fb02 f103 	mul.w	r1, r2, r3
   b8fac:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b8fae:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   b8fb2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   b8fb6:	6800      	ldr	r0, [r0, #0]
   b8fb8:	6010      	str	r0, [r2, #0]
            output_matrix->buffer[row * output_matrix->cols + 1] = peaks[row].amplitude;
   b8fba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   b8fbc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   b8fc0:	6850      	ldr	r0, [r2, #4]
   b8fc2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b8fc4:	fb02 f103 	mul.w	r1, r2, r3
   b8fc8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b8fca:	eb02 0281 	add.w	r2, r2, r1, lsl #2
        for (size_t row = 0; row < output_matrix->rows; row++) {
   b8fce:	3301      	adds	r3, #1
            output_matrix->buffer[row * output_matrix->cols + 1] = peaks[row].amplitude;
   b8fd0:	6050      	str	r0, [r2, #4]
        for (size_t row = 0; row < output_matrix->rows; row++) {
   b8fd2:	e7e4      	b.n	b8f9e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ba>
   b8fd4:	fffffc14 	.word	0xfffffc14
   b8fd8:	fffffc16 	.word	0xfffffc16
   b8fdc:	00000000 	.word	0x00000000
	if (__p)
   b8fe0:	b108      	cbz	r0, b8fe6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x302>
   b8fe2:	f003 f80d 	bl	bc000 <_Z7ei_freePv>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
   b8fe6:	a824      	add	r0, sp, #144	; 0x90
   b8fe8:	f7fd fd95 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
   b8fec:	a820      	add	r0, sp, #128	; 0x80
   b8fee:	f7fd fd92 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
            if (ret != EIDSP_OK) {
   b8ff2:	2e00      	cmp	r6, #0
   b8ff4:	f47f af29 	bne.w	b8e4a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x166>
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
   b8ff8:	2300      	movs	r3, #0
   b8ffa:	464a      	mov	r2, r9
   b8ffc:	2101      	movs	r1, #1
   b8ffe:	a81c      	add	r0, sp, #112	; 0x70
   b9000:	f7fd fd74 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
   b9004:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   b9006:	2b00      	cmp	r3, #0
   b9008:	f000 80a2 	beq.w	b9150 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46c>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
   b900c:	2300      	movs	r3, #0
   b900e:	464a      	mov	r2, r9
   b9010:	2101      	movs	r1, #1
   b9012:	a820      	add	r0, sp, #128	; 0x80
   b9014:	f7fd fd6a 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
   b9018:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b901a:	2b00      	cmp	r3, #0
   b901c:	f000 8096 	beq.w	b914c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x468>
            ret = spectral::processing::periodogram(&axis_matrix,
   b9020:	9b02      	ldr	r3, [sp, #8]
   b9022:	eeb0 0a48 	vmov.f32	s0, s16
   b9026:	aa20      	add	r2, sp, #128	; 0x80
   b9028:	a91c      	add	r1, sp, #112	; 0x70
   b902a:	a810      	add	r0, sp, #64	; 0x40
   b902c:	f7fe f9f8 	bl	b7420 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>
            if (ret != EIDSP_OK) {
   b9030:	4606      	mov	r6, r0
   b9032:	2800      	cmp	r0, #0
   b9034:	d173      	bne.n	b911e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43a>
            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
   b9036:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   b9038:	6859      	ldr	r1, [r3, #4]
   b903a:	2201      	movs	r2, #1
   b903c:	4603      	mov	r3, r0
   b903e:	3901      	subs	r1, #1
   b9040:	a824      	add	r0, sp, #144	; 0x90
   b9042:	f7fd fd53 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
   b9046:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b9048:	2b00      	cmp	r3, #0
   b904a:	d064      	beq.n	b9116 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x432>
            ret = spectral::processing::spectral_power_edges(
   b904c:	9a38      	ldr	r2, [sp, #224]	; 0xe0
   b904e:	eeb0 0a48 	vmov.f32	s0, s16
   b9052:	ab24      	add	r3, sp, #144	; 0x90
   b9054:	a920      	add	r1, sp, #128	; 0x80
   b9056:	a81c      	add	r0, sp, #112	; 0x70
   b9058:	f7fe f934 	bl	b72c4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>
            if (ret != EIDSP_OK) {
   b905c:	4606      	mov	r6, r0
   b905e:	2800      	cmp	r0, #0
   b9060:	d15a      	bne.n	b9118 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x434>
            float *features_row = out_features->buffer + (row * out_features->cols);
   b9062:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b9066:	f8d8 1000 	ldr.w	r1, [r8]
   b906a:	437b      	muls	r3, r7
   b906c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
            features_row[fx++] = rms_matrix.buffer[row];
   b9070:	9b08      	ldr	r3, [sp, #32]
   b9072:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   b9076:	460a      	mov	r2, r1
   b9078:	681b      	ldr	r3, [r3, #0]
   b907a:	f842 3b04 	str.w	r3, [r2], #4
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
   b907e:	9819      	ldr	r0, [sp, #100]	; 0x64
   b9080:	0073      	lsls	r3, r6, #1
   b9082:	42b0      	cmp	r0, r6
   b9084:	f103 0301 	add.w	r3, r3, #1
   b9088:	f102 0208 	add.w	r2, r2, #8
   b908c:	d81b      	bhi.n	b90c6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3e2>
   b908e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
   b9092:	2200      	movs	r2, #0
                features_row[fx++] = edges_matrix_out.buffer[edge_row * edges_matrix_out.cols] / 10.0f;
   b9094:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
   b9098:	9925      	ldr	r1, [sp, #148]	; 0x94
   b909a:	4291      	cmp	r1, r2
   b909c:	d927      	bls.n	b90ee <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x40a>
                features_row[fx++] = edges_matrix_out.buffer[edge_row * edges_matrix_out.cols] / 10.0f;
   b909e:	9926      	ldr	r1, [sp, #152]	; 0x98
   b90a0:	fb01 f002 	mul.w	r0, r1, r2
   b90a4:	9924      	ldr	r1, [sp, #144]	; 0x90
   b90a6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   b90aa:	edd1 6a00 	vldr	s13, [r1]
   b90ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
   b90b2:	3201      	adds	r2, #1
                features_row[fx++] = edges_matrix_out.buffer[edge_row * edges_matrix_out.cols] / 10.0f;
   b90b4:	ece3 7a01 	vstmia	r3!, {s15}
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
   b90b8:	e7ee      	b.n	b9098 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3b4>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
   b90ba:	4e47      	ldr	r6, [pc, #284]	; (b91d8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4f4>)
   b90bc:	e793      	b.n	b8fe6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x302>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   b90be:	4e47      	ldr	r6, [pc, #284]	; (b91dc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4f8>)
   b90c0:	e791      	b.n	b8fe6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x302>
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
   b90c2:	4e45      	ldr	r6, [pc, #276]	; (b91d8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4f4>)
   b90c4:	e792      	b.n	b8fec <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x308>
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 0];
   b90c6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b90c8:	fb03 f006 	mul.w	r0, r3, r6
   b90cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b90ce:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   b90d2:	681b      	ldr	r3, [r3, #0]
   b90d4:	f842 3c08 	str.w	r3, [r2, #-8]
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 1];
   b90d8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b90da:	fb03 f006 	mul.w	r0, r3, r6
   b90de:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b90e0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
   b90e4:	3601      	adds	r6, #1
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 1];
   b90e6:	685b      	ldr	r3, [r3, #4]
   b90e8:	f842 3c04 	str.w	r3, [r2, #-4]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
   b90ec:	e7c7      	b.n	b907e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x39a>
            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
   b90ee:	a824      	add	r0, sp, #144	; 0x90
   b90f0:	f7fd fd11 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
   b90f4:	a820      	add	r0, sp, #128	; 0x80
   b90f6:	f7fd fd0e 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
   b90fa:	a81c      	add	r0, sp, #112	; 0x70
   b90fc:	f7fd fd0b 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
   b9100:	a818      	add	r0, sp, #96	; 0x60
   b9102:	f7fd fd08 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
   b9106:	a814      	add	r0, sp, #80	; 0x50
   b9108:	f7fd fd05 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
   b910c:	a810      	add	r0, sp, #64	; 0x40
   b910e:	f7fd fd02 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
        for (size_t row = 0; row < input_matrix->rows; row++) {
   b9112:	3701      	adds	r7, #1
   b9114:	e659      	b.n	b8dca <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xe6>
            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
   b9116:	4e30      	ldr	r6, [pc, #192]	; (b91d8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4f4>)
   b9118:	a824      	add	r0, sp, #144	; 0x90
   b911a:	f7fd fcfc 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
   b911e:	a820      	add	r0, sp, #128	; 0x80
   b9120:	f7fd fcf9 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
   b9124:	4634      	mov	r4, r6
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
   b9126:	a81c      	add	r0, sp, #112	; 0x70
   b9128:	f7fd fcf5 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
   b912c:	a818      	add	r0, sp, #96	; 0x60
   b912e:	f7fd fcf2 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
   b9132:	a814      	add	r0, sp, #80	; 0x50
   b9134:	f7fd fcef 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
   b9138:	a810      	add	r0, sp, #64	; 0x40
   b913a:	f7fd fcec 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
   b913e:	a80c      	add	r0, sp, #48	; 0x30
   b9140:	f7fd fce9 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(rms_matrix, axes, 1);
   b9144:	a808      	add	r0, sp, #32
   b9146:	f7fd fce6 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
   b914a:	e5e3      	b.n	b8d14 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x30>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
   b914c:	4e22      	ldr	r6, [pc, #136]	; (b91d8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4f4>)
   b914e:	e7e6      	b.n	b911e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43a>
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
   b9150:	4c21      	ldr	r4, [pc, #132]	; (b91d8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4f4>)
   b9152:	e7e8      	b.n	b9126 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x442>
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
   b9154:	4c20      	ldr	r4, [pc, #128]	; (b91d8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4f4>)
   b9156:	e7e9      	b.n	b912c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x448>
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
   b9158:	4c1f      	ldr	r4, [pc, #124]	; (b91d8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4f4>)
   b915a:	e7ea      	b.n	b9132 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x44e>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   b915c:	4c1f      	ldr	r4, [pc, #124]	; (b91dc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4f8>)
   b915e:	e7e8      	b.n	b9132 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x44e>
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
   b9160:	4c1d      	ldr	r4, [pc, #116]	; (b91d8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4f4>)
   b9162:	e7e9      	b.n	b9138 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x454>
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
   b9164:	4c1c      	ldr	r4, [pc, #112]	; (b91d8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4f4>)
   b9166:	e7ea      	b.n	b913e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x45a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   b9168:	4c1c      	ldr	r4, [pc, #112]	; (b91dc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4f8>)
   b916a:	e7eb      	b.n	b9144 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x460>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b916c:	2300      	movs	r3, #0
   b916e:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
   b9172:	931e      	str	r3, [sp, #120]	; 0x78
   b9174:	469b      	mov	fp, r3
        for (uint8_t ix = 0; ix < peak_count; ix++) {
   b9176:	fa5f f38b 	uxtb.w	r3, fp
   b917a:	4553      	cmp	r3, sl
   b917c:	f6bf aed4 	bge.w	b8f28 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x244>
            d.freq = freq_space.buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
   b9180:	9a24      	ldr	r2, [sp, #144]	; 0x90
   b9182:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   b9186:	edd3 7a00 	vldr	s15, [r3]
   b918a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   b918c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
            peaks.push_back(d);
   b9190:	a81c      	add	r0, sp, #112	; 0x70
            d.freq = freq_space.buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
   b9192:	ee17 1a90 	vmov	r1, s15
   b9196:	eb02 0281 	add.w	r2, r2, r1, lsl #2
            peaks.push_back(d);
   b919a:	a906      	add	r1, sp, #24
            d.freq = freq_space.buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
   b919c:	6812      	ldr	r2, [r2, #0]
   b919e:	9206      	str	r2, [sp, #24]
            d.amplitude = fft_matrix->buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
   b91a0:	edd3 7a00 	vldr	s15, [r3]
   b91a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b91a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   b91aa:	f10b 0b01 	add.w	fp, fp, #1
   b91ae:	ee17 2a90 	vmov	r2, s15
   b91b2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   b91b6:	edd3 7a00 	vldr	s15, [r3]
            if (d.amplitude < threshold) {
   b91ba:	eeb4 9ae7 	vcmpe.f32	s18, s15
   b91be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            d.amplitude = fft_matrix->buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
   b91c2:	edcd 7a07 	vstr	s15, [sp, #28]
                d.freq = 0.0f;
   b91c6:	bfc4      	itt	gt
   b91c8:	edcd 8a06 	vstrgt	s17, [sp, #24]
                d.amplitude = 0.0f;
   b91cc:	edcd 8a07 	vstrgt	s17, [sp, #28]
            peaks.push_back(d);
   b91d0:	f7fe ff40 	bl	b8054 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
   b91d4:	e7cf      	b.n	b9176 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x492>
   b91d6:	bf00      	nop
   b91d8:	fffffc16 	.word	0xfffffc16
   b91dc:	fffffc14 	.word	0xfffffc14

000b91e0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:
    static int extract_spectral_analysis_features_v1(
   b91e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b91e4:	ed2d 8b02 	vpush	{d8}
   b91e8:	eeb0 8a40 	vmov.f32	s16, s0
   b91ec:	b0aa      	sub	sp, #168	; 0xa8
        int ret = numpy::scale(input_matrix, config_ptr->scale_axes);
   b91ee:	ed92 0a03 	vldr	s0, [r2, #12]
    static int extract_spectral_analysis_features_v1(
   b91f2:	4680      	mov	r8, r0
   b91f4:	460f      	mov	r7, r1
   b91f6:	4616      	mov	r6, r2
        int ret = numpy::scale(input_matrix, config_ptr->scale_axes);
   b91f8:	f7fd fcfc 	bl	b6bf4 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
        if (ret != EIDSP_OK) {
   b91fc:	4604      	mov	r4, r0
   b91fe:	b148      	cbz	r0, b9214 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x34>
            ei_printf("ERR: Failed to scale signal (%d)\n", ret);
   b9200:	4601      	mov	r1, r0
   b9202:	4848      	ldr	r0, [pc, #288]	; (b9324 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x144>)
            ei_printf("ERR: Failed to transpose matrix (%d)\n", ret);
   b9204:	f002 fe22 	bl	bbe4c <_Z9ei_printfPKcz>
    }
   b9208:	4620      	mov	r0, r4
   b920a:	b02a      	add	sp, #168	; 0xa8
   b920c:	ecbd 8b02 	vpop	{d8}
   b9210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ret = numpy::transpose(input_matrix);
   b9214:	4640      	mov	r0, r8
   b9216:	f7fd fca7 	bl	b6b68 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
        if (ret != EIDSP_OK) {
   b921a:	4604      	mov	r4, r0
   b921c:	b110      	cbz	r0, b9224 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x44>
            ei_printf("ERR: Failed to transpose matrix (%d)\n", ret);
   b921e:	4601      	mov	r1, r0
   b9220:	4841      	ldr	r0, [pc, #260]	; (b9328 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x148>)
   b9222:	e7ef      	b.n	b9204 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24>
        matrix_t edges_matrix_in(64, 1);
   b9224:	f10d 0918 	add.w	r9, sp, #24
   b9228:	4603      	mov	r3, r0
   b922a:	2201      	movs	r2, #1
   b922c:	2140      	movs	r1, #64	; 0x40
   b922e:	4648      	mov	r0, r9
   b9230:	f7fd fc5c 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
        char spectral_str[128] = { 0 };
   b9234:	227c      	movs	r2, #124	; 0x7c
   b9236:	4621      	mov	r1, r4
   b9238:	a80b      	add	r0, sp, #44	; 0x2c
   b923a:	940a      	str	r4, [sp, #40]	; 0x28
   b923c:	f009 ffe8 	bl	c3210 <memset>
        if (strlen(config_ptr->spectral_power_edges) > sizeof(spectral_str) - 1) {
   b9240:	6b31      	ldr	r1, [r6, #48]	; 0x30
   b9242:	9105      	str	r1, [sp, #20]
   b9244:	4608      	mov	r0, r1
   b9246:	f7fb fde9 	bl	b4e1c <strlen>
   b924a:	287f      	cmp	r0, #127	; 0x7f
   b924c:	4602      	mov	r2, r0
   b924e:	d865      	bhi.n	b931c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13c>
        memcpy(
   b9250:	9905      	ldr	r1, [sp, #20]
   b9252:	a80a      	add	r0, sp, #40	; 0x28
   b9254:	f009 ffb4 	bl	c31c0 <memcpy>
        char *spectral_ptr = spectral_str;
   b9258:	ad0a      	add	r5, sp, #40	; 0x28
        size_t edge_matrix_ix = 0;
   b925a:	462b      	mov	r3, r5
            while ((*spectral_ptr) == ' ') {
   b925c:	781a      	ldrb	r2, [r3, #0]
   b925e:	2a20      	cmp	r2, #32
   b9260:	461d      	mov	r5, r3
                spectral_ptr++;
   b9262:	f103 0301 	add.w	r3, r3, #1
            while ((*spectral_ptr) == ' ') {
   b9266:	d0f9      	beq.n	b925c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x7c>
            edges_matrix_in.buffer[edge_matrix_ix++] = atof(spectral_ptr);
   b9268:	4628      	mov	r0, r5
   b926a:	f009 ff95 	bl	c3198 <atof>
   b926e:	9b06      	ldr	r3, [sp, #24]
   b9270:	ec51 0b10 	vmov	r0, r1, d0
   b9274:	3401      	adds	r4, #1
   b9276:	eb03 0a84 	add.w	sl, r3, r4, lsl #2
   b927a:	f7fb fb85 	bl	b4988 <__aeabi_d2f>
   b927e:	f84a 0c04 	str.w	r0, [sl, #-4]
            while ((*spectral_ptr != ',')) {
   b9282:	782b      	ldrb	r3, [r5, #0]
                if (*spectral_ptr == '\0')
   b9284:	f815 af01 	ldrb.w	sl, [r5, #1]!
            while ((*spectral_ptr != ',')) {
   b9288:	2b2c      	cmp	r3, #44	; 0x2c
   b928a:	d0e6      	beq.n	b925a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x7a>
                if (*spectral_ptr == '\0')
   b928c:	f1ba 0f00 	cmp.w	sl, #0
   b9290:	d1f7      	bne.n	b9282 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xa2>
        count += (peaks_count * 2);
   b9292:	6ab5      	ldr	r5, [r6, #40]	; 0x28
        edges_matrix_in.rows = edge_matrix_ix;
   b9294:	9407      	str	r4, [sp, #28]
        count += (peaks_count * 2);
   b9296:	006d      	lsls	r5, r5, #1
        if (spectral_edges_count > 0) {
   b9298:	b90c      	cbnz	r4, b929e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xbe>
        count += (peaks_count * 2);
   b929a:	3501      	adds	r5, #1
   b929c:	e000      	b.n	b92a0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xc0>
            count += (spectral_edges_count - 1);
   b929e:	4425      	add	r5, r4
        if (output_matrix->cols * output_matrix->rows !=
   b92a0:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
   b92a4:	435a      	muls	r2, r3
            static_cast<uint32_t>(output_matrix_cols * config_ptr->axes)) {
   b92a6:	68b3      	ldr	r3, [r6, #8]
   b92a8:	436b      	muls	r3, r5
        if (output_matrix->cols * output_matrix->rows !=
   b92aa:	429a      	cmp	r2, r3
   b92ac:	d138      	bne.n	b9320 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x140>
        output_matrix->cols = output_matrix_cols;
   b92ae:	60bd      	str	r5, [r7, #8]
        output_matrix->rows = config_ptr->axes;
   b92b0:	68b3      	ldr	r3, [r6, #8]
   b92b2:	607b      	str	r3, [r7, #4]
        if (strcmp(config_ptr->filter_type, "low") == 0) {
   b92b4:	6974      	ldr	r4, [r6, #20]
   b92b6:	491d      	ldr	r1, [pc, #116]	; (b932c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x14c>)
   b92b8:	4620      	mov	r0, r4
   b92ba:	f7fb fda5 	bl	b4e08 <strcmp>
   b92be:	b320      	cbz	r0, b930a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x12a>
        else if (strcmp(config_ptr->filter_type, "high") == 0) {
   b92c0:	491b      	ldr	r1, [pc, #108]	; (b9330 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x150>)
   b92c2:	4620      	mov	r0, r4
   b92c4:	f7fb fda0 	bl	b4e08 <strcmp>
            filter_type = spectral::filter_highpass;
   b92c8:	2800      	cmp	r0, #0
   b92ca:	bf08      	it	eq
   b92cc:	f04f 0a02 	moveq.w	sl, #2
        ret = spectral::feature::spectral_analysis(
   b92d0:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
   b92d4:	9301      	str	r3, [sp, #4]
   b92d6:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
   b92d8:	9300      	str	r3, [sp, #0]
   b92da:	ed96 1a0b 	vldr	s2, [r6, #44]	; 0x2c
   b92de:	7f33      	ldrb	r3, [r6, #28]
   b92e0:	edd6 0a06 	vldr	s1, [r6, #24]
   b92e4:	f8cd 9008 	str.w	r9, [sp, #8]
   b92e8:	4652      	mov	r2, sl
   b92ea:	eeb0 0a48 	vmov.f32	s0, s16
   b92ee:	4641      	mov	r1, r8
   b92f0:	4638      	mov	r0, r7
   b92f2:	f7ff fcf7 	bl	b8ce4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>
        if (ret != EIDSP_OK) {
   b92f6:	4604      	mov	r4, r0
   b92f8:	b150      	cbz	r0, b9310 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x130>
            ei_printf("ERR: Failed to calculate spectral features (%d)\n", ret);
   b92fa:	4601      	mov	r1, r0
   b92fc:	480d      	ldr	r0, [pc, #52]	; (b9334 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x154>)
   b92fe:	f002 fda5 	bl	bbe4c <_Z9ei_printfPKcz>
        matrix_t edges_matrix_in(64, 1);
   b9302:	4648      	mov	r0, r9
   b9304:	f7fd fc07 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
   b9308:	e77e      	b.n	b9208 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x28>
            filter_type = spectral::filter_lowpass;
   b930a:	f04f 0a01 	mov.w	sl, #1
   b930e:	e7df      	b.n	b92d0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xf0>
        output_matrix->cols = config_ptr->axes * output_matrix_cols;
   b9310:	68b3      	ldr	r3, [r6, #8]
   b9312:	435d      	muls	r5, r3
        output_matrix->rows = 1;
   b9314:	2301      	movs	r3, #1
        output_matrix->cols = config_ptr->axes * output_matrix_cols;
   b9316:	60bd      	str	r5, [r7, #8]
        output_matrix->rows = 1;
   b9318:	607b      	str	r3, [r7, #4]
        return EIDSP_OK;
   b931a:	e7f2      	b.n	b9302 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x122>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
   b931c:	4c06      	ldr	r4, [pc, #24]	; (b9338 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x158>)
   b931e:	e7f0      	b.n	b9302 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x122>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
   b9320:	4c06      	ldr	r4, [pc, #24]	; (b933c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x15c>)
   b9322:	e7ee      	b.n	b9302 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x122>
   b9324:	000c58ab 	.word	0x000c58ab
   b9328:	000c58cd 	.word	0x000c58cd
   b932c:	000c58f3 	.word	0x000c58f3
   b9330:	000c58f7 	.word	0x000c58f7
   b9334:	000c58fc 	.word	0x000c58fc
   b9338:	fffffc10 	.word	0xfffffc10
   b933c:	fffffc14 	.word	0xfffffc14

000b9340 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>:
    static int welch_max_hold(
   b9340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9344:	ed2d 8b02 	vpush	{d8}
   b9348:	b095      	sub	sp, #84	; 0x54
   b934a:	4698      	mov	r8, r3
   b934c:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
   b9350:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   b9354:	9308      	str	r3, [sp, #32]
        size_t fft_out_size = fft_points / 2 + 1;
   b9356:	ea4f 0359 	mov.w	r3, r9, lsr #1
   b935a:	9303      	str	r3, [sp, #12]
   b935c:	f103 0a01 	add.w	sl, r3, #1
	    _M_invoker = &_My_handler::_M_invoke;
   b9360:	4b40      	ldr	r3, [pc, #256]	; (b9464 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x124>)
   b9362:	930e      	str	r3, [sp, #56]	; 0x38
    static int welch_max_hold(
   b9364:	4683      	mov	fp, r0
	    _M_manager = &_My_handler::_M_manager;
   b9366:	4b40      	ldr	r3, [pc, #256]	; (b9468 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x128>)
   b9368:	930d      	str	r3, [sp, #52]	; 0x34
   b936a:	460f      	mov	r7, r1
        const size_t size = fft_out_size * sizeof(float);
   b936c:	ea4f 058a 	mov.w	r5, sl, lsl #2
   b9370:	a90b      	add	r1, sp, #44	; 0x2c
   b9372:	a80f      	add	r0, sp, #60	; 0x3c
    static int welch_max_hold(
   b9374:	9206      	str	r2, [sp, #24]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b9376:	950b      	str	r5, [sp, #44]	; 0x2c
   b9378:	2400      	movs	r4, #0
   b937a:	f7fe ff39 	bl	b81f0 <_ZNSt8functionIFvPvEEC1EOS2_>
            saved_point = input[fft_points / 2];
   b937e:	3d04      	subs	r5, #4
    class function<_Res(_ArgTypes...)>
   b9380:	a80b      	add	r0, sp, #44	; 0x2c
   b9382:	9413      	str	r4, [sp, #76]	; 0x4c
   b9384:	f7fd fba9 	bl	b6ada <_ZNSt14_Function_baseD1Ev>
   b9388:	eb0b 0305 	add.w	r3, fp, r5
        if (input_size < fft_points) {
   b938c:	45b9      	cmp	r9, r7
            saved_point = input[fft_points / 2];
   b938e:	9305      	str	r3, [sp, #20]
        if (input_size < fft_points) {
   b9390:	d90e      	bls.n	b93b0 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x70>
            fft_out = (float *)ei_dsp_calloc(fft_out_size, sizeof(float));
   b9392:	2104      	movs	r1, #4
   b9394:	4650      	mov	r0, sl
   b9396:	f002 fe31 	bl	bbffc <_Z9ei_callocjj>
	const pointer __old_p = _M_ptr();
   b939a:	9913      	ldr	r1, [sp, #76]	; 0x4c
	_M_ptr() = __p;
   b939c:	9013      	str	r0, [sp, #76]	; 0x4c
   b939e:	4606      	mov	r6, r0
	if (__old_p)
   b93a0:	2900      	cmp	r1, #0
   b93a2:	d044      	beq.n	b942e <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xee>
	  _M_deleter()(__old_p);
   b93a4:	a80f      	add	r0, sp, #60	; 0x3c
   b93a6:	f7fe fde0 	bl	b7f6a <_ZNKSt8functionIFvPvEEclES0_>
        float saved_point = 0;
   b93aa:	ed9f 8a30 	vldr	s16, [pc, #192]	; b946c <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x12c>
   b93ae:	e004      	b.n	b93ba <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x7a>
            saved_point = input[fft_points / 2];
   b93b0:	9b05      	ldr	r3, [sp, #20]
   b93b2:	ed93 8a00 	vldr	s16, [r3]
            fft_out = input;
   b93b6:	465e      	mov	r6, fp
            do_saved_point = true;
   b93b8:	2401      	movs	r4, #1
        memset(output, 0, sizeof(float) * (stop_bin - start_bin));
   b93ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b93bc:	9806      	ldr	r0, [sp, #24]
   b93be:	eba3 0208 	sub.w	r2, r3, r8
   b93c2:	0092      	lsls	r2, r2, #2
   b93c4:	2100      	movs	r1, #0
   b93c6:	f009 ff23 	bl	c3210 <memset>
        int input_ix = 0;
   b93ca:	eb06 0388 	add.w	r3, r6, r8, lsl #2
   b93ce:	9307      	str	r3, [sp, #28]
            EI_TRY(power_spectrum(
   b93d0:	fa1f f389 	uxth.w	r3, r9
        int input_ix = 0;
   b93d4:	2500      	movs	r5, #0
            EI_TRY(power_spectrum(
   b93d6:	9309      	str	r3, [sp, #36]	; 0x24
        while (input_ix < (int)input_size) {
   b93d8:	42af      	cmp	r7, r5
   b93da:	dd36      	ble.n	b944a <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x10a>
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
   b93dc:	eb05 0309 	add.w	r3, r5, r9
   b93e0:	42bb      	cmp	r3, r7
   b93e2:	9304      	str	r3, [sp, #16]
            EI_TRY(power_spectrum(
   b93e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b93e6:	9300      	str	r3, [sp, #0]
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
   b93e8:	bf88      	it	hi
   b93ea:	1b79      	subhi	r1, r7, r5
            EI_TRY(power_spectrum(
   b93ec:	4653      	mov	r3, sl
   b93ee:	bf98      	it	ls
   b93f0:	4649      	movls	r1, r9
   b93f2:	4632      	mov	r2, r6
   b93f4:	eb0b 0085 	add.w	r0, fp, r5, lsl #2
   b93f8:	f7ff fc36 	bl	b8c68 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>
   b93fc:	4603      	mov	r3, r0
   b93fe:	bb28      	cbnz	r0, b944c <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x10c>
   b9400:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
            for (size_t i = start_bin; i < stop_bin; i++) {
   b9404:	4641      	mov	r1, r8
   b9406:	9a20      	ldr	r2, [sp, #128]	; 0x80
   b9408:	4291      	cmp	r1, r2
   b940a:	d212      	bcs.n	b9432 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xf2>
                output[j] = std::max(output[j], fft_out[i]);
   b940c:	4602      	mov	r2, r0
      if (__a < __b)
   b940e:	edd2 7a00 	vldr	s15, [r2]
   b9412:	ed93 7a00 	vldr	s14, [r3]
   b9416:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b941a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b941e:	bf58      	it	pl
   b9420:	461a      	movpl	r2, r3
   b9422:	3004      	adds	r0, #4
   b9424:	6812      	ldr	r2, [r2, #0]
   b9426:	f843 2b04 	str.w	r2, [r3], #4
            for (size_t i = start_bin; i < stop_bin; i++) {
   b942a:	3101      	adds	r1, #1
   b942c:	e7eb      	b.n	b9406 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xc6>
        bool do_saved_point = false;
   b942e:	460c      	mov	r4, r1
   b9430:	e7bb      	b.n	b93aa <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x6a>
            if (do_overlap) {
   b9432:	9b08      	ldr	r3, [sp, #32]
   b9434:	b13b      	cbz	r3, b9446 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x106>
                if (do_saved_point) {
   b9436:	b114      	cbz	r4, b943e <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xfe>
                    input[fft_points / 2] = saved_point;
   b9438:	9b05      	ldr	r3, [sp, #20]
   b943a:	ed83 8a00 	vstr	s16, [r3]
                input_ix += fft_points / 2;
   b943e:	9b03      	ldr	r3, [sp, #12]
   b9440:	2400      	movs	r4, #0
   b9442:	441d      	add	r5, r3
   b9444:	e7c8      	b.n	b93d8 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x98>
                input_ix += fft_points;
   b9446:	9d04      	ldr	r5, [sp, #16]
   b9448:	e7c6      	b.n	b93d8 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x98>
        return EIDSP_OK;
   b944a:	2300      	movs	r3, #0
        ei_unique_ptr_t p_fft_out(nullptr, [size](void* ptr){ei::ei_dsp_free_func(ptr, size);});
   b944c:	a80f      	add	r0, sp, #60	; 0x3c
   b944e:	9303      	str	r3, [sp, #12]
   b9450:	f7fe fd97 	bl	b7f82 <_ZNSt10unique_ptrIvSt8functionIFvPvEEED1Ev>
    }
   b9454:	9b03      	ldr	r3, [sp, #12]
   b9456:	4618      	mov	r0, r3
   b9458:	b015      	add	sp, #84	; 0x54
   b945a:	ecbd 8b02 	vpop	{d8}
   b945e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9462:	bf00      	nop
   b9464:	000b5c65 	.word	0x000b5c65
   b9468:	000b6329 	.word	0x000b6329
   b946c:	00000000 	.word	0x00000000

000b9470 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
   b9470:	b538      	push	{r3, r4, r5, lr}
   b9472:	4605      	mov	r5, r0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b9474:	460c      	mov	r4, r1
   b9476:	4608      	mov	r0, r1
   b9478:	b109      	cbz	r1, b947e <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_M_create_storageEj+0xe>
   b947a:	f7fc fde9 	bl	b6050 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj.part.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b947e:	e9c5 0000 	strd	r0, r0, [r5]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b9482:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   b9486:	60a8      	str	r0, [r5, #8]
      }
   b9488:	bd38      	pop	{r3, r4, r5, pc}
	...

000b948c <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>:
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b948c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
      vector(size_type __n, const allocator_type& __a = allocator_type())
   b9490:	b538      	push	{r3, r4, r5, lr}
   b9492:	4604      	mov	r4, r0
   b9494:	460d      	mov	r5, r1
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b9496:	d302      	bcc.n	b949e <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_+0x12>
	  __throw_length_error(
   b9498:	480a      	ldr	r0, [pc, #40]	; (b94c4 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_+0x38>)
   b949a:	f007 fef9 	bl	c1290 <_ZSt20__throw_length_errorPKc>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b949e:	2300      	movs	r3, #0
   b94a0:	e9c0 3300 	strd	r3, r3, [r0]
   b94a4:	6083      	str	r3, [r0, #8]
      { _M_create_storage(__n); }
   b94a6:	f7ff ffe3 	bl	b9470 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_M_create_storageEj>
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
   b94aa:	6823      	ldr	r3, [r4, #0]
   b94ac:	2200      	movs	r2, #0
   b94ae:	eb03 0585 	add.w	r5, r3, r5, lsl #2
	  for (; __n > 0; --__n, (void) ++__cur)
   b94b2:	429d      	cmp	r5, r3
   b94b4:	d003      	beq.n	b94be <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_+0x32>
   b94b6:	b103      	cbz	r3, b94ba <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_+0x2e>
   b94b8:	601a      	str	r2, [r3, #0]
   b94ba:	3304      	adds	r3, #4
   b94bc:	e7f9      	b.n	b94b2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_+0x26>
	this->_M_impl._M_finish =
   b94be:	6065      	str	r5, [r4, #4]
      { _M_default_initialize(__n); }
   b94c0:	4620      	mov	r0, r4
   b94c2:	bd38      	pop	{r3, r4, r5, pc}
   b94c4:	000c5367 	.word	0x000c5367

000b94c8 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j>:

    // can do in-place or out-of-place
    static size_t _decimate(matrix_t *input_matrix, matrix_t *output_matrix, size_t ratio)
   b94c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b94cc:	ed2d 8b02 	vpush	{d8}
        static float sos_zi_deci_10[] = { 1.38071060429997e-06f,   -1.146570262401316e-06f,
                                          0.00020862168862901534f, -0.0001782374705409433f,
                                          0.016663820918116152f,   -0.015002020730727955f,
                                          0.9773862470492868f,     -0.9420150059170858 };

        assert(ratio == 3 || ratio == 10);
   b94d0:	2a03      	cmp	r2, #3
    static size_t _decimate(matrix_t *input_matrix, matrix_t *output_matrix, size_t ratio)
   b94d2:	b093      	sub	sp, #76	; 0x4c
   b94d4:	4607      	mov	r7, r0
   b94d6:	4689      	mov	r9, r1
   b94d8:	4615      	mov	r5, r2
        assert(ratio == 3 || ratio == 10);
   b94da:	d008      	beq.n	b94ee <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x26>
   b94dc:	2a0a      	cmp	r2, #10
   b94de:	d040      	beq.n	b9562 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x9a>
   b94e0:	4b62      	ldr	r3, [pc, #392]	; (b966c <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x1a4>)
   b94e2:	4a63      	ldr	r2, [pc, #396]	; (b9670 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x1a8>)
   b94e4:	4863      	ldr	r0, [pc, #396]	; (b9674 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x1ac>)
   b94e6:	f44f 710e 	mov.w	r1, #568	; 0x238
            assert(num_sections > 0);
   b94ea:	f005 fda9 	bl	bf040 <__assert_func>

        float* sos = ratio == 3 ? sos_deci_3 : sos_deci_10;
   b94ee:	4b62      	ldr	r3, [pc, #392]	; (b9678 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x1b0>)
        float* sos_zi = ratio == 3 ? sos_zi_deci_3 : sos_zi_deci_10;
   b94f0:	f8df b1a0 	ldr.w	fp, [pc, #416]	; b9694 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x1cc>
        float* sos = ratio == 3 ? sos_deci_3 : sos_deci_10;
   b94f4:	9303      	str	r3, [sp, #12]
        return (input_size + factor - 1) / factor;
   b94f6:	68be      	ldr	r6, [r7, #8]
   b94f8:	3e01      	subs	r6, #1
   b94fa:	442e      	add	r6, r5
   b94fc:	fbb6 f3f5 	udiv	r3, r6, r5
   b9500:	ee08 3a10 	vmov	s16, r3

        const size_t out_size = signal::get_decimated_size(input_matrix->cols, ratio);

        for (size_t row = 0; row < input_matrix->rows; row++) {
   b9504:	00ab      	lsls	r3, r5, #2
   b9506:	9305      	str	r3, [sp, #20]
            num_sections(num_sections_)
   b9508:	f10b 0320 	add.w	r3, fp, #32
   b950c:	f04f 0800 	mov.w	r8, #0
   b9510:	9306      	str	r3, [sp, #24]
   b9512:	687b      	ldr	r3, [r7, #4]
   b9514:	4543      	cmp	r3, r8
   b9516:	f240 80a2 	bls.w	b965e <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x196>
        return buffer + row * cols;
   b951a:	68bb      	ldr	r3, [r7, #8]
   b951c:	683a      	ldr	r2, [r7, #0]
   b951e:	f8d9 6000 	ldr.w	r6, [r9]
   b9522:	fb03 f308 	mul.w	r3, r3, r8
   b9526:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
   b952a:	f8d9 3008 	ldr.w	r3, [r9, #8]
   b952e:	fb03 f308 	mul.w	r3, r3, r8
   b9532:	9302      	str	r3, [sp, #8]
   b9534:	9b03      	ldr	r3, [sp, #12]
   b9536:	930d      	str	r3, [sp, #52]	; 0x34
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
   b9538:	2008      	movs	r0, #8
	: _M_start(), _M_finish(), _M_end_of_storage()
   b953a:	2300      	movs	r3, #0
   b953c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
   b9540:	9310      	str	r3, [sp, #64]	; 0x40
      _M_allocate(size_t __n)
   b9542:	f7fc fd85 	bl	b6050 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj.part.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b9546:	f100 0220 	add.w	r2, r0, #32
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b954a:	900e      	str	r0, [sp, #56]	; 0x38
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b954c:	9210      	str	r2, [sp, #64]	; 0x40
   b954e:	465b      	mov	r3, fp
	  for (; __first != __last; ++__first, (void)++__cur)
   b9550:	9906      	ldr	r1, [sp, #24]
   b9552:	4299      	cmp	r1, r3
   b9554:	d00a      	beq.n	b956c <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xa4>
   b9556:	b108      	cbz	r0, b955c <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x94>
   b9558:	6819      	ldr	r1, [r3, #0]
   b955a:	6001      	str	r1, [r0, #0]
   b955c:	3304      	adds	r3, #4
   b955e:	3004      	adds	r0, #4
   b9560:	e7f6      	b.n	b9550 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x88>
        float* sos = ratio == 3 ? sos_deci_3 : sos_deci_10;
   b9562:	4b46      	ldr	r3, [pc, #280]	; (b967c <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x1b4>)
        float* sos_zi = ratio == 3 ? sos_zi_deci_3 : sos_zi_deci_10;
   b9564:	f8df b130 	ldr.w	fp, [pc, #304]	; b9698 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x1d0>
        float* sos = ratio == 3 ? sos_deci_3 : sos_deci_10;
   b9568:	9303      	str	r3, [sp, #12]
   b956a:	e7c4      	b.n	b94f6 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x2e>
   b956c:	2304      	movs	r3, #4
   b956e:	9311      	str	r3, [sp, #68]	; 0x44
	  this->_M_impl._M_finish =
   b9570:	920f      	str	r2, [sp, #60]	; 0x3c
            signal::sosfilt sosfilt(sos, sos_zi, 4);
            signal::decimate_simple(
                x,
                input_matrix->cols,
                y,
                output_matrix->cols,
   b9572:	f8d9 3008 	ldr.w	r3, [r9, #8]
                input_matrix->cols,
   b9576:	68bc      	ldr	r4, [r7, #8]
        sos.init(input[0]);
   b9578:	ed9a 7a00 	vldr	s14, [sl]
                output_matrix->cols,
   b957c:	9304      	str	r3, [sp, #16]
            for (size_t sect = 0; sect < num_sections; sect++) {
   b957e:	2300      	movs	r3, #0
	return *(this->_M_impl._M_start + __n);
   b9580:	990e      	ldr	r1, [sp, #56]	; 0x38
   b9582:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
                zi_vec[sect * 2] *= x0;
   b9586:	edd1 7a00 	vldr	s15, [r1]
   b958a:	ee67 7a87 	vmul.f32	s15, s15, s14
   b958e:	00da      	lsls	r2, r3, #3
   b9590:	edc1 7a00 	vstr	s15, [r1]
   b9594:	1d11      	adds	r1, r2, #4
   b9596:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b9598:	440a      	add	r2, r1
                zi_vec[sect * 2 + 1] *= x0;
   b959a:	edd2 7a00 	vldr	s15, [r2]
   b959e:	ee67 7a87 	vmul.f32	s15, s15, s14
            for (size_t sect = 0; sect < num_sections; sect++) {
   b95a2:	3301      	adds	r3, #1
                zi_vec[sect * 2 + 1] *= x0;
   b95a4:	edc2 7a00 	vstr	s15, [r2]
            for (size_t sect = 0; sect < num_sections; sect++) {
   b95a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   b95aa:	429a      	cmp	r2, r3
   b95ac:	d8e8      	bhi.n	b9580 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xb8>
        fvec filtered(input_size);
   b95ae:	4621      	mov	r1, r4
   b95b0:	aa09      	add	r2, sp, #36	; 0x24
   b95b2:	a80a      	add	r0, sp, #40	; 0x28
   b95b4:	f7ff ff6a 	bl	b948c <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>
            assert(num_sections > 0);
   b95b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
      { return _M_data_ptr(this->_M_impl._M_start); }
   b95ba:	990a      	ldr	r1, [sp, #40]	; 0x28
   b95bc:	b923      	cbnz	r3, b95c8 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x100>
   b95be:	4b30      	ldr	r3, [pc, #192]	; (b9680 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x1b8>)
   b95c0:	4a30      	ldr	r2, [pc, #192]	; (b9684 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x1bc>)
   b95c2:	2186      	movs	r1, #134	; 0x86
   b95c4:	4830      	ldr	r0, [pc, #192]	; (b9688 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x1c0>)
   b95c6:	e790      	b.n	b94ea <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x22>
            iir2(input, output, size, coeff, coeff + 3, zi_vec.data());
   b95c8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
   b95cc:	9201      	str	r2, [sp, #4]
   b95ce:	f103 020c 	add.w	r2, r3, #12
   b95d2:	9200      	str	r2, [sp, #0]
   b95d4:	4650      	mov	r0, sl
   b95d6:	4622      	mov	r2, r4
   b95d8:	9107      	str	r1, [sp, #28]
   b95da:	f7fe f821 	bl	b7620 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_>
            for (size_t sect = 1; sect < num_sections; sect++) {
   b95de:	f04f 0a01 	mov.w	sl, #1
   b95e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b95e4:	9907      	ldr	r1, [sp, #28]
   b95e6:	4553      	cmp	r3, sl
   b95e8:	d914      	bls.n	b9614 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x14c>
                iir2(
   b95ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
                    coeff + sect * 6,
   b95ec:	980d      	ldr	r0, [sp, #52]	; 0x34
                iir2(
   b95ee:	9107      	str	r1, [sp, #28]
   b95f0:	2318      	movs	r3, #24
   b95f2:	fb03 f30a 	mul.w	r3, r3, sl
   b95f6:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
   b95fa:	9201      	str	r2, [sp, #4]
                    coeff + sect * 6 + 3,
   b95fc:	f103 020c 	add.w	r2, r3, #12
                iir2(
   b9600:	4402      	add	r2, r0
   b9602:	9200      	str	r2, [sp, #0]
   b9604:	4403      	add	r3, r0
   b9606:	4622      	mov	r2, r4
   b9608:	4608      	mov	r0, r1
   b960a:	f7fe f809 	bl	b7620 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_>
            for (size_t sect = 1; sect < num_sections; sect++) {
   b960e:	f10a 0a01 	add.w	sl, sl, #1
   b9612:	e7e6      	b.n	b95e2 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x11a>
        assert(output_size >= expected_size);
   b9614:	9b04      	ldr	r3, [sp, #16]
        return (input_size + factor - 1) / factor;
   b9616:	3c01      	subs	r4, #1
   b9618:	442c      	add	r4, r5
   b961a:	fbb4 f4f5 	udiv	r4, r4, r5
        assert(output_size >= expected_size);
   b961e:	42a3      	cmp	r3, r4
   b9620:	d310      	bcc.n	b9644 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x17c>
   b9622:	9b02      	ldr	r3, [sp, #8]
   b9624:	441c      	add	r4, r3
   b9626:	eb06 0283 	add.w	r2, r6, r3, lsl #2
   b962a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   b962e:	2300      	movs	r3, #0
        for (size_t ix = 0; ix < expected_size; ix++) {
   b9630:	4294      	cmp	r4, r2
   b9632:	d00b      	beq.n	b964c <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x184>
            output[ix] = filtered[ix * factor];
   b9634:	990a      	ldr	r1, [sp, #40]	; 0x28
   b9636:	4419      	add	r1, r3
   b9638:	6809      	ldr	r1, [r1, #0]
   b963a:	f842 1b04 	str.w	r1, [r2], #4
        for (size_t ix = 0; ix < expected_size; ix++) {
   b963e:	9905      	ldr	r1, [sp, #20]
   b9640:	440b      	add	r3, r1
   b9642:	e7f5      	b.n	b9630 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x168>
        assert(output_size >= expected_size);
   b9644:	4b11      	ldr	r3, [pc, #68]	; (b968c <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x1c4>)
   b9646:	4a12      	ldr	r2, [pc, #72]	; (b9690 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x1c8>)
   b9648:	21b4      	movs	r1, #180	; 0xb4
   b964a:	e7bb      	b.n	b95c4 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xfc>
      }
   b964c:	a80a      	add	r0, sp, #40	; 0x28
   b964e:	f7fe fb18 	bl	b7c82 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
   b9652:	a80e      	add	r0, sp, #56	; 0x38
   b9654:	f7fe fb15 	bl	b7c82 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
        for (size_t row = 0; row < input_matrix->rows; row++) {
   b9658:	f108 0801 	add.w	r8, r8, #1
   b965c:	e759      	b.n	b9512 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x4a>
                ratio,
                sosfilt);
        }

        return out_size;
    }
   b965e:	ee18 0a10 	vmov	r0, s16
   b9662:	b013      	add	sp, #76	; 0x4c
   b9664:	ecbd 8b02 	vpop	{d8}
   b9668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b966c:	000c592d 	.word	0x000c592d
   b9670:	000c5947 	.word	0x000c5947
   b9674:	000c56ba 	.word	0x000c56ba
   b9678:	2003cf58 	.word	0x2003cf58
   b967c:	2003ced8 	.word	0x2003ced8
   b9680:	000c599c 	.word	0x000c599c
   b9684:	000c59ad 	.word	0x000c59ad
   b9688:	000c59e9 	.word	0x000c59e9
   b968c:	000c5a55 	.word	0x000c5a55
   b9690:	000c5a72 	.word	0x000c5a72
   b9694:	2003cf38 	.word	0x2003cf38
   b9698:	2003ceb8 	.word	0x2003ceb8

000b969c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>:
    static size_t extract_spec_features(
   b969c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b96a0:	ed2d 8b06 	vpush	{d8-d10}
   b96a4:	b09d      	sub	sp, #116	; 0x74
   b96a6:	461c      	mov	r4, r3
   b96a8:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   b96ac:	4607      	mov	r7, r0
   b96ae:	468a      	mov	sl, r1
   b96b0:	4615      	mov	r5, r2
   b96b2:	eeb0 8a40 	vmov.f32	s16, s0
   b96b6:	2600      	movs	r6, #0
        if (transpose_and_scale_input) {
   b96b8:	b173      	cbz	r3, b96d8 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x3c>
            numpy::transpose_in_place(input_matrix);
   b96ba:	f7fe fa8d 	bl	b7bd8 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>
            EI_TRY(numpy::scale(input_matrix, config->scale_axes));
   b96be:	ed95 0a03 	vldr	s0, [r5, #12]
   b96c2:	4638      	mov	r0, r7
   b96c4:	f7fd fa96 	bl	b6bf4 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
   b96c8:	b130      	cbz	r0, b96d8 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x3c>
            EI_TRY(processing::subtract_mean(input_matrix));
   b96ca:	4681      	mov	r9, r0
    }
   b96cc:	4648      	mov	r0, r9
   b96ce:	b01d      	add	sp, #116	; 0x74
   b96d0:	ecbd 8b06 	vpop	{d8-d10}
   b96d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (strcmp(config->filter_type, "low") == 0) {
   b96d8:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b96dc:	499b      	ldr	r1, [pc, #620]	; (b994c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2b0>)
   b96de:	4640      	mov	r0, r8
   b96e0:	f7fb fb92 	bl	b4e08 <strcmp>
   b96e4:	b968      	cbnz	r0, b9702 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x66>
            if( config->filter_order ) {
   b96e6:	69e9      	ldr	r1, [r5, #28]
   b96e8:	b149      	cbz	r1, b96fe <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x62>
                EI_TRY(spectral::processing::butterworth_lowpass_filter(
   b96ea:	edd5 0a06 	vldr	s1, [r5, #24]
   b96ee:	b2c9      	uxtb	r1, r1
   b96f0:	eeb0 0a48 	vmov.f32	s0, s16
   b96f4:	4638      	mov	r0, r7
   b96f6:	f7fc ff17 	bl	b6528 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
   b96fa:	2800      	cmp	r0, #0
   b96fc:	d1e5      	bne.n	b96ca <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2e>
            is_high_pass = false;
   b96fe:	2600      	movs	r6, #0
   b9700:	e009      	b.n	b9716 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x7a>
        else if (strcmp(config->filter_type, "high") == 0) {
   b9702:	4993      	ldr	r1, [pc, #588]	; (b9950 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2b4>)
   b9704:	4640      	mov	r0, r8
   b9706:	f7fb fb7f 	bl	b4e08 <strcmp>
   b970a:	2800      	cmp	r0, #0
   b970c:	f040 812c 	bne.w	b9968 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2cc>
            if( config->filter_order ) {
   b9710:	69e9      	ldr	r1, [r5, #28]
   b9712:	b921      	cbnz	r1, b971e <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x82>
            is_high_pass = true;
   b9714:	2601      	movs	r6, #1
        if (remove_mean){
   b9716:	2c00      	cmp	r4, #0
   b9718:	f040 812a 	bne.w	b9970 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2d4>
   b971c:	e131      	b.n	b9982 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2e6>
                EI_TRY(spectral::processing::butterworth_highpass_filter(
   b971e:	edd5 0a06 	vldr	s1, [r5, #24]
   b9722:	b2c9      	uxtb	r1, r1
   b9724:	eeb0 0a48 	vmov.f32	s0, s16
   b9728:	4638      	mov	r0, r7
   b972a:	f7fc faad 	bl	b5c88 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
   b972e:	2800      	cmp	r0, #0
   b9730:	d0f0      	beq.n	b9714 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x78>
   b9732:	e7ca      	b.n	b96ca <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2e>
            *stop_bin = static_cast<size_t>(bin + 0.5) + 1; // go one past
   b9734:	f7fa fc7a 	bl	b402c <__adddf3>
   b9738:	f7fb f906 	bl	b4948 <__aeabi_d2uiz>
   b973c:	1c44      	adds	r4, r0, #1
            start_bin = 1;
   b973e:	f04f 0801 	mov.w	r8, #1
   b9742:	e14b      	b.n	b99dc <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x340>
            stop_bin = config->fft_length / 2 + 1;
   b9744:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   b9746:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   b974a:	1064      	asrs	r4, r4, #1
   b974c:	3401      	adds	r4, #1
   b974e:	e7f6      	b.n	b973e <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xa2>
            float stddev = *(feature_out-1); //= sqrt(numpy::variance(data_window, data_size));
   b9750:	edd6 7a00 	vldr	s15, [r6]
            float k_sum = 0;
   b9754:	eddf 6a7f 	vldr	s13, [pc, #508]	; b9954 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2b8>
            if (stddev == 0.0f) {
   b9758:	eef5 7a40 	vcmp.f32	s15, #0.0
   b975c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                stddev = 1e-10f;
   b9760:	bf08      	it	eq
   b9762:	eef0 7a48 	vmoveq.f32	s15, s16
            for (size_t i = 0; i < data_size; i++) {
   b9766:	464b      	mov	r3, r9
   b9768:	44ca      	add	sl, r9
            float s_sum = 0;
   b976a:	eef0 5a66 	vmov.f32	s11, s13
            for (size_t i = 0; i < data_size; i++) {
   b976e:	459a      	cmp	sl, r3
   b9770:	d00a      	beq.n	b9788 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xec>
                temp = data_window[i] * data_window[i] * data_window[i];
   b9772:	ecb3 6a01 	vldmia	r3!, {s12}
   b9776:	ee26 7a06 	vmul.f32	s14, s12, s12
   b977a:	ee27 7a06 	vmul.f32	s14, s14, s12
                k_sum += temp * data_window[i];
   b977e:	eee6 6a07 	vfma.f32	s13, s12, s14
                s_sum += temp;
   b9782:	ee75 5a87 	vadd.f32	s11, s11, s14
            for (size_t i = 0; i < data_size; i++) {
   b9786:	e7f2      	b.n	b976e <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xd2>
            *feature_out++ = (s_sum / data_size) / temp;
   b9788:	ee06 ba10 	vmov	s12, fp
   b978c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
            temp = stddev * stddev * stddev;
   b9790:	ee27 7aa7 	vmul.f32	s14, s15, s15
            *feature_out++ = (s_sum / data_size) / temp;
   b9794:	ee85 5a86 	vdiv.f32	s10, s11, s12
            *feature_out++ = ((k_sum / data_size) / (temp * stddev)) - 3;
   b9798:	f106 0a0c 	add.w	sl, r6, #12
            temp = stddev * stddev * stddev;
   b979c:	ee27 7a27 	vmul.f32	s14, s14, s15
            *feature_out++ = (s_sum / data_size) / temp;
   b97a0:	eec5 5a07 	vdiv.f32	s11, s10, s14
            *feature_out++ = ((k_sum / data_size) / (temp * stddev)) - 3;
   b97a4:	ee67 7a87 	vmul.f32	s15, s15, s14
            *feature_out++ = (s_sum / data_size) / temp;
   b97a8:	edc6 5a01 	vstr	s11, [r6, #4]
            *feature_out++ = ((k_sum / data_size) / (temp * stddev)) - 3;
   b97ac:	eec6 5a86 	vdiv.f32	s11, s13, s12
   b97b0:	ee85 7aa7 	vdiv.f32	s14, s11, s15
   b97b4:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
   b97b8:	ee77 7a67 	vsub.f32	s15, s14, s15
   b97bc:	edc6 7a02 	vstr	s15, [r6, #8]
            if (config->implementation_version == 4) {
   b97c0:	88ab      	ldrh	r3, [r5, #4]
   b97c2:	6a69      	ldr	r1, [r5, #36]	; 0x24
   b97c4:	2b04      	cmp	r3, #4
   b97c6:	f040 809c 	bne.w	b9902 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x266>
                size_t fft_out_size = config->fft_length / 2 + 1;
   b97ca:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b97ce:	ea4f 0a61 	mov.w	sl, r1, asr #1
   b97d2:	f10a 0a01 	add.w	sl, sl, #1
                ei_vector<float> fft_out(fft_out_size);
   b97d6:	aa18      	add	r2, sp, #96	; 0x60
   b97d8:	4651      	mov	r1, sl
   b97da:	a809      	add	r0, sp, #36	; 0x24
   b97dc:	f7ff fe56 	bl	b948c <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>
                EI_TRY(numpy::welch_max_hold(
   b97e0:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   b97e4:	9302      	str	r3, [sp, #8]
   b97e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b97e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b97ea:	e9cd a300 	strd	sl, r3, [sp]
   b97ee:	4648      	mov	r0, r9
   b97f0:	2300      	movs	r3, #0
   b97f2:	4659      	mov	r1, fp
   b97f4:	f7ff fda4 	bl	b9340 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>
   b97f8:	4681      	mov	r9, r0
   b97fa:	b148      	cbz	r0, b9810 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x174>
   b97fc:	a809      	add	r0, sp, #36	; 0x24
   b97fe:	f7fe fa40 	bl	b7c82 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
            EI_TRY(numpy::rms(&rms_in_matrix, &rms_out_matrix));
   b9802:	a810      	add	r0, sp, #64	; 0x40
   b9804:	f7fd f987 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
   b9808:	a80c      	add	r0, sp, #48	; 0x30
   b980a:	f7fd f984 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
   b980e:	e75d      	b.n	b96cc <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x30>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b9810:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   b9814:	1ad2      	subs	r2, r2, r3
                matrix_t x(1, fft_out.size(), const_cast<float *>(fft_out.data()));
   b9816:	1092      	asrs	r2, r2, #2
   b9818:	2101      	movs	r1, #1
   b981a:	a814      	add	r0, sp, #80	; 0x50
   b981c:	f7fd f966 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
                matrix_t out(1, 1);
   b9820:	2201      	movs	r2, #1
   b9822:	4611      	mov	r1, r2
   b9824:	464b      	mov	r3, r9
   b9826:	a818      	add	r0, sp, #96	; 0x60
   b9828:	f7fd f960 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
                *feature_out++ = (numpy::skew(&x, &out) == EIDSP_OK) ? (out.get_row_ptr(0)[0]) : 0.0f;
   b982c:	a918      	add	r1, sp, #96	; 0x60
   b982e:	a814      	add	r0, sp, #80	; 0x50
   b9830:	f7fd fbec 	bl	b700c <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>
   b9834:	b9c0      	cbnz	r0, b9868 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x1cc>
   b9836:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b9838:	681b      	ldr	r3, [r3, #0]
   b983a:	60f3      	str	r3, [r6, #12]
                *feature_out++ = (numpy::kurtosis(&x, &out) == EIDSP_OK) ? (out.get_row_ptr(0)[0]) : 0.0f;
   b983c:	a918      	add	r1, sp, #96	; 0x60
   b983e:	a814      	add	r0, sp, #80	; 0x50
   b9840:	f7fd fc86 	bl	b7150 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>
   b9844:	b990      	cbnz	r0, b986c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x1d0>
   b9846:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b9848:	681b      	ldr	r3, [r3, #0]
   b984a:	6133      	str	r3, [r6, #16]
   b984c:	f106 0a14 	add.w	sl, r6, #20
                for (size_t i = start_bin; i < stop_bin; i++) {
   b9850:	4651      	mov	r1, sl
   b9852:	4643      	mov	r3, r8
   b9854:	42a3      	cmp	r3, r4
   b9856:	d20b      	bcs.n	b9870 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x1d4>
                    feature_out[i - start_bin] = fft_out[i];
   b9858:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b985a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
                for (size_t i = start_bin; i < stop_bin; i++) {
   b985e:	3301      	adds	r3, #1
                    feature_out[i - start_bin] = fft_out[i];
   b9860:	6812      	ldr	r2, [r2, #0]
   b9862:	f841 2b04 	str.w	r2, [r1], #4
                for (size_t i = start_bin; i < stop_bin; i++) {
   b9866:	e7f5      	b.n	b9854 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x1b8>
                *feature_out++ = (numpy::skew(&x, &out) == EIDSP_OK) ? (out.get_row_ptr(0)[0]) : 0.0f;
   b9868:	2300      	movs	r3, #0
   b986a:	e7e6      	b.n	b983a <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x19e>
                *feature_out++ = (numpy::kurtosis(&x, &out) == EIDSP_OK) ? (out.get_row_ptr(0)[0]) : 0.0f;
   b986c:	2300      	movs	r3, #0
   b986e:	e7ec      	b.n	b984a <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x1ae>
                matrix_t out(1, 1);
   b9870:	a818      	add	r0, sp, #96	; 0x60
   b9872:	f7fd f950 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
                matrix_t x(1, fft_out.size(), const_cast<float *>(fft_out.data()));
   b9876:	a814      	add	r0, sp, #80	; 0x50
   b9878:	f7fd f94d 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
      }
   b987c:	a809      	add	r0, sp, #36	; 0x24
   b987e:	f7fe fa00 	bl	b7c82 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
            if (config->do_log) {
   b9882:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   b9886:	2b00      	cmp	r3, #0
   b9888:	d04c      	beq.n	b9924 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x288>
                numpy::zero_handling(feature_out, num_bins);
   b988a:	ee1a 1a10 	vmov	r1, s20
   b988e:	4650      	mov	r0, sl
   b9890:	f7fd fcf4 	bl	b727c <_ZN2ei5numpy13zero_handlingEPfj>
                ei_matrix temp(num_bins, 1, feature_out);
   b9894:	ee1a 1a10 	vmov	r1, s20
   b9898:	4653      	mov	r3, sl
   b989a:	2201      	movs	r2, #1
   b989c:	a818      	add	r0, sp, #96	; 0x60
   b989e:	f7fd f925 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
        y += -4.11852516267426f;
   b98a2:	eddf 9a2d 	vldr	s19, [pc, #180]	; b9958 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2bc>
        y += 6.02197014179219f;
   b98a6:	ed9f 9a2d 	vldr	s18, [pc, #180]	; b995c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2c0>
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   b98aa:	2600      	movs	r6, #0
   b98ac:	e9dd 3219 	ldrd	r3, r2, [sp, #100]	; 0x64
   b98b0:	4353      	muls	r3, r2
   b98b2:	42b3      	cmp	r3, r6
   b98b4:	d933      	bls.n	b991e <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x282>
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
   b98b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b98b8:	eb03 0986 	add.w	r9, r3, r6, lsl #2
        float f = frexpf(fabsf(a), &e);
   b98bc:	ed99 0a00 	vldr	s0, [r9]
   b98c0:	a814      	add	r0, sp, #80	; 0x50
   b98c2:	eeb0 0ac0 	vabs.f32	s0, s0
   b98c6:	f007 ff4f 	bl	c1768 <frexpf>
        y += -4.11852516267426f;
   b98ca:	eef0 7a69 	vmov.f32	s15, s19
   b98ce:	eee0 7a28 	vfma.f32	s15, s0, s17
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   b98d2:	3601      	adds	r6, #1
        y += 6.02197014179219f;
   b98d4:	eef0 6a49 	vmov.f32	s13, s18
   b98d8:	eee0 6a27 	vfma.f32	s13, s0, s15
        y += -3.13396450166353f;
   b98dc:	eddf 7a20 	vldr	s15, [pc, #128]	; b9960 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2c4>
   b98e0:	eee0 7a26 	vfma.f32	s15, s0, s13
   b98e4:	eeb0 7a67 	vmov.f32	s14, s15
        y += e;
   b98e8:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
   b98ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b98f0:	ee77 7a87 	vadd.f32	s15, s15, s14
        return numpy::log2(a) * 0.3010299956639812f;
   b98f4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; b9964 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2c8>
   b98f8:	ee67 7a87 	vmul.f32	s15, s15, s14
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
   b98fc:	edc9 7a00 	vstr	s15, [r9]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   b9900:	e7d4      	b.n	b98ac <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x210>
                EI_TRY(numpy::welch_max_hold(
   b9902:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   b9906:	9400      	str	r4, [sp, #0]
   b9908:	e9cd 1301 	strd	r1, r3, [sp, #4]
   b990c:	4652      	mov	r2, sl
   b990e:	4643      	mov	r3, r8
   b9910:	4659      	mov	r1, fp
   b9912:	4648      	mov	r0, r9
   b9914:	f7ff fd14 	bl	b9340 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>
   b9918:	2800      	cmp	r0, #0
   b991a:	d0b2      	beq.n	b9882 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x1e6>
   b991c:	e08e      	b.n	b9a3c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x3a0>
                ei_matrix temp(num_bins, 1, feature_out);
   b991e:	a818      	add	r0, sp, #96	; 0x60
   b9920:	f7fd f8f9 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
            feature_out += num_bins;
   b9924:	9b07      	ldr	r3, [sp, #28]
            matrix_t rms_out_matrix(1, 1, feature_out);
   b9926:	a810      	add	r0, sp, #64	; 0x40
            feature_out += num_bins;
   b9928:	eb0a 0603 	add.w	r6, sl, r3
            matrix_t rms_out_matrix(1, 1, feature_out);
   b992c:	f7fd f8f3 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
            matrix_t rms_in_matrix(1, data_size, data_window);
   b9930:	a80c      	add	r0, sp, #48	; 0x30
   b9932:	f7fd f8f0 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
        for (size_t row = 0; row < input_matrix->rows; row++) {
   b9936:	9b05      	ldr	r3, [sp, #20]
   b9938:	3301      	adds	r3, #1
   b993a:	9305      	str	r3, [sp, #20]
   b993c:	e060      	b.n	b9a00 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x364>
        size_t num_features = feature_out - feature_out_ori;
   b993e:	9b06      	ldr	r3, [sp, #24]
   b9940:	eba6 0903 	sub.w	r9, r6, r3
   b9944:	ea4f 09a9 	mov.w	r9, r9, asr #2
        return num_features;
   b9948:	e6c0      	b.n	b96cc <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x30>
   b994a:	bf00      	nop
   b994c:	000c58f3 	.word	0x000c58f3
   b9950:	000c58f7 	.word	0x000c58f7
   b9954:	00000000 	.word	0x00000000
   b9958:	c083caf5 	.word	0xc083caf5
   b995c:	40c0b3fb 	.word	0x40c0b3fb
   b9960:	c04892e0 	.word	0xc04892e0
   b9964:	3e9a209b 	.word	0x3e9a209b
        if (remove_mean){
   b9968:	2c00      	cmp	r4, #0
   b996a:	f43f aeeb 	beq.w	b9744 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xa8>
        bool do_filter = false;
   b996e:	2400      	movs	r4, #0
            EI_TRY(processing::subtract_mean(input_matrix));
   b9970:	4638      	mov	r0, r7
   b9972:	f7fd f9e3 	bl	b6d3c <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
   b9976:	2800      	cmp	r0, #0
   b9978:	f47f aea7 	bne.w	b96ca <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2e>
        if (do_filter) {
   b997c:	2c00      	cmp	r4, #0
   b997e:	f43f aee1 	beq.w	b9744 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xa8>
        if (filter_cutoff > sampling_freq / 2) {
   b9982:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   b9986:	ee28 7a07 	vmul.f32	s14, s16, s14
            get_start_stop_bin(
   b998a:	edd5 7a06 	vldr	s15, [r5, #24]
   b998e:	6a6c      	ldr	r4, [r5, #36]	; 0x24
            filter_cutoff = sampling_freq / 2;
   b9990:	eef4 7a47 	vcmp.f32	s15, s14
   b9994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9998:	bfc8      	it	gt
   b999a:	eef0 7a47 	vmovgt.f32	s15, s14
        float bin = filter_cutoff * fft_length / sampling_freq;
   b999e:	ee07 4a10 	vmov	s14, r4
   b99a2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b99a6:	ee67 7a27 	vmul.f32	s15, s14, s15
            *start_bin = static_cast<size_t>(bin - 0.5) + 1; // add one b/c we want to always round up
   b99aa:	eec7 7a88 	vdiv.f32	s15, s15, s16
   b99ae:	ee17 0a90 	vmov	r0, s15
   b99b2:	f7fa fc99 	bl	b42e8 <__aeabi_f2d>
   b99b6:	4b22      	ldr	r3, [pc, #136]	; (b9a40 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x3a4>)
   b99b8:	2200      	movs	r2, #0
        if (is_high_pass) {
   b99ba:	2e00      	cmp	r6, #0
   b99bc:	f43f aeba 	beq.w	b9734 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x98>
            *start_bin = static_cast<size_t>(bin - 0.5) + 1; // add one b/c we want to always round up
   b99c0:	f7fa fb32 	bl	b4028 <__aeabi_dsub>
   b99c4:	f7fa ffc0 	bl	b4948 <__aeabi_d2uiz>
   b99c8:	f100 0801 	add.w	r8, r0, #1
   b99cc:	f1b8 0f01 	cmp.w	r8, #1
            *stop_bin = fft_length / 2 + 1; // go one past
   b99d0:	ea4f 0454 	mov.w	r4, r4, lsr #1
   b99d4:	bf38      	it	cc
   b99d6:	f04f 0801 	movcc.w	r8, #1
   b99da:	3401      	adds	r4, #1
        size_t num_bins = stop_bin - start_bin;
   b99dc:	eba4 0308 	sub.w	r3, r4, r8
   b99e0:	ee0a 3a10 	vmov	s20, r3
        float *feature_out = output_matrix->buffer;
   b99e4:	f8da 3000 	ldr.w	r3, [sl]
   b99e8:	9306      	str	r3, [sp, #24]
            feature_out += num_bins;
   b99ea:	ee1a 3a10 	vmov	r3, s20
   b99ee:	009b      	lsls	r3, r3, #2
   b99f0:	9307      	str	r3, [sp, #28]
        float *feature_out = output_matrix->buffer;
   b99f2:	9e06      	ldr	r6, [sp, #24]
                stddev = 1e-10f;
   b99f4:	ed9f 8a13 	vldr	s16, [pc, #76]	; b9a44 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x3a8>
        y += -4.11852516267426f;
   b99f8:	eddf 8a13 	vldr	s17, [pc, #76]	; b9a48 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x3ac>
        for (size_t row = 0; row < input_matrix->rows; row++) {
   b99fc:	2300      	movs	r3, #0
   b99fe:	9305      	str	r3, [sp, #20]
   b9a00:	687b      	ldr	r3, [r7, #4]
   b9a02:	9a05      	ldr	r2, [sp, #20]
   b9a04:	4293      	cmp	r3, r2
   b9a06:	d99a      	bls.n	b993e <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2a2>
   b9a08:	f8d7 b008 	ldr.w	fp, [r7, #8]
   b9a0c:	683b      	ldr	r3, [r7, #0]
   b9a0e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   b9a12:	fb0a 3902 	mla	r9, sl, r2, r3
            matrix_t rms_in_matrix(1, data_size, data_window);
   b9a16:	464b      	mov	r3, r9
   b9a18:	465a      	mov	r2, fp
   b9a1a:	2101      	movs	r1, #1
   b9a1c:	a80c      	add	r0, sp, #48	; 0x30
   b9a1e:	f7fd f865 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
            matrix_t rms_out_matrix(1, 1, feature_out);
   b9a22:	2201      	movs	r2, #1
   b9a24:	4611      	mov	r1, r2
   b9a26:	4633      	mov	r3, r6
   b9a28:	a810      	add	r0, sp, #64	; 0x40
   b9a2a:	f7fd f85f 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
            EI_TRY(numpy::rms(&rms_in_matrix, &rms_out_matrix));
   b9a2e:	a910      	add	r1, sp, #64	; 0x40
   b9a30:	a80c      	add	r0, sp, #48	; 0x30
   b9a32:	f7fd f937 	bl	b6ca4 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
   b9a36:	2800      	cmp	r0, #0
   b9a38:	f43f ae8a 	beq.w	b9750 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xb4>
                EI_TRY(numpy::welch_max_hold(
   b9a3c:	4681      	mov	r9, r0
   b9a3e:	e6e0      	b.n	b9802 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x166>
   b9a40:	3fe00000 	.word	0x3fe00000
   b9a44:	2edbe6ff 	.word	0x2edbe6ff
   b9a48:	3f9da1a8 	.word	0x3f9da1a8

000b9a4c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
   b9a4c:	b538      	push	{r3, r4, r5, lr}
   b9a4e:	4603      	mov	r3, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b9a50:	e9d3 3500 	ldrd	r3, r5, [r3]
   b9a54:	1aed      	subs	r5, r5, r3
	if (max_size() - size() < __n)
   b9a56:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b9a5a:	10ac      	asrs	r4, r5, #2
	if (max_size() - size() < __n)
   b9a5c:	eba3 05a5 	sub.w	r5, r3, r5, asr #2
   b9a60:	428d      	cmp	r5, r1
      _M_check_len(size_type __n, const char* __s) const
   b9a62:	4610      	mov	r0, r2
	if (max_size() - size() < __n)
   b9a64:	d201      	bcs.n	b9a6a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc+0x1e>
	  __throw_length_error(__N(__s));
   b9a66:	f007 fc13 	bl	c1290 <_ZSt20__throw_length_errorPKc>
   b9a6a:	42a1      	cmp	r1, r4
   b9a6c:	bf38      	it	cc
   b9a6e:	4621      	movcc	r1, r4
   b9a70:	1860      	adds	r0, r4, r1
   b9a72:	d203      	bcs.n	b9a7c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc+0x30>
   b9a74:	4298      	cmp	r0, r3
   b9a76:	bf28      	it	cs
   b9a78:	4618      	movcs	r0, r3
      }
   b9a7a:	bd38      	pop	{r3, r4, r5, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b9a7c:	4618      	mov	r0, r3
   b9a7e:	e7fc      	b.n	b9a7a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc+0x2e>

000b9a80 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>:
      push_back(const value_type& __x)
   b9a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b9a84:	e9d0 7301 	ldrd	r7, r3, [r0, #4]
   b9a88:	429f      	cmp	r7, r3
      push_back(const value_type& __x)
   b9a8a:	4604      	mov	r4, r0
   b9a8c:	468a      	mov	sl, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b9a8e:	d007      	beq.n	b9aa0 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf+0x20>
   b9a90:	b10f      	cbz	r7, b9a96 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf+0x16>
   b9a92:	680b      	ldr	r3, [r1, #0]
   b9a94:	603b      	str	r3, [r7, #0]
	    ++this->_M_impl._M_finish;
   b9a96:	6863      	ldr	r3, [r4, #4]
   b9a98:	3304      	adds	r3, #4
   b9a9a:	6063      	str	r3, [r4, #4]
      }
   b9a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
   b9aa0:	4a15      	ldr	r2, [pc, #84]	; (b9af8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf+0x78>)
   b9aa2:	2101      	movs	r1, #1
   b9aa4:	f7ff ffd2 	bl	b9a4c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
   b9aa8:	f8d4 8000 	ldr.w	r8, [r4]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b9aac:	4606      	mov	r6, r0
    { return __lhs.base() - __rhs.base(); }
   b9aae:	eba7 0908 	sub.w	r9, r7, r8
   b9ab2:	b1f8      	cbz	r0, b9af4 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf+0x74>
   b9ab4:	f7fc facc 	bl	b6050 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj.part.0>
   b9ab8:	4605      	mov	r5, r0
   b9aba:	eb15 0909 	adds.w	r9, r5, r9
   b9abe:	bf1c      	itt	ne
   b9ac0:	f8da 3000 	ldrne.w	r3, [sl]
   b9ac4:	f8c9 3000 	strne.w	r3, [r9]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
   b9ac8:	4639      	mov	r1, r7
   b9aca:	462a      	mov	r2, r5
   b9acc:	4640      	mov	r0, r8
   b9ace:	f7fc fbff 	bl	b62d0 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_.isra.0>
   b9ad2:	1d02      	adds	r2, r0, #4
   b9ad4:	4638      	mov	r0, r7
   b9ad6:	f7fc fbfb 	bl	b62d0 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_.isra.0>
   b9ada:	4607      	mov	r7, r0
	if (__p)
   b9adc:	f1b8 0f00 	cmp.w	r8, #0
   b9ae0:	d002      	beq.n	b9ae8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf+0x68>
   b9ae2:	4640      	mov	r0, r8
   b9ae4:	f002 fa8c 	bl	bc000 <_Z7ei_freePv>
      this->_M_impl._M_finish = __new_finish;
   b9ae8:	e9c4 5700 	strd	r5, r7, [r4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b9aec:	eb05 0586 	add.w	r5, r5, r6, lsl #2
   b9af0:	60a5      	str	r5, [r4, #8]
      }
   b9af2:	e7d3      	b.n	b9a9c <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf+0x1c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b9af4:	4605      	mov	r5, r0
   b9af6:	e7e0      	b.n	b9aba <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf+0x3a>
   b9af8:	000c52c7 	.word	0x000c52c7

000b9afc <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj>:
    }

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
   b9afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9b00:	4604      	mov	r4, r0
    _M_default_append(size_type __n)
    {
      if (__n != 0)
   b9b02:	460d      	mov	r5, r1
   b9b04:	b1a1      	cbz	r1, b9b30 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x34>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b9b06:	e9d0 3200 	ldrd	r3, r2, [r0]
   b9b0a:	1ad7      	subs	r7, r2, r3
	{
	  const size_type __size = size();
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
					 - this->_M_impl._M_finish);
   b9b0c:	6883      	ldr	r3, [r0, #8]
   b9b0e:	1a9b      	subs	r3, r3, r2

	  if (__size > max_size() || __navail > max_size() - __size)
	    __builtin_unreachable();

	  if (__navail >= __n)
   b9b10:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
   b9b14:	ea4f 09a7 	mov.w	r9, r7, asr #2
   b9b18:	d80c      	bhi.n	b9b34 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x38>
      _ForwardIterator __cur = __first;
   b9b1a:	4613      	mov	r3, r2
   b9b1c:	2000      	movs	r0, #0
   b9b1e:	b103      	cbz	r3, b9b22 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x26>
   b9b20:	6018      	str	r0, [r3, #0]
	  for (; __n > 0; --__n, (void) ++__cur)
   b9b22:	3901      	subs	r1, #1
   b9b24:	f103 0304 	add.w	r3, r3, #4
   b9b28:	d1f9      	bne.n	b9b1e <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x22>
   b9b2a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
   b9b2e:	6062      	str	r2, [r4, #4]
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
   b9b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		_M_check_len(__n, "vector::_M_default_append");
   b9b34:	4a12      	ldr	r2, [pc, #72]	; (b9b80 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x84>)
   b9b36:	f7ff ff89 	bl	b9a4c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b9b3a:	4680      	mov	r8, r0
   b9b3c:	b1e8      	cbz	r0, b9b7a <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x7e>
   b9b3e:	f7fc fa87 	bl	b6050 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj.part.0>
   b9b42:	4606      	mov	r6, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
   b9b44:	4437      	add	r7, r6
   b9b46:	462a      	mov	r2, r5
   b9b48:	2100      	movs	r1, #0
   b9b4a:	b107      	cbz	r7, b9b4e <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x52>
   b9b4c:	6039      	str	r1, [r7, #0]
   b9b4e:	3a01      	subs	r2, #1
   b9b50:	f107 0704 	add.w	r7, r7, #4
   b9b54:	d1f9      	bne.n	b9b4a <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x4e>
      return __relocate_a_1(std::__niter_base(__first),
   b9b56:	e9d4 0100 	ldrd	r0, r1, [r4]
   b9b5a:	4632      	mov	r2, r6
   b9b5c:	f7fc fbb8 	bl	b62d0 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_.isra.0>
	      _M_deallocate(this->_M_impl._M_start,
   b9b60:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b9b62:	b108      	cbz	r0, b9b68 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x6c>
   b9b64:	f002 fa4c 	bl	bc000 <_Z7ei_freePv>
	      this->_M_impl._M_finish = __new_start + __size + __n;
   b9b68:	444d      	add	r5, r9
   b9b6a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
	      this->_M_impl._M_start = __new_start;
   b9b6e:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   b9b70:	eb06 0688 	add.w	r6, r6, r8, lsl #2
	      this->_M_impl._M_finish = __new_start + __size + __n;
   b9b74:	6065      	str	r5, [r4, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   b9b76:	60a6      	str	r6, [r4, #8]
    }
   b9b78:	e7da      	b.n	b9b30 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x34>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b9b7a:	4606      	mov	r6, r0
   b9b7c:	e7e2      	b.n	b9b44 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x48>
   b9b7e:	bf00      	nop
   b9b80:	000c5ade 	.word	0x000c5ade

000b9b84 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>:
      resize(size_type __new_size)
   b9b84:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b9b86:	e9d0 2500 	ldrd	r2, r5, [r0]
   b9b8a:	1aac      	subs	r4, r5, r2
   b9b8c:	10a4      	asrs	r4, r4, #2
	if (__new_size > size())
   b9b8e:	42a1      	cmp	r1, r4
   b9b90:	d903      	bls.n	b9b9a <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj+0x16>
	  _M_default_append(__new_size - size());
   b9b92:	1b09      	subs	r1, r1, r4
   b9b94:	f7ff ffb2 	bl	b9afc <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj>
      }
   b9b98:	bd38      	pop	{r3, r4, r5, pc}
	else if (__new_size < size())
   b9b9a:	d2fd      	bcs.n	b9b98 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj+0x14>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   b9b9c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b9ba0:	42a9      	cmp	r1, r5
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   b9ba2:	bf18      	it	ne
   b9ba4:	6041      	strne	r1, [r0, #4]
      }
   b9ba6:	e7f7      	b.n	b9b98 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj+0x14>

000b9ba8 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
   b9ba8:	b084      	sub	sp, #16
   b9baa:	b538      	push	{r3, r4, r5, lr}
   b9bac:	ac04      	add	r4, sp, #16
   b9bae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b9bb2:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
        h.resize(n);
   b9bb6:	2104      	movs	r1, #4
   b9bb8:	4628      	mov	r0, r5
   b9bba:	f7ff ffe3 	bl	b9b84 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
   b9bbe:	2104      	movs	r1, #4
   b9bc0:	4620      	mov	r0, r4
   b9bc2:	f7ff ffdf 	bl	b9b84 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
   b9bc6:	aa04      	add	r2, sp, #16
        g.resize(n);
   b9bc8:	2300      	movs	r3, #0
            h[i] = wav[0][n - i - 1];
   b9bca:	6829      	ldr	r1, [r5, #0]
   b9bcc:	68d0      	ldr	r0, [r2, #12]
   b9bce:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
   b9bd0:	3a04      	subs	r2, #4
            h[i] = wav[0][n - i - 1];
   b9bd2:	6008      	str	r0, [r1, #0]
            g[i] = wav[1][n - i - 1];
   b9bd4:	6821      	ldr	r1, [r4, #0]
   b9bd6:	6a10      	ldr	r0, [r2, #32]
   b9bd8:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
   b9bda:	3304      	adds	r3, #4
   b9bdc:	2b10      	cmp	r3, #16
            g[i] = wav[1][n - i - 1];
   b9bde:	6008      	str	r0, [r1, #0]
        for (size_t i = 0; i < n; i++) {
   b9be0:	d1f3      	bne.n	b9bca <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x22>
    }
   b9be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9be6:	b004      	add	sp, #16
   b9be8:	4770      	bx	lr

000b9bea <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
   b9bea:	b084      	sub	sp, #16
   b9bec:	b538      	push	{r3, r4, r5, lr}
   b9bee:	ac04      	add	r4, sp, #16
   b9bf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b9bf4:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
        h.resize(n);
   b9bf8:	2106      	movs	r1, #6
   b9bfa:	4628      	mov	r0, r5
   b9bfc:	f7ff ffc2 	bl	b9b84 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
   b9c00:	2106      	movs	r1, #6
   b9c02:	4620      	mov	r0, r4
   b9c04:	f7ff ffbe 	bl	b9b84 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
   b9c08:	aa04      	add	r2, sp, #16
        g.resize(n);
   b9c0a:	2300      	movs	r3, #0
            h[i] = wav[0][n - i - 1];
   b9c0c:	6829      	ldr	r1, [r5, #0]
   b9c0e:	6950      	ldr	r0, [r2, #20]
   b9c10:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
   b9c12:	3a04      	subs	r2, #4
            h[i] = wav[0][n - i - 1];
   b9c14:	6008      	str	r0, [r1, #0]
            g[i] = wav[1][n - i - 1];
   b9c16:	6821      	ldr	r1, [r4, #0]
   b9c18:	6b10      	ldr	r0, [r2, #48]	; 0x30
   b9c1a:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
   b9c1c:	3304      	adds	r3, #4
   b9c1e:	2b18      	cmp	r3, #24
            g[i] = wav[1][n - i - 1];
   b9c20:	6008      	str	r0, [r1, #0]
        for (size_t i = 0; i < n; i++) {
   b9c22:	d1f3      	bne.n	b9c0c <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x22>
    }
   b9c24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9c28:	b004      	add	sp, #16
   b9c2a:	4770      	bx	lr

000b9c2c <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
   b9c2c:	b084      	sub	sp, #16
   b9c2e:	b538      	push	{r3, r4, r5, lr}
   b9c30:	ac04      	add	r4, sp, #16
   b9c32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b9c36:	e9dd 5414 	ldrd	r5, r4, [sp, #80]	; 0x50
        h.resize(n);
   b9c3a:	2108      	movs	r1, #8
   b9c3c:	4628      	mov	r0, r5
   b9c3e:	f7ff ffa1 	bl	b9b84 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
   b9c42:	2108      	movs	r1, #8
   b9c44:	4620      	mov	r0, r4
   b9c46:	f7ff ff9d 	bl	b9b84 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
   b9c4a:	aa04      	add	r2, sp, #16
        g.resize(n);
   b9c4c:	2300      	movs	r3, #0
            h[i] = wav[0][n - i - 1];
   b9c4e:	6829      	ldr	r1, [r5, #0]
   b9c50:	69d0      	ldr	r0, [r2, #28]
   b9c52:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
   b9c54:	3a04      	subs	r2, #4
            h[i] = wav[0][n - i - 1];
   b9c56:	6008      	str	r0, [r1, #0]
            g[i] = wav[1][n - i - 1];
   b9c58:	6821      	ldr	r1, [r4, #0]
   b9c5a:	6c10      	ldr	r0, [r2, #64]	; 0x40
   b9c5c:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
   b9c5e:	3304      	adds	r3, #4
   b9c60:	2b20      	cmp	r3, #32
            g[i] = wav[1][n - i - 1];
   b9c62:	6008      	str	r0, [r1, #0]
        for (size_t i = 0; i < n; i++) {
   b9c64:	d1f3      	bne.n	b9c4e <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x22>
    }
   b9c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9c6a:	b004      	add	sp, #16
   b9c6c:	4770      	bx	lr

000b9c6e <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
   b9c6e:	b084      	sub	sp, #16
   b9c70:	b538      	push	{r3, r4, r5, lr}
   b9c72:	ac04      	add	r4, sp, #16
   b9c74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b9c78:	e9dd 5418 	ldrd	r5, r4, [sp, #96]	; 0x60
        h.resize(n);
   b9c7c:	210a      	movs	r1, #10
   b9c7e:	4628      	mov	r0, r5
   b9c80:	f7ff ff80 	bl	b9b84 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
   b9c84:	210a      	movs	r1, #10
   b9c86:	4620      	mov	r0, r4
   b9c88:	f7ff ff7c 	bl	b9b84 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
   b9c8c:	aa04      	add	r2, sp, #16
        g.resize(n);
   b9c8e:	2300      	movs	r3, #0
            h[i] = wav[0][n - i - 1];
   b9c90:	6829      	ldr	r1, [r5, #0]
   b9c92:	6a50      	ldr	r0, [r2, #36]	; 0x24
   b9c94:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
   b9c96:	3a04      	subs	r2, #4
            h[i] = wav[0][n - i - 1];
   b9c98:	6008      	str	r0, [r1, #0]
            g[i] = wav[1][n - i - 1];
   b9c9a:	6821      	ldr	r1, [r4, #0]
   b9c9c:	6d10      	ldr	r0, [r2, #80]	; 0x50
   b9c9e:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
   b9ca0:	3304      	adds	r3, #4
   b9ca2:	2b28      	cmp	r3, #40	; 0x28
            g[i] = wav[1][n - i - 1];
   b9ca4:	6008      	str	r0, [r1, #0]
        for (size_t i = 0; i < n; i++) {
   b9ca6:	d1f3      	bne.n	b9c90 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x22>
    }
   b9ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9cac:	b004      	add	sp, #16
   b9cae:	4770      	bx	lr

000b9cb0 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
   b9cb0:	b084      	sub	sp, #16
   b9cb2:	b538      	push	{r3, r4, r5, lr}
   b9cb4:	ac04      	add	r4, sp, #16
   b9cb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b9cba:	e9dd 541c 	ldrd	r5, r4, [sp, #112]	; 0x70
        h.resize(n);
   b9cbe:	210c      	movs	r1, #12
   b9cc0:	4628      	mov	r0, r5
   b9cc2:	f7ff ff5f 	bl	b9b84 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
   b9cc6:	210c      	movs	r1, #12
   b9cc8:	4620      	mov	r0, r4
   b9cca:	f7ff ff5b 	bl	b9b84 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
   b9cce:	aa04      	add	r2, sp, #16
        g.resize(n);
   b9cd0:	2300      	movs	r3, #0
            h[i] = wav[0][n - i - 1];
   b9cd2:	6829      	ldr	r1, [r5, #0]
   b9cd4:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   b9cd6:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
   b9cd8:	3a04      	subs	r2, #4
            h[i] = wav[0][n - i - 1];
   b9cda:	6008      	str	r0, [r1, #0]
            g[i] = wav[1][n - i - 1];
   b9cdc:	6821      	ldr	r1, [r4, #0]
   b9cde:	6e10      	ldr	r0, [r2, #96]	; 0x60
   b9ce0:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
   b9ce2:	3304      	adds	r3, #4
   b9ce4:	2b30      	cmp	r3, #48	; 0x30
            g[i] = wav[1][n - i - 1];
   b9ce6:	6008      	str	r0, [r1, #0]
        for (size_t i = 0; i < n; i++) {
   b9ce8:	d1f3      	bne.n	b9cd2 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x22>
    }
   b9cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9cee:	b004      	add	sp, #16
   b9cf0:	4770      	bx	lr

000b9cf2 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
   b9cf2:	b084      	sub	sp, #16
   b9cf4:	b538      	push	{r3, r4, r5, lr}
   b9cf6:	ac04      	add	r4, sp, #16
   b9cf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b9cfc:	e9dd 5420 	ldrd	r5, r4, [sp, #128]	; 0x80
        h.resize(n);
   b9d00:	210e      	movs	r1, #14
   b9d02:	4628      	mov	r0, r5
   b9d04:	f7ff ff3e 	bl	b9b84 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
   b9d08:	210e      	movs	r1, #14
   b9d0a:	4620      	mov	r0, r4
   b9d0c:	f7ff ff3a 	bl	b9b84 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
   b9d10:	aa04      	add	r2, sp, #16
        g.resize(n);
   b9d12:	2300      	movs	r3, #0
            h[i] = wav[0][n - i - 1];
   b9d14:	6829      	ldr	r1, [r5, #0]
   b9d16:	6b50      	ldr	r0, [r2, #52]	; 0x34
   b9d18:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
   b9d1a:	3a04      	subs	r2, #4
            h[i] = wav[0][n - i - 1];
   b9d1c:	6008      	str	r0, [r1, #0]
            g[i] = wav[1][n - i - 1];
   b9d1e:	6821      	ldr	r1, [r4, #0]
   b9d20:	6f10      	ldr	r0, [r2, #112]	; 0x70
   b9d22:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
   b9d24:	3304      	adds	r3, #4
   b9d26:	2b38      	cmp	r3, #56	; 0x38
            g[i] = wav[1][n - i - 1];
   b9d28:	6008      	str	r0, [r1, #0]
        for (size_t i = 0; i < n; i++) {
   b9d2a:	d1f3      	bne.n	b9d14 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x22>
    }
   b9d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9d30:	b004      	add	sp, #16
   b9d32:	4770      	bx	lr

000b9d34 <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
   b9d34:	b084      	sub	sp, #16
   b9d36:	b538      	push	{r3, r4, r5, lr}
   b9d38:	ac04      	add	r4, sp, #16
   b9d3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b9d3e:	e9dd 5424 	ldrd	r5, r4, [sp, #144]	; 0x90
        h.resize(n);
   b9d42:	2110      	movs	r1, #16
   b9d44:	4628      	mov	r0, r5
   b9d46:	f7ff ff1d 	bl	b9b84 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
   b9d4a:	2110      	movs	r1, #16
   b9d4c:	4620      	mov	r0, r4
   b9d4e:	f7ff ff19 	bl	b9b84 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
   b9d52:	aa04      	add	r2, sp, #16
        g.resize(n);
   b9d54:	2300      	movs	r3, #0
            h[i] = wav[0][n - i - 1];
   b9d56:	6829      	ldr	r1, [r5, #0]
   b9d58:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
   b9d5a:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
   b9d5c:	3a04      	subs	r2, #4
            h[i] = wav[0][n - i - 1];
   b9d5e:	6008      	str	r0, [r1, #0]
            g[i] = wav[1][n - i - 1];
   b9d60:	6821      	ldr	r1, [r4, #0]
   b9d62:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   b9d66:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
   b9d68:	3304      	adds	r3, #4
   b9d6a:	2b40      	cmp	r3, #64	; 0x40
            g[i] = wav[1][n - i - 1];
   b9d6c:	6008      	str	r0, [r1, #0]
        for (size_t i = 0; i < n; i++) {
   b9d6e:	d1f2      	bne.n	b9d56 <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x22>
    }
   b9d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9d74:	b004      	add	sp, #16
   b9d76:	4770      	bx	lr

000b9d78 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
   b9d78:	b084      	sub	sp, #16
   b9d7a:	b538      	push	{r3, r4, r5, lr}
   b9d7c:	ac04      	add	r4, sp, #16
   b9d7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b9d82:	e9dd 5428 	ldrd	r5, r4, [sp, #160]	; 0xa0
        h.resize(n);
   b9d86:	2112      	movs	r1, #18
   b9d88:	4628      	mov	r0, r5
   b9d8a:	f7ff fefb 	bl	b9b84 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
   b9d8e:	2112      	movs	r1, #18
   b9d90:	4620      	mov	r0, r4
   b9d92:	f7ff fef7 	bl	b9b84 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
   b9d96:	aa04      	add	r2, sp, #16
        g.resize(n);
   b9d98:	2300      	movs	r3, #0
            h[i] = wav[0][n - i - 1];
   b9d9a:	6829      	ldr	r1, [r5, #0]
   b9d9c:	6c50      	ldr	r0, [r2, #68]	; 0x44
   b9d9e:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
   b9da0:	3a04      	subs	r2, #4
            h[i] = wav[0][n - i - 1];
   b9da2:	6008      	str	r0, [r1, #0]
            g[i] = wav[1][n - i - 1];
   b9da4:	6821      	ldr	r1, [r4, #0]
   b9da6:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
   b9daa:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
   b9dac:	3304      	adds	r3, #4
   b9dae:	2b48      	cmp	r3, #72	; 0x48
            g[i] = wav[1][n - i - 1];
   b9db0:	6008      	str	r0, [r1, #0]
        for (size_t i = 0; i < n; i++) {
   b9db2:	d1f2      	bne.n	b9d9a <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x22>
    }
   b9db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9db8:	b004      	add	sp, #16
   b9dba:	4770      	bx	lr

000b9dbc <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
   b9dbc:	b084      	sub	sp, #16
   b9dbe:	b538      	push	{r3, r4, r5, lr}
   b9dc0:	ac04      	add	r4, sp, #16
   b9dc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b9dc6:	e9dd 542c 	ldrd	r5, r4, [sp, #176]	; 0xb0
        h.resize(n);
   b9dca:	2114      	movs	r1, #20
   b9dcc:	4628      	mov	r0, r5
   b9dce:	f7ff fed9 	bl	b9b84 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
   b9dd2:	2114      	movs	r1, #20
   b9dd4:	4620      	mov	r0, r4
   b9dd6:	f7ff fed5 	bl	b9b84 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
   b9dda:	aa04      	add	r2, sp, #16
        g.resize(n);
   b9ddc:	2300      	movs	r3, #0
            h[i] = wav[0][n - i - 1];
   b9dde:	6829      	ldr	r1, [r5, #0]
   b9de0:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
   b9de2:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
   b9de4:	3a04      	subs	r2, #4
            h[i] = wav[0][n - i - 1];
   b9de6:	6008      	str	r0, [r1, #0]
            g[i] = wav[1][n - i - 1];
   b9de8:	6821      	ldr	r1, [r4, #0]
   b9dea:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
   b9dee:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
   b9df0:	3304      	adds	r3, #4
   b9df2:	2b50      	cmp	r3, #80	; 0x50
            g[i] = wav[1][n - i - 1];
   b9df4:	6008      	str	r0, [r1, #0]
        for (size_t i = 0; i < n; i++) {
   b9df6:	d1f2      	bne.n	b9dde <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x22>
    }
   b9df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9dfc:	b004      	add	sp, #16
   b9dfe:	4770      	bx	lr

000b9e00 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_>:
    static void find_filter(const char *wav, fvec &h, fvec &g)
   b9e00:	b570      	push	{r4, r5, r6, lr}
   b9e02:	460c      	mov	r4, r1
   b9e04:	b0a6      	sub	sp, #152	; 0x98
        if (strcmp(wav, "bior1.3") == 0) get_filter<6>(bior1p3, h, g);
   b9e06:	4999      	ldr	r1, [pc, #612]	; (ba06c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x26c>)
    static void find_filter(const char *wav, fvec &h, fvec &g)
   b9e08:	4606      	mov	r6, r0
   b9e0a:	4615      	mov	r5, r2
        if (strcmp(wav, "bior1.3") == 0) get_filter<6>(bior1p3, h, g);
   b9e0c:	f7fa fffc 	bl	b4e08 <strcmp>
   b9e10:	b988      	cbnz	r0, b9e36 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x36>
   b9e12:	4e97      	ldr	r6, [pc, #604]	; (ba070 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x270>)
        else if (strcmp(wav, "bior2.2") == 0) get_filter<6>(bior2p2, h, g);
   b9e14:	e9cd 4508 	strd	r4, r5, [sp, #32]
   b9e18:	f106 0510 	add.w	r5, r6, #16
   b9e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9e1e:	466c      	mov	r4, sp
   b9e20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9e22:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   b9e26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b9e2a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   b9e2e:	f7ff fedc 	bl	b9bea <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
   b9e32:	b026      	add	sp, #152	; 0x98
   b9e34:	bd70      	pop	{r4, r5, r6, pc}
        else if (strcmp(wav, "bior1.5") == 0) get_filter<10>(bior1p5, h, g);
   b9e36:	498f      	ldr	r1, [pc, #572]	; (ba074 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x274>)
   b9e38:	4630      	mov	r0, r6
   b9e3a:	f7fa ffe5 	bl	b4e08 <strcmp>
   b9e3e:	b9a0      	cbnz	r0, b9e6a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x6a>
   b9e40:	4e8d      	ldr	r6, [pc, #564]	; (ba078 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x278>)
        else if (strcmp(wav, "bior2.4") == 0) get_filter<10>(bior2p4, h, g);
   b9e42:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   b9e46:	f106 0510 	add.w	r5, r6, #16
   b9e4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9e4c:	466c      	mov	r4, sp
   b9e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9e50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9e58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   b9e5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b9e60:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   b9e64:	f7ff ff03 	bl	b9c6e <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
   b9e68:	e7e3      	b.n	b9e32 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x32>
        else if (strcmp(wav, "bior2.2") == 0) get_filter<6>(bior2p2, h, g);
   b9e6a:	4984      	ldr	r1, [pc, #528]	; (ba07c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x27c>)
   b9e6c:	4630      	mov	r0, r6
   b9e6e:	f7fa ffcb 	bl	b4e08 <strcmp>
   b9e72:	b908      	cbnz	r0, b9e78 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x78>
   b9e74:	4e82      	ldr	r6, [pc, #520]	; (ba080 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x280>)
   b9e76:	e7cd      	b.n	b9e14 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x14>
        else if (strcmp(wav, "bior2.4") == 0) get_filter<10>(bior2p4, h, g);
   b9e78:	4982      	ldr	r1, [pc, #520]	; (ba084 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x284>)
   b9e7a:	4630      	mov	r0, r6
   b9e7c:	f7fa ffc4 	bl	b4e08 <strcmp>
   b9e80:	b908      	cbnz	r0, b9e86 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x86>
   b9e82:	4e81      	ldr	r6, [pc, #516]	; (ba088 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x288>)
   b9e84:	e7dd      	b.n	b9e42 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x42>
        else if (strcmp(wav, "bior2.6") == 0) get_filter<14>(bior2p6, h, g);
   b9e86:	4981      	ldr	r1, [pc, #516]	; (ba08c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x28c>)
   b9e88:	4630      	mov	r0, r6
   b9e8a:	f7fa ffbd 	bl	b4e08 <strcmp>
   b9e8e:	b968      	cbnz	r0, b9eac <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xac>
   b9e90:	4e7f      	ldr	r6, [pc, #508]	; (ba090 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x290>)
        else if (strcmp(wav, "sym7") == 0) get_filter<14>(sym7, h, g);
   b9e92:	f106 0110 	add.w	r1, r6, #16
   b9e96:	2260      	movs	r2, #96	; 0x60
   b9e98:	4668      	mov	r0, sp
   b9e9a:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
   b9e9e:	f009 f98f 	bl	c31c0 <memcpy>
   b9ea2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   b9ea6:	f7ff ff24 	bl	b9cf2 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
   b9eaa:	e7c2      	b.n	b9e32 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x32>
        else if (strcmp(wav, "bior2.8") == 0) get_filter<18>(bior2p8, h, g);
   b9eac:	4979      	ldr	r1, [pc, #484]	; (ba094 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x294>)
   b9eae:	4630      	mov	r0, r6
   b9eb0:	f7fa ffaa 	bl	b4e08 <strcmp>
   b9eb4:	b968      	cbnz	r0, b9ed2 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xd2>
   b9eb6:	4e78      	ldr	r6, [pc, #480]	; (ba098 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x298>)
        else if (strcmp(wav, "sym9") == 0) get_filter<18>(sym9, h, g);
   b9eb8:	f106 0110 	add.w	r1, r6, #16
   b9ebc:	2280      	movs	r2, #128	; 0x80
   b9ebe:	4668      	mov	r0, sp
   b9ec0:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
   b9ec4:	f009 f97c 	bl	c31c0 <memcpy>
   b9ec8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   b9ecc:	f7ff ff54 	bl	b9d78 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
   b9ed0:	e7af      	b.n	b9e32 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x32>
        else if (strcmp(wav, "bior3.1") == 0) get_filter<4>(bior3p1, h, g);
   b9ed2:	4972      	ldr	r1, [pc, #456]	; (ba09c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x29c>)
   b9ed4:	4630      	mov	r0, r6
   b9ed6:	f7fa ff97 	bl	b4e08 <strcmp>
   b9eda:	b960      	cbnz	r0, b9ef6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xf6>
   b9edc:	4e70      	ldr	r6, [pc, #448]	; (ba0a0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2a0>)
        else if (strcmp(wav, "db2") == 0) get_filter<4>(db2, h, g);
   b9ede:	f106 0310 	add.w	r3, r6, #16
   b9ee2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b9ee4:	e9cd 4504 	strd	r4, r5, [sp, #16]
   b9ee8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b9eec:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   b9ef0:	f7ff fe5a 	bl	b9ba8 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
   b9ef4:	e79d      	b.n	b9e32 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x32>
        else if (strcmp(wav, "bior3.3") == 0) get_filter<8>(bior3p3, h, g);
   b9ef6:	496b      	ldr	r1, [pc, #428]	; (ba0a4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2a4>)
   b9ef8:	4630      	mov	r0, r6
   b9efa:	f7fa ff85 	bl	b4e08 <strcmp>
   b9efe:	b990      	cbnz	r0, b9f26 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x126>
   b9f00:	4e69      	ldr	r6, [pc, #420]	; (ba0a8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2a8>)
        else if (strcmp(wav, "sym4") == 0) get_filter<8>(sym4, h, g);
   b9f02:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
   b9f06:	f106 0510 	add.w	r5, r6, #16
   b9f0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9f0c:	466c      	mov	r4, sp
   b9f0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9f10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9f12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9f14:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   b9f18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b9f1c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   b9f20:	f7ff fe84 	bl	b9c2c <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
   b9f24:	e785      	b.n	b9e32 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x32>
        else if (strcmp(wav, "bior3.5") == 0) get_filter<12>(bior3p5, h, g);
   b9f26:	4961      	ldr	r1, [pc, #388]	; (ba0ac <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2ac>)
   b9f28:	4630      	mov	r0, r6
   b9f2a:	f7fa ff6d 	bl	b4e08 <strcmp>
   b9f2e:	b968      	cbnz	r0, b9f4c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x14c>
   b9f30:	4e5f      	ldr	r6, [pc, #380]	; (ba0b0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2b0>)
        else if (strcmp(wav, "sym6") == 0) get_filter<12>(sym6, h, g);
   b9f32:	f106 0110 	add.w	r1, r6, #16
   b9f36:	2250      	movs	r2, #80	; 0x50
   b9f38:	4668      	mov	r0, sp
   b9f3a:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
   b9f3e:	f009 f93f 	bl	c31c0 <memcpy>
   b9f42:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   b9f46:	f7ff feb3 	bl	b9cb0 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
   b9f4a:	e772      	b.n	b9e32 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x32>
        else if (strcmp(wav, "bior3.7") == 0) get_filter<16>(bior3p7, h, g);
   b9f4c:	4959      	ldr	r1, [pc, #356]	; (ba0b4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2b4>)
   b9f4e:	4630      	mov	r0, r6
   b9f50:	f7fa ff5a 	bl	b4e08 <strcmp>
   b9f54:	b968      	cbnz	r0, b9f72 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x172>
   b9f56:	4e58      	ldr	r6, [pc, #352]	; (ba0b8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2b8>)
        else if (strcmp(wav, "sym8") == 0) get_filter<16>(sym8, h, g);
   b9f58:	f106 0110 	add.w	r1, r6, #16
   b9f5c:	2270      	movs	r2, #112	; 0x70
   b9f5e:	4668      	mov	r0, sp
   b9f60:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
   b9f64:	f009 f92c 	bl	c31c0 <memcpy>
   b9f68:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   b9f6c:	f7ff fee2 	bl	b9d34 <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
   b9f70:	e75f      	b.n	b9e32 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x32>
        else if (strcmp(wav, "bior3.9") == 0) get_filter<20>(bior3p9, h, g);
   b9f72:	4952      	ldr	r1, [pc, #328]	; (ba0bc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2bc>)
   b9f74:	4630      	mov	r0, r6
   b9f76:	f7fa ff47 	bl	b4e08 <strcmp>
   b9f7a:	b968      	cbnz	r0, b9f98 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x198>
   b9f7c:	4e50      	ldr	r6, [pc, #320]	; (ba0c0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2c0>)
        else if (strcmp(wav, "sym10") == 0) get_filter<20>(sym10, h, g);
   b9f7e:	f106 0110 	add.w	r1, r6, #16
   b9f82:	2290      	movs	r2, #144	; 0x90
   b9f84:	4668      	mov	r0, sp
   b9f86:	e9cd 4524 	strd	r4, r5, [sp, #144]	; 0x90
   b9f8a:	f009 f919 	bl	c31c0 <memcpy>
   b9f8e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   b9f92:	f7ff ff13 	bl	b9dbc <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
   b9f96:	e74c      	b.n	b9e32 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x32>
        else if (strcmp(wav, "bior4.4") == 0) get_filter<10>(bior4p4, h, g);
   b9f98:	494a      	ldr	r1, [pc, #296]	; (ba0c4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2c4>)
   b9f9a:	4630      	mov	r0, r6
   b9f9c:	f7fa ff34 	bl	b4e08 <strcmp>
   b9fa0:	b908      	cbnz	r0, b9fa6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x1a6>
   b9fa2:	4e49      	ldr	r6, [pc, #292]	; (ba0c8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2c8>)
   b9fa4:	e74d      	b.n	b9e42 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x42>
        else if (strcmp(wav, "bior5.5") == 0) get_filter<12>(bior5p5, h, g);
   b9fa6:	4949      	ldr	r1, [pc, #292]	; (ba0cc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2cc>)
   b9fa8:	4630      	mov	r0, r6
   b9faa:	f7fa ff2d 	bl	b4e08 <strcmp>
   b9fae:	b908      	cbnz	r0, b9fb4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x1b4>
   b9fb0:	4e47      	ldr	r6, [pc, #284]	; (ba0d0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2d0>)
   b9fb2:	e7be      	b.n	b9f32 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x132>
        else if (strcmp(wav, "bior6.8") == 0) get_filter<18>(bior6p8, h, g);
   b9fb4:	4947      	ldr	r1, [pc, #284]	; (ba0d4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2d4>)
   b9fb6:	4630      	mov	r0, r6
   b9fb8:	f7fa ff26 	bl	b4e08 <strcmp>
   b9fbc:	b908      	cbnz	r0, b9fc2 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x1c2>
   b9fbe:	4e46      	ldr	r6, [pc, #280]	; (ba0d8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2d8>)
   b9fc0:	e77a      	b.n	b9eb8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb8>
        else if (strcmp(wav, "coif1") == 0) get_filter<6>(coif1, h, g);
   b9fc2:	4946      	ldr	r1, [pc, #280]	; (ba0dc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2dc>)
   b9fc4:	4630      	mov	r0, r6
   b9fc6:	f7fa ff1f 	bl	b4e08 <strcmp>
   b9fca:	b908      	cbnz	r0, b9fd0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x1d0>
   b9fcc:	4e44      	ldr	r6, [pc, #272]	; (ba0e0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2e0>)
   b9fce:	e721      	b.n	b9e14 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x14>
        else if (strcmp(wav, "coif2") == 0) get_filter<12>(coif2, h, g);
   b9fd0:	4944      	ldr	r1, [pc, #272]	; (ba0e4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2e4>)
   b9fd2:	4630      	mov	r0, r6
   b9fd4:	f7fa ff18 	bl	b4e08 <strcmp>
   b9fd8:	b908      	cbnz	r0, b9fde <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x1de>
   b9fda:	4e43      	ldr	r6, [pc, #268]	; (ba0e8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2e8>)
   b9fdc:	e7a9      	b.n	b9f32 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x132>
        else if (strcmp(wav, "coif3") == 0) get_filter<18>(coif3, h, g);
   b9fde:	4943      	ldr	r1, [pc, #268]	; (ba0ec <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2ec>)
   b9fe0:	4630      	mov	r0, r6
   b9fe2:	f7fa ff11 	bl	b4e08 <strcmp>
   b9fe6:	b908      	cbnz	r0, b9fec <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x1ec>
   b9fe8:	4e41      	ldr	r6, [pc, #260]	; (ba0f0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2f0>)
   b9fea:	e765      	b.n	b9eb8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb8>
        else if (strcmp(wav, "db2") == 0) get_filter<4>(db2, h, g);
   b9fec:	4941      	ldr	r1, [pc, #260]	; (ba0f4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2f4>)
   b9fee:	4630      	mov	r0, r6
   b9ff0:	f7fa ff0a 	bl	b4e08 <strcmp>
   b9ff4:	b908      	cbnz	r0, b9ffa <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x1fa>
   b9ff6:	4e40      	ldr	r6, [pc, #256]	; (ba0f8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2f8>)
   b9ff8:	e771      	b.n	b9ede <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xde>
        else if (strcmp(wav, "db3") == 0) get_filter<6>(db3, h, g);
   b9ffa:	4940      	ldr	r1, [pc, #256]	; (ba0fc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2fc>)
   b9ffc:	4630      	mov	r0, r6
   b9ffe:	f7fa ff03 	bl	b4e08 <strcmp>
   ba002:	b908      	cbnz	r0, ba008 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x208>
   ba004:	4e3e      	ldr	r6, [pc, #248]	; (ba100 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x300>)
   ba006:	e705      	b.n	b9e14 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x14>
        else if (strcmp(wav, "db4") == 0) get_filter<8>(db4, h, g);
   ba008:	493e      	ldr	r1, [pc, #248]	; (ba104 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x304>)
   ba00a:	4630      	mov	r0, r6
   ba00c:	f7fa fefc 	bl	b4e08 <strcmp>
   ba010:	b908      	cbnz	r0, ba016 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x216>
   ba012:	4e3d      	ldr	r6, [pc, #244]	; (ba108 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x308>)
   ba014:	e775      	b.n	b9f02 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x102>
        else if (strcmp(wav, "db5") == 0) get_filter<10>(db5, h, g);
   ba016:	493d      	ldr	r1, [pc, #244]	; (ba10c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x30c>)
   ba018:	4630      	mov	r0, r6
   ba01a:	f7fa fef5 	bl	b4e08 <strcmp>
   ba01e:	b908      	cbnz	r0, ba024 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x224>
   ba020:	4e3b      	ldr	r6, [pc, #236]	; (ba110 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x310>)
   ba022:	e70e      	b.n	b9e42 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x42>
        else if (strcmp(wav, "db6") == 0) get_filter<12>(db6, h, g);
   ba024:	493b      	ldr	r1, [pc, #236]	; (ba114 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x314>)
   ba026:	4630      	mov	r0, r6
   ba028:	f7fa feee 	bl	b4e08 <strcmp>
   ba02c:	b908      	cbnz	r0, ba032 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x232>
   ba02e:	4e3a      	ldr	r6, [pc, #232]	; (ba118 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x318>)
   ba030:	e77f      	b.n	b9f32 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x132>
        else if (strcmp(wav, "db7") == 0) get_filter<14>(db7, h, g);
   ba032:	493a      	ldr	r1, [pc, #232]	; (ba11c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x31c>)
   ba034:	4630      	mov	r0, r6
   ba036:	f7fa fee7 	bl	b4e08 <strcmp>
   ba03a:	b908      	cbnz	r0, ba040 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x240>
   ba03c:	4e38      	ldr	r6, [pc, #224]	; (ba120 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x320>)
   ba03e:	e728      	b.n	b9e92 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x92>
        else if (strcmp(wav, "db8") == 0) get_filter<16>(db8, h, g);
   ba040:	4938      	ldr	r1, [pc, #224]	; (ba124 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x324>)
   ba042:	4630      	mov	r0, r6
   ba044:	f7fa fee0 	bl	b4e08 <strcmp>
   ba048:	b908      	cbnz	r0, ba04e <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x24e>
   ba04a:	4e37      	ldr	r6, [pc, #220]	; (ba128 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x328>)
   ba04c:	e784      	b.n	b9f58 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x158>
        else if (strcmp(wav, "db9") == 0) get_filter<18>(db9, h, g);
   ba04e:	4937      	ldr	r1, [pc, #220]	; (ba12c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x32c>)
   ba050:	4630      	mov	r0, r6
   ba052:	f7fa fed9 	bl	b4e08 <strcmp>
   ba056:	b908      	cbnz	r0, ba05c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x25c>
   ba058:	4e35      	ldr	r6, [pc, #212]	; (ba130 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x330>)
   ba05a:	e72d      	b.n	b9eb8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb8>
        else if (strcmp(wav, "db10") == 0) get_filter<20>(db10, h, g);
   ba05c:	4935      	ldr	r1, [pc, #212]	; (ba134 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x334>)
   ba05e:	4630      	mov	r0, r6
   ba060:	f7fa fed2 	bl	b4e08 <strcmp>
   ba064:	2800      	cmp	r0, #0
   ba066:	d169      	bne.n	ba13c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x33c>
   ba068:	4e33      	ldr	r6, [pc, #204]	; (ba138 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x338>)
   ba06a:	e788      	b.n	b9f7e <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x17e>
   ba06c:	000c5af8 	.word	0x000c5af8
   ba070:	000c6920 	.word	0x000c6920
   ba074:	000c5b00 	.word	0x000c5b00
   ba078:	000c6950 	.word	0x000c6950
   ba07c:	000c5b08 	.word	0x000c5b08
   ba080:	000c69a0 	.word	0x000c69a0
   ba084:	000c5b10 	.word	0x000c5b10
   ba088:	000c69d0 	.word	0x000c69d0
   ba08c:	000c5b18 	.word	0x000c5b18
   ba090:	000c6a20 	.word	0x000c6a20
   ba094:	000c5b20 	.word	0x000c5b20
   ba098:	000c6a90 	.word	0x000c6a90
   ba09c:	000c5b28 	.word	0x000c5b28
   ba0a0:	000c6b20 	.word	0x000c6b20
   ba0a4:	000c5b30 	.word	0x000c5b30
   ba0a8:	000c6b40 	.word	0x000c6b40
   ba0ac:	000c5b38 	.word	0x000c5b38
   ba0b0:	000c6b80 	.word	0x000c6b80
   ba0b4:	000c5b40 	.word	0x000c5b40
   ba0b8:	000c6be0 	.word	0x000c6be0
   ba0bc:	000c5b48 	.word	0x000c5b48
   ba0c0:	000c6c60 	.word	0x000c6c60
   ba0c4:	000c5b50 	.word	0x000c5b50
   ba0c8:	000c6d00 	.word	0x000c6d00
   ba0cc:	000c5b58 	.word	0x000c5b58
   ba0d0:	000c6d50 	.word	0x000c6d50
   ba0d4:	000c5b60 	.word	0x000c5b60
   ba0d8:	000c6db0 	.word	0x000c6db0
   ba0dc:	000c5b68 	.word	0x000c5b68
   ba0e0:	000c6760 	.word	0x000c6760
   ba0e4:	000c5b6e 	.word	0x000c5b6e
   ba0e8:	000c6790 	.word	0x000c6790
   ba0ec:	000c5b74 	.word	0x000c5b74
   ba0f0:	000c67f0 	.word	0x000c67f0
   ba0f4:	000c5b7a 	.word	0x000c5b7a
   ba0f8:	000c6190 	.word	0x000c6190
   ba0fc:	000c5b7e 	.word	0x000c5b7e
   ba100:	000c61b0 	.word	0x000c61b0
   ba104:	000c5b82 	.word	0x000c5b82
   ba108:	000c61e0 	.word	0x000c61e0
   ba10c:	000c5b86 	.word	0x000c5b86
   ba110:	000c6220 	.word	0x000c6220
   ba114:	000c5b8a 	.word	0x000c5b8a
   ba118:	000c6270 	.word	0x000c6270
   ba11c:	000c5b8e 	.word	0x000c5b8e
   ba120:	000c62d0 	.word	0x000c62d0
   ba124:	000c5b92 	.word	0x000c5b92
   ba128:	000c6340 	.word	0x000c6340
   ba12c:	000c5b96 	.word	0x000c5b96
   ba130:	000c63c0 	.word	0x000c63c0
   ba134:	000c5b9a 	.word	0x000c5b9a
   ba138:	000c6450 	.word	0x000c6450
        else if (strcmp(wav, "haar") == 0) get_filter<2>(haar, h, g);
   ba13c:	495f      	ldr	r1, [pc, #380]	; (ba2bc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4bc>)
   ba13e:	4630      	mov	r0, r6
   ba140:	f7fa fe62 	bl	b4e08 <strcmp>
   ba144:	b990      	cbnz	r0, ba16c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x36c>
        h.resize(n);
   ba146:	2102      	movs	r1, #2
   ba148:	4620      	mov	r0, r4
   ba14a:	f7ff fd1b 	bl	b9b84 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
   ba14e:	2102      	movs	r1, #2
   ba150:	4628      	mov	r0, r5
   ba152:	f7ff fd17 	bl	b9b84 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
	return *(this->_M_impl._M_start + __n);
   ba156:	6822      	ldr	r2, [r4, #0]
            h[i] = wav[0][n - i - 1];
   ba158:	4b59      	ldr	r3, [pc, #356]	; (ba2c0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4c0>)
   ba15a:	6013      	str	r3, [r2, #0]
   ba15c:	682a      	ldr	r2, [r5, #0]
            g[i] = wav[1][n - i - 1];
   ba15e:	6013      	str	r3, [r2, #0]
   ba160:	6822      	ldr	r2, [r4, #0]
            h[i] = wav[0][n - i - 1];
   ba162:	6053      	str	r3, [r2, #4]
   ba164:	682b      	ldr	r3, [r5, #0]
            g[i] = wav[1][n - i - 1];
   ba166:	4a57      	ldr	r2, [pc, #348]	; (ba2c4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4c4>)
   ba168:	605a      	str	r2, [r3, #4]
        for (size_t i = 0; i < n; i++) {
   ba16a:	e662      	b.n	b9e32 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x32>
        else if (strcmp(wav, "rbio1.3") == 0) get_filter<6>(rbio1p3, h, g);
   ba16c:	4956      	ldr	r1, [pc, #344]	; (ba2c8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4c8>)
   ba16e:	4630      	mov	r0, r6
   ba170:	f7fa fe4a 	bl	b4e08 <strcmp>
   ba174:	b908      	cbnz	r0, ba17a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x37a>
   ba176:	4e55      	ldr	r6, [pc, #340]	; (ba2cc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4cc>)
   ba178:	e64c      	b.n	b9e14 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x14>
        else if (strcmp(wav, "rbio1.5") == 0) get_filter<10>(rbio1p5, h, g);
   ba17a:	4955      	ldr	r1, [pc, #340]	; (ba2d0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4d0>)
   ba17c:	4630      	mov	r0, r6
   ba17e:	f7fa fe43 	bl	b4e08 <strcmp>
   ba182:	b908      	cbnz	r0, ba188 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x388>
   ba184:	4e53      	ldr	r6, [pc, #332]	; (ba2d4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4d4>)
   ba186:	e65c      	b.n	b9e42 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x42>
        else if (strcmp(wav, "rbio2.2") == 0) get_filter<6>(rbio2p2, h, g);
   ba188:	4953      	ldr	r1, [pc, #332]	; (ba2d8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4d8>)
   ba18a:	4630      	mov	r0, r6
   ba18c:	f7fa fe3c 	bl	b4e08 <strcmp>
   ba190:	b908      	cbnz	r0, ba196 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x396>
   ba192:	4e52      	ldr	r6, [pc, #328]	; (ba2dc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4dc>)
   ba194:	e63e      	b.n	b9e14 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x14>
        else if (strcmp(wav, "rbio2.4") == 0) get_filter<10>(rbio2p4, h, g);
   ba196:	4952      	ldr	r1, [pc, #328]	; (ba2e0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4e0>)
   ba198:	4630      	mov	r0, r6
   ba19a:	f7fa fe35 	bl	b4e08 <strcmp>
   ba19e:	b908      	cbnz	r0, ba1a4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x3a4>
   ba1a0:	4e50      	ldr	r6, [pc, #320]	; (ba2e4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4e4>)
   ba1a2:	e64e      	b.n	b9e42 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x42>
        else if (strcmp(wav, "rbio2.6") == 0) get_filter<14>(rbio2p6, h, g);
   ba1a4:	4950      	ldr	r1, [pc, #320]	; (ba2e8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4e8>)
   ba1a6:	4630      	mov	r0, r6
   ba1a8:	f7fa fe2e 	bl	b4e08 <strcmp>
   ba1ac:	b908      	cbnz	r0, ba1b2 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x3b2>
   ba1ae:	4e4f      	ldr	r6, [pc, #316]	; (ba2ec <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4ec>)
   ba1b0:	e66f      	b.n	b9e92 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x92>
        else if (strcmp(wav, "rbio2.8") == 0) get_filter<18>(rbio2p8, h, g);
   ba1b2:	494f      	ldr	r1, [pc, #316]	; (ba2f0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4f0>)
   ba1b4:	4630      	mov	r0, r6
   ba1b6:	f7fa fe27 	bl	b4e08 <strcmp>
   ba1ba:	b908      	cbnz	r0, ba1c0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x3c0>
   ba1bc:	4e4d      	ldr	r6, [pc, #308]	; (ba2f4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4f4>)
   ba1be:	e67b      	b.n	b9eb8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb8>
        else if (strcmp(wav, "rbio3.1") == 0) get_filter<4>(rbio3p1, h, g);
   ba1c0:	494d      	ldr	r1, [pc, #308]	; (ba2f8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4f8>)
   ba1c2:	4630      	mov	r0, r6
   ba1c4:	f7fa fe20 	bl	b4e08 <strcmp>
   ba1c8:	b908      	cbnz	r0, ba1ce <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x3ce>
   ba1ca:	4e4c      	ldr	r6, [pc, #304]	; (ba2fc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4fc>)
   ba1cc:	e687      	b.n	b9ede <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xde>
        else if (strcmp(wav, "rbio3.3") == 0) get_filter<8>(rbio3p3, h, g);
   ba1ce:	494c      	ldr	r1, [pc, #304]	; (ba300 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x500>)
   ba1d0:	4630      	mov	r0, r6
   ba1d2:	f7fa fe19 	bl	b4e08 <strcmp>
   ba1d6:	b908      	cbnz	r0, ba1dc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x3dc>
   ba1d8:	4e4a      	ldr	r6, [pc, #296]	; (ba304 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x504>)
   ba1da:	e692      	b.n	b9f02 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x102>
        else if (strcmp(wav, "rbio3.5") == 0) get_filter<12>(rbio3p5, h, g);
   ba1dc:	494a      	ldr	r1, [pc, #296]	; (ba308 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x508>)
   ba1de:	4630      	mov	r0, r6
   ba1e0:	f7fa fe12 	bl	b4e08 <strcmp>
   ba1e4:	b908      	cbnz	r0, ba1ea <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x3ea>
   ba1e6:	4e49      	ldr	r6, [pc, #292]	; (ba30c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x50c>)
   ba1e8:	e6a3      	b.n	b9f32 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x132>
        else if (strcmp(wav, "rbio3.7") == 0) get_filter<16>(rbio3p7, h, g);
   ba1ea:	4949      	ldr	r1, [pc, #292]	; (ba310 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x510>)
   ba1ec:	4630      	mov	r0, r6
   ba1ee:	f7fa fe0b 	bl	b4e08 <strcmp>
   ba1f2:	b908      	cbnz	r0, ba1f8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x3f8>
   ba1f4:	4e47      	ldr	r6, [pc, #284]	; (ba314 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x514>)
   ba1f6:	e6af      	b.n	b9f58 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x158>
        else if (strcmp(wav, "rbio3.9") == 0) get_filter<20>(rbio3p9, h, g);
   ba1f8:	4947      	ldr	r1, [pc, #284]	; (ba318 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x518>)
   ba1fa:	4630      	mov	r0, r6
   ba1fc:	f7fa fe04 	bl	b4e08 <strcmp>
   ba200:	b908      	cbnz	r0, ba206 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x406>
   ba202:	4e46      	ldr	r6, [pc, #280]	; (ba31c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x51c>)
   ba204:	e6bb      	b.n	b9f7e <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x17e>
        else if (strcmp(wav, "rbio4.4") == 0) get_filter<10>(rbio4p4, h, g);
   ba206:	4946      	ldr	r1, [pc, #280]	; (ba320 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x520>)
   ba208:	4630      	mov	r0, r6
   ba20a:	f7fa fdfd 	bl	b4e08 <strcmp>
   ba20e:	b908      	cbnz	r0, ba214 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x414>
   ba210:	4e44      	ldr	r6, [pc, #272]	; (ba324 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x524>)
   ba212:	e616      	b.n	b9e42 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x42>
        else if (strcmp(wav, "rbio5.5") == 0) get_filter<12>(rbio5p5, h, g);
   ba214:	4944      	ldr	r1, [pc, #272]	; (ba328 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x528>)
   ba216:	4630      	mov	r0, r6
   ba218:	f7fa fdf6 	bl	b4e08 <strcmp>
   ba21c:	b908      	cbnz	r0, ba222 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x422>
   ba21e:	4e43      	ldr	r6, [pc, #268]	; (ba32c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x52c>)
   ba220:	e687      	b.n	b9f32 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x132>
        else if (strcmp(wav, "rbio6.8") == 0) get_filter<18>(rbio6p8, h, g);
   ba222:	4943      	ldr	r1, [pc, #268]	; (ba330 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x530>)
   ba224:	4630      	mov	r0, r6
   ba226:	f7fa fdef 	bl	b4e08 <strcmp>
   ba22a:	b908      	cbnz	r0, ba230 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x430>
   ba22c:	4e41      	ldr	r6, [pc, #260]	; (ba334 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x534>)
   ba22e:	e643      	b.n	b9eb8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb8>
        else if (strcmp(wav, "sym2") == 0) get_filter<4>(sym2, h, g);
   ba230:	4941      	ldr	r1, [pc, #260]	; (ba338 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x538>)
   ba232:	4630      	mov	r0, r6
   ba234:	f7fa fde8 	bl	b4e08 <strcmp>
   ba238:	b908      	cbnz	r0, ba23e <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x43e>
   ba23a:	4e40      	ldr	r6, [pc, #256]	; (ba33c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x53c>)
   ba23c:	e64f      	b.n	b9ede <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xde>
        else if (strcmp(wav, "sym3") == 0) get_filter<6>(sym3, h, g);
   ba23e:	4940      	ldr	r1, [pc, #256]	; (ba340 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x540>)
   ba240:	4630      	mov	r0, r6
   ba242:	f7fa fde1 	bl	b4e08 <strcmp>
   ba246:	b908      	cbnz	r0, ba24c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x44c>
   ba248:	4e3e      	ldr	r6, [pc, #248]	; (ba344 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x544>)
   ba24a:	e5e3      	b.n	b9e14 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x14>
        else if (strcmp(wav, "sym4") == 0) get_filter<8>(sym4, h, g);
   ba24c:	493e      	ldr	r1, [pc, #248]	; (ba348 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x548>)
   ba24e:	4630      	mov	r0, r6
   ba250:	f7fa fdda 	bl	b4e08 <strcmp>
   ba254:	b908      	cbnz	r0, ba25a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x45a>
   ba256:	4e3d      	ldr	r6, [pc, #244]	; (ba34c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x54c>)
   ba258:	e653      	b.n	b9f02 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x102>
        else if (strcmp(wav, "sym5") == 0) get_filter<10>(sym5, h, g);
   ba25a:	493d      	ldr	r1, [pc, #244]	; (ba350 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x550>)
   ba25c:	4630      	mov	r0, r6
   ba25e:	f7fa fdd3 	bl	b4e08 <strcmp>
   ba262:	b908      	cbnz	r0, ba268 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x468>
   ba264:	4e3b      	ldr	r6, [pc, #236]	; (ba354 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x554>)
   ba266:	e5ec      	b.n	b9e42 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x42>
        else if (strcmp(wav, "sym6") == 0) get_filter<12>(sym6, h, g);
   ba268:	493b      	ldr	r1, [pc, #236]	; (ba358 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x558>)
   ba26a:	4630      	mov	r0, r6
   ba26c:	f7fa fdcc 	bl	b4e08 <strcmp>
   ba270:	b908      	cbnz	r0, ba276 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x476>
   ba272:	4e3a      	ldr	r6, [pc, #232]	; (ba35c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x55c>)
   ba274:	e65d      	b.n	b9f32 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x132>
        else if (strcmp(wav, "sym7") == 0) get_filter<14>(sym7, h, g);
   ba276:	493a      	ldr	r1, [pc, #232]	; (ba360 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x560>)
   ba278:	4630      	mov	r0, r6
   ba27a:	f7fa fdc5 	bl	b4e08 <strcmp>
   ba27e:	b908      	cbnz	r0, ba284 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x484>
   ba280:	4e38      	ldr	r6, [pc, #224]	; (ba364 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x564>)
   ba282:	e606      	b.n	b9e92 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x92>
        else if (strcmp(wav, "sym8") == 0) get_filter<16>(sym8, h, g);
   ba284:	4938      	ldr	r1, [pc, #224]	; (ba368 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x568>)
   ba286:	4630      	mov	r0, r6
   ba288:	f7fa fdbe 	bl	b4e08 <strcmp>
   ba28c:	b908      	cbnz	r0, ba292 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x492>
   ba28e:	4e37      	ldr	r6, [pc, #220]	; (ba36c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x56c>)
   ba290:	e662      	b.n	b9f58 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x158>
        else if (strcmp(wav, "sym9") == 0) get_filter<18>(sym9, h, g);
   ba292:	4937      	ldr	r1, [pc, #220]	; (ba370 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x570>)
   ba294:	4630      	mov	r0, r6
   ba296:	f7fa fdb7 	bl	b4e08 <strcmp>
   ba29a:	b908      	cbnz	r0, ba2a0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4a0>
   ba29c:	4e35      	ldr	r6, [pc, #212]	; (ba374 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x574>)
   ba29e:	e60b      	b.n	b9eb8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb8>
        else if (strcmp(wav, "sym10") == 0) get_filter<20>(sym10, h, g);
   ba2a0:	4935      	ldr	r1, [pc, #212]	; (ba378 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x578>)
   ba2a2:	4630      	mov	r0, r6
   ba2a4:	f7fa fdb0 	bl	b4e08 <strcmp>
   ba2a8:	b908      	cbnz	r0, ba2ae <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4ae>
   ba2aa:	4e34      	ldr	r6, [pc, #208]	; (ba37c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x57c>)
   ba2ac:	e667      	b.n	b9f7e <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x17e>
        else assert(0); // wavelet not in the list
   ba2ae:	4b34      	ldr	r3, [pc, #208]	; (ba380 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x580>)
   ba2b0:	4a34      	ldr	r2, [pc, #208]	; (ba384 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x584>)
   ba2b2:	4835      	ldr	r0, [pc, #212]	; (ba388 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x588>)
   ba2b4:	218c      	movs	r1, #140	; 0x8c
   ba2b6:	f004 fec3 	bl	bf040 <__assert_func>
   ba2ba:	bf00      	nop
   ba2bc:	000c5b9f 	.word	0x000c5b9f
   ba2c0:	3f3504f3 	.word	0x3f3504f3
   ba2c4:	bf3504f3 	.word	0xbf3504f3
   ba2c8:	000c5ba4 	.word	0x000c5ba4
   ba2cc:	000c6e40 	.word	0x000c6e40
   ba2d0:	000c5bac 	.word	0x000c5bac
   ba2d4:	000c6e70 	.word	0x000c6e70
   ba2d8:	000c5bb4 	.word	0x000c5bb4
   ba2dc:	000c6ec0 	.word	0x000c6ec0
   ba2e0:	000c5bbc 	.word	0x000c5bbc
   ba2e4:	000c6ef0 	.word	0x000c6ef0
   ba2e8:	000c5bc4 	.word	0x000c5bc4
   ba2ec:	000c6f40 	.word	0x000c6f40
   ba2f0:	000c5bcc 	.word	0x000c5bcc
   ba2f4:	000c6fb0 	.word	0x000c6fb0
   ba2f8:	000c5bd4 	.word	0x000c5bd4
   ba2fc:	000c7040 	.word	0x000c7040
   ba300:	000c5bdc 	.word	0x000c5bdc
   ba304:	000c7060 	.word	0x000c7060
   ba308:	000c5be4 	.word	0x000c5be4
   ba30c:	000c70a0 	.word	0x000c70a0
   ba310:	000c5bec 	.word	0x000c5bec
   ba314:	000c7100 	.word	0x000c7100
   ba318:	000c5bf4 	.word	0x000c5bf4
   ba31c:	000c7180 	.word	0x000c7180
   ba320:	000c5bfc 	.word	0x000c5bfc
   ba324:	000c7220 	.word	0x000c7220
   ba328:	000c5c04 	.word	0x000c5c04
   ba32c:	000c7270 	.word	0x000c7270
   ba330:	000c5c0c 	.word	0x000c5c0c
   ba334:	000c72d0 	.word	0x000c72d0
   ba338:	000c5c14 	.word	0x000c5c14
   ba33c:	000c6190 	.word	0x000c6190
   ba340:	000c5c19 	.word	0x000c5c19
   ba344:	000c61b0 	.word	0x000c61b0
   ba348:	000c5c1e 	.word	0x000c5c1e
   ba34c:	000c64f0 	.word	0x000c64f0
   ba350:	000c5c23 	.word	0x000c5c23
   ba354:	000c6530 	.word	0x000c6530
   ba358:	000c5c28 	.word	0x000c5c28
   ba35c:	000c6580 	.word	0x000c6580
   ba360:	000c5c2d 	.word	0x000c5c2d
   ba364:	000c65e0 	.word	0x000c65e0
   ba368:	000c5c32 	.word	0x000c5c32
   ba36c:	000c6650 	.word	0x000c6650
   ba370:	000c5c37 	.word	0x000c5c37
   ba374:	000c66d0 	.word	0x000c66d0
   ba378:	000c5c3c 	.word	0x000c5c3c
   ba37c:	000c6880 	.word	0x000c6880
   ba380:	000c5244 	.word	0x000c5244
   ba384:	000c5c42 	.word	0x000c5c42
   ba388:	000c5ca8 	.word	0x000c5ca8

000ba38c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_>:
        }
        features.push_back(mc / (float)y.size());
    }

    static void
    dwt(const float *x, size_t nx, const float *h, const float *g, size_t nh, fvec &a, fvec &d)
   ba38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba390:	b087      	sub	sp, #28
   ba392:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
   ba396:	469a      	mov	sl, r3
    {
        assert(nh <= 20 && nh > 0 && nx > 0);
   ba398:	1e63      	subs	r3, r4, #1
   ba39a:	2b13      	cmp	r3, #19
    dwt(const float *x, size_t nx, const float *h, const float *g, size_t nh, fvec &a, fvec &d)
   ba39c:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   ba3a0:	4683      	mov	fp, r0
   ba3a2:	460e      	mov	r6, r1
   ba3a4:	4691      	mov	r9, r2
        assert(nh <= 20 && nh > 0 && nx > 0);
   ba3a6:	d800      	bhi.n	ba3aa <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1e>
   ba3a8:	b929      	cbnz	r1, ba3b6 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x2a>
   ba3aa:	4b45      	ldr	r3, [pc, #276]	; (ba4c0 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x134>)
   ba3ac:	4a45      	ldr	r2, [pc, #276]	; (ba4c4 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x138>)
   ba3ae:	4846      	ldr	r0, [pc, #280]	; (ba4c8 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x13c>)
   ba3b0:	21d3      	movs	r1, #211	; 0xd3
   ba3b2:	f004 fe45 	bl	bf040 <__assert_func>
        size_t nx_padded = nx + nh * 2 - 2;
   ba3b6:	3902      	subs	r1, #2
        fvec x_padded(nx_padded);
   ba3b8:	aa02      	add	r2, sp, #8
   ba3ba:	eb01 0144 	add.w	r1, r1, r4, lsl #1
   ba3be:	a803      	add	r0, sp, #12
   ba3c0:	f7ff f864 	bl	b948c <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>

        // symmetric padding (default in PyWavelet)
        for (size_t i = 0; i < nh - 2; i++)
   ba3c4:	1ea3      	subs	r3, r4, #2
   ba3c6:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
        fvec x_padded(nx_padded);
   ba3ca:	2200      	movs	r2, #0
        for (size_t i = 0; i < nh - 2; i++)
   ba3cc:	455b      	cmp	r3, fp
   ba3ce:	9903      	ldr	r1, [sp, #12]
   ba3d0:	d005      	beq.n	ba3de <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x52>
            x_padded[i] = x[nh - 3 - i];
   ba3d2:	4411      	add	r1, r2
   ba3d4:	f853 0d04 	ldr.w	r0, [r3, #-4]!
   ba3d8:	6008      	str	r0, [r1, #0]
        for (size_t i = 0; i < nh - 2; i++)
   ba3da:	3204      	adds	r2, #4
   ba3dc:	e7f6      	b.n	ba3cc <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x40>
   ba3de:	eb0b 0186 	add.w	r1, fp, r6, lsl #2
   ba3e2:	00a3      	lsls	r3, r4, #2
   ba3e4:	ebcb 0084 	rsb	r0, fp, r4, lsl #2
   ba3e8:	465d      	mov	r5, fp
        for (size_t i = 0; i < nx; i++)
            x_padded[i + nh - 2] = x[i];
   ba3ea:	f855 cb04 	ldr.w	ip, [r5], #4
   ba3ee:	9a03      	ldr	r2, [sp, #12]
   ba3f0:	442a      	add	r2, r5
   ba3f2:	4402      	add	r2, r0
        for (size_t i = 0; i < nx; i++)
   ba3f4:	428d      	cmp	r5, r1
            x_padded[i + nh - 2] = x[i];
   ba3f6:	f842 cc0c 	str.w	ip, [r2, #-12]
        for (size_t i = 0; i < nx; i++)
   ba3fa:	d1f6      	bne.n	ba3ea <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x5e>
   ba3fc:	eb04 0046 	add.w	r0, r4, r6, lsl #1
   ba400:	eba5 0c03 	sub.w	ip, r5, r3
   ba404:	eb0b 0b80 	add.w	fp, fp, r0, lsl #2
   ba408:	3e01      	subs	r6, #1
   ba40a:	f06f 010b 	mvn.w	r1, #11
        for (size_t i = 0; i < nh; i++)
            x_padded[i + nx + nh - 2] = x[nx - 1 - i];
   ba40e:	f855 ed04 	ldr.w	lr, [r5, #-4]!
   ba412:	9a03      	ldr	r2, [sp, #12]
   ba414:	1b48      	subs	r0, r1, r5
   ba416:	445a      	add	r2, fp
   ba418:	4402      	add	r2, r0
        for (size_t i = 0; i < nh; i++)
   ba41a:	4565      	cmp	r5, ip
            x_padded[i + nx + nh - 2] = x[nx - 1 - i];
   ba41c:	f8c2 e000 	str.w	lr, [r2]
        for (size_t i = 0; i < nh; i++)
   ba420:	d1f5      	bne.n	ba40e <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x82>

        size_t ny = (nx + nh - 1) / 2;
   ba422:	4434      	add	r4, r6
   ba424:	0864      	lsrs	r4, r4, #1
        a.resize(ny);
   ba426:	4621      	mov	r1, r4
   ba428:	4638      	mov	r0, r7
   ba42a:	9301      	str	r3, [sp, #4]
   ba42c:	f7ff fbaa 	bl	b9b84 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        d.resize(ny);
   ba430:	4621      	mov	r1, r4
   ba432:	4640      	mov	r0, r8
   ba434:	f7ff fba6 	bl	b9b84 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>

        // decimate and filter
        const float *xx = x_padded.data();
        for (size_t i = 0; i < ny; i++) {
   ba438:	9a03      	ldr	r2, [sp, #12]
   ba43a:	9b01      	ldr	r3, [sp, #4]
   ba43c:	2100      	movs	r1, #0
   ba43e:	4413      	add	r3, r2
   ba440:	42a1      	cmp	r1, r4
   ba442:	d027      	beq.n	ba494 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x108>
    float sum = 0.0f;
   ba444:	eddf 7a21 	vldr	s15, [pc, #132]	; ba4cc <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x140>
   ba448:	464d      	mov	r5, r9
        for (size_t i = 0; i < ny; i++) {
   ba44a:	4610      	mov	r0, r2
        sum += x[i] * y[i];
   ba44c:	ecf0 6a01 	vldmia	r0!, {s13}
   ba450:	ecb5 7a01 	vldmia	r5!, {s14}
    for (size_t i = 0; i < sz; i++) {
   ba454:	4283      	cmp	r3, r0
        sum += x[i] * y[i];
   ba456:	eee6 7a87 	vfma.f32	s15, s13, s14
    for (size_t i = 0; i < sz; i++) {
   ba45a:	d1f7      	bne.n	ba44c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0xc0>
            a[i] = dot(xx + 2 * i, h, nh);
   ba45c:	683d      	ldr	r5, [r7, #0]
   ba45e:	eb05 0581 	add.w	r5, r5, r1, lsl #2
   ba462:	edc5 7a00 	vstr	s15, [r5]
    float sum = 0.0f;
   ba466:	eddf 7a19 	vldr	s15, [pc, #100]	; ba4cc <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x140>
   ba46a:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    for (size_t i = 0; i < sz; i++) {
   ba46e:	4656      	mov	r6, sl
            a[i] = dot(xx + 2 * i, h, nh);
   ba470:	4615      	mov	r5, r2
        sum += x[i] * y[i];
   ba472:	ecf5 6a01 	vldmia	r5!, {s13}
   ba476:	ecb6 7a01 	vldmia	r6!, {s14}
    for (size_t i = 0; i < sz; i++) {
   ba47a:	42ab      	cmp	r3, r5
        sum += x[i] * y[i];
   ba47c:	eee6 7a87 	vfma.f32	s15, s13, s14
    for (size_t i = 0; i < sz; i++) {
   ba480:	d1f7      	bne.n	ba472 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0xe6>
            d[i] = dot(xx + 2 * i, g, nh);
   ba482:	f8d8 0000 	ldr.w	r0, [r8]
   ba486:	4460      	add	r0, ip
   ba488:	edc0 7a00 	vstr	s15, [r0]
        for (size_t i = 0; i < ny; i++) {
   ba48c:	3101      	adds	r1, #1
   ba48e:	3208      	adds	r2, #8
   ba490:	3308      	adds	r3, #8
   ba492:	e7d5      	b.n	ba440 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0xb4>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   ba494:	e9d8 0100 	ldrd	r0, r1, [r8]
   ba498:	1a09      	subs	r1, r1, r0
        }

        numpy::underflow_handling(d.data(), d.size());
   ba49a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; ba4d0 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x144>
   ba49e:	1089      	asrs	r1, r1, #2
   ba4a0:	f7fc fefe 	bl	b72a0 <_ZN2ei5numpy18underflow_handlingEPfjf>
   ba4a4:	e9d7 0100 	ldrd	r0, r1, [r7]
   ba4a8:	1a09      	subs	r1, r1, r0
        numpy::underflow_handling(a.data(), a.size());
   ba4aa:	ed9f 0a09 	vldr	s0, [pc, #36]	; ba4d0 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x144>
   ba4ae:	1089      	asrs	r1, r1, #2
   ba4b0:	f7fc fef6 	bl	b72a0 <_ZN2ei5numpy18underflow_handlingEPfjf>
      }
   ba4b4:	a803      	add	r0, sp, #12
   ba4b6:	f7fd fbe4 	bl	b7c82 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
    }
   ba4ba:	b007      	add	sp, #28
   ba4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba4c0:	000c5d15 	.word	0x000c5d15
   ba4c4:	000c5d32 	.word	0x000c5d32
   ba4c8:	000c5ca8 	.word	0x000c5ca8
   ba4cc:	00000000 	.word	0x00000000
   ba4d0:	33d6bf95 	.word	0x33d6bf95

000ba4d4 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b>:
{
   ba4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba4d8:	ed2d 8b02 	vpush	{d8}
   ba4dc:	460d      	mov	r5, r1
      : _M_current(__i) { }
   ba4de:	e9d0 4100 	ldrd	r4, r1, [r0]
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
		  _Compare __comp)
    {
      if (__first == __last)
   ba4e2:	428c      	cmp	r4, r1
   ba4e4:	4607      	mov	r7, r0
   ba4e6:	4616      	mov	r6, r2
   ba4e8:	4698      	mov	r8, r3
   ba4ea:	d011      	beq.n	ba510 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x3c>
   ba4ec:	1d23      	adds	r3, r4, #4
   ba4ee:	4622      	mov	r2, r4
	return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
   ba4f0:	4299      	cmp	r1, r3
   ba4f2:	edd2 7a00 	vldr	s15, [r2]
	++_M_current;
   ba4f6:	4618      	mov	r0, r3
   ba4f8:	d00b      	beq.n	ba512 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x3e>
	if (__comp(__first, __result))
   ba4fa:	ed90 7a00 	vldr	s14, [r0]
   ba4fe:	eeb4 7a67 	vcmp.f32	s14, s15
   ba502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba506:	f103 0304 	add.w	r3, r3, #4
   ba50a:	bf48      	it	mi
   ba50c:	4602      	movmi	r2, r0
   ba50e:	e7ef      	b.n	ba4f0 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x1c>
   ba510:	4622      	mov	r2, r4
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    __max_element(_ForwardIterator __first, _ForwardIterator __last,
		  _Compare __comp)
    {
      if (__first == __last) return __first;
   ba512:	428c      	cmp	r4, r1
    float min = *std::min_element(x.begin(), x.end());
   ba514:	ed92 8a00 	vldr	s16, [r2]
   ba518:	d010      	beq.n	ba53c <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x68>
   ba51a:	1d23      	adds	r3, r4, #4
      _ForwardIterator __result = __first;
      while (++__first != __last)
   ba51c:	4299      	cmp	r1, r3
   ba51e:	edd4 7a00 	vldr	s15, [r4]
   ba522:	461a      	mov	r2, r3
   ba524:	d00a      	beq.n	ba53c <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x68>
	if (__comp(__result, __first))
   ba526:	ed92 7a00 	vldr	s14, [r2]
   ba52a:	eeb4 7a67 	vcmp.f32	s14, s15
   ba52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba532:	f103 0304 	add.w	r3, r3, #4
   ba536:	bfc8      	it	gt
   ba538:	4614      	movgt	r4, r2
   ba53a:	e7ef      	b.n	ba51c <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x48>
    float step = (max - min) / nbins;
   ba53c:	edd4 7a00 	vldr	s15, [r4]
   ba540:	ee07 5a10 	vmov	s14, r5
   ba544:	ee77 7ac8 	vsub.f32	s15, s15, s16
   ba548:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    h.resize(nbins);
   ba54c:	4629      	mov	r1, r5
   ba54e:	4630      	mov	r0, r6
    float step = (max - min) / nbins;
   ba550:	eec7 8a87 	vdiv.f32	s17, s15, s14
            bin = nbins - 1;
   ba554:	1e6c      	subs	r4, r5, #1
    h.resize(nbins);
   ba556:	f7ff fb15 	bl	b9b84 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
    for (size_t i = 0; i < x.size(); i++) {
   ba55a:	2100      	movs	r1, #0
        h[bin]++;
   ba55c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   ba560:	e9d7 3200 	ldrd	r3, r2, [r7]
   ba564:	1ad2      	subs	r2, r2, r3
    for (size_t i = 0; i < x.size(); i++) {
   ba566:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
   ba56a:	d219      	bcs.n	ba5a0 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0xcc>
        size_t bin = (x[i] - min) / step;
   ba56c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   ba570:	ed93 7a00 	vldr	s14, [r3]
	return *(this->_M_impl._M_start + __n);
   ba574:	6830      	ldr	r0, [r6, #0]
   ba576:	ee37 7a48 	vsub.f32	s14, s14, s16
    for (size_t i = 0; i < x.size(); i++) {
   ba57a:	3101      	adds	r1, #1
        size_t bin = (x[i] - min) / step;
   ba57c:	eec7 7a28 	vdiv.f32	s15, s14, s17
   ba580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   ba584:	ee17 2a90 	vmov	r2, s15
        if (bin >= nbins)
   ba588:	4295      	cmp	r5, r2
            bin = nbins - 1;
   ba58a:	bf98      	it	ls
   ba58c:	4622      	movls	r2, r4
   ba58e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        h[bin]++;
   ba592:	edd2 7a00 	vldr	s15, [r2]
   ba596:	ee77 7aa6 	vadd.f32	s15, s15, s13
   ba59a:	edc2 7a00 	vstr	s15, [r2]
    for (size_t i = 0; i < x.size(); i++) {
   ba59e:	e7df      	b.n	ba560 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x8c>
    if (normalize) {
   ba5a0:	f1b8 0f00 	cmp.w	r8, #0
   ba5a4:	d013      	beq.n	ba5ce <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0xfa>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   ba5a6:	e9d6 0100 	ldrd	r0, r1, [r6]
   ba5aa:	1a09      	subs	r1, r1, r0
        float s = numpy::sum(h.data(), h.size());
   ba5ac:	1089      	asrs	r1, r1, #2
   ba5ae:	f7fc facd 	bl	b6b4c <_ZN2ei5numpy3sumEPfj>
        for (size_t i = 0; i < nbins; i++) {
   ba5b2:	2300      	movs	r3, #0
   ba5b4:	429d      	cmp	r5, r3
   ba5b6:	d00a      	beq.n	ba5ce <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0xfa>
	return *(this->_M_impl._M_start + __n);
   ba5b8:	6832      	ldr	r2, [r6, #0]
   ba5ba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
            h[i] /= s;
   ba5be:	ed92 7a00 	vldr	s14, [r2]
   ba5c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
        for (size_t i = 0; i < nbins; i++) {
   ba5c6:	3301      	adds	r3, #1
            h[i] /= s;
   ba5c8:	edc2 7a00 	vstr	s15, [r2]
        for (size_t i = 0; i < nbins; i++) {
   ba5cc:	e7f2      	b.n	ba5b4 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0xe0>
}
   ba5ce:	ecbd 8b02 	vpop	{d8}
   ba5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ba5d6 <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_>:
    static void calculate_entropy(const fvec &y, fvec &features)
   ba5d6:	b530      	push	{r4, r5, lr}
   ba5d8:	ed2d 8b02 	vpush	{d8}
   ba5dc:	b085      	sub	sp, #20
	: _M_start(), _M_finish(), _M_end_of_storage()
   ba5de:	2400      	movs	r4, #0
        histo(y, 100, h, true);
   ba5e0:	2301      	movs	r3, #1
    static void calculate_entropy(const fvec &y, fvec &features)
   ba5e2:	460d      	mov	r5, r1
        histo(y, 100, h, true);
   ba5e4:	aa01      	add	r2, sp, #4
   ba5e6:	2164      	movs	r1, #100	; 0x64
   ba5e8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   ba5ec:	9403      	str	r4, [sp, #12]
   ba5ee:	f7ff ff71 	bl	ba4d4 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b>
        float entropy = 0.0f;
   ba5f2:	2300      	movs	r3, #0
   ba5f4:	9300      	str	r3, [sp, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   ba5f6:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   ba5fa:	1ad2      	subs	r2, r2, r3
        for (size_t i = 0; i < h.size(); i++) {
   ba5fc:	ebb4 0fa2 	cmp.w	r4, r2, asr #2
   ba600:	d214      	bcs.n	ba62c <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_+0x56>
            if (h[i] > 0.0f) {
   ba602:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   ba606:	ed93 8a00 	vldr	s16, [r3]
   ba60a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   ba60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba612:	dd09      	ble.n	ba628 <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_+0x52>
  { return __builtin_logf(__x); }
   ba614:	eeb0 0a48 	vmov.f32	s0, s16
   ba618:	f007 f930 	bl	c187c <logf>
                entropy -= h[i] * log(h[i]);
   ba61c:	eddd 7a00 	vldr	s15, [sp]
   ba620:	eee8 7a40 	vfms.f32	s15, s16, s0
   ba624:	edcd 7a00 	vstr	s15, [sp]
        for (size_t i = 0; i < h.size(); i++) {
   ba628:	3401      	adds	r4, #1
   ba62a:	e7e4      	b.n	ba5f6 <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_+0x20>
        features.push_back(entropy);
   ba62c:	4669      	mov	r1, sp
   ba62e:	4628      	mov	r0, r5
   ba630:	f7ff fa26 	bl	b9a80 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
      }
   ba634:	a801      	add	r0, sp, #4
   ba636:	f7fd fb24 	bl	b7c82 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
    }
   ba63a:	b005      	add	sp, #20
   ba63c:	ecbd 8b02 	vpop	{d8}
   ba640:	bd30      	pop	{r4, r5, pc}
	...

000ba644 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0>:
      vector<_Tp, _Alloc>::
   ba644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   ba648:	e9d0 7301 	ldrd	r7, r3, [r0, #4]
   ba64c:	429f      	cmp	r7, r3
      vector<_Tp, _Alloc>::
   ba64e:	4604      	mov	r4, r0
   ba650:	468a      	mov	sl, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   ba652:	d007      	beq.n	ba664 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0+0x20>
   ba654:	b10f      	cbz	r7, ba65a <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0+0x16>
   ba656:	680b      	ldr	r3, [r1, #0]
   ba658:	603b      	str	r3, [r7, #0]
	    ++this->_M_impl._M_finish;
   ba65a:	6863      	ldr	r3, [r4, #4]
   ba65c:	3304      	adds	r3, #4
   ba65e:	6063      	str	r3, [r4, #4]
      }
   ba660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
   ba664:	4a15      	ldr	r2, [pc, #84]	; (ba6bc <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0+0x78>)
   ba666:	2101      	movs	r1, #1
   ba668:	f7ff f9f0 	bl	b9a4c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
   ba66c:	f8d4 8000 	ldr.w	r8, [r4]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   ba670:	4606      	mov	r6, r0
    { return __lhs.base() - __rhs.base(); }
   ba672:	eba7 0908 	sub.w	r9, r7, r8
   ba676:	b1f8      	cbz	r0, ba6b8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0+0x74>
   ba678:	f7fb fcea 	bl	b6050 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj.part.0>
   ba67c:	4605      	mov	r5, r0
   ba67e:	eb15 0909 	adds.w	r9, r5, r9
   ba682:	bf1c      	itt	ne
   ba684:	f8da 3000 	ldrne.w	r3, [sl]
   ba688:	f8c9 3000 	strne.w	r3, [r9]
   ba68c:	4639      	mov	r1, r7
   ba68e:	462a      	mov	r2, r5
   ba690:	4640      	mov	r0, r8
   ba692:	f7fb fe1d 	bl	b62d0 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_.isra.0>
   ba696:	1d02      	adds	r2, r0, #4
   ba698:	4638      	mov	r0, r7
   ba69a:	f7fb fe19 	bl	b62d0 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_.isra.0>
   ba69e:	4607      	mov	r7, r0
	if (__p)
   ba6a0:	f1b8 0f00 	cmp.w	r8, #0
   ba6a4:	d002      	beq.n	ba6ac <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0+0x68>
   ba6a6:	4640      	mov	r0, r8
   ba6a8:	f001 fcaa 	bl	bc000 <_Z7ei_freePv>
      this->_M_impl._M_finish = __new_finish;
   ba6ac:	e9c4 5700 	strd	r5, r7, [r4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   ba6b0:	eb05 0586 	add.w	r5, r5, r6, lsl #2
   ba6b4:	60a5      	str	r5, [r4, #8]
	return back();
   ba6b6:	e7d3      	b.n	ba660 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0+0x1c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   ba6b8:	4605      	mov	r5, r0
   ba6ba:	e7e0      	b.n	ba67e <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0+0x3a>
   ba6bc:	000c52c7 	.word	0x000c52c7

000ba6c0 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>:
    static void calculate_statistics(const fvec &y, fvec &features, float mean)
   ba6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba6c4:	460c      	mov	r4, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   ba6c6:	e9d0 3100 	ldrd	r3, r1, [r0]
   ba6ca:	b08e      	sub	sp, #56	; 0x38
   ba6cc:	1ac9      	subs	r1, r1, r3
   ba6ce:	4605      	mov	r5, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   ba6d0:	2300      	movs	r3, #0
      { _M_create_storage(__n); }
   ba6d2:	1089      	asrs	r1, r1, #2
   ba6d4:	a803      	add	r0, sp, #12
	: _M_start(), _M_finish(), _M_end_of_storage()
   ba6d6:	e9cd 3303 	strd	r3, r3, [sp, #12]
   ba6da:	9305      	str	r3, [sp, #20]
   ba6dc:	ed8d 0a01 	vstr	s0, [sp, #4]
      { _M_create_storage(__n); }
   ba6e0:	f7fe fec6 	bl	b9470 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_M_create_storageEj>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   ba6e4:	e9d5 0300 	ldrd	r0, r3, [r5]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
   ba6e8:	9e03      	ldr	r6, [sp, #12]
   ba6ea:	4602      	mov	r2, r0
      _ForwardIterator __cur = __result;
   ba6ec:	4631      	mov	r1, r6
	  for (; __first != __last; ++__first, (void)++__cur)
   ba6ee:	4293      	cmp	r3, r2
   ba6f0:	d005      	beq.n	ba6fe <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x3e>
   ba6f2:	b109      	cbz	r1, ba6f8 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x38>
   ba6f4:	6817      	ldr	r7, [r2, #0]
   ba6f6:	600f      	str	r7, [r1, #0]
   ba6f8:	3104      	adds	r1, #4
   ba6fa:	3204      	adds	r2, #4
   ba6fc:	e7f7      	b.n	ba6ee <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x2e>
      : _M_current(__i) { }
   ba6fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
   ba702:	1a1b      	subs	r3, r3, r0
   ba704:	441e      	add	r6, r3
      if (__first != __last)
   ba706:	45b0      	cmp	r8, r6
	this->_M_impl._M_finish =
   ba708:	9604      	str	r6, [sp, #16]
   ba70a:	d02c      	beq.n	ba766 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0xa6>
    { return __lhs.base() - __rhs.base(); }
   ba70c:	eba6 0708 	sub.w	r7, r6, r8
   ba710:	10ba      	asrs	r2, r7, #2
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
   ba712:	fab2 f282 	clz	r2, r2
   ba716:	f1c2 021f 	rsb	r2, r2, #31
	  std::__introsort_loop(__first, __last,
   ba71a:	0052      	lsls	r2, r2, #1
   ba71c:	4631      	mov	r1, r6
   ba71e:	4640      	mov	r0, r8
   ba720:	f7fc f95a 	bl	b69d8 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0>
      if (__last - __first > int(_S_threshold))
   ba724:	2f40      	cmp	r7, #64	; 0x40
   ba726:	dd1a      	ble.n	ba75e <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x9e>
      { return __normal_iterator(_M_current + __n); }
   ba728:	f108 0740 	add.w	r7, r8, #64	; 0x40
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   ba72c:	4639      	mov	r1, r7
   ba72e:	4640      	mov	r0, r8
   ba730:	f7fc f880 	bl	b6834 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_.isra.0>
    __unguarded_insertion_sort(_RandomAccessIterator __first,
   ba734:	4639      	mov	r1, r7
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
   ba736:	42b1      	cmp	r1, r6
   ba738:	d015      	beq.n	ba766 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0xa6>
	__val = _GLIBCXX_MOVE(*__last);
   ba73a:	edd1 7a00 	vldr	s15, [r1]
	return *this;
   ba73e:	460b      	mov	r3, r1
   ba740:	461a      	mov	r2, r3
      { return __val < *__it; }
   ba742:	ed33 7a01 	vldmdb	r3!, {s14}
      while (__comp(__val, __next))
   ba746:	eef4 7ac7 	vcmpe.f32	s15, s14
   ba74a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba74e:	d502      	bpl.n	ba756 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x96>
	  *__last = _GLIBCXX_MOVE(*__next);
   ba750:	ed83 7a01 	vstr	s14, [r3, #4]
   ba754:	e7f4      	b.n	ba740 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x80>
      *__last = _GLIBCXX_MOVE(__val);
   ba756:	edc2 7a00 	vstr	s15, [r2]
      operator++() _GLIBCXX_NOEXCEPT
   ba75a:	3104      	adds	r1, #4
	return *this;
   ba75c:	e7eb      	b.n	ba736 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x76>
	std::__insertion_sort(__first, __last, __comp);
   ba75e:	4631      	mov	r1, r6
   ba760:	4640      	mov	r0, r8
   ba762:	f7fc f867 	bl	b6834 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_.isra.0>
        features.push_back(get_percentile_from_sorted(sorted,0.05));
   ba766:	a803      	add	r0, sp, #12
   ba768:	ed9f 0a41 	vldr	s0, [pc, #260]	; ba870 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x1b0>
   ba76c:	f7fc ff3a 	bl	b75e4 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
      { emplace_back(std::move(__x)); }
   ba770:	a90a      	add	r1, sp, #40	; 0x28
   ba772:	4620      	mov	r0, r4
   ba774:	ed8d 0a0a 	vstr	s0, [sp, #40]	; 0x28
   ba778:	f7ff ff64 	bl	ba644 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0>
        features.push_back(get_percentile_from_sorted(sorted,0.25));
   ba77c:	a803      	add	r0, sp, #12
   ba77e:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
   ba782:	f7fc ff2f 	bl	b75e4 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
   ba786:	a90a      	add	r1, sp, #40	; 0x28
   ba788:	4620      	mov	r0, r4
   ba78a:	ed8d 0a0a 	vstr	s0, [sp, #40]	; 0x28
   ba78e:	f7ff ff59 	bl	ba644 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0>
        features.push_back(get_percentile_from_sorted(sorted,0.75));
   ba792:	a803      	add	r0, sp, #12
   ba794:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
   ba798:	f7fc ff24 	bl	b75e4 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
   ba79c:	a90a      	add	r1, sp, #40	; 0x28
   ba79e:	4620      	mov	r0, r4
   ba7a0:	ed8d 0a0a 	vstr	s0, [sp, #40]	; 0x28
   ba7a4:	f7ff ff4e 	bl	ba644 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0>
        features.push_back(get_percentile_from_sorted(sorted,0.95));
   ba7a8:	a803      	add	r0, sp, #12
   ba7aa:	ed9f 0a32 	vldr	s0, [pc, #200]	; ba874 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x1b4>
   ba7ae:	f7fc ff19 	bl	b75e4 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
   ba7b2:	a90a      	add	r1, sp, #40	; 0x28
   ba7b4:	4620      	mov	r0, r4
   ba7b6:	ed8d 0a0a 	vstr	s0, [sp, #40]	; 0x28
   ba7ba:	f7ff ff43 	bl	ba644 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0>
        features.push_back(get_percentile_from_sorted(sorted,0.5));
   ba7be:	a803      	add	r0, sp, #12
   ba7c0:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
   ba7c4:	f7fc ff0e 	bl	b75e4 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
   ba7c8:	a90a      	add	r1, sp, #40	; 0x28
   ba7ca:	4620      	mov	r0, r4
   ba7cc:	ed8d 0a0a 	vstr	s0, [sp, #40]	; 0x28
   ba7d0:	f7ff ff38 	bl	ba644 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   ba7d4:	e9d5 3200 	ldrd	r3, r2, [r5]
   ba7d8:	1ad2      	subs	r2, r2, r3
        matrix_t x(1, y.size(), const_cast<float *>(y.data()));
   ba7da:	1092      	asrs	r2, r2, #2
   ba7dc:	2101      	movs	r1, #1
   ba7de:	a806      	add	r0, sp, #24
   ba7e0:	f7fc f984 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
        matrix_t out(1, 1);
   ba7e4:	2201      	movs	r2, #1
   ba7e6:	4611      	mov	r1, r2
   ba7e8:	2300      	movs	r3, #0
   ba7ea:	a80a      	add	r0, sp, #40	; 0x28
   ba7ec:	f7fc f97e 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
        features.push_back(mean);
   ba7f0:	a901      	add	r1, sp, #4
   ba7f2:	4620      	mov	r0, r4
   ba7f4:	f7ff f944 	bl	b9a80 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        if (numpy::stdev(&x, &out) == EIDSP_OK)
   ba7f8:	a90a      	add	r1, sp, #40	; 0x28
   ba7fa:	a806      	add	r0, sp, #24
   ba7fc:	f7fc fbd4 	bl	b6fa8 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_>
   ba800:	b918      	cbnz	r0, ba80a <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x14a>
            features.push_back(out.get_row_ptr(0)[0]);
   ba802:	990a      	ldr	r1, [sp, #40]	; 0x28
   ba804:	4620      	mov	r0, r4
   ba806:	f7ff f93b 	bl	b9a80 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
   ba80a:	e9d5 0100 	ldrd	r0, r1, [r5]
   ba80e:	1a09      	subs	r1, r1, r0
        arm_var_f32(input, size, &temp);
   ba810:	aa02      	add	r2, sp, #8
   ba812:	1089      	asrs	r1, r1, #2
   ba814:	f7fa fbc4 	bl	b4fa0 <arm_var_f32>
      { emplace_back(std::move(__x)); }
   ba818:	a902      	add	r1, sp, #8
   ba81a:	4620      	mov	r0, r4
   ba81c:	f7ff ff12 	bl	ba644 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0>
        if (numpy::rms(&x, &out) == EIDSP_OK)
   ba820:	a90a      	add	r1, sp, #40	; 0x28
   ba822:	a806      	add	r0, sp, #24
   ba824:	f7fc fa3e 	bl	b6ca4 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
   ba828:	b918      	cbnz	r0, ba832 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x172>
            features.push_back(out.get_row_ptr(0)[0]);
   ba82a:	990a      	ldr	r1, [sp, #40]	; 0x28
   ba82c:	4620      	mov	r0, r4
   ba82e:	f7ff f927 	bl	b9a80 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        if (numpy::skew(&x, &out) == EIDSP_OK)
   ba832:	a90a      	add	r1, sp, #40	; 0x28
   ba834:	a806      	add	r0, sp, #24
   ba836:	f7fc fbe9 	bl	b700c <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>
   ba83a:	b918      	cbnz	r0, ba844 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x184>
            features.push_back(out.get_row_ptr(0)[0]);
   ba83c:	990a      	ldr	r1, [sp, #40]	; 0x28
   ba83e:	4620      	mov	r0, r4
   ba840:	f7ff f91e 	bl	b9a80 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        if (numpy::kurtosis(&x, &out) == EIDSP_OK)
   ba844:	a90a      	add	r1, sp, #40	; 0x28
   ba846:	a806      	add	r0, sp, #24
   ba848:	f7fc fc82 	bl	b7150 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>
   ba84c:	b918      	cbnz	r0, ba856 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x196>
            features.push_back(out.get_row_ptr(0)[0]);
   ba84e:	990a      	ldr	r1, [sp, #40]	; 0x28
   ba850:	4620      	mov	r0, r4
   ba852:	f7ff f915 	bl	b9a80 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        matrix_t out(1, 1);
   ba856:	a80a      	add	r0, sp, #40	; 0x28
   ba858:	f7fc f95d 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
        matrix_t x(1, y.size(), const_cast<float *>(y.data()));
   ba85c:	a806      	add	r0, sp, #24
   ba85e:	f7fc f95a 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
      }
   ba862:	a803      	add	r0, sp, #12
   ba864:	f7fd fa0d 	bl	b7c82 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
    }
   ba868:	b00e      	add	sp, #56	; 0x38
   ba86a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba86e:	bf00      	nop
   ba870:	3d4ccccd 	.word	0x3d4ccccd
   ba874:	3f733333 	.word	0x3f733333

000ba878 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>:
    static void calculate_crossings(const fvec &y, fvec &features, float mean)
   ba878:	b570      	push	{r4, r5, r6, lr}
   ba87a:	ed2d 8b02 	vpush	{d8}
   ba87e:	4604      	mov	r4, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   ba880:	e9d4 2300 	ldrd	r2, r3, [r4]
   ba884:	1a9b      	subs	r3, r3, r2
   ba886:	4608      	mov	r0, r1
   ba888:	b084      	sub	sp, #16
   ba88a:	eeb0 8a40 	vmov.f32	s16, s0
   ba88e:	109b      	asrs	r3, r3, #2
        for (size_t i = 1; i < y.size(); i++) {
   ba890:	2601      	movs	r6, #1
        size_t zc = 0;
   ba892:	2100      	movs	r1, #0
        for (size_t i = 1; i < y.size(); i++) {
   ba894:	429e      	cmp	r6, r3
   ba896:	d20f      	bcs.n	ba8b8 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x40>
            if (y[i] * y[i - 1] < 0) {
   ba898:	4615      	mov	r5, r2
   ba89a:	edd2 7a01 	vldr	s15, [r2, #4]
   ba89e:	ed95 7a00 	vldr	s14, [r5]
   ba8a2:	ee67 7a87 	vmul.f32	s15, s15, s14
   ba8a6:	3204      	adds	r2, #4
   ba8a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   ba8ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                zc++;
   ba8b0:	bf48      	it	mi
   ba8b2:	3101      	addmi	r1, #1
        for (size_t i = 1; i < y.size(); i++) {
   ba8b4:	3601      	adds	r6, #1
   ba8b6:	e7ed      	b.n	ba894 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x1c>
        features.push_back(zc / (float)y.size());
   ba8b8:	ee07 1a90 	vmov	s15, r1
   ba8bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   ba8c0:	ee07 3a90 	vmov	s15, r3
   ba8c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      { emplace_back(std::move(__x)); }
   ba8c8:	a903      	add	r1, sp, #12
   ba8ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
   ba8ce:	9001      	str	r0, [sp, #4]
   ba8d0:	edcd 6a03 	vstr	s13, [sp, #12]
   ba8d4:	f7ff feb6 	bl	ba644 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   ba8d8:	e9d4 2300 	ldrd	r2, r3, [r4]
        size_t mc = 0;
   ba8dc:	9801      	ldr	r0, [sp, #4]
   ba8de:	1a9b      	subs	r3, r3, r2
   ba8e0:	109b      	asrs	r3, r3, #2
        for (size_t i = 1; i < y.size(); i++) {
   ba8e2:	2401      	movs	r4, #1
        size_t mc = 0;
   ba8e4:	2100      	movs	r1, #0
        for (size_t i = 1; i < y.size(); i++) {
   ba8e6:	429c      	cmp	r4, r3
   ba8e8:	d213      	bcs.n	ba912 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x9a>
            if ((y[i] - mean) * (y[i - 1] - mean) < 0) {
   ba8ea:	4615      	mov	r5, r2
   ba8ec:	edd5 7a01 	vldr	s15, [r5, #4]
   ba8f0:	ed95 7a00 	vldr	s14, [r5]
   ba8f4:	ee77 7ac8 	vsub.f32	s15, s15, s16
   ba8f8:	ee37 7a48 	vsub.f32	s14, s14, s16
   ba8fc:	3204      	adds	r2, #4
   ba8fe:	ee67 7a87 	vmul.f32	s15, s15, s14
        for (size_t i = 1; i < y.size(); i++) {
   ba902:	3401      	adds	r4, #1
            if ((y[i] - mean) * (y[i - 1] - mean) < 0) {
   ba904:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   ba908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                mc++;
   ba90c:	bf48      	it	mi
   ba90e:	3101      	addmi	r1, #1
        for (size_t i = 1; i < y.size(); i++) {
   ba910:	e7e9      	b.n	ba8e6 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x6e>
        features.push_back(mc / (float)y.size());
   ba912:	ee07 1a90 	vmov	s15, r1
   ba916:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   ba91a:	ee07 3a90 	vmov	s15, r3
   ba91e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      { emplace_back(std::move(__x)); }
   ba922:	a903      	add	r1, sp, #12
   ba924:	eec7 6a27 	vdiv.f32	s13, s14, s15
   ba928:	edcd 6a03 	vstr	s13, [sp, #12]
   ba92c:	f7ff fe8a 	bl	ba644 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0>
    }
   ba930:	b004      	add	sp, #16
   ba932:	ecbd 8b02 	vpop	{d8}
   ba936:	bd70      	pop	{r4, r5, r6, pc}

000ba938 <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>:

    static void extract_features(fvec& y, fvec &features)
   ba938:	b530      	push	{r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   ba93a:	e9d0 3200 	ldrd	r3, r2, [r0]
   ba93e:	b08b      	sub	sp, #44	; 0x2c
   ba940:	1ad2      	subs	r2, r2, r3
    {
        matrix_t x(1, y.size(), const_cast<float *>(y.data()));
   ba942:	1092      	asrs	r2, r2, #2
    static void extract_features(fvec& y, fvec &features)
   ba944:	4604      	mov	r4, r0
   ba946:	460d      	mov	r5, r1
        matrix_t x(1, y.size(), const_cast<float *>(y.data()));
   ba948:	a802      	add	r0, sp, #8
   ba94a:	2101      	movs	r1, #1
   ba94c:	f7fc f8ce 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
        matrix_t out(1, 1);
   ba950:	2201      	movs	r2, #1
   ba952:	4611      	mov	r1, r2
   ba954:	2300      	movs	r3, #0
   ba956:	a806      	add	r0, sp, #24
   ba958:	f7fc f8c8 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
        if (numpy::mean(&x, &out) != EIDSP_OK)
   ba95c:	a906      	add	r1, sp, #24
   ba95e:	a802      	add	r0, sp, #8
   ba960:	f7fc f9c6 	bl	b6cf0 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
   ba964:	b128      	cbz	r0, ba972 <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0x3a>
            assert(0);
   ba966:	4b11      	ldr	r3, [pc, #68]	; (ba9ac <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0x74>)
   ba968:	4a11      	ldr	r2, [pc, #68]	; (ba9b0 <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0x78>)
   ba96a:	4812      	ldr	r0, [pc, #72]	; (ba9b4 <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0x7c>)
   ba96c:	21f3      	movs	r1, #243	; 0xf3
   ba96e:	f004 fb67 	bl	bf040 <__assert_func>
        float mean = out.get_row_ptr(0)[0];
   ba972:	9b06      	ldr	r3, [sp, #24]
   ba974:	ed93 0a00 	vldr	s0, [r3]

        calculate_entropy(y, features);
   ba978:	4629      	mov	r1, r5
   ba97a:	4620      	mov	r0, r4
        float mean = out.get_row_ptr(0)[0];
   ba97c:	ed8d 0a01 	vstr	s0, [sp, #4]
        calculate_entropy(y, features);
   ba980:	f7ff fe29 	bl	ba5d6 <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_>
        calculate_crossings(y, features, mean);
   ba984:	ed9d 0a01 	vldr	s0, [sp, #4]
   ba988:	4629      	mov	r1, r5
   ba98a:	4620      	mov	r0, r4
   ba98c:	f7ff ff74 	bl	ba878 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>
        calculate_statistics(y, features, mean);
   ba990:	ed9d 0a01 	vldr	s0, [sp, #4]
   ba994:	4629      	mov	r1, r5
   ba996:	4620      	mov	r0, r4
   ba998:	f7ff fe92 	bl	ba6c0 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>
        matrix_t out(1, 1);
   ba99c:	a806      	add	r0, sp, #24
   ba99e:	f7fc f8ba 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
        matrix_t x(1, y.size(), const_cast<float *>(y.data()));
   ba9a2:	a802      	add	r0, sp, #8
   ba9a4:	f7fc f8b7 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
    }
   ba9a8:	b00b      	add	sp, #44	; 0x2c
   ba9aa:	bd30      	pop	{r4, r5, pc}
   ba9ac:	000c5244 	.word	0x000c5244
   ba9b0:	000c5dbd 	.word	0x000c5dbd
   ba9b4:	000c5ca8 	.word	0x000c5ca8

000ba9b8 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE>:

    static void
    wavedec_features(const float *x, int len, const char *wav, int level, fvec &features)
   ba9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba9bc:	461e      	mov	r6, r3
   ba9be:	b090      	sub	sp, #64	; 0x40
    {
        assert(level > 0 && level < 8);
   ba9c0:	3b01      	subs	r3, #1
   ba9c2:	2b06      	cmp	r3, #6
    wavedec_features(const float *x, int len, const char *wav, int level, fvec &features)
   ba9c4:	4607      	mov	r7, r0
   ba9c6:	9d16      	ldr	r5, [sp, #88]	; 0x58
   ba9c8:	4688      	mov	r8, r1
   ba9ca:	4610      	mov	r0, r2
        assert(level > 0 && level < 8);
   ba9cc:	d905      	bls.n	ba9da <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x22>
   ba9ce:	4b3b      	ldr	r3, [pc, #236]	; (baabc <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x104>)
   ba9d0:	4a3b      	ldr	r2, [pc, #236]	; (baac0 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x108>)
   ba9d2:	483c      	ldr	r0, [pc, #240]	; (baac4 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x10c>)
   ba9d4:	21fe      	movs	r1, #254	; 0xfe
   ba9d6:	f004 fb33 	bl	bf040 <__assert_func>
	: _M_start(), _M_finish(), _M_end_of_storage()
   ba9da:	2400      	movs	r4, #0

        fvec h;
        fvec g;
        find_filter(wav, h, g);
   ba9dc:	aa07      	add	r2, sp, #28
   ba9de:	a904      	add	r1, sp, #16
   ba9e0:	e9cd 4404 	strd	r4, r4, [sp, #16]
   ba9e4:	e9cd 4406 	strd	r4, r4, [sp, #24]
   ba9e8:	e9cd 4408 	strd	r4, r4, [sp, #32]
   ba9ec:	f7ff fa08 	bl	b9e00 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   ba9f0:	e9d5 3200 	ldrd	r3, r2, [r5]
   ba9f4:	4293      	cmp	r3, r2
	    this->_M_impl._M_finish = __pos;
   ba9f6:	bf18      	it	ne
   ba9f8:	606b      	strne	r3, [r5, #4]

        features.clear();
        fvec a;
        fvec d;
        dwt(x, len, h.data(), g.data(), h.size(), a, d);
   ba9fa:	ab0d      	add	r3, sp, #52	; 0x34
   ba9fc:	9302      	str	r3, [sp, #8]
   ba9fe:	ab0a      	add	r3, sp, #40	; 0x28
      { return _M_data_ptr(this->_M_impl._M_start); }
   baa00:	9a04      	ldr	r2, [sp, #16]
   baa02:	9301      	str	r3, [sp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   baa04:	9b05      	ldr	r3, [sp, #20]
   baa06:	1a9b      	subs	r3, r3, r2
   baa08:	109b      	asrs	r3, r3, #2
   baa0a:	9300      	str	r3, [sp, #0]
   baa0c:	4641      	mov	r1, r8
   baa0e:	9b07      	ldr	r3, [sp, #28]
   baa10:	4638      	mov	r0, r7
	: _M_start(), _M_finish(), _M_end_of_storage()
   baa12:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   baa16:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   baa1a:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
   baa1e:	f7ff fcb5 	bl	ba38c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_>
        extract_features(d, features);
   baa22:	4629      	mov	r1, r5
   baa24:	a80d      	add	r0, sp, #52	; 0x34
   baa26:	f7ff ff87 	bl	ba938 <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>

        for (int l = 1; l < level; l++) {
   baa2a:	2401      	movs	r4, #1
   baa2c:	42b4      	cmp	r4, r6
   baa2e:	d015      	beq.n	baa5c <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0xa4>
            dwt(a.data(), a.size(), h.data(), g.data(), h.size(), a, d);
   baa30:	ab0d      	add	r3, sp, #52	; 0x34
   baa32:	9302      	str	r3, [sp, #8]
   baa34:	ab0a      	add	r3, sp, #40	; 0x28
      { return _M_data_ptr(this->_M_impl._M_start); }
   baa36:	9a04      	ldr	r2, [sp, #16]
   baa38:	9301      	str	r3, [sp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   baa3a:	9b05      	ldr	r3, [sp, #20]
      { return _M_data_ptr(this->_M_impl._M_start); }
   baa3c:	980a      	ldr	r0, [sp, #40]	; 0x28
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   baa3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   baa40:	1a9b      	subs	r3, r3, r2
   baa42:	1a09      	subs	r1, r1, r0
   baa44:	109b      	asrs	r3, r3, #2
   baa46:	9300      	str	r3, [sp, #0]
   baa48:	1089      	asrs	r1, r1, #2
   baa4a:	9b07      	ldr	r3, [sp, #28]
   baa4c:	f7ff fc9e 	bl	ba38c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_>
            extract_features(d, features);
   baa50:	4629      	mov	r1, r5
   baa52:	a80d      	add	r0, sp, #52	; 0x34
   baa54:	f7ff ff70 	bl	ba938 <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>
        for (int l = 1; l < level; l++) {
   baa58:	3401      	adds	r4, #1
   baa5a:	e7e7      	b.n	baa2c <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x74>
        }

        extract_features(a, features);
   baa5c:	4629      	mov	r1, r5
   baa5e:	a80a      	add	r0, sp, #40	; 0x28
   baa60:	f7ff ff6a 	bl	ba938 <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>

        for (int l = 0; l <= level / 2; l++) { // reverse order to match python results.
   baa64:	2200      	movs	r2, #0
   baa66:	ea4f 0c66 	mov.w	ip, r6, asr #1
            for (int i = 0; i < (int)NUM_FEATHERS_PER_COMP; i++) {
   baa6a:	4613      	mov	r3, r2
                std::swap(
                    features[l * NUM_FEATHERS_PER_COMP + i],
   baa6c:	270e      	movs	r7, #14
	return *(this->_M_impl._M_start + __n);
   baa6e:	6829      	ldr	r1, [r5, #0]
                    features[(level - l) * NUM_FEATHERS_PER_COMP + i]);
   baa70:	1ab4      	subs	r4, r6, r2
   baa72:	fb07 3404 	mla	r4, r7, r4, r3
                    features[l * NUM_FEATHERS_PER_COMP + i],
   baa76:	fb07 3002 	mla	r0, r7, r2, r3
   baa7a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   baa7e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
            for (int i = 0; i < (int)NUM_FEATHERS_PER_COMP; i++) {
   baa82:	3301      	adds	r3, #1
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   baa84:	6804      	ldr	r4, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   baa86:	f8d1 e000 	ldr.w	lr, [r1]
   baa8a:	f8c0 e000 	str.w	lr, [r0]
   baa8e:	2b0e      	cmp	r3, #14
      __b = _GLIBCXX_MOVE(__tmp);
   baa90:	600c      	str	r4, [r1, #0]
   baa92:	d1ec      	bne.n	baa6e <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0xb6>
        for (int l = 0; l <= level / 2; l++) { // reverse order to match python results.
   baa94:	3201      	adds	r2, #1
   baa96:	4594      	cmp	ip, r2
   baa98:	da0e      	bge.n	baab8 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x100>
      }
   baa9a:	a80d      	add	r0, sp, #52	; 0x34
   baa9c:	f7fd f8f1 	bl	b7c82 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
   baaa0:	a80a      	add	r0, sp, #40	; 0x28
   baaa2:	f7fd f8ee 	bl	b7c82 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
   baaa6:	a807      	add	r0, sp, #28
   baaa8:	f7fd f8eb 	bl	b7c82 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
   baaac:	a804      	add	r0, sp, #16
   baaae:	f7fd f8e8 	bl	b7c82 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
            }
        }
    }
   baab2:	b010      	add	sp, #64	; 0x40
   baab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            for (int i = 0; i < (int)NUM_FEATHERS_PER_COMP; i++) {
   baab8:	2300      	movs	r3, #0
   baaba:	e7d8      	b.n	baa6e <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0xb6>
   baabc:	000c5e1b 	.word	0x000c5e1b
   baac0:	000c5e32 	.word	0x000c5e32
   baac4:	000c5ca8 	.word	0x000c5ca8

000baac8 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:
        int min_size = 32 * (1 << level);
        return (len >= min_size);
    }

public:
    static int extract_wavelet_features(
   baac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   baacc:	ed2d 8b02 	vpush	{d8}
   baad0:	4616      	mov	r6, r2
   baad2:	b089      	sub	sp, #36	; 0x24
   baad4:	4605      	mov	r5, r0
   baad6:	460f      	mov	r7, r1
   baad8:	eeb0 8a40 	vmov.f32	s16, s0
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config,
        const float sampling_freq)
    {
        // transpose the matrix so we have one row per axis
        numpy::transpose_in_place(input_matrix);
   baadc:	f7fd f87c 	bl	b7bd8 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>

        // func tests for scale of 1 and does a no op in that case
        EI_TRY(numpy::scale(input_matrix, config->scale_axes));
   baae0:	ed96 0a03 	vldr	s0, [r6, #12]
   baae4:	4628      	mov	r0, r5
   baae6:	f7fc f885 	bl	b6bf4 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
   baaea:	4604      	mov	r4, r0
   baaec:	bb70      	cbnz	r0, bab4c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x84>

        // apply filter, if enabled
        // "zero" order filter allowed.  will still remove unwanted fft bins later
        if (strcmp(config->filter_type, "low") == 0) {
   baaee:	6974      	ldr	r4, [r6, #20]
   baaf0:	4956      	ldr	r1, [pc, #344]	; (bac4c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x184>)
   baaf2:	4620      	mov	r0, r4
   baaf4:	f7fa f988 	bl	b4e08 <strcmp>
   baaf8:	bb70      	cbnz	r0, bab58 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x90>
            if (config->filter_order) {
   baafa:	69f1      	ldr	r1, [r6, #28]
   baafc:	b9d9      	cbnz	r1, bab36 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x6e>
                    config->filter_cutoff,
                    config->filter_order));
            }
        }

        EI_TRY(processing::subtract_mean(input_matrix));
   baafe:	4628      	mov	r0, r5
   bab00:	f7fc f91c 	bl	b6d3c <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
   bab04:	4604      	mov	r4, r0
   bab06:	bb08      	cbnz	r0, bab4c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x84>

        int out_idx = 0;
   bab08:	9002      	str	r0, [sp, #8]
        for (size_t row = 0; row < input_matrix->rows; row++) {
   bab0a:	4683      	mov	fp, r0
   bab0c:	686b      	ldr	r3, [r5, #4]
   bab0e:	455b      	cmp	r3, fp
   bab10:	d91c      	bls.n	bab4c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x84>
   bab12:	f8d5 9008 	ldr.w	r9, [r5, #8]
   bab16:	682b      	ldr	r3, [r5, #0]
   bab18:	fb09 f80b 	mul.w	r8, r9, fp
   bab1c:	eb03 0388 	add.w	r3, r3, r8, lsl #2
            float *data_window = input_matrix->get_row_ptr(row);
            size_t data_size = input_matrix->cols;

            if (!check_min_size(data_size, config->wavelet_level))
   bab20:	f8d6 8038 	ldr.w	r8, [r6, #56]	; 0x38
   bab24:	ee08 3a90 	vmov	s17, r3
        int min_size = 32 * (1 << level);
   bab28:	2320      	movs	r3, #32
   bab2a:	fa03 f208 	lsl.w	r2, r3, r8
            if (!check_min_size(data_size, config->wavelet_level))
   bab2e:	4591      	cmp	r9, r2
   bab30:	da24      	bge.n	bab7c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb4>
                EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
   bab32:	4c47      	ldr	r4, [pc, #284]	; (bac50 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x188>)
   bab34:	e00a      	b.n	bab4c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x84>
                EI_TRY(spectral::processing::butterworth_lowpass_filter(
   bab36:	edd6 0a06 	vldr	s1, [r6, #24]
   bab3a:	b2c9      	uxtb	r1, r1
   bab3c:	eeb0 0a48 	vmov.f32	s0, s16
   bab40:	4628      	mov	r0, r5
   bab42:	f7fb fcf1 	bl	b6528 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
                EI_TRY(spectral::processing::butterworth_highpass_filter(
   bab46:	4604      	mov	r4, r0
   bab48:	2800      	cmp	r0, #0
   bab4a:	d0d8      	beq.n	baafe <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x36>
            for (size_t i = 0; i < num_features; i++) {
                output_matrix->buffer[out_idx++] = features[i];
            }
        }
        return EIDSP_OK;
    }
   bab4c:	4620      	mov	r0, r4
   bab4e:	b009      	add	sp, #36	; 0x24
   bab50:	ecbd 8b02 	vpop	{d8}
   bab54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (strcmp(config->filter_type, "high") == 0) {
   bab58:	493e      	ldr	r1, [pc, #248]	; (bac54 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x18c>)
   bab5a:	4620      	mov	r0, r4
   bab5c:	f7fa f954 	bl	b4e08 <strcmp>
   bab60:	2800      	cmp	r0, #0
   bab62:	d1cc      	bne.n	baafe <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x36>
            if (config->filter_order) {
   bab64:	69f1      	ldr	r1, [r6, #28]
   bab66:	2900      	cmp	r1, #0
   bab68:	d0c9      	beq.n	baafe <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x36>
                EI_TRY(spectral::processing::butterworth_highpass_filter(
   bab6a:	edd6 0a06 	vldr	s1, [r6, #24]
   bab6e:	b2c9      	uxtb	r1, r1
   bab70:	eeb0 0a48 	vmov.f32	s0, s16
   bab74:	4628      	mov	r0, r5
   bab76:	f7fb f887 	bl	b5c88 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
   bab7a:	e7e4      	b.n	bab46 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x7e>
	: _M_start(), _M_finish(), _M_end_of_storage()
   bab7c:	2300      	movs	r3, #0
   bab7e:	e9cd 3305 	strd	r3, r3, [sp, #20]
   bab82:	9307      	str	r3, [sp, #28]
            size_t num_features = dwt_features(
   bab84:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        assert(level <= 7);
   bab86:	f1b8 0f07 	cmp.w	r8, #7
            size_t num_features = dwt_features(
   bab8a:	ee08 3a10 	vmov	s16, r3
        assert(level <= 7);
   bab8e:	dd06      	ble.n	bab9e <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xd6>
   bab90:	4b31      	ldr	r3, [pc, #196]	; (bac58 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x190>)
   bab92:	4a32      	ldr	r2, [pc, #200]	; (bac5c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>)
   bab94:	f44f 718e 	mov.w	r1, #284	; 0x11c
            assert(num_features == output_matrix->cols / input_matrix->rows);
   bab98:	4831      	ldr	r0, [pc, #196]	; (bac60 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x198>)
   bab9a:	f004 fa51 	bl	bf040 <__assert_func>
        features.reserve((level + 1) * NUM_FEATHERS_PER_COMP);
   bab9e:	f108 0301 	add.w	r3, r8, #1
   baba2:	9303      	str	r3, [sp, #12]
   baba4:	230e      	movs	r3, #14
   baba6:	fb08 3003 	mla	r0, r8, r3, r3
      if (__n > this->max_size())
   babaa:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   babae:	d302      	bcc.n	babb6 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xee>
	__throw_length_error(__N("vector::reserve"));
   babb0:	482c      	ldr	r0, [pc, #176]	; (bac64 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x19c>)
   babb2:	f006 fb6d 	bl	c1290 <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
   babb6:	b190      	cbz	r0, babde <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x116>
      _M_allocate(size_t __n)
   babb8:	f7fb fa4a 	bl	b6050 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj.part.0>
      return __relocate_a_1(std::__niter_base(__first),
   babbc:	4602      	mov	r2, r0
   babbe:	4682      	mov	sl, r0
   babc0:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
   babc4:	f7fb fb84 	bl	b62d0 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_.isra.0>
	  _M_deallocate(this->_M_impl._M_start,
   babc8:	9805      	ldr	r0, [sp, #20]
	if (__p)
   babca:	b108      	cbz	r0, babd0 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x108>
   babcc:	f001 fa18 	bl	bc000 <_Z7ei_freePv>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   babd0:	9b03      	ldr	r3, [sp, #12]
   babd2:	2038      	movs	r0, #56	; 0x38
	  this->_M_impl._M_finish = __tmp + __old_size;
   babd4:	e9cd aa05 	strd	sl, sl, [sp, #20]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   babd8:	fb00 a203 	mla	r2, r0, r3, sl
   babdc:	9207      	str	r2, [sp, #28]
        wavedec_features(x, len, wav, level, features);
   babde:	f10d 0a14 	add.w	sl, sp, #20
   babe2:	ee18 2a10 	vmov	r2, s16
   babe6:	ee18 0a90 	vmov	r0, s17
   babea:	4643      	mov	r3, r8
   babec:	4649      	mov	r1, r9
   babee:	f8cd a000 	str.w	sl, [sp]
   babf2:	f7ff fee1 	bl	ba9b8 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   babf6:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   babfa:	1a9b      	subs	r3, r3, r2
            assert(num_features == output_matrix->cols / input_matrix->rows);
   babfc:	6869      	ldr	r1, [r5, #4]
   babfe:	68ba      	ldr	r2, [r7, #8]
   bac00:	fbb2 f2f1 	udiv	r2, r2, r1
   bac04:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
   bac08:	ea4f 00a3 	mov.w	r0, r3, asr #2
   bac0c:	d110      	bne.n	bac30 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x168>
   bac0e:	9b02      	ldr	r3, [sp, #8]
   bac10:	009a      	lsls	r2, r3, #2
            for (size_t i = 0; i < num_features; i++) {
   bac12:	2300      	movs	r3, #0
   bac14:	4283      	cmp	r3, r0
   bac16:	d010      	beq.n	bac3a <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x172>
                output_matrix->buffer[out_idx++] = features[i];
   bac18:	9905      	ldr	r1, [sp, #20]
   bac1a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
            for (size_t i = 0; i < num_features; i++) {
   bac1e:	3301      	adds	r3, #1
                output_matrix->buffer[out_idx++] = features[i];
   bac20:	f8d1 c000 	ldr.w	ip, [r1]
   bac24:	6839      	ldr	r1, [r7, #0]
   bac26:	4411      	add	r1, r2
   bac28:	3204      	adds	r2, #4
   bac2a:	f8c1 c000 	str.w	ip, [r1]
            for (size_t i = 0; i < num_features; i++) {
   bac2e:	e7f1      	b.n	bac14 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x14c>
            assert(num_features == output_matrix->cols / input_matrix->rows);
   bac30:	4b0d      	ldr	r3, [pc, #52]	; (bac68 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1a0>)
   bac32:	4a0e      	ldr	r2, [pc, #56]	; (bac6c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1a4>)
   bac34:	f44f 71b0 	mov.w	r1, #352	; 0x160
   bac38:	e7ae      	b.n	bab98 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xd0>
   bac3a:	9a02      	ldr	r2, [sp, #8]
      }
   bac3c:	4650      	mov	r0, sl
   bac3e:	441a      	add	r2, r3
   bac40:	9202      	str	r2, [sp, #8]
        for (size_t row = 0; row < input_matrix->rows; row++) {
   bac42:	f10b 0b01 	add.w	fp, fp, #1
   bac46:	f7fd f81c 	bl	b7c82 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
   bac4a:	e75f      	b.n	bab0c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x44>
   bac4c:	000c58f3 	.word	0x000c58f3
   bac50:	fffffc11 	.word	0xfffffc11
   bac54:	000c58f7 	.word	0x000c58f7
   bac58:	000c5ea0 	.word	0x000c5ea0
   bac5c:	000c5eab 	.word	0x000c5eab
   bac60:	000c5ca8 	.word	0x000c5ca8
   bac64:	000c52b7 	.word	0x000c52b7
   bac68:	000c5f14 	.word	0x000c5f14
   bac6c:	000c5f4d 	.word	0x000c5f4d

000bac70 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v4(
   bac70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bac74:	ed2d 8b02 	vpush	{d8}
   bac78:	b09c      	sub	sp, #112	; 0x70
   bac7a:	4604      	mov	r4, r0
   bac7c:	460d      	mov	r5, r1
        matrix_t *input_matrix,
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config_p,
        const float sampling_freq)
    {
        auto config_copy = *config_p;
   bac7e:	a80b      	add	r0, sp, #44	; 0x2c
    static int extract_spectral_analysis_features_v4(
   bac80:	4611      	mov	r1, r2
        auto config_copy = *config_p;
   bac82:	2244      	movs	r2, #68	; 0x44
    static int extract_spectral_analysis_features_v4(
   bac84:	eeb0 8a40 	vmov.f32	s16, s0
        auto config_copy = *config_p;
   bac88:	f008 fa9a 	bl	c31c0 <memcpy>
        auto config = &config_copy;
        if (strcmp(config->analysis_type, "Wavelet") == 0) {
   bac8c:	496b      	ldr	r1, [pc, #428]	; (bae3c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1cc>)
   bac8e:	9813      	ldr	r0, [sp, #76]	; 0x4c
   bac90:	f7fa f8ba 	bl	b4e08 <strcmp>
   bac94:	b968      	cbnz	r0, bacb2 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x42>
            return wavelet::extract_wavelet_features(input_matrix, output_matrix, config, sampling_freq);
   bac96:	eeb0 0a48 	vmov.f32	s0, s16
   bac9a:	aa0b      	add	r2, sp, #44	; 0x2c
   bac9c:	4629      	mov	r1, r5
   bac9e:	4620      	mov	r0, r4
   baca0:	f7ff ff12 	bl	baac8 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
   baca4:	4603      	mov	r3, r0
                    true,
                    false);
            }
            return n_features == output_matrix->cols ? EIDSP_OK : EIDSP_MATRIX_SIZE_MISMATCH;
        }
    }
   baca6:	4618      	mov	r0, r3
   baca8:	b01c      	add	sp, #112	; 0x70
   bacaa:	ecbd 8b02 	vpop	{d8}
   bacae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else if (config->extra_low_freq == false && config->input_decimation_ratio == 1) {
   bacb2:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   bacb6:	b983      	cbnz	r3, bacda <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x6a>
   bacb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   bacba:	2b01      	cmp	r3, #1
   bacbc:	d10d      	bne.n	bacda <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x6a>
                extract_spec_features(input_matrix, output_matrix, config, sampling_freq);
   bacbe:	9300      	str	r3, [sp, #0]
   bacc0:	aa0b      	add	r2, sp, #44	; 0x2c
   bacc2:	eeb0 0a48 	vmov.f32	s0, s16
   bacc6:	4629      	mov	r1, r5
   bacc8:	4620      	mov	r0, r4
   bacca:	f7fe fce7 	bl	b969c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
            return n_features == output_matrix->cols ? EIDSP_OK : EIDSP_MATRIX_SIZE_MISMATCH;
   bacce:	68aa      	ldr	r2, [r5, #8]
   bacd0:	4b5b      	ldr	r3, [pc, #364]	; (bae40 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d0>)
   bacd2:	4282      	cmp	r2, r0
   bacd4:	bf08      	it	eq
   bacd6:	2300      	moveq	r3, #0
   bacd8:	e7e5      	b.n	baca6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x36>
            numpy::transpose_in_place(input_matrix);
   bacda:	4620      	mov	r0, r4
   bacdc:	f7fc ff7c 	bl	b7bd8 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>
            EI_TRY(numpy::scale(input_matrix, config->scale_axes));
   bace0:	ed9d 0a0e 	vldr	s0, [sp, #56]	; 0x38
   bace4:	4620      	mov	r0, r4
   bace6:	f7fb ff85 	bl	b6bf4 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
   bacea:	4606      	mov	r6, r0
   bacec:	2800      	cmp	r0, #0
   bacee:	d164      	bne.n	badba <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x14a>
            if (config->input_decimation_ratio > 1) {
   bacf0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   bacf2:	2901      	cmp	r1, #1
   bacf4:	dd2d      	ble.n	bad52 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xe2>
                ei_vector<int> ratio_combo = get_ratio_combo(config->input_decimation_ratio);
   bacf6:	a807      	add	r0, sp, #28
   bacf8:	f7fd f8d2 	bl	b7ea0 <_ZN2ei8spectral7feature15get_ratio_comboEi>
      : _M_current(__i) { }
   bacfc:	e9dd 7807 	ldrd	r7, r8, [sp, #28]
                size_t out_size = input_matrix->cols;
   bad00:	68a0      	ldr	r0, [r4, #8]
                for (int r : ratio_combo) {
   bad02:	4547      	cmp	r7, r8
   bad04:	d006      	beq.n	bad14 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xa4>
                    out_size = _decimate(input_matrix, input_matrix, r);
   bad06:	f857 2b04 	ldr.w	r2, [r7], #4
   bad0a:	4621      	mov	r1, r4
   bad0c:	4620      	mov	r0, r4
   bad0e:	f7fe fbdb 	bl	b94c8 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j>
	return *this;
   bad12:	e7f6      	b.n	bad02 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x92>
                float* out = input_matrix->get_row_ptr(0) + out_size;
   bad14:	6823      	ldr	r3, [r4, #0]
   bad16:	ea4f 0c80 	mov.w	ip, r0, lsl #2
   bad1a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
                for(uint32_t r = 1; r < input_matrix->rows; r++) {
   bad1e:	2201      	movs	r2, #1
   bad20:	6861      	ldr	r1, [r4, #4]
   bad22:	4291      	cmp	r1, r2
   bad24:	d910      	bls.n	bad48 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xd8>
                    for(size_t c = 0; c < out_size; c++) {
   bad26:	68a1      	ldr	r1, [r4, #8]
   bad28:	fb01 f702 	mul.w	r7, r1, r2
   bad2c:	6821      	ldr	r1, [r4, #0]
   bad2e:	eb03 0e0c 	add.w	lr, r3, ip
   bad32:	eb01 0187 	add.w	r1, r1, r7, lsl #2
   bad36:	4573      	cmp	r3, lr
   bad38:	d004      	beq.n	bad44 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xd4>
                        *out++ = row[c];
   bad3a:	f851 7b04 	ldr.w	r7, [r1], #4
   bad3e:	f843 7b04 	str.w	r7, [r3], #4
                    for(size_t c = 0; c < out_size; c++) {
   bad42:	e7f8      	b.n	bad36 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xc6>
                for(uint32_t r = 1; r < input_matrix->rows; r++) {
   bad44:	3201      	adds	r2, #1
   bad46:	e7eb      	b.n	bad20 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb0>
                input_matrix->cols = out_size;
   bad48:	60a0      	str	r0, [r4, #8]
	_M_deallocate(_M_impl._M_start,
   bad4a:	9807      	ldr	r0, [sp, #28]
	if (__p)
   bad4c:	b108      	cbz	r0, bad52 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xe2>
   bad4e:	f001 f957 	bl	bc000 <_Z7ei_freePv>
            float new_sampling_freq = sampling_freq / config->input_decimation_ratio;
   bad52:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
            if (strcmp(config->filter_type, "low") == 0) {
   bad56:	9f10      	ldr	r7, [sp, #64]	; 0x40
   bad58:	493a      	ldr	r1, [pc, #232]	; (bae44 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d4>)
            float new_sampling_freq = sampling_freq / config->input_decimation_ratio;
   bad5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            if (strcmp(config->filter_type, "low") == 0) {
   bad5e:	4638      	mov	r0, r7
            float new_sampling_freq = sampling_freq / config->input_decimation_ratio;
   bad60:	eec8 8a27 	vdiv.f32	s17, s16, s15
            if (strcmp(config->filter_type, "low") == 0) {
   bad64:	f7fa f850 	bl	b4e08 <strcmp>
   bad68:	2800      	cmp	r0, #0
   bad6a:	d135      	bne.n	badd8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x168>
                if( config->filter_order ) {
   bad6c:	9912      	ldr	r1, [sp, #72]	; 0x48
   bad6e:	bb31      	cbnz	r1, badbe <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x14e>
        return (input_size + factor - 1) / factor;
   bad70:	68a2      	ldr	r2, [r4, #8]
            matrix_t lf_signal(input_matrix->rows, decimated_size);
   bad72:	6861      	ldr	r1, [r4, #4]
            config->filter_order = 0;
   bad74:	2700      	movs	r7, #0
            matrix_t lf_signal(input_matrix->rows, decimated_size);
   bad76:	463b      	mov	r3, r7
   bad78:	f04f 080a 	mov.w	r8, #10
   bad7c:	3209      	adds	r2, #9
   bad7e:	a803      	add	r0, sp, #12
   bad80:	fbb2 f2f8 	udiv	r2, r2, r8
            config->filter_order = 0;
   bad84:	9712      	str	r7, [sp, #72]	; 0x48
            matrix_t lf_signal(input_matrix->rows, decimated_size);
   bad86:	f7fb feb1 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
            _decimate(input_matrix, &lf_signal, decimation);
   bad8a:	4642      	mov	r2, r8
   bad8c:	a903      	add	r1, sp, #12
   bad8e:	4620      	mov	r0, r4
   bad90:	f7fe fb9a 	bl	b94c8 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j>
            size_t n_features = extract_spec_features(
   bad94:	4620      	mov	r0, r4
   bad96:	9700      	str	r7, [sp, #0]
   bad98:	2301      	movs	r3, #1
   bad9a:	eeb0 0a68 	vmov.f32	s0, s17
   bad9e:	aa0b      	add	r2, sp, #44	; 0x2c
   bada0:	4629      	mov	r1, r5
   bada2:	f7fe fc7b 	bl	b969c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
            if (n_features > 0 && config->extra_low_freq) {
   bada6:	4604      	mov	r4, r0
   bada8:	bb40      	cbnz	r0, badfc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x18c>
            return n_features == output_matrix->cols ? EIDSP_OK : EIDSP_MATRIX_SIZE_MISMATCH;
   badaa:	68aa      	ldr	r2, [r5, #8]
   badac:	4b24      	ldr	r3, [pc, #144]	; (bae40 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d0>)
            matrix_t lf_signal(input_matrix->rows, decimated_size);
   badae:	a803      	add	r0, sp, #12
            return n_features == output_matrix->cols ? EIDSP_OK : EIDSP_MATRIX_SIZE_MISMATCH;
   badb0:	42a2      	cmp	r2, r4
   badb2:	bf18      	it	ne
   badb4:	461e      	movne	r6, r3
            matrix_t lf_signal(input_matrix->rows, decimated_size);
   badb6:	f7fb feae 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
   badba:	4633      	mov	r3, r6
   badbc:	e773      	b.n	baca6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x36>
                    EI_TRY(spectral::processing::butterworth_lowpass_filter(
   badbe:	eddd 0a11 	vldr	s1, [sp, #68]	; 0x44
   badc2:	b2c9      	uxtb	r1, r1
   badc4:	eeb0 0a68 	vmov.f32	s0, s17
   badc8:	4620      	mov	r0, r4
   badca:	f7fb fbad 	bl	b6528 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
                    EI_TRY(spectral::processing::butterworth_highpass_filter(
   badce:	4603      	mov	r3, r0
   badd0:	2800      	cmp	r0, #0
   badd2:	f47f af68 	bne.w	baca6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x36>
   badd6:	e7cb      	b.n	bad70 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x100>
            else if (strcmp(config->filter_type, "high") == 0) {
   badd8:	491b      	ldr	r1, [pc, #108]	; (bae48 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d8>)
   badda:	4638      	mov	r0, r7
   baddc:	f7fa f814 	bl	b4e08 <strcmp>
   bade0:	2800      	cmp	r0, #0
   bade2:	d1c5      	bne.n	bad70 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x100>
                if( config->filter_order ) {
   bade4:	9912      	ldr	r1, [sp, #72]	; 0x48
   bade6:	2900      	cmp	r1, #0
   bade8:	d0c2      	beq.n	bad70 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x100>
                    EI_TRY(spectral::processing::butterworth_highpass_filter(
   badea:	eddd 0a11 	vldr	s1, [sp, #68]	; 0x44
   badee:	b2c9      	uxtb	r1, r1
   badf0:	eeb0 0a68 	vmov.f32	s0, s17
   badf4:	4620      	mov	r0, r4
   badf6:	f7fa ff47 	bl	b5c88 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
   badfa:	e7e8      	b.n	badce <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x15e>
            if (n_features > 0 && config->extra_low_freq) {
   badfc:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   bae00:	2b00      	cmp	r3, #0
   bae02:	d0d2      	beq.n	badaa <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13a>
                matrix_t lf_features(1, output_matrix->rows * output_matrix->cols - n_features,
   bae04:	e9d5 3200 	ldrd	r3, r2, [r5]
   bae08:	68a9      	ldr	r1, [r5, #8]
   bae0a:	434a      	muls	r2, r1
                    output_matrix->buffer + n_features);
   bae0c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   bae10:	1a12      	subs	r2, r2, r0
   bae12:	2101      	movs	r1, #1
   bae14:	a807      	add	r0, sp, #28
   bae16:	f7fb fe69 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
                n_features += extract_spec_features(
   bae1a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   bae1e:	ee88 0a80 	vdiv.f32	s0, s17, s0
   bae22:	9700      	str	r7, [sp, #0]
   bae24:	2301      	movs	r3, #1
   bae26:	aa0b      	add	r2, sp, #44	; 0x2c
   bae28:	a907      	add	r1, sp, #28
   bae2a:	a803      	add	r0, sp, #12
   bae2c:	f7fe fc36 	bl	b969c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
   bae30:	4404      	add	r4, r0
                    output_matrix->buffer + n_features);
   bae32:	a807      	add	r0, sp, #28
   bae34:	f7fb fe6f 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
   bae38:	e7b7      	b.n	badaa <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13a>
   bae3a:	bf00      	nop
   bae3c:	000c5fd1 	.word	0x000c5fd1
   bae40:	fffffc14 	.word	0xfffffc14
   bae44:	000c58f3 	.word	0x000c58f3
   bae48:	000c58f7 	.word	0x000c58f7

000bae4c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
{
   bae4c:	b570      	push	{r4, r5, r6, lr}
   bae4e:	b088      	sub	sp, #32
    matrix_t input_matrix(signal->total_length / config->axes, config->axes);
   bae50:	2300      	movs	r3, #0
{
   bae52:	4604      	mov	r4, r0
   bae54:	460e      	mov	r6, r1
   bae56:	4615      	mov	r5, r2
    matrix_t input_matrix(signal->total_length / config->axes, config->axes);
   bae58:	6901      	ldr	r1, [r0, #16]
   bae5a:	6892      	ldr	r2, [r2, #8]
   bae5c:	fbb1 f1f2 	udiv	r1, r1, r2
   bae60:	a804      	add	r0, sp, #16
{
   bae62:	ed8d 0a03 	vstr	s0, [sp, #12]
    matrix_t input_matrix(signal->total_length / config->axes, config->axes);
   bae66:	f7fb fe41 	bl	b6aec <_ZN2ei9ei_matrixC1EmmPf>
    if (!input_matrix.buffer) {
   bae6a:	9b04      	ldr	r3, [sp, #16]
   bae6c:	b383      	cbz	r3, baed0 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x84>
    signal->get_data(0, signal->total_length, input_matrix.buffer);
   bae6e:	6922      	ldr	r2, [r4, #16]
   bae70:	2100      	movs	r1, #0
   bae72:	4620      	mov	r0, r4
   bae74:	f7fc ff0d 	bl	b7c92 <_ZNKSt8functionIFijjPfEEclEjjS0_>
    if (strcmp(config->analysis_type, "FFT") == 0) {
   bae78:	4917      	ldr	r1, [pc, #92]	; (baed8 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x8c>)
   bae7a:	6a28      	ldr	r0, [r5, #32]
   bae7c:	f7f9 ffc4 	bl	b4e08 <strcmp>
   bae80:	4604      	mov	r4, r0
   bae82:	bb38      	cbnz	r0, baed4 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x88>
        if (config->implementation_version == 1) {
   bae84:	88ab      	ldrh	r3, [r5, #4]
   bae86:	ed9d 0a03 	vldr	s0, [sp, #12]
   bae8a:	2b01      	cmp	r3, #1
   bae8c:	d10b      	bne.n	baea6 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x5a>
            return spectral::feature::extract_spectral_analysis_features_v1(
   bae8e:	462a      	mov	r2, r5
   bae90:	4631      	mov	r1, r6
   bae92:	a804      	add	r0, sp, #16
   bae94:	f7fe f9a4 	bl	b91e0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
            return spectral::feature::extract_spectral_analysis_features_v4(
   bae98:	4604      	mov	r4, r0
    matrix_t input_matrix(signal->total_length / config->axes, config->axes);
   bae9a:	a804      	add	r0, sp, #16
   bae9c:	f7fb fe3b 	bl	b6b16 <_ZN2ei9ei_matrixD1Ev>
}
   baea0:	4620      	mov	r0, r4
   baea2:	b008      	add	sp, #32
   baea4:	bd70      	pop	{r4, r5, r6, pc}
        } else if (config->implementation_version == 4) {
   baea6:	2b04      	cmp	r3, #4
   baea8:	d105      	bne.n	baeb6 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6a>
            return spectral::feature::extract_spectral_analysis_features_v4(
   baeaa:	462a      	mov	r2, r5
   baeac:	4631      	mov	r1, r6
   baeae:	a804      	add	r0, sp, #16
   baeb0:	f7ff fede 	bl	bac70 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
   baeb4:	e7f0      	b.n	bae98 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x4c>
            extract_spec_features(input_matrix, output_matrix, config, sampling_freq);
   baeb6:	2301      	movs	r3, #1
   baeb8:	9300      	str	r3, [sp, #0]
   baeba:	462a      	mov	r2, r5
   baebc:	4631      	mov	r1, r6
   baebe:	a804      	add	r0, sp, #16
   baec0:	f7fe fbec 	bl	b969c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
        return n_features == output_matrix->cols ? EIDSP_OK : EIDSP_MATRIX_SIZE_MISMATCH;
   baec4:	68b2      	ldr	r2, [r6, #8]
   baec6:	4b05      	ldr	r3, [pc, #20]	; (baedc <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x90>)
   baec8:	4290      	cmp	r0, r2
   baeca:	bf18      	it	ne
   baecc:	461c      	movne	r4, r3
   baece:	e7e4      	b.n	bae9a <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x4e>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
   baed0:	4c03      	ldr	r4, [pc, #12]	; (baee0 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x94>)
   baed2:	e7e2      	b.n	bae9a <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x4e>
    return EIDSP_NOT_SUPPORTED;
   baed4:	4c03      	ldr	r4, [pc, #12]	; (baee4 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x98>)
   baed6:	e7e0      	b.n	bae9a <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x4e>
   baed8:	000c5fd9 	.word	0x000c5fd9
   baedc:	fffffc14 	.word	0xfffffc14
   baee0:	fffffc16 	.word	0xfffffc16
   baee4:	fffffc0a 	.word	0xfffffc0a

000baee8 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
    ei_printf("run_classifier returned: %d\r\n", res);

    // Make sure the button has been released for a few milliseconds
    while (digitalRead(BUTTON_A) == 0)
        ;
   baee8:	b570      	push	{r4, r5, r6, lr}

    .has_anomaly = EI_ANOMALY_TYPE_UNKNOWN,
    .label_count = 2,
    .categories = ei_classifier_inferencing_categories,
    .object_detection_nms = ei_object_detection_nms
};
   baeea:	4e31      	ldr	r6, [pc, #196]	; (bafb0 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xc8>)
        : impulse(impulse)
   baeec:	4d31      	ldr	r5, [pc, #196]	; (bafb4 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xcc>)
        dsp_handles = (_dsp_handle_ptr_t*)ei_malloc(sizeof(_dsp_handle_ptr_t)*num_dsp_blocks);
   baeee:	f896 203c 	ldrb.w	r2, [r6, #60]	; 0x3c
   baef2:	4b31      	ldr	r3, [pc, #196]	; (bafb8 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xd0>)
        : impulse(impulse)
   baef4:	602e      	str	r6, [r5, #0]
   baef6:	b092      	sub	sp, #72	; 0x48
   baef8:	2400      	movs	r4, #0
        dsp_handles = (_dsp_handle_ptr_t*)ei_malloc(sizeof(_dsp_handle_ptr_t)*num_dsp_blocks);
   baefa:	0092      	lsls	r2, r2, #2
   baefc:	681b      	ldr	r3, [r3, #0]
        : impulse(impulse)
   baefe:	722c      	strb	r4, [r5, #8]
        dsp_handles = (_dsp_handle_ptr_t*)ei_malloc(sizeof(_dsp_handle_ptr_t)*num_dsp_blocks);
   baf00:	4610      	mov	r0, r2
   baf02:	6633      	str	r3, [r6, #96]	; 0x60
   baf04:	9205      	str	r2, [sp, #20]
   baf06:	f001 f877 	bl	bbff8 <_Z9ei_mallocj>
            dsp_handles[ix] = nullptr;
   baf0a:	9a05      	ldr	r2, [sp, #20]
        dsp_handles = (_dsp_handle_ptr_t*)ei_malloc(sizeof(_dsp_handle_ptr_t)*num_dsp_blocks);
   baf0c:	6068      	str	r0, [r5, #4]
            dsp_handles[ix] = nullptr;
   baf0e:	4621      	mov	r1, r4
   baf10:	f008 f97e 	bl	c3210 <memset>
};

class ei_impulse_handle_t {
public:
    ei_impulse_handle_t(const ei_impulse_t *impulse)
        : state(impulse), impulse(impulse), post_processing_state(nullptr) {};
   baf14:	e9c5 6403 	strd	r6, r4, [r5, #12]
Adafruit_SH1107 display = Adafruit_SH1107(64, 128, &Wire);
   baf18:	f006 f952 	bl	c11c0 <_Z19__fetch_global_Wirev>
   baf1c:	4a27      	ldr	r2, [pc, #156]	; (bafbc <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xd4>)
   baf1e:	4928      	ldr	r1, [pc, #160]	; (bafc0 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xd8>)
   baf20:	e9cd 2101 	strd	r2, r1, [sp, #4]
   baf24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baf28:	4603      	mov	r3, r0
   baf2a:	2140      	movs	r1, #64	; 0x40
   baf2c:	9200      	str	r2, [sp, #0]
   baf2e:	4825      	ldr	r0, [pc, #148]	; (bafc4 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xdc>)
   baf30:	2280      	movs	r2, #128	; 0x80
   baf32:	f003 fb55 	bl	be5e0 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>
Adafruit_VCNL4040 vcnl4040 = Adafruit_VCNL4040();
   baf36:	4824      	ldr	r0, [pc, #144]	; (bafc8 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xe0>)
   baf38:	f003 fca6 	bl	be888 <_ZN17Adafruit_VCNL4040C1Ev>
        capacity_(0) {
   baf3c:	e9cd 4406 	strd	r4, r4, [sp, #24]
   baf40:	9408      	str	r4, [sp, #32]
            StreamLogHandler(Serial, level, filters) {
   baf42:	f005 ffe5 	bl	c0f10 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   baf46:	4c21      	ldr	r4, [pc, #132]	; (bafcc <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xe4>)
   baf48:	4605      	mov	r5, r0
   baf4a:	a906      	add	r1, sp, #24
   baf4c:	a809      	add	r0, sp, #36	; 0x24
   baf4e:	f7fd f91d 	bl	b818c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   baf52:	4626      	mov	r6, r4

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   baf54:	a909      	add	r1, sp, #36	; 0x24
   baf56:	a80c      	add	r0, sp, #48	; 0x30
   baf58:	f7fd f918 	bl	b818c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   baf5c:	4b1c      	ldr	r3, [pc, #112]	; (bafd0 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xe8>)
   baf5e:	f846 3b04 	str.w	r3, [r6], #4
   baf62:	a90c      	add	r1, sp, #48	; 0x30
   baf64:	a80f      	add	r0, sp, #60	; 0x3c
   baf66:	f7fd f911 	bl	b818c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   baf6a:	aa0f      	add	r2, sp, #60	; 0x3c
   baf6c:	2132      	movs	r1, #50	; 0x32
   baf6e:	4630      	mov	r0, r6
   baf70:	f005 f8f2 	bl	c0158 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   baf74:	a80f      	add	r0, sp, #60	; 0x3c
   baf76:	f7fc fde2 	bl	b7b3e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   baf7a:	a80c      	add	r0, sp, #48	; 0x30
   baf7c:	f7fc fddf 	bl	b7b3e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   baf80:	4b14      	ldr	r3, [pc, #80]	; (bafd4 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xec>)
   baf82:	6023      	str	r3, [r4, #0]
   baf84:	6225      	str	r5, [r4, #32]
   baf86:	a809      	add	r0, sp, #36	; 0x24
   baf88:	f7fc fdd9 	bl	b7b3e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   baf8c:	4b12      	ldr	r3, [pc, #72]	; (bafd8 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xf0>)
   baf8e:	6023      	str	r3, [r4, #0]
        Serial.begin();
   baf90:	f005 ffbe 	bl	c0f10 <_Z16_fetch_usbserialv>
   baf94:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   baf98:	f005 ffaa 	bl	c0ef0 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   baf9c:	f004 fdee 	bl	bfb7c <_ZN5spark10LogManager8instanceEv>
   bafa0:	4621      	mov	r1, r4
   bafa2:	f004 fff1 	bl	bff88 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_ERROR);
   bafa6:	a806      	add	r0, sp, #24
   bafa8:	f7fc fdc9 	bl	b7b3e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bafac:	b012      	add	sp, #72	; 0x48
   bafae:	bd70      	pop	{r4, r5, r6, pc}
   bafb0:	2003cfbc 	.word	0x2003cfbc
   bafb4:	2003d7e0 	.word	0x2003d7e0
   bafb8:	2003d7dc 	.word	0x2003d7dc
   bafbc:	00061a80 	.word	0x00061a80
   bafc0:	000186a0 	.word	0x000186a0
   bafc4:	2003d784 	.word	0x2003d784
   bafc8:	2003d870 	.word	0x2003d870
   bafcc:	2003d7f4 	.word	0x2003d7f4
   bafd0:	000c60b4 	.word	0x000c60b4
   bafd4:	000c8b9c 	.word	0x000c8b9c
   bafd8:	000c60cc 	.word	0x000c60cc

000bafdc <loop>:
{
   bafdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bafe0:	ed2d 8b02 	vpush	{d8}
   bafe4:	4e99      	ldr	r6, [pc, #612]	; (bb24c <loop+0x270>)
        if (ambientLight > ambientLightMax)
   bafe6:	f8df 8298 	ldr.w	r8, [pc, #664]	; bb280 <loop+0x2a4>
{
   bafea:	b087      	sub	sp, #28
    while (digitalRead(BUTTON_A) == 1)
   bafec:	2004      	movs	r0, #4
   bafee:	f006 f8b9 	bl	c1164 <digitalRead>
   baff2:	2801      	cmp	r0, #1
   baff4:	4d96      	ldr	r5, [pc, #600]	; (bb250 <loop+0x274>)
   baff6:	f040 80a7 	bne.w	bb148 <loop+0x16c>
        uint16_t proximity = vcnl4040.getProximity();
   baffa:	4896      	ldr	r0, [pc, #600]	; (bb254 <loop+0x278>)
   baffc:	f003 fc45 	bl	be88a <_ZN17Adafruit_VCNL404012getProximityEv>
   bb000:	ee08 0a10 	vmov	s16, r0
        uint16_t ambientLight = vcnl4040.getAmbientLight();
   bb004:	4893      	ldr	r0, [pc, #588]	; (bb254 <loop+0x278>)
   bb006:	f003 fc57 	bl	be8b8 <_ZN17Adafruit_VCNL404015getAmbientLightEv>
   bb00a:	ee07 0a90 	vmov	s15, r0
        if (ambientLight > ambientLightMax)
   bb00e:	edd8 6a00 	vldr	s13, [r8]
            proximity < proximityMin   ? 0.0
   bb012:	ed96 6a00 	vldr	s12, [r6]
        if (ambientLight > ambientLightMax)
   bb016:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   bb01a:	eeb4 7ae6 	vcmpe.f32	s14, s13
   bb01e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            ambientLightMax = ambientLight;
   bb022:	bfc4      	itt	gt
   bb024:	eef8 7a67 	vcvtgt.f32.u32	s15, s15
   bb028:	edc8 7a00 	vstrgt	s15, [r8]
            proximity < proximityMin   ? 0.0
   bb02c:	eef8 7ac8 	vcvt.f32.s32	s15, s16
   bb030:	eef4 7ac6 	vcmpe.f32	s15, s12
   bb034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb038:	d478      	bmi.n	bb12c <loop+0x150>
            : proximity > proximityMax ? 1.0
   bb03a:	4b87      	ldr	r3, [pc, #540]	; (bb258 <loop+0x27c>)
   bb03c:	edd3 6a00 	vldr	s13, [r3]
            proximity < proximityMin   ? 0.0
   bb040:	eef4 7ae6 	vcmpe.f32	s15, s13
   bb044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb048:	dc73      	bgt.n	bb132 <loop+0x156>
                                       : (float)(proximity - proximityMin) / (proximityMax - proximityMin);
   bb04a:	ee77 7ac6 	vsub.f32	s15, s15, s12
   bb04e:	ee76 6ac6 	vsub.f32	s13, s13, s12
            proximity < proximityMin   ? 0.0
   bb052:	eec7 8aa6 	vdiv.f32	s17, s15, s13
            ambientLight < ambientLightMin   ? 0.0
   bb056:	edd5 6a00 	vldr	s13, [r5]
   bb05a:	eeb4 7ae6 	vcmpe.f32	s14, s13
   bb05e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb062:	d469      	bmi.n	bb138 <loop+0x15c>
            : ambientLight > ambientLightMax ? 1.0
   bb064:	edd8 7a00 	vldr	s15, [r8]
            ambientLight < ambientLightMin   ? 0.0
   bb068:	eeb4 7ae7 	vcmpe.f32	s14, s15
   bb06c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb070:	dc65      	bgt.n	bb13e <loop+0x162>
                                             : (float)(ambientLight - ambientLightMin) / (ambientLightMax - ambientLightMin);
   bb072:	ee37 7a66 	vsub.f32	s14, s14, s13
   bb076:	ee77 7ae6 	vsub.f32	s15, s15, s13
            ambientLight < ambientLightMin   ? 0.0
   bb07a:	ee87 8a27 	vdiv.f32	s16, s14, s15
        display.clearDisplay();
   bb07e:	4c77      	ldr	r4, [pc, #476]	; (bb25c <loop+0x280>)
        ei_printf("Timing: DSP %d ms, inference %d ms, anomaly %d ms\r\n",
   bb080:	4d77      	ldr	r5, [pc, #476]	; (bb260 <loop+0x284>)
   bb082:	f8df 920c 	ldr.w	r9, [pc, #524]	; bb290 <loop+0x2b4>
            ei_printf("  %s: ", ei_classifier_inferencing_categories[i]);
   bb086:	f8df b20c 	ldr.w	fp, [pc, #524]	; bb294 <loop+0x2b8>
            ei_printf("%.5f\r\n", result.classification[i].value);
   bb08a:	f8df a20c 	ldr.w	sl, [pc, #524]	; bb298 <loop+0x2bc>
        display.clearDisplay();
   bb08e:	4620      	mov	r0, r4
   bb090:	f003 fa00 	bl	be494 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
        display.setTextSize(1);
   bb094:	2101      	movs	r1, #1
   bb096:	4620      	mov	r0, r4
   bb098:	f003 f8d1 	bl	be23e <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   bb09c:	2700      	movs	r7, #0
   bb09e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   bb0a2:	e9c4 7304 	strd	r7, r3, [r4, #16]
        display.print("Norm Prox: ");
   bb0a6:	496f      	ldr	r1, [pc, #444]	; (bb264 <loop+0x288>)
   bb0a8:	4620      	mov	r0, r4
   bb0aa:	f005 fc5f 	bl	c096c <_ZN5Print5printEPKc>
        display.println(normProximity);
   bb0ae:	eeb0 0a68 	vmov.f32	s0, s17
   bb0b2:	2102      	movs	r1, #2
   bb0b4:	4620      	mov	r0, r4
   bb0b6:	f7fb f94f 	bl	b6358 <_ZN5Print7printlnEfi.isra.0>
        display.print("Norm Light: ");
   bb0ba:	496b      	ldr	r1, [pc, #428]	; (bb268 <loop+0x28c>)
   bb0bc:	4620      	mov	r0, r4
   bb0be:	f005 fc55 	bl	c096c <_ZN5Print5printEPKc>
        display.println(normAmbientLight);
   bb0c2:	eeb0 0a48 	vmov.f32	s0, s16
   bb0c6:	2102      	movs	r1, #2
   bb0c8:	4620      	mov	r0, r4
   bb0ca:	f7fb f945 	bl	b6358 <_ZN5Print7printlnEfi.isra.0>
        display.println("------");
   bb0ce:	4967      	ldr	r1, [pc, #412]	; (bb26c <loop+0x290>)
   bb0d0:	4620      	mov	r0, r4
   bb0d2:	f005 fc5e 	bl	c0992 <_ZN5Print7printlnEPKc>
        ei_printf("Timing: DSP %d ms, inference %d ms, anomaly %d ms\r\n",
   bb0d6:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
   bb0da:	6a69      	ldr	r1, [r5, #36]	; 0x24
   bb0dc:	4864      	ldr	r0, [pc, #400]	; (bb270 <loop+0x294>)
   bb0de:	f000 feb5 	bl	bbe4c <_Z9ei_printfPKcz>
        ei_printf("Predictions:\r\n");
   bb0e2:	4864      	ldr	r0, [pc, #400]	; (bb274 <loop+0x298>)
   bb0e4:	f000 feb2 	bl	bbe4c <_Z9ei_printfPKcz>
            ei_printf("  %s: ", ei_classifier_inferencing_categories[i]);
   bb0e8:	f8d9 1000 	ldr.w	r1, [r9]
   bb0ec:	4658      	mov	r0, fp
   bb0ee:	f000 fead 	bl	bbe4c <_Z9ei_printfPKcz>
            ei_printf("%.5f\r\n", result.classification[i].value);
   bb0f2:	68e8      	ldr	r0, [r5, #12]
   bb0f4:	f7f9 f8f8 	bl	b42e8 <__aeabi_f2d>
   bb0f8:	4602      	mov	r2, r0
   bb0fa:	460b      	mov	r3, r1
   bb0fc:	4650      	mov	r0, sl
   bb0fe:	f000 fea5 	bl	bbe4c <_Z9ei_printfPKcz>
            display.print(ei_classifier_inferencing_categories[i]);
   bb102:	f859 1b04 	ldr.w	r1, [r9], #4
   bb106:	4620      	mov	r0, r4
   bb108:	f005 fc30 	bl	c096c <_ZN5Print5printEPKc>
            display.print(": ");
   bb10c:	495a      	ldr	r1, [pc, #360]	; (bb278 <loop+0x29c>)
   bb10e:	4620      	mov	r0, r4
   bb110:	f005 fc2c 	bl	c096c <_ZN5Print5printEPKc>
            display.println(result.classification[i].value);
   bb114:	ed95 0a03 	vldr	s0, [r5, #12]
   bb118:	2102      	movs	r1, #2
   bb11a:	4620      	mov	r0, r4
   bb11c:	f7fb f91c 	bl	b6358 <_ZN5Print7printlnEfi.isra.0>
        for (uint16_t i = 0; i < EI_CLASSIFIER_LABEL_COUNT; i++)
   bb120:	3508      	adds	r5, #8
   bb122:	b17f      	cbz	r7, bb144 <loop+0x168>
        display.display();
   bb124:	484d      	ldr	r0, [pc, #308]	; (bb25c <loop+0x280>)
   bb126:	f003 fae1 	bl	be6ec <_ZN15Adafruit_SH110X7displayEv>
    while (digitalRead(BUTTON_A) == 1)
   bb12a:	e75f      	b.n	bafec <loop+0x10>
            proximity < proximityMin   ? 0.0
   bb12c:	eddf 8a53 	vldr	s17, [pc, #332]	; bb27c <loop+0x2a0>
   bb130:	e791      	b.n	bb056 <loop+0x7a>
   bb132:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
   bb136:	e78e      	b.n	bb056 <loop+0x7a>
            ambientLight < ambientLightMin   ? 0.0
   bb138:	ed9f 8a50 	vldr	s16, [pc, #320]	; bb27c <loop+0x2a0>
   bb13c:	e79f      	b.n	bb07e <loop+0xa2>
   bb13e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   bb142:	e79c      	b.n	bb07e <loop+0xa2>
   bb144:	2701      	movs	r7, #1
   bb146:	e7cf      	b.n	bb0e8 <loop+0x10c>
   bb148:	f8df a150 	ldr.w	sl, [pc, #336]	; bb29c <loop+0x2c0>
        uint16_t proximity = vcnl4040.getProximity();
   bb14c:	4f41      	ldr	r7, [pc, #260]	; (bb254 <loop+0x278>)
            proximity < proximityMin   ? 0.0
   bb14e:	eddf 8a4b 	vldr	s17, [pc, #300]	; bb27c <loop+0x2a0>
            : proximity > proximityMax ? 1.0
   bb152:	f8df 8104 	ldr.w	r8, [pc, #260]	; bb258 <loop+0x27c>
    int j = 0;
   bb156:	f04f 0900 	mov.w	r9, #0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bb15a:	f003 fcf9 	bl	beb50 <HAL_Timer_Get_Milli_Seconds>
   bb15e:	4604      	mov	r4, r0
        uint16_t proximity = vcnl4040.getProximity();
   bb160:	4638      	mov	r0, r7
   bb162:	f003 fb92 	bl	be88a <_ZN17Adafruit_VCNL404012getProximityEv>
   bb166:	ee08 0a10 	vmov	s16, r0
        uint16_t ambientLight = vcnl4040.getAmbientLight();
   bb16a:	4638      	mov	r0, r7
   bb16c:	f003 fba4 	bl	be8b8 <_ZN17Adafruit_VCNL404015getAmbientLightEv>
            proximity < proximityMin   ? 0.0
   bb170:	eeb8 7ac8 	vcvt.f32.s32	s14, s16
   bb174:	ed96 6a00 	vldr	s12, [r6]
   bb178:	eeb4 7ac6 	vcmpe.f32	s14, s12
   bb17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        uint16_t ambientLight = vcnl4040.getAmbientLight();
   bb180:	ee07 0a90 	vmov	s15, r0
            proximity < proximityMin   ? 0.0
   bb184:	d44d      	bmi.n	bb222 <loop+0x246>
            : proximity > proximityMax ? 1.0
   bb186:	edd8 6a00 	vldr	s13, [r8]
            proximity < proximityMin   ? 0.0
   bb18a:	eeb4 7ae6 	vcmpe.f32	s14, s13
   bb18e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb192:	dc49      	bgt.n	bb228 <loop+0x24c>
                                       : (float)(proximity - proximityMin) / (proximityMax - proximityMin);
   bb194:	ee37 7a46 	vsub.f32	s14, s14, s12
   bb198:	ee76 6ac6 	vsub.f32	s13, s13, s12
            proximity < proximityMin   ? 0.0
   bb19c:	ee87 6a26 	vdiv.f32	s12, s14, s13
            ambientLight < ambientLightMin   ? 0.0
   bb1a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bb1a4:	edd5 6a00 	vldr	s13, [r5]
   bb1a8:	eef4 7ae6 	vcmpe.f32	s15, s13
   bb1ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb1b0:	d43d      	bmi.n	bb22e <loop+0x252>
            : ambientLight > ambientLightMax ? 1.0
   bb1b2:	4b33      	ldr	r3, [pc, #204]	; (bb280 <loop+0x2a4>)
   bb1b4:	ed93 7a00 	vldr	s14, [r3]
            ambientLight < ambientLightMin   ? 0.0
   bb1b8:	eef4 7ac7 	vcmpe.f32	s15, s14
   bb1bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb1c0:	dc38      	bgt.n	bb234 <loop+0x258>
                                             : (float)(ambientLight - ambientLightMin) / (ambientLightMax - ambientLightMin);
   bb1c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
   bb1c6:	ee37 7a66 	vsub.f32	s14, s14, s13
            ambientLight < ambientLightMin   ? 0.0
   bb1ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
        j += 2;
   bb1ce:	f109 0902 	add.w	r9, r9, #2
        while (millis() < timestamp + SAMPLING_PERIOD_MS)
   bb1d2:	3414      	adds	r4, #20
        features[j] = normProximity;
   bb1d4:	ed8a 6a00 	vstr	s12, [sl]
        features[j + 1] = normAmbientLight;
   bb1d8:	edca 6a01 	vstr	s13, [sl, #4]
   bb1dc:	f003 fcb8 	bl	beb50 <HAL_Timer_Get_Milli_Seconds>
        while (millis() < timestamp + SAMPLING_PERIOD_MS)
   bb1e0:	4284      	cmp	r4, r0
   bb1e2:	d8fb      	bhi.n	bb1dc <loop+0x200>
    for (int i = 0; i < NUM_SAMPLES; i++)
   bb1e4:	f1b9 0fc8 	cmp.w	r9, #200	; 0xc8
   bb1e8:	f10a 0a08 	add.w	sl, sl, #8
   bb1ec:	d1b5      	bne.n	bb15a <loop+0x17e>
    features_signal.get_data = &raw_feature_get_data;
   bb1ee:	4925      	ldr	r1, [pc, #148]	; (bb284 <loop+0x2a8>)
    features_signal.total_length = sizeof(features) / sizeof(features[0]);
   bb1f0:	f8cd 9014 	str.w	r9, [sp, #20]
    _Function_base() : _M_manager(nullptr) { }
   bb1f4:	2400      	movs	r4, #0
    features_signal.get_data = &raw_feature_get_data;
   bb1f6:	a801      	add	r0, sp, #4
   bb1f8:	9403      	str	r4, [sp, #12]
   bb1fa:	f7fc ff81 	bl	b8100 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0>
    EI_IMPULSE_ERROR res = run_classifier(&features_signal, &result, false);
   bb1fe:	4918      	ldr	r1, [pc, #96]	; (bb260 <loop+0x284>)
   bb200:	4622      	mov	r2, r4
   bb202:	a801      	add	r0, sp, #4
   bb204:	f7fd fcc8 	bl	b8b98 <run_classifier>
    if (res != EI_IMPULSE_OK)
   bb208:	4601      	mov	r1, r0
   bb20a:	b1b0      	cbz	r0, bb23a <loop+0x25e>
        ei_printf("ERR: Failed to run classifier (%d)\n", res);
   bb20c:	481e      	ldr	r0, [pc, #120]	; (bb288 <loop+0x2ac>)
   bb20e:	f000 fe1d 	bl	bbe4c <_Z9ei_printfPKcz>
    class function<_Res(_ArgTypes...)>
   bb212:	a801      	add	r0, sp, #4
   bb214:	f7fb fc61 	bl	b6ada <_ZNSt14_Function_baseD1Ev>
   bb218:	b007      	add	sp, #28
   bb21a:	ecbd 8b02 	vpop	{d8}
   bb21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            proximity < proximityMin   ? 0.0
   bb222:	eeb0 6a68 	vmov.f32	s12, s17
   bb226:	e7bb      	b.n	bb1a0 <loop+0x1c4>
   bb228:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   bb22c:	e7b8      	b.n	bb1a0 <loop+0x1c4>
            ambientLight < ambientLightMin   ? 0.0
   bb22e:	eef0 6a68 	vmov.f32	s13, s17
   bb232:	e7cc      	b.n	bb1ce <loop+0x1f2>
   bb234:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   bb238:	e7c9      	b.n	bb1ce <loop+0x1f2>
    ei_printf("run_classifier returned: %d\r\n", res);
   bb23a:	4814      	ldr	r0, [pc, #80]	; (bb28c <loop+0x2b0>)
   bb23c:	f000 fe06 	bl	bbe4c <_Z9ei_printfPKcz>
    while (digitalRead(BUTTON_A) == 0)
   bb240:	2004      	movs	r0, #4
   bb242:	f005 ff8f 	bl	c1164 <digitalRead>
   bb246:	2800      	cmp	r0, #0
   bb248:	d0fa      	beq.n	bb240 <loop+0x264>
   bb24a:	e7e2      	b.n	bb212 <loop+0x236>
   bb24c:	2003d818 	.word	0x2003d818
   bb250:	2003d780 	.word	0x2003d780
   bb254:	2003d870 	.word	0x2003d870
   bb258:	2003d0c8 	.word	0x2003d0c8
   bb25c:	2003d784 	.word	0x2003d784
   bb260:	2003d820 	.word	0x2003d820
   bb264:	000c5fdd 	.word	0x000c5fdd
   bb268:	000c5fe9 	.word	0x000c5fe9
   bb26c:	000c5ff6 	.word	0x000c5ff6
   bb270:	000c5ffd 	.word	0x000c5ffd
   bb274:	000c6031 	.word	0x000c6031
   bb278:	000c8b4c 	.word	0x000c8b4c
   bb27c:	00000000 	.word	0x00000000
   bb280:	2003d77c 	.word	0x2003d77c
   bb284:	000b5c6d 	.word	0x000b5c6d
   bb288:	000c604e 	.word	0x000c604e
   bb28c:	000c6072 	.word	0x000c6072
   bb290:	2003d03c 	.word	0x2003d03c
   bb294:	000c6040 	.word	0x000c6040
   bb298:	000c6047 	.word	0x000c6047
   bb29c:	2003d458 	.word	0x2003d458

000bb2a0 <setup>:
{
   bb2a0:	b530      	push	{r4, r5, lr}
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
    }

    particle::SystemPowerConfiguration getPowerConfiguration() const {
        hal_power_config config = {};
   bb2a2:	2420      	movs	r4, #32
   bb2a4:	b091      	sub	sp, #68	; 0x44
   bb2a6:	4622      	mov	r2, r4
   bb2a8:	2100      	movs	r1, #0
   bb2aa:	eb0d 0004 	add.w	r0, sp, r4
   bb2ae:	f007 ffaf 	bl	c3210 <memset>
        config.size = sizeof(config);
   bb2b2:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
        system_power_management_get_config(&config, nullptr);
   bb2b6:	2100      	movs	r1, #0
   bb2b8:	eb0d 0004 	add.w	r0, sp, r4
        conf_.aux_pwr_ctrl_pin = PIN_INVALID;
        conf_.int_pin = PIN_INVALID;
    }

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
   bb2bc:	446c      	add	r4, sp
   bb2be:	f003 fe05 	bl	beecc <system_power_management_get_config>
   bb2c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bb2c4:	466d      	mov	r5, sp
   bb2c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bb2c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   bb2cc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    uint8_t socBitPrecision() const {
        return conf_.soc_bits;
    }

    SystemPowerConfiguration& auxiliaryPowerControlPin(uint8_t pin, bool activeLevel = 1) {
        conf_.aux_pwr_ctrl_pin = pin;
   bb2d0:	2317      	movs	r3, #23
   bb2d2:	f88d 300f 	strb.w	r3, [sp, #15]
        conf_.aux_pwr_ctrl_pin_level = activeLevel;
   bb2d6:	2301      	movs	r3, #1
   bb2d8:	f88d 3010 	strb.w	r3, [sp, #16]
        return system_power_management_set_config(conf.config(), nullptr);
   bb2dc:	2100      	movs	r1, #0
    uint8_t auxiliaryPowerControlActiveLevel() const {
        return conf_.aux_pwr_ctrl_pin_level;
    }
    
    SystemPowerConfiguration& interruptPin(uint8_t pin) {
        conf_.int_pin = pin;
   bb2de:	2315      	movs	r3, #21
   bb2e0:	4668      	mov	r0, sp
   bb2e2:	f88d 3011 	strb.w	r3, [sp, #17]
   bb2e6:	f003 fde7 	bl	beeb8 <system_power_management_set_config>
    pinMode(BUTTON_A, INPUT_PULLUP);
   bb2ea:	2102      	movs	r1, #2
   bb2ec:	2004      	movs	r0, #4
   bb2ee:	f005 ff0f 	bl	c1110 <pinMode>
    pinMode(BUTTON_B, INPUT_PULLUP);
   bb2f2:	2102      	movs	r1, #2
   bb2f4:	2003      	movs	r0, #3
   bb2f6:	f005 ff0b 	bl	c1110 <pinMode>
    pinMode(BUTTON_C, INPUT_PULLUP);
   bb2fa:	2102      	movs	r1, #2
   bb2fc:	2016      	movs	r0, #22
   bb2fe:	f005 ff07 	bl	c1110 <pinMode>
    if (!vcnl4040.begin())
   bb302:	f005 ff5d 	bl	c11c0 <_Z19__fetch_global_Wirev>
   bb306:	2160      	movs	r1, #96	; 0x60
   bb308:	4602      	mov	r2, r0
   bb30a:	4814      	ldr	r0, [pc, #80]	; (bb35c <setup+0xbc>)
   bb30c:	f003 fbc5 	bl	bea9a <_ZN17Adafruit_VCNL40405beginEhP7TwoWire>
   bb310:	b910      	cbnz	r0, bb318 <setup+0x78>
        ei_printf("Couldn't find VCNL4040 chip");
   bb312:	4813      	ldr	r0, [pc, #76]	; (bb360 <setup+0xc0>)
   bb314:	f000 fd9a 	bl	bbe4c <_Z9ei_printfPKcz>
    vcnl4040.setProximityIntegrationTime(VCNL4040_PROXIMITY_INTEGRATION_TIME_8T);
   bb318:	4810      	ldr	r0, [pc, #64]	; (bb35c <setup+0xbc>)
   bb31a:	2107      	movs	r1, #7
   bb31c:	f003 fb0c 	bl	be938 <_ZN17Adafruit_VCNL404027setProximityIntegrationTimeE26proximity_integration_time>
    vcnl4040.setAmbientIntegrationTime(VCNL4040_AMBIENT_INTEGRATION_TIME_80MS);
   bb320:	480e      	ldr	r0, [pc, #56]	; (bb35c <setup+0xbc>)
   bb322:	2100      	movs	r1, #0
   bb324:	f003 fb19 	bl	be95a <_ZN17Adafruit_VCNL404025setAmbientIntegrationTimeE24ambient_integration_time>
    vcnl4040.setProximityLEDCurrent(VCNL4040_LED_CURRENT_120MA);
   bb328:	480c      	ldr	r0, [pc, #48]	; (bb35c <setup+0xbc>)
   bb32a:	2103      	movs	r1, #3
   bb32c:	f003 fb38 	bl	be9a0 <_ZN17Adafruit_VCNL404022setProximityLEDCurrentE11led_current>
    vcnl4040.setProximityLEDDutyCycle(VCNL4040_LED_DUTY_1_40);
   bb330:	480a      	ldr	r0, [pc, #40]	; (bb35c <setup+0xbc>)
   bb332:	2100      	movs	r1, #0
   bb334:	f003 fb42 	bl	be9bc <_ZN17Adafruit_VCNL404024setProximityLEDDutyCycleE14led_duty_cycle>
    display.begin(0x3C, true); // Address 0x3C default
   bb338:	2201      	movs	r2, #1
   bb33a:	213c      	movs	r1, #60	; 0x3c
   bb33c:	4809      	ldr	r0, [pc, #36]	; (bb364 <setup+0xc4>)
   bb33e:	f003 f963 	bl	be608 <_ZN15Adafruit_SH11075beginEhb>
    display.clearDisplay();
   bb342:	4808      	ldr	r0, [pc, #32]	; (bb364 <setup+0xc4>)
   bb344:	f003 f8a6 	bl	be494 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
    display.display();
   bb348:	4806      	ldr	r0, [pc, #24]	; (bb364 <setup+0xc4>)
   bb34a:	f003 f9cf 	bl	be6ec <_ZN15Adafruit_SH110X7displayEv>
    display.setRotation(1);
   bb34e:	4805      	ldr	r0, [pc, #20]	; (bb364 <setup+0xc4>)
   bb350:	2101      	movs	r1, #1
   bb352:	f002 fd0d 	bl	bdd70 <_ZN12Adafruit_GFX11setRotationEh>
}
   bb356:	b011      	add	sp, #68	; 0x44
   bb358:	bd30      	pop	{r4, r5, pc}
   bb35a:	bf00      	nop
   bb35c:	2003d870 	.word	0x2003d870
   bb360:	000c6090 	.word	0x000c6090
   bb364:	2003d784 	.word	0x2003d784

000bb368 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
   bb368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb36c:	ed2d 8b08 	vpush	{d8-d11}
   bb370:	b089      	sub	sp, #36	; 0x24
   bb372:	4616      	mov	r6, r2
   bb374:	e9dd 251a 	ldrd	r2, r5, [sp, #104]	; 0x68
   bb378:	460f      	mov	r7, r1
    kiss_fft_cpx * Fout_beg=Fout;
    const int p=*factors++; /* the radix  */
    const int m=*factors++; /* stage's fft length/p */
   bb37a:	f8d2 a004 	ldr.w	sl, [r2, #4]
    const int p=*factors++; /* the radix  */
   bb37e:	6811      	ldr	r1, [r2, #0]
   bb380:	9103      	str	r1, [sp, #12]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
   bb382:	fb0a f901 	mul.w	r9, sl, r1
        }
        return;
    }
#endif

    if (m==1) {
   bb386:	f1ba 0f01 	cmp.w	sl, #1
        do{
            *Fout = *f;
            f += fstride*in_stride;
   bb38a:	fb06 f103 	mul.w	r1, r6, r3
{
   bb38e:	4604      	mov	r4, r0
    const kiss_fft_cpx * Fout_end = Fout + p*m;
   bb390:	eb00 09c9 	add.w	r9, r0, r9, lsl #3
            f += fstride*in_stride;
   bb394:	ea4f 08c1 	mov.w	r8, r1, lsl #3
    if (m==1) {
   bb398:	d116      	bne.n	bb3c8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x60>
   bb39a:	4603      	mov	r3, r0
            *Fout = *f;
   bb39c:	e897 0003 	ldmia.w	r7, {r0, r1}
   bb3a0:	e883 0003 	stmia.w	r3, {r0, r1}
        }while(++Fout != Fout_end );
   bb3a4:	3308      	adds	r3, #8
   bb3a6:	4599      	cmp	r9, r3
            f += fstride*in_stride;
   bb3a8:	4447      	add	r7, r8
        }while(++Fout != Fout_end );
   bb3aa:	d1f7      	bne.n	bb39c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x34>
    kiss_fft_cpx * tw1 = st->twiddles;
   bb3ac:	f505 7384 	add.w	r3, r5, #264	; 0x108
   bb3b0:	9305      	str	r3, [sp, #20]
   bb3b2:	9b03      	ldr	r3, [sp, #12]
   bb3b4:	3b02      	subs	r3, #2
   bb3b6:	2b03      	cmp	r3, #3
   bb3b8:	f200 8288 	bhi.w	bb8cc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x564>
   bb3bc:	e8df f013 	tbh	[pc, r3, lsl #1]
   bb3c0:	0056001b 	.word	0x0056001b
   bb3c4:	019900f9 	.word	0x019900f9
    const int m=*factors++; /* stage's fft length/p */
   bb3c8:	3208      	adds	r2, #8
   bb3ca:	9204      	str	r2, [sp, #16]
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
   bb3cc:	9a03      	ldr	r2, [sp, #12]
            f += fstride*in_stride;
        }while( (Fout += m) != Fout_end );
   bb3ce:	ea4f 0bca 	mov.w	fp, sl, lsl #3
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
   bb3d2:	4372      	muls	r2, r6
   bb3d4:	9904      	ldr	r1, [sp, #16]
   bb3d6:	9100      	str	r1, [sp, #0]
   bb3d8:	9501      	str	r5, [sp, #4]
   bb3da:	4639      	mov	r1, r7
   bb3dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   bb3e0:	9005      	str	r0, [sp, #20]
   bb3e2:	f7ff ffc1 	bl	bb368 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        }while( (Fout += m) != Fout_end );
   bb3e6:	9805      	ldr	r0, [sp, #20]
   bb3e8:	4458      	add	r0, fp
   bb3ea:	4581      	cmp	r9, r0
   bb3ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
            f += fstride*in_stride;
   bb3f0:	4447      	add	r7, r8
        }while( (Fout += m) != Fout_end );
   bb3f2:	d1ef      	bne.n	bb3d4 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x6c>
   bb3f4:	e7da      	b.n	bb3ac <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x44>
    Fout2 = Fout + m;
   bb3f6:	f10a 0301 	add.w	r3, sl, #1
   bb3fa:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
        tw1 += fstride;
   bb3fe:	00f6      	lsls	r6, r6, #3
   bb400:	3408      	adds	r4, #8
        C_MUL (t,  *Fout2 , *tw1);
   bb402:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
   bb406:	ed53 5a01 	vldr	s11, [r3, #-4]
   bb40a:	edd5 7a42 	vldr	s15, [r5, #264]	; 0x108
   bb40e:	ed13 6a02 	vldr	s12, [r3, #-8]
   bb412:	ee26 7ae5 	vnmul.f32	s14, s13, s11
    }while (--m);
   bb416:	f1ba 0a01 	subs.w	sl, sl, #1
        C_MUL (t,  *Fout2 , *tw1);
   bb41a:	eea6 7a27 	vfma.f32	s14, s12, s15
    }while (--m);
   bb41e:	f103 0308 	add.w	r3, r3, #8
   bb422:	f104 0408 	add.w	r4, r4, #8
        C_MUL (t,  *Fout2 , *tw1);
   bb426:	ee67 7aa5 	vmul.f32	s15, s15, s11
    }while (--m);
   bb42a:	4435      	add	r5, r6
        C_MUL (t,  *Fout2 , *tw1);
   bb42c:	eee6 7a26 	vfma.f32	s15, s12, s13
        C_SUB( *Fout2 ,  *Fout , t );
   bb430:	ed54 6a04 	vldr	s13, [r4, #-16]
   bb434:	ee76 6ac7 	vsub.f32	s13, s13, s14
   bb438:	ed43 6a04 	vstr	s13, [r3, #-16]
   bb43c:	ed54 6a03 	vldr	s13, [r4, #-12]
   bb440:	ee76 6ae7 	vsub.f32	s13, s13, s15
   bb444:	ed43 6a03 	vstr	s13, [r3, #-12]
        C_ADDTO( *Fout ,  t );
   bb448:	ed54 6a04 	vldr	s13, [r4, #-16]
   bb44c:	ee36 7a87 	vadd.f32	s14, s13, s14
   bb450:	ed04 7a04 	vstr	s14, [r4, #-16]
   bb454:	ed14 7a03 	vldr	s14, [r4, #-12]
   bb458:	ee77 7a27 	vadd.f32	s15, s14, s15
   bb45c:	ed44 7a03 	vstr	s15, [r4, #-12]
    }while (--m);
   bb460:	d1cf      	bne.n	bb402 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x9a>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
        case 4: kf_bfly4(Fout,fstride,st,m); break;
        case 5: kf_bfly5(Fout,fstride,st,m); break;
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
    }
}
   bb462:	b009      	add	sp, #36	; 0x24
   bb464:	ecbd 8b08 	vpop	{d8-d11}
   bb468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     epi3 = st->twiddles[fstride*m];
   bb46c:	fb06 f30a 	mul.w	r3, r6, sl
   bb470:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   bb474:	ed93 9a43 	vldr	s18, [r3, #268]	; 0x10c
   bb478:	eb04 08ca 	add.w	r8, r4, sl, lsl #3
         tw2 += fstride*2;
   bb47c:	0133      	lsls	r3, r6, #4
   bb47e:	eb04 190a 	add.w	r9, r4, sl, lsl #4
         tw1 += fstride;
   bb482:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   bb486:	f104 0608 	add.w	r6, r4, #8
   bb48a:	4644      	mov	r4, r8
        case 3: kf_bfly3(Fout,fstride,st,m); break;
   bb48c:	4657      	mov	r7, sl
         tw2 += fstride*2;
   bb48e:	9303      	str	r3, [sp, #12]
   bb490:	3404      	adds	r4, #4
   bb492:	46aa      	mov	sl, r5
         Fout[m2].i = Fout[m].i - scratch[0].r;
   bb494:	eef1 9a49 	vneg.f32	s19, s18
         C_MUL(scratch[1],Fout[m] , *tw1);
   bb498:	edd8 7a01 	vldr	s15, [r8, #4]
   bb49c:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
   bb4a0:	ed14 6a01 	vldr	s12, [r4, #-4]
   bb4a4:	ed95 8a42 	vldr	s16, [r5, #264]	; 0x108
         C_MUL(scratch[2],Fout[m2] , *tw2);
   bb4a8:	edd9 5a01 	vldr	s11, [r9, #4]
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
   bb4ac:	f856 0c08 	ldr.w	r0, [r6, #-8]
         C_MUL(scratch[1],Fout[m] , *tw1);
   bb4b0:	ee66 8ae7 	vnmul.f32	s17, s13, s15
     }while(--k);
   bb4b4:	3608      	adds	r6, #8
         C_MUL(scratch[1],Fout[m] , *tw1);
   bb4b6:	eeb0 7a68 	vmov.f32	s14, s17
   bb4ba:	eea6 7a08 	vfma.f32	s14, s12, s16
     }while(--k);
   bb4be:	f108 0808 	add.w	r8, r8, #8
   bb4c2:	445d      	add	r5, fp
         C_MUL(scratch[1],Fout[m] , *tw1);
   bb4c4:	ee28 8a27 	vmul.f32	s16, s16, s15
     }while(--k);
   bb4c8:	f109 0908 	add.w	r9, r9, #8
         C_MUL(scratch[1],Fout[m] , *tw1);
   bb4cc:	eef0 7a48 	vmov.f32	s15, s16
   bb4d0:	eee6 7a26 	vfma.f32	s15, s12, s13
     }while(--k);
   bb4d4:	3408      	adds	r4, #8
         C_MUL(scratch[2],Fout[m2] , *tw2);
   bb4d6:	edda 6a43 	vldr	s13, [sl, #268]	; 0x10c
   bb4da:	ed19 6a02 	vldr	s12, [r9, #-8]
   bb4de:	ed9a 8a42 	vldr	s16, [sl, #264]	; 0x108
   bb4e2:	ee66 8ae5 	vnmul.f32	s17, s13, s11
   bb4e6:	eee6 8a08 	vfma.f32	s17, s12, s16
   bb4ea:	ee28 8a25 	vmul.f32	s16, s16, s11
         C_ADD(scratch[3],scratch[1],scratch[2]);
   bb4ee:	ee77 aa28 	vadd.f32	s21, s14, s17
         C_MUL(scratch[2],Fout[m2] , *tw2);
   bb4f2:	eea6 8a26 	vfma.f32	s16, s12, s13
         C_SUB(scratch[0],scratch[1],scratch[2]);
   bb4f6:	ee77 8a68 	vsub.f32	s17, s14, s17
         C_ADD(scratch[3],scratch[1],scratch[2]);
   bb4fa:	ee37 aa88 	vadd.f32	s20, s15, s16
         C_SUB(scratch[0],scratch[1],scratch[2]);
   bb4fe:	ee37 8ac8 	vsub.f32	s16, s15, s16
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
   bb502:	f7f8 fef1 	bl	b42e8 <__aeabi_f2d>
   bb506:	ec41 0b1b 	vmov	d11, r0, r1
   bb50a:	ee1a 0a90 	vmov	r0, s21
   bb50e:	f7f8 feeb 	bl	b42e8 <__aeabi_f2d>
   bb512:	4bed      	ldr	r3, [pc, #948]	; (bb8c8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x560>)
   bb514:	2200      	movs	r2, #0
   bb516:	f7f8 ff3f 	bl	b4398 <__aeabi_dmul>
   bb51a:	4602      	mov	r2, r0
   bb51c:	460b      	mov	r3, r1
   bb51e:	ec51 0b1b 	vmov	r0, r1, d11
   bb522:	f7f8 fd81 	bl	b4028 <__aeabi_dsub>
   bb526:	f7f9 fa2f 	bl	b4988 <__aeabi_d2f>
   bb52a:	f844 0c0c 	str.w	r0, [r4, #-12]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
   bb52e:	f856 0c0c 	ldr.w	r0, [r6, #-12]
   bb532:	f7f8 fed9 	bl	b42e8 <__aeabi_f2d>
   bb536:	ec41 0b1b 	vmov	d11, r0, r1
   bb53a:	ee1a 0a10 	vmov	r0, s20
   bb53e:	f7f8 fed3 	bl	b42e8 <__aeabi_f2d>
   bb542:	4be1      	ldr	r3, [pc, #900]	; (bb8c8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x560>)
   bb544:	2200      	movs	r2, #0
   bb546:	f7f8 ff27 	bl	b4398 <__aeabi_dmul>
   bb54a:	460b      	mov	r3, r1
   bb54c:	4602      	mov	r2, r0
   bb54e:	ec51 0b1b 	vmov	r0, r1, d11
   bb552:	f7f8 fd69 	bl	b4028 <__aeabi_dsub>
   bb556:	f7f9 fa17 	bl	b4988 <__aeabi_d2f>
   bb55a:	f848 0c04 	str.w	r0, [r8, #-4]
         C_ADDTO(*Fout,scratch[3]);
   bb55e:	ed56 7a04 	vldr	s15, [r6, #-16]
   bb562:	ee77 7aaa 	vadd.f32	s15, s15, s21
     }while(--k);
   bb566:	3f01      	subs	r7, #1
         C_ADDTO(*Fout,scratch[3]);
   bb568:	ed46 7a04 	vstr	s15, [r6, #-16]
   bb56c:	ed56 7a03 	vldr	s15, [r6, #-12]
   bb570:	ee77 7a8a 	vadd.f32	s15, s15, s20
   bb574:	ed46 7a03 	vstr	s15, [r6, #-12]
         Fout[m2].r = Fout[m].r + scratch[0].i;
   bb578:	ed54 7a03 	vldr	s15, [r4, #-12]
   bb57c:	eee9 7a08 	vfma.f32	s15, s18, s16
   bb580:	ed49 7a02 	vstr	s15, [r9, #-8]
         Fout[m2].i = Fout[m].i - scratch[0].r;
   bb584:	ed58 7a01 	vldr	s15, [r8, #-4]
   bb588:	eee9 7aa8 	vfma.f32	s15, s19, s17
   bb58c:	ed49 7a01 	vstr	s15, [r9, #-4]
         Fout[m].r -= scratch[0].i;
   bb590:	ed54 7a03 	vldr	s15, [r4, #-12]
   bb594:	eee9 7a88 	vfma.f32	s15, s19, s16
   bb598:	ed44 7a03 	vstr	s15, [r4, #-12]
         Fout[m].i += scratch[0].r;
   bb59c:	ed58 7a01 	vldr	s15, [r8, #-4]
   bb5a0:	eee9 7a28 	vfma.f32	s15, s18, s17
   bb5a4:	ed48 7a01 	vstr	s15, [r8, #-4]
     }while(--k);
   bb5a8:	9b03      	ldr	r3, [sp, #12]
   bb5aa:	449a      	add	sl, r3
   bb5ac:	f47f af74 	bne.w	bb498 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x130>
   bb5b0:	e757      	b.n	bb462 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
   bb5b2:	4657      	mov	r7, sl
        tw3 += fstride*3;
   bb5b4:	2218      	movs	r2, #24
   bb5b6:	eb04 1007 	add.w	r0, r4, r7, lsl #4
        tw1 += fstride;
   bb5ba:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
        tw2 += fstride*2;
   bb5be:	ea4f 1a06 	mov.w	sl, r6, lsl #4
   bb5c2:	eb04 01c7 	add.w	r1, r4, r7, lsl #3
        tw3 += fstride*3;
   bb5c6:	4356      	muls	r6, r2
   bb5c8:	46a9      	mov	r9, r5
   bb5ca:	eb00 03c7 	add.w	r3, r0, r7, lsl #3
   bb5ce:	f104 0c04 	add.w	ip, r4, #4
   bb5d2:	46ae      	mov	lr, r5
   bb5d4:	46a8      	mov	r8, r5
        C_MUL(scratch[0],Fout[m] , *tw1 );
   bb5d6:	ed91 7a01 	vldr	s14, [r1, #4]
   bb5da:	edd9 6a43 	vldr	s13, [r9, #268]	; 0x10c
   bb5de:	ed91 5a00 	vldr	s10, [r1]
   bb5e2:	edd9 7a42 	vldr	s15, [r9, #264]	; 0x108
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   bb5e6:	edd0 4a01 	vldr	s9, [r0, #4]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   bb5ea:	edd3 3a01 	vldr	s7, [r3, #4]
        C_SUB( scratch[5] , *Fout, scratch[1] );
   bb5ee:	ed1c 3a01 	vldr	s6, [ip, #-4]
        C_MUL(scratch[0],Fout[m] , *tw1 );
   bb5f2:	ee26 6ac7 	vnmul.f32	s12, s13, s14
   bb5f6:	eea5 6a27 	vfma.f32	s12, s10, s15
   bb5fa:	ee67 7a87 	vmul.f32	s15, s15, s14
   bb5fe:	eef0 5a46 	vmov.f32	s11, s12
   bb602:	eee5 7a26 	vfma.f32	s15, s10, s13
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   bb606:	ed98 6a42 	vldr	s12, [r8, #264]	; 0x108
   bb60a:	ed90 5a00 	vldr	s10, [r0]
        C_MUL(scratch[0],Fout[m] , *tw1 );
   bb60e:	eeb0 7a67 	vmov.f32	s14, s15
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   bb612:	edd8 7a43 	vldr	s15, [r8, #268]	; 0x10c
   bb616:	ee67 6ae4 	vnmul.f32	s13, s15, s9
   bb61a:	eee5 6a06 	vfma.f32	s13, s10, s12
   bb61e:	ee26 6a24 	vmul.f32	s12, s12, s9
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   bb622:	edd3 4a00 	vldr	s9, [r3]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
   bb626:	eea5 6a27 	vfma.f32	s12, s10, s15
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   bb62a:	ed9e 5a43 	vldr	s10, [lr, #268]	; 0x10c
   bb62e:	edde 7a42 	vldr	s15, [lr, #264]	; 0x108
   bb632:	ee25 4a63 	vnmul.f32	s8, s10, s7
   bb636:	eea4 4aa7 	vfma.f32	s8, s9, s15
   bb63a:	ee67 7aa3 	vmul.f32	s15, s15, s7
        C_SUB( scratch[5] , *Fout, scratch[1] );
   bb63e:	edd4 3a01 	vldr	s7, [r4, #4]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
   bb642:	eee4 7a85 	vfma.f32	s15, s9, s10
        C_SUB( scratch[5] , *Fout, scratch[1] );
   bb646:	ee73 4a66 	vsub.f32	s9, s6, s13
        C_ADDTO(*Fout, scratch[1]);
   bb64a:	ee76 6a83 	vadd.f32	s13, s13, s6
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
   bb64e:	ee35 3a84 	vadd.f32	s6, s11, s8
        C_ADDTO(*Fout, scratch[1]);
   bb652:	ed4c 6a01 	vstr	s13, [ip, #-4]
        C_SUB( scratch[5] , *Fout, scratch[1] );
   bb656:	ee33 5ac6 	vsub.f32	s10, s7, s12
        C_SUB( Fout[m2], *Fout, scratch[3] );
   bb65a:	ee76 6ac3 	vsub.f32	s13, s13, s6
        C_ADDTO(*Fout, scratch[1]);
   bb65e:	ee36 6a23 	vadd.f32	s12, s12, s7
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
   bb662:	ee77 3a27 	vadd.f32	s7, s14, s15
        C_ADDTO(*Fout, scratch[1]);
   bb666:	ed84 6a01 	vstr	s12, [r4, #4]
        C_SUB( Fout[m2], *Fout, scratch[3] );
   bb66a:	edc0 6a00 	vstr	s13, [r0]
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
   bb66e:	ee35 6ac4 	vsub.f32	s12, s11, s8
        C_SUB( Fout[m2], *Fout, scratch[3] );
   bb672:	edd4 5a01 	vldr	s11, [r4, #4]
   bb676:	ee75 5ae3 	vsub.f32	s11, s11, s7
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
   bb67a:	ee77 7a67 	vsub.f32	s15, s14, s15
        C_SUB( Fout[m2], *Fout, scratch[3] );
   bb67e:	edc0 5a01 	vstr	s11, [r0, #4]
        C_ADDTO( *Fout , scratch[3] );
   bb682:	ed5c 6a01 	vldr	s13, [ip, #-4]
   bb686:	ee76 6a83 	vadd.f32	s13, s13, s6
   bb68a:	ed4c 6a01 	vstr	s13, [ip, #-4]
   bb68e:	ed94 7a01 	vldr	s14, [r4, #4]
   bb692:	ee37 7a23 	vadd.f32	s14, s14, s7
            Fout[m3].r = scratch[5].r + scratch[4].i;
   bb696:	ee74 6aa7 	vadd.f32	s13, s9, s15
        C_ADDTO( *Fout , scratch[3] );
   bb69a:	ed84 7a01 	vstr	s14, [r4, #4]
        if(st->inverse) {
   bb69e:	686a      	ldr	r2, [r5, #4]
            Fout[m3].i = scratch[5].i - scratch[4].r;
   bb6a0:	ee35 7a46 	vsub.f32	s14, s10, s12
            Fout[m].r = scratch[5].r - scratch[4].i;
   bb6a4:	ee74 7ae7 	vsub.f32	s15, s9, s15
            Fout[m].i = scratch[5].i + scratch[4].r;
   bb6a8:	ee35 6a06 	vadd.f32	s12, s10, s12
        if(st->inverse) {
   bb6ac:	b1c2      	cbz	r2, bb6e0 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x378>
            Fout[m].r = scratch[5].r - scratch[4].i;
   bb6ae:	edc1 7a00 	vstr	s15, [r1]
            Fout[m].i = scratch[5].i + scratch[4].r;
   bb6b2:	ed81 6a01 	vstr	s12, [r1, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
   bb6b6:	edc3 6a00 	vstr	s13, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
   bb6ba:	ed83 7a01 	vstr	s14, [r3, #4]
    }while(--k);
   bb6be:	3f01      	subs	r7, #1
        ++Fout;
   bb6c0:	f104 0408 	add.w	r4, r4, #8
    }while(--k);
   bb6c4:	f101 0108 	add.w	r1, r1, #8
   bb6c8:	44d9      	add	r9, fp
   bb6ca:	f100 0008 	add.w	r0, r0, #8
   bb6ce:	44d0      	add	r8, sl
   bb6d0:	f103 0308 	add.w	r3, r3, #8
   bb6d4:	44b6      	add	lr, r6
   bb6d6:	f10c 0c08 	add.w	ip, ip, #8
   bb6da:	f47f af7c 	bne.w	bb5d6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x26e>
   bb6de:	e6c0      	b.n	bb462 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
            Fout[m].r = scratch[5].r + scratch[4].i;
   bb6e0:	edc1 6a00 	vstr	s13, [r1]
            Fout[m].i = scratch[5].i - scratch[4].r;
   bb6e4:	ed81 7a01 	vstr	s14, [r1, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
   bb6e8:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
   bb6ec:	ed83 6a01 	vstr	s12, [r3, #4]
   bb6f0:	e7e5      	b.n	bb6be <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x356>
    ya = twiddles[fstride*m];
   bb6f2:	9a05      	ldr	r2, [sp, #20]
   bb6f4:	fb0a f306 	mul.w	r3, sl, r6
   bb6f8:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
   bb6fc:	00f2      	lsls	r2, r6, #3
   bb6fe:	ed97 2a01 	vldr	s4, [r7, #4]
   bb702:	9203      	str	r2, [sp, #12]
   bb704:	2218      	movs	r2, #24
   bb706:	4372      	muls	r2, r6
   bb708:	edd7 1a00 	vldr	s3, [r7]
    yb = twiddles[fstride*2*m];
   bb70c:	9204      	str	r2, [sp, #16]
   bb70e:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    Fout2=Fout0+2*m;
   bb712:	eb04 130a 	add.w	r3, r4, sl, lsl #4
    yb = twiddles[fstride*2*m];
   bb716:	ed97 1a00 	vldr	s2, [r7]
   bb71a:	edd7 2a01 	vldr	s5, [r7, #4]
    for ( u=0; u<m; ++u ) {
   bb71e:	ea4f 1b06 	mov.w	fp, r6, lsl #4
   bb722:	eb04 07ca 	add.w	r7, r4, sl, lsl #3
   bb726:	eb03 01ca 	add.w	r1, r3, sl, lsl #3
    Fout4=Fout0+4*m;
   bb72a:	eb03 100a 	add.w	r0, r3, sl, lsl #4
   bb72e:	0176      	lsls	r6, r6, #5
   bb730:	46ac      	mov	ip, r5
   bb732:	46ae      	mov	lr, r5
   bb734:	46a8      	mov	r8, r5
    for ( u=0; u<m; ++u ) {
   bb736:	f04f 0900 	mov.w	r9, #0
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
   bb73a:	eef1 0a42 	vneg.f32	s1, s4
    for ( u=0; u<m; ++u ) {
   bb73e:	45ca      	cmp	sl, r9
   bb740:	f104 0408 	add.w	r4, r4, #8
   bb744:	f107 0708 	add.w	r7, r7, #8
   bb748:	f103 0308 	add.w	r3, r3, #8
   bb74c:	f101 0108 	add.w	r1, r1, #8
   bb750:	f100 0008 	add.w	r0, r0, #8
   bb754:	f77f ae85 	ble.w	bb462 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
   bb758:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
   bb75c:	ed57 3a01 	vldr	s7, [r7, #-4]
   bb760:	edd5 5a42 	vldr	s11, [r5, #264]	; 0x108
   bb764:	ed17 6a02 	vldr	s12, [r7, #-8]
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   bb768:	edd8 4a42 	vldr	s9, [r8, #264]	; 0x108
   bb76c:	ed13 5a02 	vldr	s10, [r3, #-8]
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   bb770:	ed11 4a02 	vldr	s8, [r1, #-8]
        scratch[0] = *Fout0;
   bb774:	ed14 7a02 	vldr	s14, [r4, #-8]
   bb778:	ed54 7a01 	vldr	s15, [r4, #-4]
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
   bb77c:	9a03      	ldr	r2, [sp, #12]
   bb77e:	ee26 3ae3 	vnmul.f32	s6, s13, s7
   bb782:	4415      	add	r5, r2
   bb784:	eea6 3a25 	vfma.f32	s6, s12, s11
   bb788:	9a04      	ldr	r2, [sp, #16]
   bb78a:	ee65 5aa3 	vmul.f32	s11, s11, s7
   bb78e:	eef0 9a43 	vmov.f32	s19, s6
   bb792:	eee6 5a26 	vfma.f32	s11, s12, s13
    for ( u=0; u<m; ++u ) {
   bb796:	f109 0901 	add.w	r9, r9, #1
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   bb79a:	ed53 6a01 	vldr	s13, [r3, #-4]
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
   bb79e:	eef0 3a65 	vmov.f32	s7, s11
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   bb7a2:	edd8 5a43 	vldr	s11, [r8, #268]	; 0x10c
   bb7a6:	ee25 6ae6 	vnmul.f32	s12, s11, s13
   bb7aa:	ee64 6aa6 	vmul.f32	s13, s9, s13
   bb7ae:	eea5 6a24 	vfma.f32	s12, s10, s9
   bb7b2:	44d8      	add	r8, fp
   bb7b4:	eee5 6a25 	vfma.f32	s13, s10, s11
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   bb7b8:	edde 5a43 	vldr	s11, [lr, #268]	; 0x10c
   bb7bc:	ed9e 5a42 	vldr	s10, [lr, #264]	; 0x108
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   bb7c0:	eef0 4a66 	vmov.f32	s9, s13
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   bb7c4:	ed51 6a01 	vldr	s13, [r1, #-4]
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
   bb7c8:	eef0 8a46 	vmov.f32	s17, s12
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   bb7cc:	ee25 6ae6 	vnmul.f32	s12, s11, s13
   bb7d0:	4496      	add	lr, r2
   bb7d2:	eea4 6a05 	vfma.f32	s12, s8, s10
   bb7d6:	ee25 5a26 	vmul.f32	s10, s10, s13
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   bb7da:	eddc 6a43 	vldr	s13, [ip, #268]	; 0x10c
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   bb7de:	eea4 5a25 	vfma.f32	s10, s8, s11
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   bb7e2:	ed50 5a01 	vldr	s11, [r0, #-4]
   bb7e6:	ed9c 4a42 	vldr	s8, [ip, #264]	; 0x108
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
   bb7ea:	eeb0 0a46 	vmov.f32	s0, s12
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   bb7ee:	ee26 3ae5 	vnmul.f32	s6, s13, s11
   bb7f2:	ed10 6a02 	vldr	s12, [r0, #-8]
   bb7f6:	eea6 3a04 	vfma.f32	s6, s12, s8
   bb7fa:	44b4      	add	ip, r6
   bb7fc:	ee64 5a25 	vmul.f32	s11, s8, s11
        C_ADD( scratch[7],scratch[1],scratch[4]);
   bb800:	ee39 aa83 	vadd.f32	s20, s19, s6
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
   bb804:	eee6 5a26 	vfma.f32	s11, s12, s13
        C_SUB( scratch[10],scratch[1],scratch[4]);
   bb808:	ee39 3ac3 	vsub.f32	s6, s19, s6
        C_ADD( scratch[8],scratch[2],scratch[3]);
   bb80c:	ee78 9a80 	vadd.f32	s19, s17, s0
   bb810:	ee34 8a85 	vadd.f32	s16, s9, s10
        C_SUB( scratch[9],scratch[2],scratch[3]);
   bb814:	ee74 6ac5 	vsub.f32	s13, s9, s10
        Fout0->r += scratch[7].r + scratch[8].r;
   bb818:	ee3a 5a29 	vadd.f32	s10, s20, s19
        C_ADD( scratch[7],scratch[1],scratch[4]);
   bb81c:	ee33 9aa5 	vadd.f32	s18, s7, s11
        Fout0->r += scratch[7].r + scratch[8].r;
   bb820:	ee35 5a07 	vadd.f32	s10, s10, s14
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
   bb824:	eef0 4a47 	vmov.f32	s9, s14
        Fout0->r += scratch[7].r + scratch[8].r;
   bb828:	ed04 5a02 	vstr	s10, [r4, #-8]
        Fout0->i += scratch[7].i + scratch[8].i;
   bb82c:	ee39 5a08 	vadd.f32	s10, s18, s16
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
   bb830:	eee1 4a8a 	vfma.f32	s9, s3, s20
        Fout0->i += scratch[7].i + scratch[8].i;
   bb834:	ee35 5a27 	vadd.f32	s10, s10, s15
        C_SUB( scratch[9],scratch[2],scratch[3]);
   bb838:	ee38 6ac0 	vsub.f32	s12, s17, s0
        Fout0->i += scratch[7].i + scratch[8].i;
   bb83c:	ed04 5a01 	vstr	s10, [r4, #-4]
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
   bb840:	eeb0 5a67 	vmov.f32	s10, s15
        C_SUB( scratch[10],scratch[1],scratch[4]);
   bb844:	ee73 5ae5 	vsub.f32	s11, s7, s11
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
   bb848:	eea1 5a89 	vfma.f32	s10, s3, s18
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
   bb84c:	ee62 3aa6 	vmul.f32	s7, s5, s13
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
   bb850:	eea1 7a0a 	vfma.f32	s14, s2, s20
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
   bb854:	eee2 3a25 	vfma.f32	s7, s4, s11
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
   bb858:	eee1 4a29 	vfma.f32	s9, s2, s19
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
   bb85c:	ee26 4a62 	vnmul.f32	s8, s12, s5
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
   bb860:	eee1 7a09 	vfma.f32	s15, s2, s18
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
   bb864:	ee65 5ae2 	vnmul.f32	s11, s11, s5
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
   bb868:	eea1 5a08 	vfma.f32	s10, s2, s16
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
   bb86c:	eee2 5a26 	vfma.f32	s11, s4, s13
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
   bb870:	eea0 4a83 	vfma.f32	s8, s1, s6
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
   bb874:	eea1 7aa9 	vfma.f32	s14, s3, s19
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
   bb878:	ee66 6a42 	vnmul.f32	s13, s12, s4
        C_SUB(*Fout1,scratch[5],scratch[6]);
   bb87c:	ee34 0ae3 	vsub.f32	s0, s9, s7
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
   bb880:	eee1 7a88 	vfma.f32	s15, s3, s16
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
   bb884:	eee2 6a83 	vfma.f32	s13, s5, s6
        C_SUB(*Fout1,scratch[5],scratch[6]);
   bb888:	ed07 0a02 	vstr	s0, [r7, #-8]
        C_ADD(*Fout2,scratch[11],scratch[12]);
   bb88c:	ee37 6a25 	vadd.f32	s12, s14, s11
        C_SUB(*Fout1,scratch[5],scratch[6]);
   bb890:	ee35 0a44 	vsub.f32	s0, s10, s8
        C_ADD(*Fout4,scratch[5],scratch[6]);
   bb894:	ee74 4aa3 	vadd.f32	s9, s9, s7
   bb898:	ee35 5a04 	vadd.f32	s10, s10, s8
        C_SUB(*Fout1,scratch[5],scratch[6]);
   bb89c:	ed07 0a01 	vstr	s0, [r7, #-4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
   bb8a0:	ee37 7a65 	vsub.f32	s14, s14, s11
        C_ADD(*Fout4,scratch[5],scratch[6]);
   bb8a4:	ed40 4a02 	vstr	s9, [r0, #-8]
   bb8a8:	ed00 5a01 	vstr	s10, [r0, #-4]
        C_ADD(*Fout2,scratch[11],scratch[12]);
   bb8ac:	ed03 6a02 	vstr	s12, [r3, #-8]
   bb8b0:	ee37 6aa6 	vadd.f32	s12, s15, s13
        C_SUB(*Fout3,scratch[11],scratch[12]);
   bb8b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
        C_ADD(*Fout2,scratch[11],scratch[12]);
   bb8b8:	ed03 6a01 	vstr	s12, [r3, #-4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
   bb8bc:	ed01 7a02 	vstr	s14, [r1, #-8]
   bb8c0:	ed41 7a01 	vstr	s15, [r1, #-4]
    for ( u=0; u<m; ++u ) {
   bb8c4:	e73b      	b.n	bb73e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3d6>
   bb8c6:	bf00      	nop
   bb8c8:	3fe00000 	.word	0x3fe00000
    int Norig = st->nfft;
   bb8cc:	682b      	ldr	r3, [r5, #0]
   bb8ce:	9304      	str	r3, [sp, #16]
    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
   bb8d0:	9b03      	ldr	r3, [sp, #12]
   bb8d2:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   bb8d6:	4658      	mov	r0, fp
   bb8d8:	f000 fb8e 	bl	bbff8 <_Z9ei_mallocj>
   bb8dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
   bb8e0:	9207      	str	r2, [sp, #28]
   bb8e2:	f04f 0c00 	mov.w	ip, #0
   bb8e6:	fb0a f206 	mul.w	r2, sl, r6
   bb8ea:	4603      	mov	r3, r0
    for ( u=0; u<m; ++u ) {
   bb8ec:	9206      	str	r2, [sp, #24]
   bb8ee:	4483      	add	fp, r0
   bb8f0:	4665      	mov	r5, ip
   bb8f2:	45aa      	cmp	sl, r5
   bb8f4:	dd51      	ble.n	bb99a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x632>
   bb8f6:	46ae      	mov	lr, r5
        for ( q1=0 ; q1<p ; ++q1 ) {
   bb8f8:	2200      	movs	r2, #0
   bb8fa:	9903      	ldr	r1, [sp, #12]
   bb8fc:	4291      	cmp	r1, r2
   bb8fe:	dc38      	bgt.n	bb972 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x60a>
   bb900:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
   bb904:	46e6      	mov	lr, ip
        for ( q1=0 ; q1<p ; ++q1 ) {
   bb906:	f04f 0800 	mov.w	r8, #0
   bb90a:	9903      	ldr	r1, [sp, #12]
   bb90c:	4541      	cmp	r1, r8
   bb90e:	dd41      	ble.n	bb994 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x62c>
            Fout[ k ] = scratch[0];
   bb910:	e893 0003 	ldmia.w	r3, {r0, r1}
   bb914:	e882 0003 	stmia.w	r2, {r0, r1}
            for (q=1;q<p;++q ) {
   bb918:	f103 0008 	add.w	r0, r3, #8
            int twidx=0;
   bb91c:	2100      	movs	r1, #0
            for (q=1;q<p;++q ) {
   bb91e:	4558      	cmp	r0, fp
   bb920:	d031      	beq.n	bb986 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x61e>
                if (twidx>=Norig) twidx-=Norig;
   bb922:	9f04      	ldr	r7, [sp, #16]
                C_MUL(t,scratch[q] , twiddles[twidx] );
   bb924:	ed90 5a01 	vldr	s10, [r0, #4]
   bb928:	edd0 5a00 	vldr	s11, [r0]
                twidx += fstride * k;
   bb92c:	4471      	add	r1, lr
                if (twidx>=Norig) twidx-=Norig;
   bb92e:	428f      	cmp	r7, r1
   bb930:	bfd8      	it	le
   bb932:	1bc9      	suble	r1, r1, r7
                C_MUL(t,scratch[q] , twiddles[twidx] );
   bb934:	9f05      	ldr	r7, [sp, #20]
   bb936:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
   bb93a:	ed99 6a01 	vldr	s12, [r9, #4]
   bb93e:	edd9 7a00 	vldr	s15, [r9]
   bb942:	ee26 7a45 	vnmul.f32	s14, s12, s10
   bb946:	3008      	adds	r0, #8
   bb948:	eea5 7aa7 	vfma.f32	s14, s11, s15
   bb94c:	ee67 7a85 	vmul.f32	s15, s15, s10
   bb950:	eef0 6a47 	vmov.f32	s13, s14
                C_ADDTO( Fout[ k ] ,t);
   bb954:	ed92 7a00 	vldr	s14, [r2]
                C_MUL(t,scratch[q] , twiddles[twidx] );
   bb958:	eee5 7a86 	vfma.f32	s15, s11, s12
                C_ADDTO( Fout[ k ] ,t);
   bb95c:	ee37 7a26 	vadd.f32	s14, s14, s13
   bb960:	ed82 7a00 	vstr	s14, [r2]
   bb964:	ed92 7a01 	vldr	s14, [r2, #4]
   bb968:	ee77 7a27 	vadd.f32	s15, s14, s15
   bb96c:	edc2 7a01 	vstr	s15, [r2, #4]
            for (q=1;q<p;++q ) {
   bb970:	e7d5      	b.n	bb91e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x5b6>
            scratch[q1] = Fout[ k  ];
   bb972:	eb04 01ce 	add.w	r1, r4, lr, lsl #3
   bb976:	c903      	ldmia	r1, {r0, r1}
   bb978:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
   bb97c:	e888 0003 	stmia.w	r8, {r0, r1}
            k += m;
   bb980:	44d6      	add	lr, sl
        for ( q1=0 ; q1<p ; ++q1 ) {
   bb982:	3201      	adds	r2, #1
   bb984:	e7b9      	b.n	bb8fa <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x592>
        for ( q1=0 ; q1<p ; ++q1 ) {
   bb986:	9907      	ldr	r1, [sp, #28]
   bb988:	440a      	add	r2, r1
   bb98a:	9906      	ldr	r1, [sp, #24]
   bb98c:	f108 0801 	add.w	r8, r8, #1
   bb990:	448e      	add	lr, r1
   bb992:	e7ba      	b.n	bb90a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x5a2>
    for ( u=0; u<m; ++u ) {
   bb994:	3501      	adds	r5, #1
   bb996:	44b4      	add	ip, r6
   bb998:	e7ab      	b.n	bb8f2 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x58a>
    KISS_FFT_TMP_FREE(scratch);
   bb99a:	4618      	mov	r0, r3
}
   bb99c:	b009      	add	sp, #36	; 0x24
   bb99e:	ecbd 8b08 	vpop	{d8-d11}
   bb9a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    KISS_FFT_TMP_FREE(scratch);
   bb9a6:	f000 bb2b 	b.w	bc000 <_Z7ei_freePv>
   bb9aa:	bf00      	nop
   bb9ac:	0000      	movs	r0, r0
	...

000bb9b0 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
   bb9b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    kiss_fft_cfg st=NULL;
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
   bb9b4:	f100 0721 	add.w	r7, r0, #33	; 0x21
{
   bb9b8:	ed2d 8b02 	vpush	{d8}
   bb9bc:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   bb9c0:	4604      	mov	r4, r0
   bb9c2:	460e      	mov	r6, r1
   bb9c4:	4615      	mov	r5, r2
    size_t memneeded = sizeof(struct kiss_fft_state)
   bb9c6:	00ff      	lsls	r7, r7, #3

    if ( lenmem==NULL ) {
   bb9c8:	2b00      	cmp	r3, #0
   bb9ca:	d13d      	bne.n	bba48 <kiss_fft_alloc+0x98>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
   bb9cc:	4638      	mov	r0, r7
   bb9ce:	f000 fb13 	bl	bbff8 <_Z9ei_mallocj>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
            st = (kiss_fft_cfg)mem;
        *lenmem = memneeded;
    }
    if (st) {
   bb9d2:	4605      	mov	r5, r0
   bb9d4:	b3d0      	cbz	r0, bba4c <kiss_fft_alloc+0x9c>
        int i;
        st->nfft=nfft;
        st->inverse = inverse_fft;
   bb9d6:	e9c5 4600 	strd	r4, r6, [r5]
        if (inverse_fft)
   bb9da:	f505 7a84 	add.w	sl, r5, #264	; 0x108
   bb9de:	2e00      	cmp	r6, #0
   bb9e0:	d044      	beq.n	bba6c <kiss_fft_alloc+0xbc>
   bb9e2:	4656      	mov	r6, sl
        {
            for (i=0;i<nfft;++i) {
   bb9e4:	f04f 0a00 	mov.w	sl, #0
    floor_sqrt = floor( sqrt((double)n) );
   bb9e8:	4620      	mov	r0, r4
   bb9ea:	f7f8 fc6b 	bl	b42c4 <__aeabi_i2d>
            for (i=0;i<nfft;++i) {
   bb9ee:	45a2      	cmp	sl, r4
    floor_sqrt = floor( sqrt((double)n) );
   bb9f0:	4680      	mov	r8, r0
   bb9f2:	4689      	mov	r9, r1
            for (i=0;i<nfft;++i) {
   bb9f4:	f106 0608 	add.w	r6, r6, #8
   bb9f8:	da67      	bge.n	bbaca <kiss_fft_alloc+0x11a>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
                double phase = 2*pi*i / nfft;
   bb9fa:	4650      	mov	r0, sl
   bb9fc:	f7f8 fc62 	bl	b42c4 <__aeabi_i2d>
   bba00:	a34b      	add	r3, pc, #300	; (adr r3, bbb30 <kiss_fft_alloc+0x180>)
   bba02:	e9d3 2300 	ldrd	r2, r3, [r3]
   bba06:	f7f8 fcc7 	bl	b4398 <__aeabi_dmul>
   bba0a:	4642      	mov	r2, r8
   bba0c:	464b      	mov	r3, r9
   bba0e:	f7f8 fded 	bl	b45ec <__aeabi_ddiv>
                kf_cexp(st->twiddles+i, phase );
   bba12:	ec41 0b10 	vmov	d0, r0, r1
                double phase = 2*pi*i / nfft;
   bba16:	ec41 0b18 	vmov	d8, r0, r1
                kf_cexp(st->twiddles+i, phase );
   bba1a:	f005 fc41 	bl	c12a0 <cos>
   bba1e:	ec51 0b10 	vmov	r0, r1, d0
   bba22:	f7f8 ffb1 	bl	b4988 <__aeabi_d2f>
   bba26:	eeb0 0a48 	vmov.f32	s0, s16
   bba2a:	eef0 0a68 	vmov.f32	s1, s17
   bba2e:	f846 0c08 	str.w	r0, [r6, #-8]
   bba32:	f005 fe1d 	bl	c1670 <sin>
   bba36:	ec51 0b10 	vmov	r0, r1, d0
   bba3a:	f7f8 ffa5 	bl	b4988 <__aeabi_d2f>
            for (i=0;i<nfft;++i) {
   bba3e:	f10a 0a01 	add.w	sl, sl, #1
                kf_cexp(st->twiddles+i, phase );
   bba42:	f846 0c04 	str.w	r0, [r6, #-4]
            for (i=0;i<nfft;++i) {
   bba46:	e7cf      	b.n	bb9e8 <kiss_fft_alloc+0x38>
        if (mem != NULL && *lenmem >= memneeded)
   bba48:	b952      	cbnz	r2, bba60 <kiss_fft_alloc+0xb0>
        *lenmem = memneeded;
   bba4a:	601f      	str	r7, [r3, #0]
        }

        kf_factor(nfft,st->factors);
    }

    if (memallocated != NULL) {
   bba4c:	f1bb 0f00 	cmp.w	fp, #0
   bba50:	d001      	beq.n	bba56 <kiss_fft_alloc+0xa6>
        *memallocated = memneeded;
   bba52:	f8cb 7000 	str.w	r7, [fp]
    }

    return st;
}
   bba56:	ecbd 8b02 	vpop	{d8}
   bba5a:	4628      	mov	r0, r5
   bba5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (mem != NULL && *lenmem >= memneeded)
   bba60:	681a      	ldr	r2, [r3, #0]
        *lenmem = memneeded;
   bba62:	601f      	str	r7, [r3, #0]
        if (mem != NULL && *lenmem >= memneeded)
   bba64:	42ba      	cmp	r2, r7
   bba66:	d2b6      	bcs.n	bb9d6 <kiss_fft_alloc+0x26>
    kiss_fft_cfg st=NULL;
   bba68:	2500      	movs	r5, #0
   bba6a:	e7ef      	b.n	bba4c <kiss_fft_alloc+0x9c>
    floor_sqrt = floor( sqrt((double)n) );
   bba6c:	4620      	mov	r0, r4
   bba6e:	f7f8 fc29 	bl	b42c4 <__aeabi_i2d>
            for (i=0;i<nfft;++i) {
   bba72:	42a6      	cmp	r6, r4
    floor_sqrt = floor( sqrt((double)n) );
   bba74:	4680      	mov	r8, r0
   bba76:	4689      	mov	r9, r1
            for (i=0;i<nfft;++i) {
   bba78:	f10a 0a08 	add.w	sl, sl, #8
   bba7c:	da25      	bge.n	bbaca <kiss_fft_alloc+0x11a>
                double phase = -2*pi*i / nfft;
   bba7e:	4630      	mov	r0, r6
   bba80:	f7f8 fc20 	bl	b42c4 <__aeabi_i2d>
   bba84:	a32c      	add	r3, pc, #176	; (adr r3, bbb38 <kiss_fft_alloc+0x188>)
   bba86:	e9d3 2300 	ldrd	r2, r3, [r3]
   bba8a:	f7f8 fc85 	bl	b4398 <__aeabi_dmul>
   bba8e:	4642      	mov	r2, r8
   bba90:	464b      	mov	r3, r9
   bba92:	f7f8 fdab 	bl	b45ec <__aeabi_ddiv>
                kf_cexp(st->twiddles+i, phase );
   bba96:	ec41 0b10 	vmov	d0, r0, r1
                double phase = -2*pi*i / nfft;
   bba9a:	ec41 0b18 	vmov	d8, r0, r1
                kf_cexp(st->twiddles+i, phase );
   bba9e:	f005 fbff 	bl	c12a0 <cos>
   bbaa2:	ec51 0b10 	vmov	r0, r1, d0
   bbaa6:	f7f8 ff6f 	bl	b4988 <__aeabi_d2f>
   bbaaa:	eeb0 0a48 	vmov.f32	s0, s16
   bbaae:	eef0 0a68 	vmov.f32	s1, s17
   bbab2:	f84a 0c08 	str.w	r0, [sl, #-8]
   bbab6:	f005 fddb 	bl	c1670 <sin>
   bbaba:	ec51 0b10 	vmov	r0, r1, d0
   bbabe:	f7f8 ff63 	bl	b4988 <__aeabi_d2f>
            for (i=0;i<nfft;++i) {
   bbac2:	3601      	adds	r6, #1
                kf_cexp(st->twiddles+i, phase );
   bbac4:	f84a 0c04 	str.w	r0, [sl, #-4]
            for (i=0;i<nfft;++i) {
   bbac8:	e7d0      	b.n	bba6c <kiss_fft_alloc+0xbc>
    floor_sqrt = floor( sqrt((double)n) );
   bbaca:	4620      	mov	r0, r4
   bbacc:	f7f8 fbfa 	bl	b42c4 <__aeabi_i2d>
   bbad0:	ec41 0b10 	vmov	d0, r0, r1
   bbad4:	f005 fe98 	bl	c1808 <sqrt>
   bbad8:	f005 fc2a 	bl	c1330 <floor>
   bbadc:	ec59 8b10 	vmov	r8, r9, d0
        kf_factor(nfft,st->factors);
   bbae0:	f105 0a08 	add.w	sl, r5, #8
    int p=4;
   bbae4:	2604      	movs	r6, #4
        while (n % p) {
   bbae6:	fb94 f3f6 	sdiv	r3, r4, r6
   bbaea:	fb06 4213 	mls	r2, r6, r3, r4
   bbaee:	b1aa      	cbz	r2, bbb1c <kiss_fft_alloc+0x16c>
            switch (p) {
   bbaf0:	2e02      	cmp	r6, #2
   bbaf2:	d00f      	beq.n	bbb14 <kiss_fft_alloc+0x164>
   bbaf4:	2e04      	cmp	r6, #4
   bbaf6:	d00f      	beq.n	bbb18 <kiss_fft_alloc+0x168>
                default: p += 2; break;
   bbaf8:	3602      	adds	r6, #2
            if (p > floor_sqrt)
   bbafa:	4630      	mov	r0, r6
   bbafc:	f7f8 fbe2 	bl	b42c4 <__aeabi_i2d>
   bbb00:	4602      	mov	r2, r0
   bbb02:	460b      	mov	r3, r1
   bbb04:	4640      	mov	r0, r8
   bbb06:	4649      	mov	r1, r9
   bbb08:	f7f8 feb8 	bl	b487c <__aeabi_dcmplt>
                p = n;          /* no more factors, skip to end */
   bbb0c:	2800      	cmp	r0, #0
   bbb0e:	bf18      	it	ne
   bbb10:	4626      	movne	r6, r4
   bbb12:	e7e8      	b.n	bbae6 <kiss_fft_alloc+0x136>
                case 2: p = 3; break;
   bbb14:	2603      	movs	r6, #3
   bbb16:	e7f0      	b.n	bbafa <kiss_fft_alloc+0x14a>
            switch (p) {
   bbb18:	2602      	movs	r6, #2
   bbb1a:	e7ee      	b.n	bbafa <kiss_fft_alloc+0x14a>
    } while (n > 1);
   bbb1c:	2b01      	cmp	r3, #1
        *facbuf++ = n;
   bbb1e:	e9ca 6300 	strd	r6, r3, [sl]
        n /= p;
   bbb22:	461c      	mov	r4, r3
    } while (n > 1);
   bbb24:	dd92      	ble.n	bba4c <kiss_fft_alloc+0x9c>
        *facbuf++ = n;
   bbb26:	f10a 0a08 	add.w	sl, sl, #8
   bbb2a:	e7dc      	b.n	bbae6 <kiss_fft_alloc+0x136>
   bbb2c:	f3af 8000 	nop.w
   bbb30:	54442d18 	.word	0x54442d18
   bbb34:	401921fb 	.word	0x401921fb
   bbb38:	54442d18 	.word	0x54442d18
   bbb3c:	c01921fb 	.word	0xc01921fb

000bbb40 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
   bbb40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (fin == fout) {
   bbb44:	4291      	cmp	r1, r2
{
   bbb46:	4604      	mov	r4, r0
   bbb48:	460d      	mov	r5, r1
   bbb4a:	4610      	mov	r0, r2
   bbb4c:	461f      	mov	r7, r3
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
   bbb4e:	f104 0808 	add.w	r8, r4, #8
    if (fin == fout) {
   bbb52:	d117      	bne.n	bbb84 <kiss_fft_stride+0x44>
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
   bbb54:	6820      	ldr	r0, [r4, #0]
   bbb56:	00c0      	lsls	r0, r0, #3
   bbb58:	f000 fa4e 	bl	bbff8 <_Z9ei_mallocj>
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
   bbb5c:	463b      	mov	r3, r7
   bbb5e:	4629      	mov	r1, r5
   bbb60:	e9cd 8400 	strd	r8, r4, [sp]
   bbb64:	2201      	movs	r2, #1
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
   bbb66:	4606      	mov	r6, r0
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
   bbb68:	f7ff fbfe 	bl	bb368 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
   bbb6c:	6822      	ldr	r2, [r4, #0]
   bbb6e:	4631      	mov	r1, r6
   bbb70:	00d2      	lsls	r2, r2, #3
   bbb72:	4628      	mov	r0, r5
   bbb74:	f007 fb24 	bl	c31c0 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
   bbb78:	4630      	mov	r0, r6
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
   bbb7a:	b002      	add	sp, #8
   bbb7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        KISS_FFT_TMP_FREE(tmpbuf);
   bbb80:	f000 ba3e 	b.w	bc000 <_Z7ei_freePv>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
   bbb84:	e9cd 8400 	strd	r8, r4, [sp]
   bbb88:	2201      	movs	r2, #1
   bbb8a:	f7ff fbed 	bl	bb368 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
   bbb8e:	b002      	add	sp, #8
   bbb90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bbb94 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
    kiss_fft_stride(cfg,fin,fout,1);
   bbb94:	2301      	movs	r3, #1
   bbb96:	f7ff bfd3 	b.w	bbb40 <kiss_fft_stride>
   bbb9a:	0000      	movs	r0, r0
   bbb9c:	0000      	movs	r0, r0
	...

000bbba0 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
   bbba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbba4:	ed2d 8b02 	vpush	{d8}
   bbba8:	b085      	sub	sp, #20
    int i;
    kiss_fftr_cfg st = NULL;
    size_t subsize = 0, memneeded;
   bbbaa:	2500      	movs	r5, #0

    if (nfft & 1) {
   bbbac:	f010 0a01 	ands.w	sl, r0, #1
{
   bbbb0:	468b      	mov	fp, r1
   bbbb2:	4614      	mov	r4, r2
   bbbb4:	461f      	mov	r7, r3
    size_t subsize = 0, memneeded;
   bbbb6:	9503      	str	r5, [sp, #12]
    if (nfft & 1) {
   bbbb8:	d009      	beq.n	bbbce <kiss_fftr_alloc+0x2e>
        ei_printf("FFT length must be even\n");
   bbbba:	4863      	ldr	r0, [pc, #396]	; (bbd48 <kiss_fftr_alloc+0x1a8>)
   bbbbc:	f000 f946 	bl	bbe4c <_Z9ei_printfPKcz>
        return NULL;
   bbbc0:	462c      	mov	r4, r5
    if (memallocated != NULL) {
        *memallocated = memneeded;
    }

    return st;
}
   bbbc2:	4620      	mov	r0, r4
   bbbc4:	b005      	add	sp, #20
   bbbc6:	ecbd 8b02 	vpop	{d8}
   bbbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nfft >>= 1;
   bbbce:	1045      	asrs	r5, r0, #1
    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
   bbbd0:	ab03      	add	r3, sp, #12
   bbbd2:	f8cd a000 	str.w	sl, [sp]
   bbbd6:	4652      	mov	r2, sl
   bbbd8:	4628      	mov	r0, r5
   bbbda:	f7ff fee9 	bl	bb9b0 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
   bbbde:	eb05 0645 	add.w	r6, r5, r5, lsl #1
   bbbe2:	9b03      	ldr	r3, [sp, #12]
   bbbe4:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   bbbe8:	1076      	asrs	r6, r6, #1
   bbbea:	330c      	adds	r3, #12
   bbbec:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    if (lenmem == NULL) {
   bbbf0:	2f00      	cmp	r7, #0
   bbbf2:	d158      	bne.n	bbca6 <kiss_fftr_alloc+0x106>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
   bbbf4:	4630      	mov	r0, r6
   bbbf6:	f000 f9ff 	bl	bbff8 <_Z9ei_mallocj>
   bbbfa:	4604      	mov	r4, r0
    if (!st)
   bbbfc:	2c00      	cmp	r4, #0
   bbbfe:	d0e0      	beq.n	bbbc2 <kiss_fftr_alloc+0x22>
    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
   bbc00:	f104 020c 	add.w	r2, r4, #12
   bbc04:	6022      	str	r2, [r4, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
   bbc06:	9b03      	ldr	r3, [sp, #12]
   bbc08:	4413      	add	r3, r2
   bbc0a:	6063      	str	r3, [r4, #4]
    st->super_twiddles = st->tmpbuf + nfft;
   bbc0c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   bbc10:	60a3      	str	r3, [r4, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
   bbc12:	2300      	movs	r3, #0
   bbc14:	9300      	str	r3, [sp, #0]
   bbc16:	4659      	mov	r1, fp
   bbc18:	ab03      	add	r3, sp, #12
   bbc1a:	4628      	mov	r0, r5
        for (i = 0; i < nfft/2; ++i) {
   bbc1c:	eb05 77d5 	add.w	r7, r5, r5, lsr #31
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
   bbc20:	f7ff fec6 	bl	bb9b0 <kiss_fft_alloc>
        for (i = 0; i < nfft/2; ++i) {
   bbc24:	107f      	asrs	r7, r7, #1
    if (inverse_fft) {
   bbc26:	f1bb 0f00 	cmp.w	fp, #0
   bbc2a:	d042      	beq.n	bbcb2 <kiss_fftr_alloc+0x112>
        for (i = 0; i < nfft/2; ++i) {
   bbc2c:	4557      	cmp	r7, sl
   bbc2e:	dd7d      	ble.n	bbd2c <kiss_fftr_alloc+0x18c>
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
   bbc30:	f10a 0a01 	add.w	sl, sl, #1
   bbc34:	4650      	mov	r0, sl
   bbc36:	f7f8 fb45 	bl	b42c4 <__aeabi_i2d>
   bbc3a:	4680      	mov	r8, r0
   bbc3c:	4628      	mov	r0, r5
   bbc3e:	4689      	mov	r9, r1
   bbc40:	f7f8 fb40 	bl	b42c4 <__aeabi_i2d>
   bbc44:	4602      	mov	r2, r0
   bbc46:	460b      	mov	r3, r1
   bbc48:	4640      	mov	r0, r8
   bbc4a:	4649      	mov	r1, r9
   bbc4c:	f7f8 fcce 	bl	b45ec <__aeabi_ddiv>
   bbc50:	4b3e      	ldr	r3, [pc, #248]	; (bbd4c <kiss_fftr_alloc+0x1ac>)
   bbc52:	2200      	movs	r2, #0
   bbc54:	f7f8 f9ea 	bl	b402c <__adddf3>
            double phase =
   bbc58:	a337      	add	r3, pc, #220	; (adr r3, bbd38 <kiss_fftr_alloc+0x198>)
   bbc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbc5e:	f7f8 fb9b 	bl	b4398 <__aeabi_dmul>
            kf_cexp (st->super_twiddles+i,phase);
   bbc62:	ec41 0b10 	vmov	d0, r0, r1
            double phase =
   bbc66:	ec41 0b18 	vmov	d8, r0, r1
            kf_cexp (st->super_twiddles+i,phase);
   bbc6a:	f005 fb19 	bl	c12a0 <cos>
   bbc6e:	ea4f 08ca 	mov.w	r8, sl, lsl #3
   bbc72:	68a3      	ldr	r3, [r4, #8]
   bbc74:	ec51 0b10 	vmov	r0, r1, d0
   bbc78:	f1a8 0808 	sub.w	r8, r8, #8
   bbc7c:	eb03 0908 	add.w	r9, r3, r8
   bbc80:	f7f8 fe82 	bl	b4988 <__aeabi_d2f>
   bbc84:	eeb0 0a48 	vmov.f32	s0, s16
   bbc88:	eef0 0a68 	vmov.f32	s1, s17
   bbc8c:	f8c9 0000 	str.w	r0, [r9]
   bbc90:	f005 fcee 	bl	c1670 <sin>
   bbc94:	68a3      	ldr	r3, [r4, #8]
   bbc96:	ec51 0b10 	vmov	r0, r1, d0
   bbc9a:	4498      	add	r8, r3
   bbc9c:	f7f8 fe74 	bl	b4988 <__aeabi_d2f>
   bbca0:	f8c8 0004 	str.w	r0, [r8, #4]
        for (i = 0; i < nfft/2; ++i) {
   bbca4:	e7c2      	b.n	bbc2c <kiss_fftr_alloc+0x8c>
        if (*lenmem >= memneeded)
   bbca6:	683b      	ldr	r3, [r7, #0]
        *lenmem = memneeded;
   bbca8:	603e      	str	r6, [r7, #0]
        if (*lenmem >= memneeded)
   bbcaa:	42b3      	cmp	r3, r6
   bbcac:	d2a6      	bcs.n	bbbfc <kiss_fftr_alloc+0x5c>
        return NULL;
   bbcae:	4654      	mov	r4, sl
   bbcb0:	e787      	b.n	bbbc2 <kiss_fftr_alloc+0x22>
        for (i = 0; i < nfft/2; ++i) {
   bbcb2:	455f      	cmp	r7, fp
   bbcb4:	dd3a      	ble.n	bbd2c <kiss_fftr_alloc+0x18c>
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
   bbcb6:	f10b 0b01 	add.w	fp, fp, #1
   bbcba:	4658      	mov	r0, fp
   bbcbc:	f7f8 fb02 	bl	b42c4 <__aeabi_i2d>
   bbcc0:	4680      	mov	r8, r0
   bbcc2:	4628      	mov	r0, r5
   bbcc4:	4689      	mov	r9, r1
   bbcc6:	f7f8 fafd 	bl	b42c4 <__aeabi_i2d>
   bbcca:	4602      	mov	r2, r0
   bbccc:	460b      	mov	r3, r1
   bbcce:	4640      	mov	r0, r8
   bbcd0:	4649      	mov	r1, r9
   bbcd2:	f7f8 fc8b 	bl	b45ec <__aeabi_ddiv>
   bbcd6:	4b1d      	ldr	r3, [pc, #116]	; (bbd4c <kiss_fftr_alloc+0x1ac>)
   bbcd8:	2200      	movs	r2, #0
   bbcda:	f7f8 f9a7 	bl	b402c <__adddf3>
            double phase =
   bbcde:	a318      	add	r3, pc, #96	; (adr r3, bbd40 <kiss_fftr_alloc+0x1a0>)
   bbce0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbce4:	f7f8 fb58 	bl	b4398 <__aeabi_dmul>
            kf_cexp (st->super_twiddles+i,phase);
   bbce8:	ec41 0b10 	vmov	d0, r0, r1
            double phase =
   bbcec:	ec41 0b18 	vmov	d8, r0, r1
            kf_cexp (st->super_twiddles+i,phase);
   bbcf0:	f005 fad6 	bl	c12a0 <cos>
   bbcf4:	ea4f 08cb 	mov.w	r8, fp, lsl #3
   bbcf8:	68a3      	ldr	r3, [r4, #8]
   bbcfa:	ec51 0b10 	vmov	r0, r1, d0
   bbcfe:	f1a8 0808 	sub.w	r8, r8, #8
   bbd02:	eb03 0908 	add.w	r9, r3, r8
   bbd06:	f7f8 fe3f 	bl	b4988 <__aeabi_d2f>
   bbd0a:	eeb0 0a48 	vmov.f32	s0, s16
   bbd0e:	eef0 0a68 	vmov.f32	s1, s17
   bbd12:	f8c9 0000 	str.w	r0, [r9]
   bbd16:	f005 fcab 	bl	c1670 <sin>
   bbd1a:	68a3      	ldr	r3, [r4, #8]
   bbd1c:	ec51 0b10 	vmov	r0, r1, d0
   bbd20:	4498      	add	r8, r3
   bbd22:	f7f8 fe31 	bl	b4988 <__aeabi_d2f>
   bbd26:	f8c8 0004 	str.w	r0, [r8, #4]
        for (i = 0; i < nfft/2; ++i) {
   bbd2a:	e7c2      	b.n	bbcb2 <kiss_fftr_alloc+0x112>
    if (memallocated != NULL) {
   bbd2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   bbd2e:	2b00      	cmp	r3, #0
   bbd30:	f43f af47 	beq.w	bbbc2 <kiss_fftr_alloc+0x22>
        *memallocated = memneeded;
   bbd34:	601e      	str	r6, [r3, #0]
   bbd36:	e744      	b.n	bbbc2 <kiss_fftr_alloc+0x22>
   bbd38:	54442d18 	.word	0x54442d18
   bbd3c:	400921fb 	.word	0x400921fb
   bbd40:	54442d18 	.word	0x54442d18
   bbd44:	c00921fb 	.word	0xc00921fb
   bbd48:	000c7360 	.word	0x000c7360
   bbd4c:	3fe00000 	.word	0x3fe00000

000bbd50 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
   bbd50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
   bbd52:	6803      	ldr	r3, [r0, #0]
   bbd54:	685b      	ldr	r3, [r3, #4]
{
   bbd56:	4604      	mov	r4, r0
   bbd58:	4616      	mov	r6, r2
    if ( st->substate->inverse) {
   bbd5a:	b123      	cbz	r3, bbd66 <kiss_fftr+0x16>
        ei_printf("kiss fft usage error: improper alloc\n");
   bbd5c:	4836      	ldr	r0, [pc, #216]	; (bbe38 <kiss_fftr+0xe8>)
   bbd5e:	9101      	str	r1, [sp, #4]
   bbd60:	f000 f874 	bl	bbe4c <_Z9ei_printfPKcz>
   bbd64:	9901      	ldr	r1, [sp, #4]
    }

    ncfft = st->substate->nfft;
   bbd66:	6820      	ldr	r0, [r4, #0]

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
   bbd68:	6862      	ldr	r2, [r4, #4]
    ncfft = st->substate->nfft;
   bbd6a:	6805      	ldr	r5, [r0, #0]
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
   bbd6c:	f7ff ff12 	bl	bbb94 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
   bbd70:	6863      	ldr	r3, [r4, #4]
   bbd72:	edd3 7a00 	vldr	s15, [r3]
    tdc.i = st->tmpbuf[0].i;
   bbd76:	ed93 7a01 	vldr	s14, [r3, #4]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
    freqdata[ncfft].r = tdc.r - tdc.i;
   bbd7a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
    freqdata[0].r = tdc.r + tdc.i;
   bbd7e:	ee77 6a87 	vadd.f32	s13, s15, s14
    freqdata[ncfft].r = tdc.r - tdc.i;
   bbd82:	ee77 7ac7 	vsub.f32	s15, s15, s14
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
   bbd86:	2200      	movs	r2, #0
    freqdata[0].r = tdc.r + tdc.i;
   bbd88:	edc6 6a00 	vstr	s13, [r6]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
   bbd8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
    freqdata[ncfft].r = tdc.r - tdc.i;
   bbd90:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].i = freqdata[0].i = 0;
   bbd94:	6072      	str	r2, [r6, #4]
   bbd96:	605a      	str	r2, [r3, #4]
        fpk    = st->tmpbuf[k];
        fpnk.r =   st->tmpbuf[ncfft-k].r;
   bbd98:	f06f 0207 	mvn.w	r2, #7
    for ( k=1;k <= ncfft/2 ; ++k ) {
   bbd9c:	106d      	asrs	r5, r5, #1
   bbd9e:	f106 0c08 	add.w	ip, r6, #8
   bbda2:	2701      	movs	r7, #1
        fpnk.r =   st->tmpbuf[ncfft-k].r;
   bbda4:	1b92      	subs	r2, r2, r6

        C_ADD( f1k, fpk , fpnk );
        C_SUB( f2k, fpk , fpnk );
        C_MUL( tw , f2k , st->super_twiddles[k-1]);

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
   bbda6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    for ( k=1;k <= ncfft/2 ; ++k ) {
   bbdaa:	42bd      	cmp	r5, r7
   bbdac:	f10c 0c08 	add.w	ip, ip, #8
   bbdb0:	db3f      	blt.n	bbe32 <kiss_fftr+0xe2>
        fpk    = st->tmpbuf[k];
   bbdb2:	6861      	ldr	r1, [r4, #4]
   bbdb4:	eb01 06c7 	add.w	r6, r1, r7, lsl #3
   bbdb8:	edd6 5a01 	vldr	s11, [r6, #4]
   bbdbc:	edd6 6a00 	vldr	s13, [r6]
        fpnk.r =   st->tmpbuf[ncfft-k].r;
   bbdc0:	18d6      	adds	r6, r2, r3
   bbdc2:	4431      	add	r1, r6
   bbdc4:	edd1 4a00 	vldr	s9, [r1]
        fpnk.i = - st->tmpbuf[ncfft-k].i;
   bbdc8:	edd1 7a01 	vldr	s15, [r1, #4]
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
   bbdcc:	68a1      	ldr	r1, [r4, #8]
   bbdce:	00f8      	lsls	r0, r7, #3
   bbdd0:	3808      	subs	r0, #8
   bbdd2:	4401      	add	r1, r0
        C_ADD( f1k, fpk , fpnk );
   bbdd4:	ee34 7aa6 	vadd.f32	s14, s9, s13
   bbdd8:	ee35 5ae7 	vsub.f32	s10, s11, s15
        C_SUB( f2k, fpk , fpnk );
   bbddc:	ee76 6ae4 	vsub.f32	s13, s13, s9
   bbde0:	ee77 7aa5 	vadd.f32	s15, s15, s11
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
   bbde4:	edd1 4a01 	vldr	s9, [r1, #4]
   bbde8:	ed91 4a00 	vldr	s8, [r1]
   bbdec:	ee64 5ae7 	vnmul.f32	s11, s9, s15
   bbdf0:	ee67 7a84 	vmul.f32	s15, s15, s8
   bbdf4:	eee6 5a84 	vfma.f32	s11, s13, s8
    for ( k=1;k <= ncfft/2 ; ++k ) {
   bbdf8:	3701      	adds	r7, #1
   bbdfa:	3b08      	subs	r3, #8
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
   bbdfc:	eee6 7aa4 	vfma.f32	s15, s13, s9
        freqdata[k].r = HALF_OF(f1k.r + tw.r);
   bbe00:	ee77 6a25 	vadd.f32	s13, s14, s11
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
   bbe04:	ee37 7a65 	vsub.f32	s14, s14, s11
        freqdata[k].r = HALF_OF(f1k.r + tw.r);
   bbe08:	ee66 6a86 	vmul.f32	s13, s13, s12
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
   bbe0c:	ee27 7a06 	vmul.f32	s14, s14, s12
        freqdata[k].r = HALF_OF(f1k.r + tw.r);
   bbe10:	ed4c 6a02 	vstr	s13, [ip, #-8]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
   bbe14:	ee77 6a85 	vadd.f32	s13, s15, s10
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
   bbe18:	ee77 7ac5 	vsub.f32	s15, s15, s10
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
   bbe1c:	ee66 6a86 	vmul.f32	s13, s13, s12
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
   bbe20:	ee67 7a86 	vmul.f32	s15, s15, s12
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
   bbe24:	ed4c 6a01 	vstr	s13, [ip, #-4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
   bbe28:	ed83 7a00 	vstr	s14, [r3]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
   bbe2c:	edc3 7a01 	vstr	s15, [r3, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
   bbe30:	e7bb      	b.n	bbdaa <kiss_fftr+0x5a>
    }
}
   bbe32:	b003      	add	sp, #12
   bbe34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bbe36:	bf00      	nop
   bbe38:	000c7379 	.word	0x000c7379

000bbe3c <_Z29ei_run_impulse_check_canceledv>:

#define EI_WEAK_FN __attribute__((weak))

EI_WEAK_FN EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
    return EI_IMPULSE_OK;
}
   bbe3c:	2000      	movs	r0, #0
   bbe3e:	4770      	bx	lr

000bbe40 <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return millis();
}

uint64_t ei_read_timer_us() {
   bbe40:	b508      	push	{r3, lr}
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   bbe42:	f002 fe7d 	bl	beb40 <HAL_Timer_Get_Micro_Seconds>
    return micros();
}
   bbe46:	2100      	movs	r1, #0
   bbe48:	bd08      	pop	{r3, pc}
	...

000bbe4c <_Z9ei_printfPKcz>:
}

/**
 *  Printf function uses vsnprintf and output using Arduino Serial
 */
__attribute__((weak)) void ei_printf(const char *format, ...) {
   bbe4c:	b40f      	push	{r0, r1, r2, r3}
   bbe4e:	b513      	push	{r0, r1, r4, lr}
   bbe50:	ab04      	add	r3, sp, #16
    static char print_buf[1024] = { 0 };

    va_list args;
    va_start(args, format);
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
   bbe52:	480d      	ldr	r0, [pc, #52]	; (bbe88 <_Z9ei_printfPKcz+0x3c>)
__attribute__((weak)) void ei_printf(const char *format, ...) {
   bbe54:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
   bbe58:	9301      	str	r3, [sp, #4]
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
   bbe5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   bbe5e:	f003 f8cf 	bl	bf000 <vsnprintf>
    va_end(args);

    if (r > 0) {
   bbe62:	2800      	cmp	r0, #0
   bbe64:	dd0b      	ble.n	bbe7e <_Z9ei_printfPKcz+0x32>
        Serial.write(print_buf);
   bbe66:	f005 f853 	bl	c0f10 <_Z16_fetch_usbserialv>
   bbe6a:	4604      	mov	r4, r0
      return write((const uint8_t *)str, strlen(str));
   bbe6c:	4806      	ldr	r0, [pc, #24]	; (bbe88 <_Z9ei_printfPKcz+0x3c>)
   bbe6e:	f7f8 ffd5 	bl	b4e1c <strlen>
   bbe72:	6823      	ldr	r3, [r4, #0]
   bbe74:	4904      	ldr	r1, [pc, #16]	; (bbe88 <_Z9ei_printfPKcz+0x3c>)
   bbe76:	68db      	ldr	r3, [r3, #12]
   bbe78:	4602      	mov	r2, r0
   bbe7a:	4620      	mov	r0, r4
   bbe7c:	4798      	blx	r3
    }
}
   bbe7e:	b002      	add	sp, #8
   bbe80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bbe84:	b004      	add	sp, #16
   bbe86:	4770      	bx	lr
   bbe88:	2003d880 	.word	0x2003d880
   bbe8c:	00000000 	.word	0x00000000

000bbe90 <_Z15ei_printf_floatf>:

__attribute__((weak)) void ei_printf_float(float f) {
   bbe90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbe94:	ed2d 8b02 	vpush	{d8}
   bbe98:	eeb0 8a40 	vmov.f32	s16, s0
    Serial.print(f, 6);
   bbe9c:	f005 f838 	bl	c0f10 <_Z16_fetch_usbserialv>
   bbea0:	4682      	mov	sl, r0
        return printFloat((double)n, digits);
   bbea2:	ee18 0a10 	vmov	r0, s16
   bbea6:	f7f8 fa1f 	bl	b42e8 <__aeabi_f2d>
        if (std::isnan(number)) {
   bbeaa:	4602      	mov	r2, r0
   bbeac:	460b      	mov	r3, r1
        return printFloat((double)n, digits);
   bbeae:	4604      	mov	r4, r0
   bbeb0:	460d      	mov	r5, r1
   bbeb2:	4606      	mov	r6, r0
   bbeb4:	460f      	mov	r7, r1
        if (std::isnan(number)) {
   bbeb6:	f7f8 fd09 	bl	b48cc <__aeabi_dcmpun>
   bbeba:	b138      	cbz	r0, bbecc <_Z15ei_printf_floatf+0x3c>
            return print("nan");
   bbebc:	4946      	ldr	r1, [pc, #280]	; (bbfd8 <_Z15ei_printf_floatf+0x148>)
}
   bbebe:	ecbd 8b02 	vpop	{d8}
            return print ("ovf"); // constant determined empirically
   bbec2:	4650      	mov	r0, sl
   bbec4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbec8:	f004 bd50 	b.w	c096c <_ZN5Print5printEPKc>
  { return __builtin_isinf(__x); }
   bbecc:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
        if (std::isinf(number)) {
   bbed0:	4b42      	ldr	r3, [pc, #264]	; (bbfdc <_Z15ei_printf_floatf+0x14c>)
   bbed2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbed6:	4620      	mov	r0, r4
   bbed8:	4649      	mov	r1, r9
   bbeda:	f7f8 fcf7 	bl	b48cc <__aeabi_dcmpun>
   bbede:	b948      	cbnz	r0, bbef4 <_Z15ei_printf_floatf+0x64>
   bbee0:	4b3e      	ldr	r3, [pc, #248]	; (bbfdc <_Z15ei_printf_floatf+0x14c>)
   bbee2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbee6:	4620      	mov	r0, r4
   bbee8:	4649      	mov	r1, r9
   bbeea:	f7f8 fcd1 	bl	b4890 <__aeabi_dcmple>
   bbeee:	b908      	cbnz	r0, bbef4 <_Z15ei_printf_floatf+0x64>
            return print("inf");
   bbef0:	493b      	ldr	r1, [pc, #236]	; (bbfe0 <_Z15ei_printf_floatf+0x150>)
   bbef2:	e7e4      	b.n	bbebe <_Z15ei_printf_floatf+0x2e>
        if (number > 4294967040.0) {
   bbef4:	eddf 7a3b 	vldr	s15, [pc, #236]	; bbfe4 <_Z15ei_printf_floatf+0x154>
   bbef8:	eeb4 8ae7 	vcmpe.f32	s16, s15
   bbefc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbf00:	dd01      	ble.n	bbf06 <_Z15ei_printf_floatf+0x76>
            return print ("ovf"); // constant determined empirically
   bbf02:	4939      	ldr	r1, [pc, #228]	; (bbfe8 <_Z15ei_printf_floatf+0x158>)
   bbf04:	e7db      	b.n	bbebe <_Z15ei_printf_floatf+0x2e>
        if (number <-4294967040.0) {
   bbf06:	eddf 7a39 	vldr	s15, [pc, #228]	; bbfec <_Z15ei_printf_floatf+0x15c>
   bbf0a:	eeb4 8ae7 	vcmpe.f32	s16, s15
   bbf0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbf12:	d4f6      	bmi.n	bbf02 <_Z15ei_printf_floatf+0x72>
        if (number < 0.0) {
   bbf14:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   bbf18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbf1c:	d506      	bpl.n	bbf2c <_Z15ei_printf_floatf+0x9c>
            n += print('-');
   bbf1e:	212d      	movs	r1, #45	; 0x2d
   bbf20:	4650      	mov	r0, sl
   bbf22:	f004 fd27 	bl	c0974 <_ZN5Print5printEc>
            number = -number;
   bbf26:	4626      	mov	r6, r4
   bbf28:	f105 4700 	add.w	r7, r5, #2147483648	; 0x80000000
        number += rounding;
   bbf2c:	a328      	add	r3, pc, #160	; (adr r3, bbfd0 <_Z15ei_printf_floatf+0x140>)
   bbf2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbf32:	4630      	mov	r0, r6
   bbf34:	4639      	mov	r1, r7
   bbf36:	f7f8 f879 	bl	b402c <__adddf3>
   bbf3a:	460d      	mov	r5, r1
   bbf3c:	4604      	mov	r4, r0
        unsigned long int_part = (unsigned long)number;
   bbf3e:	f7f8 fd03 	bl	b4948 <__aeabi_d2uiz>
   bbf42:	4606      	mov	r6, r0
        double remainder = number - (double)int_part;
   bbf44:	f7f8 f9ae 	bl	b42a4 <__aeabi_ui2d>
   bbf48:	460b      	mov	r3, r1
   bbf4a:	4602      	mov	r2, r0
   bbf4c:	4629      	mov	r1, r5
   bbf4e:	4620      	mov	r0, r4
   bbf50:	f7f8 f86a 	bl	b4028 <__aeabi_dsub>
        return printNumber(val, base) + t;
   bbf54:	220a      	movs	r2, #10
        double remainder = number - (double)int_part;
   bbf56:	4604      	mov	r4, r0
   bbf58:	460d      	mov	r5, r1
        return printNumber(val, base) + t;
   bbf5a:	4650      	mov	r0, sl
   bbf5c:	4631      	mov	r1, r6
   bbf5e:	f004 fd22 	bl	c09a6 <_ZN5Print11printNumberEmh>
            n += print(".");
   bbf62:	4923      	ldr	r1, [pc, #140]	; (bbff0 <_Z15ei_printf_floatf+0x160>)
            remainder *= 10.0;
   bbf64:	4f23      	ldr	r7, [pc, #140]	; (bbff4 <_Z15ei_printf_floatf+0x164>)
            n += print(".");
   bbf66:	4650      	mov	r0, sl
   bbf68:	f004 fd00 	bl	c096c <_ZN5Print5printEPKc>
   bbf6c:	f04f 0807 	mov.w	r8, #7
            remainder *= 10.0;
   bbf70:	2600      	movs	r6, #0
        while (digits-- > 0) {
   bbf72:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bbf76:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
   bbf7a:	d024      	beq.n	bbfc6 <_Z15ei_printf_floatf+0x136>
            remainder *= 10.0;
   bbf7c:	4632      	mov	r2, r6
   bbf7e:	463b      	mov	r3, r7
   bbf80:	4620      	mov	r0, r4
   bbf82:	4629      	mov	r1, r5
   bbf84:	f7f8 fa08 	bl	b4398 <__aeabi_dmul>
   bbf88:	4604      	mov	r4, r0
   bbf8a:	460d      	mov	r5, r1
            int toPrint = int(remainder);
   bbf8c:	f7f8 fcb4 	bl	b48f8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   bbf90:	f1b0 0900 	subs.w	r9, r0, #0
   bbf94:	da15      	bge.n	bbfc2 <_Z15ei_printf_floatf+0x132>
            t = print('-');
   bbf96:	212d      	movs	r1, #45	; 0x2d
   bbf98:	4650      	mov	r0, sl
   bbf9a:	f004 fceb 	bl	c0974 <_ZN5Print5printEc>
            val = -n;
   bbf9e:	f1c9 0100 	rsb	r1, r9, #0
        return printNumber(val, base) + t;
   bbfa2:	220a      	movs	r2, #10
   bbfa4:	4650      	mov	r0, sl
   bbfa6:	f004 fcfe 	bl	c09a6 <_ZN5Print11printNumberEmh>
            remainder -= toPrint;
   bbfaa:	4648      	mov	r0, r9
   bbfac:	f7f8 f98a 	bl	b42c4 <__aeabi_i2d>
   bbfb0:	4602      	mov	r2, r0
   bbfb2:	460b      	mov	r3, r1
   bbfb4:	4620      	mov	r0, r4
   bbfb6:	4629      	mov	r1, r5
   bbfb8:	f7f8 f836 	bl	b4028 <__aeabi_dsub>
   bbfbc:	4604      	mov	r4, r0
   bbfbe:	460d      	mov	r5, r1
        while (digits-- > 0) {
   bbfc0:	e7d7      	b.n	bbf72 <_Z15ei_printf_floatf+0xe2>
            val = n;
   bbfc2:	4649      	mov	r1, r9
   bbfc4:	e7ed      	b.n	bbfa2 <_Z15ei_printf_floatf+0x112>
   bbfc6:	ecbd 8b02 	vpop	{d8}
   bbfca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbfce:	bf00      	nop
   bbfd0:	a0b5ed8e 	.word	0xa0b5ed8e
   bbfd4:	3ea0c6f7 	.word	0x3ea0c6f7
   bbfd8:	000c52ab 	.word	0x000c52ab
   bbfdc:	7fefffff 	.word	0x7fefffff
   bbfe0:	000c52af 	.word	0x000c52af
   bbfe4:	4f7fffff 	.word	0x4f7fffff
   bbfe8:	000c52b3 	.word	0x000c52b3
   bbfec:	cf7fffff 	.word	0xcf7fffff
   bbff0:	000c78be 	.word	0x000c78be
   bbff4:	40240000 	.word	0x40240000

000bbff8 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
    return malloc(size);
   bbff8:	f002 bfea 	b.w	befd0 <malloc>

000bbffc <_Z9ei_callocjj>:
}

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
    return calloc(nitems, size);
   bbffc:	f007 b8d0 	b.w	c31a0 <calloc>

000bc000 <_Z7ei_freePv>:
}

__attribute__((weak)) void ei_free(void *ptr) {
    free(ptr);
   bc000:	f002 bfee 	b.w	befe0 <free>

000bc004 <TfLiteTypeGetName>:
  return TfLiteTensorResizeMaybeCopy(num_bytes, tensor, true);
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
   bc004:	2812      	cmp	r0, #18
   bc006:	bf9a      	itte	ls
   bc008:	4b02      	ldrls	r3, [pc, #8]	; (bc014 <TfLiteTypeGetName+0x10>)
   bc00a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
const char* TfLiteTypeGetName(TfLiteType type) {
   bc00e:	4802      	ldrhi	r0, [pc, #8]	; (bc018 <TfLiteTypeGetName+0x14>)
      return "VARIANT";
    case kTfLiteInt4:
      return "INT4";
  }
  return "Unknown type";
}
   bc010:	4770      	bx	lr
   bc012:	bf00      	nop
   bc014:	000c7420 	.word	0x000c7420
   bc018:	000c739f 	.word	0x000c739f

000bc01c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>:
}

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
   bc01c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  { return __builtin_roundf(__x); }
   bc01e:	ee80 0a80 	vdiv.f32	s0, s1, s0
   bc022:	4604      	mov	r4, r0
   bc024:	460e      	mov	r6, r1
   bc026:	4615      	mov	r5, r2
   bc028:	f005 fbc8 	bl	c17bc <roundf>
  const float tmp = TfLiteRound(f / scale);
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
   bc02c:	eddf 7a10 	vldr	s15, [pc, #64]	; bc070 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x54>
   bc030:	eeb4 0ae7 	vcmpe.f32	s0, s15
   bc034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bc038:	db0f      	blt.n	bc05a <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x3e>
   bc03a:	eddf 7a0e 	vldr	s15, [pc, #56]	; bc074 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x58>
   bc03e:	eeb4 0ae7 	vcmpe.f32	s0, s15
   bc042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bc046:	d808      	bhi.n	bc05a <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x3e>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
  q = zero_point + static_cast<int32_t>(tmp);
   bc048:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  return kTfLiteOk;
   bc04c:	2000      	movs	r0, #0
  q = zero_point + static_cast<int32_t>(tmp);
   bc04e:	ee10 3a10 	vmov	r3, s0
   bc052:	4433      	add	r3, r6
   bc054:	602b      	str	r3, [r5, #0]
}
   bc056:	b002      	add	sp, #8
   bc058:	bd70      	pop	{r4, r5, r6, pc}
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
   bc05a:	4b07      	ldr	r3, [pc, #28]	; (bc078 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x5c>)
   bc05c:	9300      	str	r3, [sp, #0]
   bc05e:	4620      	mov	r0, r4
   bc060:	6925      	ldr	r5, [r4, #16]
   bc062:	4a06      	ldr	r2, [pc, #24]	; (bc07c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x60>)
   bc064:	4906      	ldr	r1, [pc, #24]	; (bc080 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>)
   bc066:	f240 1357 	movw	r3, #343	; 0x157
   bc06a:	47a8      	blx	r5
   bc06c:	2001      	movs	r0, #1
   bc06e:	e7f2      	b.n	bc056 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x3a>
   bc070:	cf000000 	.word	0xcf000000
   bc074:	4f000000 	.word	0x4f000000
   bc078:	000c7504 	.word	0x000c7504
   bc07c:	000c746c 	.word	0x000c746c
   bc080:	000c74ed 	.word	0x000c74ed

000bc084 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              double* multiplier) {
   bc084:	b573      	push	{r0, r1, r4, r5, r6, lr}
      static_cast<double>(input->params.scale * filter->params.scale);
   bc086:	edd1 7a03 	vldr	s15, [r1, #12]
   bc08a:	ed92 7a03 	vldr	s14, [r2, #12]
   bc08e:	ee67 7a87 	vmul.f32	s15, s15, s14
                                              double* multiplier) {
   bc092:	461e      	mov	r6, r3
  TF_LITE_ENSURE(context, input_product_scale >= 0);
   bc094:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   bc098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bc09c:	da0a      	bge.n	bc0b4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x30>
   bc09e:	4b0f      	ldr	r3, [pc, #60]	; (bc0dc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x58>)
   bc0a0:	9300      	str	r3, [sp, #0]
   bc0a2:	6904      	ldr	r4, [r0, #16]
   bc0a4:	4a0e      	ldr	r2, [pc, #56]	; (bc0e0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x5c>)
   bc0a6:	490f      	ldr	r1, [pc, #60]	; (bc0e4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
   bc0a8:	f240 1349 	movw	r3, #329	; 0x149
   bc0ac:	47a0      	blx	r4
   bc0ae:	2001      	movs	r0, #1
}
   bc0b0:	b002      	add	sp, #8
   bc0b2:	bd70      	pop	{r4, r5, r6, pc}
  const double input_product_scale =
   bc0b4:	ee17 0a90 	vmov	r0, s15
   bc0b8:	f7f8 f916 	bl	b42e8 <__aeabi_f2d>
   bc0bc:	4604      	mov	r4, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   bc0be:	68f0      	ldr	r0, [r6, #12]
  const double input_product_scale =
   bc0c0:	460d      	mov	r5, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   bc0c2:	f7f8 f911 	bl	b42e8 <__aeabi_f2d>
   bc0c6:	460b      	mov	r3, r1
   bc0c8:	4602      	mov	r2, r0
   bc0ca:	4629      	mov	r1, r5
   bc0cc:	4620      	mov	r0, r4
   bc0ce:	f7f8 fa8d 	bl	b45ec <__aeabi_ddiv>
   bc0d2:	9b06      	ldr	r3, [sp, #24]
   bc0d4:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
   bc0d8:	2000      	movs	r0, #0
   bc0da:	e7e9      	b.n	bc0b0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2c>
   bc0dc:	000c752a 	.word	0x000c752a
   bc0e0:	000c746c 	.word	0x000c746c
   bc0e4:	000c74ed 	.word	0x000c74ed

000bc0e8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
                                              double* multiplier) {
   bc0e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc0ec:	4604      	mov	r4, r0
  const double input_product_scale = static_cast<double>(input->params.scale) *
   bc0ee:	68c8      	ldr	r0, [r1, #12]
                                              double* multiplier) {
   bc0f0:	4615      	mov	r5, r2
   bc0f2:	461e      	mov	r6, r3
   bc0f4:	468a      	mov	sl, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
   bc0f6:	f7f8 f8f7 	bl	b42e8 <__aeabi_f2d>
   bc0fa:	4680      	mov	r8, r0
                                     static_cast<double>(filter->params.scale);
   bc0fc:	68e8      	ldr	r0, [r5, #12]
  const double input_product_scale = static_cast<double>(input->params.scale) *
   bc0fe:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
   bc100:	f7f8 f8f2 	bl	b42e8 <__aeabi_f2d>
   bc104:	4602      	mov	r2, r0
   bc106:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
   bc108:	4640      	mov	r0, r8
   bc10a:	4649      	mov	r1, r9
   bc10c:	f7f8 f944 	bl	b4398 <__aeabi_dmul>
                                              double* multiplier) {
   bc110:	e9dd 7b0c 	ldrd	r7, fp, [sp, #48]	; 0x30
  const double input_product_scale = static_cast<double>(input->params.scale) *
   bc114:	4680      	mov	r8, r0
   bc116:	4689      	mov	r9, r1
  if (bias) {
   bc118:	b1d6      	cbz	r6, bc150 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x68>
    const double bias_scale = static_cast<double>(bias->params.scale);
   bc11a:	68f0      	ldr	r0, [r6, #12]
   bc11c:	f7f8 f8e4 	bl	b42e8 <__aeabi_f2d>
   bc120:	4602      	mov	r2, r0
   bc122:	460b      	mov	r3, r1
    const double scale_diff = std::abs(input_product_scale - bias_scale);
   bc124:	4640      	mov	r0, r8
   bc126:	4649      	mov	r1, r9
   bc128:	f7f7 ff7e 	bl	b4028 <__aeabi_dsub>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
   bc12c:	4680      	mov	r8, r0
    const double output_scale = static_cast<double>(output->params.scale);
   bc12e:	68f8      	ldr	r0, [r7, #12]
   bc130:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
   bc134:	f7f8 f8d8 	bl	b42e8 <__aeabi_f2d>
   bc138:	4602      	mov	r2, r0
   bc13a:	460b      	mov	r3, r1
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
   bc13c:	4640      	mov	r0, r8
   bc13e:	4649      	mov	r1, r9
   bc140:	f7f8 fa54 	bl	b45ec <__aeabi_ddiv>
   bc144:	a311      	add	r3, pc, #68	; (adr r3, bc18c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
   bc146:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc14a:	f7f8 fba1 	bl	b4890 <__aeabi_dcmple>
   bc14e:	b150      	cbz	r0, bc166 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7e>
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
   bc150:	463b      	mov	r3, r7
   bc152:	462a      	mov	r2, r5
   bc154:	4651      	mov	r1, sl
   bc156:	4620      	mov	r0, r4
   bc158:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
}
   bc15c:	b003      	add	sp, #12
   bc15e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
   bc162:	f7ff bf8f 	b.w	bc084 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
   bc166:	4b06      	ldr	r3, [pc, #24]	; (bc180 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
   bc168:	9300      	str	r3, [sp, #0]
   bc16a:	4620      	mov	r0, r4
   bc16c:	6925      	ldr	r5, [r4, #16]
   bc16e:	4a05      	ldr	r2, [pc, #20]	; (bc184 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x9c>)
   bc170:	4905      	ldr	r1, [pc, #20]	; (bc188 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
   bc172:	f44f 739e 	mov.w	r3, #316	; 0x13c
   bc176:	47a8      	blx	r5
}
   bc178:	2001      	movs	r0, #1
   bc17a:	b003      	add	sp, #12
   bc17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc180:	000c7543 	.word	0x000c7543
   bc184:	000c746c 	.word	0x000c746c
   bc188:	000c74ed 	.word	0x000c74ed
   bc18c:	47ae147b 	.word	0x47ae147b
   bc190:	3f947ae1 	.word	0x3f947ae1

000bc194 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
   bc194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc198:	461f      	mov	r7, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
   bc19a:	7813      	ldrb	r3, [r2, #0]
                                               int32_t* act_max) {
   bc19c:	b086      	sub	sp, #24
  if (output->type == kTfLiteUInt8) {
   bc19e:	2b03      	cmp	r3, #3
                                               int32_t* act_max) {
   bc1a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   bc1a2:	4606      	mov	r6, r0
   bc1a4:	468c      	mov	ip, r1
  if (output->type == kTfLiteUInt8) {
   bc1a6:	d00f      	beq.n	bc1c8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x34>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
   bc1a8:	2b09      	cmp	r3, #9
   bc1aa:	d026      	beq.n	bc1fa <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
   bc1ac:	2b07      	cmp	r3, #7
   bc1ae:	d028      	beq.n	bc202 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x6e>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
   bc1b0:	4b37      	ldr	r3, [pc, #220]	; (bc290 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xfc>)
   bc1b2:	9300      	str	r3, [sp, #0]
   bc1b4:	6904      	ldr	r4, [r0, #16]
   bc1b6:	4a37      	ldr	r2, [pc, #220]	; (bc294 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x100>)
   bc1b8:	4937      	ldr	r1, [pc, #220]	; (bc298 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x104>)
   bc1ba:	f240 138f 	movw	r3, #399	; 0x18f
   bc1be:	47a0      	blx	r4
   bc1c0:	2001      	movs	r0, #1
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
                                               output, act_min, act_max);
}
   bc1c2:	b006      	add	sp, #24
   bc1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    qmax = std::numeric_limits<uint8_t>::max();
   bc1c8:	24ff      	movs	r4, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
   bc1ca:	f04f 0800 	mov.w	r8, #0
  if (activation == kTfLiteActRelu) {
   bc1ce:	f1bc 0f01 	cmp.w	ip, #1
  const auto scale = output->params.scale;
   bc1d2:	ed92 0a03 	vldr	s0, [r2, #12]
  const auto zero_point = output->params.zero_point;
   bc1d6:	6911      	ldr	r1, [r2, #16]
  if (activation == kTfLiteActRelu) {
   bc1d8:	d118      	bne.n	bc20c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x78>
    TF_LITE_ENSURE_OK(context,
   bc1da:	eddf 0a30 	vldr	s1, [pc, #192]	; bc29c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x108>
   bc1de:	aa05      	add	r2, sp, #20
   bc1e0:	4630      	mov	r0, r6
   bc1e2:	f7ff ff1b 	bl	bc01c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
   bc1e6:	2800      	cmp	r0, #0
   bc1e8:	d1eb      	bne.n	bc1c2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
    *act_min = std::max(qmin, tmp_q);
   bc1ea:	9b05      	ldr	r3, [sp, #20]
   bc1ec:	4543      	cmp	r3, r8
   bc1ee:	bfac      	ite	ge
   bc1f0:	603b      	strge	r3, [r7, #0]
   bc1f2:	f8c7 8000 	strlt.w	r8, [r7]
    *act_max = qmax;
   bc1f6:	602c      	str	r4, [r5, #0]
   bc1f8:	e7e3      	b.n	bc1c2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
    qmax = std::numeric_limits<int8_t>::max();
   bc1fa:	247f      	movs	r4, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
   bc1fc:	f06f 087f 	mvn.w	r8, #127	; 0x7f
   bc200:	e7e5      	b.n	bc1ce <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x3a>
    qmin = std::numeric_limits<int16_t>::min();
   bc202:	f8df 809c 	ldr.w	r8, [pc, #156]	; bc2a0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x10c>
    qmax = std::numeric_limits<int16_t>::max();
   bc206:	f647 74ff 	movw	r4, #32767	; 0x7fff
   bc20a:	e7e0      	b.n	bc1ce <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x3a>
  } else if (activation == kTfLiteActRelu6) {
   bc20c:	f1bc 0f03 	cmp.w	ip, #3
   bc210:	d121      	bne.n	bc256 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xc2>
    TF_LITE_ENSURE_OK(context,
   bc212:	eddf 0a22 	vldr	s1, [pc, #136]	; bc29c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x108>
   bc216:	9103      	str	r1, [sp, #12]
   bc218:	aa05      	add	r2, sp, #20
   bc21a:	4630      	mov	r0, r6
   bc21c:	ed8d 0a02 	vstr	s0, [sp, #8]
   bc220:	f7ff fefc 	bl	bc01c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
   bc224:	2800      	cmp	r0, #0
   bc226:	d1cc      	bne.n	bc1c2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
    *act_min = std::max(qmin, tmp_q);
   bc228:	9b05      	ldr	r3, [sp, #20]
   bc22a:	4543      	cmp	r3, r8
   bc22c:	bfac      	ite	ge
   bc22e:	603b      	strge	r3, [r7, #0]
   bc230:	f8c7 8000 	strlt.w	r8, [r7]
    TF_LITE_ENSURE_OK(context,
   bc234:	aa05      	add	r2, sp, #20
   bc236:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
    TF_LITE_ENSURE_OK(context,
   bc23a:	9903      	ldr	r1, [sp, #12]
   bc23c:	ed9d 0a02 	vldr	s0, [sp, #8]
   bc240:	4630      	mov	r0, r6
   bc242:	f7ff feeb 	bl	bc01c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
   bc246:	2800      	cmp	r0, #0
   bc248:	d1bb      	bne.n	bc1c2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
    *act_max = std::min(qmax, tmp_q);
   bc24a:	9b05      	ldr	r3, [sp, #20]
   bc24c:	42a3      	cmp	r3, r4
   bc24e:	bfd4      	ite	le
   bc250:	602b      	strle	r3, [r5, #0]
   bc252:	602c      	strgt	r4, [r5, #0]
   bc254:	e7b5      	b.n	bc1c2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
  } else if (activation == kTfLiteActReluN1To1) {
   bc256:	f1bc 0f02 	cmp.w	ip, #2
   bc25a:	d114      	bne.n	bc286 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xf2>
    TF_LITE_ENSURE_OK(context,
   bc25c:	aa05      	add	r2, sp, #20
   bc25e:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
   bc262:	4630      	mov	r0, r6
   bc264:	9103      	str	r1, [sp, #12]
   bc266:	ed8d 0a02 	vstr	s0, [sp, #8]
   bc26a:	f7ff fed7 	bl	bc01c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
   bc26e:	2800      	cmp	r0, #0
   bc270:	d1a7      	bne.n	bc1c2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
    *act_min = std::max(qmin, tmp_q);
   bc272:	9b05      	ldr	r3, [sp, #20]
   bc274:	4543      	cmp	r3, r8
   bc276:	bfac      	ite	ge
   bc278:	603b      	strge	r3, [r7, #0]
   bc27a:	f8c7 8000 	strlt.w	r8, [r7]
    TF_LITE_ENSURE_OK(context,
   bc27e:	aa05      	add	r2, sp, #20
   bc280:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   bc284:	e7d9      	b.n	bc23a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa6>
    *act_min = qmin;
   bc286:	f8c7 8000 	str.w	r8, [r7]
  return kTfLiteOk;
   bc28a:	2000      	movs	r0, #0
    *act_max = qmax;
   bc28c:	602c      	str	r4, [r5, #0]
                                               output, act_min, act_max);
   bc28e:	e798      	b.n	bc1c2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
   bc290:	000c7565 	.word	0x000c7565
   bc294:	000c746c 	.word	0x000c746c
   bc298:	000c74ed 	.word	0x000c74ed
   bc29c:	00000000 	.word	0x00000000
   bc2a0:	ffff8000 	.word	0xffff8000

000bc2a4 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>:
    result[v] = std::signbit(vector[v]);
  }
}

void UnpackDenseInt4IntoInt8(const int8_t* src_buffer, int num_elements,
                             int8_t* dst_buffer) {
   bc2a4:	b570      	push	{r4, r5, r6, lr}
  for (int i = 0; i < num_elements; i += 2) {
   bc2a6:	2300      	movs	r3, #0
    // Shift left first so that sign is properly extended when shifted right
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
    // Break early if the tensor has odd length and the higher nibble should be
    // ignored.
    if (i + 1 == num_elements) break;
    dst_buffer[i + 1] = static_cast<int8_t>(src_buffer[i / 2]) >> 4;
   bc2a8:	1c56      	adds	r6, r2, #1
  for (int i = 0; i < num_elements; i += 2) {
   bc2aa:	428b      	cmp	r3, r1
   bc2ac:	da0c      	bge.n	bc2c8 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x24>
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
   bc2ae:	105d      	asrs	r5, r3, #1
   bc2b0:	5744      	ldrsb	r4, [r0, r5]
   bc2b2:	f344 0403 	sbfx	r4, r4, #0, #4
   bc2b6:	54d4      	strb	r4, [r2, r3]
    if (i + 1 == num_elements) break;
   bc2b8:	1c5c      	adds	r4, r3, #1
   bc2ba:	42a1      	cmp	r1, r4
   bc2bc:	d004      	beq.n	bc2c8 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x24>
    dst_buffer[i + 1] = static_cast<int8_t>(src_buffer[i / 2]) >> 4;
   bc2be:	5744      	ldrsb	r4, [r0, r5]
   bc2c0:	1124      	asrs	r4, r4, #4
   bc2c2:	54f4      	strb	r4, [r6, r3]
  for (int i = 0; i < num_elements; i += 2) {
   bc2c4:	3302      	adds	r3, #2
   bc2c6:	e7f0      	b.n	bc2aa <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x6>
  }
}
   bc2c8:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc2cc <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
   bc2cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
#if TFLITE_SINGLE_ROUNDING
  // Single-rounding MultiplyByQuantizedMultiplier only supports positive
  // multipliers.
  // TFLITE_DCHECK(double_multiplier >= 0);
#endif
  if (double_multiplier == 0.) {
   bc2ce:	2200      	movs	r2, #0
                        int* shift) {
   bc2d0:	4606      	mov	r6, r0
   bc2d2:	460c      	mov	r4, r1
  if (double_multiplier == 0.) {
   bc2d4:	2300      	movs	r3, #0
   bc2d6:	ec51 0b10 	vmov	r0, r1, d0
   bc2da:	ed8d 0b00 	vstr	d0, [sp]
   bc2de:	f7f8 fac3 	bl	b4868 <__aeabi_dcmpeq>
   bc2e2:	ed9d 0b00 	vldr	d0, [sp]
   bc2e6:	4605      	mov	r5, r0
   bc2e8:	b120      	cbz	r0, bc2f4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x28>
    *quantized_multiplier = 0;
   bc2ea:	2300      	movs	r3, #0
   bc2ec:	6033      	str	r3, [r6, #0]
    *shift = 0;
   bc2ee:	6023      	str	r3, [r4, #0]
    *shift = 30;
    q_fixed = (1LL << 31) - 1;
  }
#endif
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
}
   bc2f0:	b002      	add	sp, #8
   bc2f2:	bd70      	pop	{r4, r5, r6, pc}
  const double q = std::frexp(double_multiplier, shift);
   bc2f4:	4620      	mov	r0, r4
   bc2f6:	f005 f89f 	bl	c1438 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
   bc2fa:	4b14      	ldr	r3, [pc, #80]	; (bc34c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x80>)
   bc2fc:	2200      	movs	r2, #0
  const double q = std::frexp(double_multiplier, shift);
   bc2fe:	ec51 0b10 	vmov	r0, r1, d0
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
   bc302:	f7f8 f849 	bl	b4398 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
   bc306:	ec41 0b10 	vmov	d0, r0, r1
   bc30a:	f005 f8cb 	bl	c14a4 <round>
   bc30e:	ec51 0b10 	vmov	r0, r1, d0
   bc312:	f7f8 fbd9 	bl	b4ac8 <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1LL << 31));
   bc316:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   bc31a:	4282      	cmp	r2, r0
   bc31c:	eb75 0c01 	sbcs.w	ip, r5, r1
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
   bc320:	4603      	mov	r3, r0
  TFLITE_CHECK(q_fixed <= (1LL << 31));
   bc322:	da01      	bge.n	bc328 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x5c>
   bc324:	f002 fe74 	bl	bf010 <abort>
  if (q_fixed == (1LL << 31)) {
   bc328:	42a9      	cmp	r1, r5
   bc32a:	bf08      	it	eq
   bc32c:	4290      	cmpeq	r0, r2
    ++*shift;
   bc32e:	bf02      	ittt	eq
   bc330:	6823      	ldreq	r3, [r4, #0]
   bc332:	3301      	addeq	r3, #1
   bc334:	6023      	streq	r3, [r4, #0]
  if (*shift < -31) {
   bc336:	6822      	ldr	r2, [r4, #0]
    q_fixed /= 2;
   bc338:	bf08      	it	eq
   bc33a:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
  if (*shift < -31) {
   bc33e:	321f      	adds	r2, #31
    *shift = 0;
   bc340:	bfbc      	itt	lt
   bc342:	2300      	movlt	r3, #0
   bc344:	6023      	strlt	r3, [r4, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
   bc346:	6033      	str	r3, [r6, #0]
   bc348:	e7d2      	b.n	bc2f0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x24>
   bc34a:	bf00      	nop
   bc34c:	41e00000 	.word	0x41e00000

000bc350 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
   bc350:	b537      	push	{r0, r1, r2, r4, r5, lr}
  TFLITE_CHECK_GT(double_multiplier, 1.);
   bc352:	4b0c      	ldr	r3, [pc, #48]	; (bc384 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x34>)
                                      int* left_shift) {
   bc354:	4605      	mov	r5, r0
   bc356:	460c      	mov	r4, r1
  TFLITE_CHECK_GT(double_multiplier, 1.);
   bc358:	2200      	movs	r2, #0
   bc35a:	ec51 0b10 	vmov	r0, r1, d0
   bc35e:	ed8d 0b00 	vstr	d0, [sp]
   bc362:	f7f8 faa9 	bl	b48b8 <__aeabi_dcmpgt>
   bc366:	ed9d 0b00 	vldr	d0, [sp]
   bc36a:	b908      	cbnz	r0, bc370 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x20>
   bc36c:	f002 fe50 	bl	bf010 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
   bc370:	4621      	mov	r1, r4
   bc372:	4628      	mov	r0, r5
   bc374:	f7ff ffaa 	bl	bc2cc <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
   bc378:	6823      	ldr	r3, [r4, #0]
   bc37a:	2b00      	cmp	r3, #0
   bc37c:	dbf6      	blt.n	bc36c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x1c>
}
   bc37e:	b003      	add	sp, #12
   bc380:	bd30      	pop	{r4, r5, pc}
   bc382:	bf00      	nop
   bc384:	3ff00000 	.word	0x3ff00000

000bc388 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
   bc388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      0) {
    input_beta_real_multiplier = max_real_multiplier;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier =
      std::min<double>(beta * input_scale * (1 << (31 - input_integer_bits)),
   bc38c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
                              int32_t* quantized_multiplier, int* left_shift) {
   bc390:	ed2d 8b02 	vpush	{d8}
      std::min<double>(beta * input_scale * (1 << (31 - input_integer_bits)),
   bc394:	fa23 f000 	lsr.w	r0, r3, r0
                              int32_t* quantized_multiplier, int* left_shift) {
   bc398:	ec57 6b10 	vmov	r6, r7, d0
   bc39c:	ec59 8b11 	vmov	r8, r9, d1
   bc3a0:	4693      	mov	fp, r2
   bc3a2:	468a      	mov	sl, r1
      std::min<double>(beta * input_scale * (1 << (31 - input_integer_bits)),
   bc3a4:	f7f7 ff8e 	bl	b42c4 <__aeabi_i2d>
   bc3a8:	4642      	mov	r2, r8
   bc3aa:	4604      	mov	r4, r0
   bc3ac:	460d      	mov	r5, r1
   bc3ae:	464b      	mov	r3, r9
   bc3b0:	4630      	mov	r0, r6
   bc3b2:	4639      	mov	r1, r7
   bc3b4:	f7f7 fff0 	bl	b4398 <__aeabi_dmul>
   bc3b8:	4602      	mov	r2, r0
   bc3ba:	460b      	mov	r3, r1
   bc3bc:	4620      	mov	r0, r4
   bc3be:	4629      	mov	r1, r5
   bc3c0:	f7f7 ffea 	bl	b4398 <__aeabi_dmul>
   bc3c4:	4602      	mov	r2, r0
   bc3c6:	460b      	mov	r3, r1
   bc3c8:	ec43 2b18 	vmov	d8, r2, r3
      if (__b < __a)
   bc3cc:	a30a      	add	r3, pc, #40	; (adr r3, bc3f8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x70>)
   bc3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc3d2:	f7f8 fa71 	bl	b48b8 <__aeabi_dcmpgt>
   bc3d6:	b108      	cbz	r0, bc3dc <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x54>
	return __b;
   bc3d8:	ed9f 8b07 	vldr	d8, [pc, #28]	; bc3f8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x70>
                       max_real_multiplier);
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
   bc3dc:	eeb0 0a48 	vmov.f32	s0, s16
   bc3e0:	eef0 0a68 	vmov.f32	s1, s17
                                   quantized_multiplier, left_shift);
}
   bc3e4:	ecbd 8b02 	vpop	{d8}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
   bc3e8:	4659      	mov	r1, fp
   bc3ea:	4650      	mov	r0, sl
}
   bc3ec:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
   bc3f0:	f7ff bfae 	b.w	bc350 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
   bc3f4:	f3af 8000 	nop.w
   bc3f8:	ffc00000 	.word	0xffc00000
   bc3fc:	41dfffff 	.word	0x41dfffff

000bc400 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
   bc400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
   bc404:	2401      	movs	r4, #1
                         int total_signed_bits) {
   bc406:	4681      	mov	r9, r0
      1.0 * ((1 << input_integer_bits) - 1) *
   bc408:	fa04 f000 	lsl.w	r0, r4, r0
   bc40c:	3801      	subs	r0, #1
                         int total_signed_bits) {
   bc40e:	4688      	mov	r8, r1
   bc410:	4615      	mov	r5, r2
      1.0 * ((1 << input_integer_bits) - 1) *
   bc412:	f7f7 ff57 	bl	b42c4 <__aeabi_i2d>
   bc416:	4606      	mov	r6, r0
      (1LL << (total_signed_bits - input_integer_bits)) /
   bc418:	eba5 0009 	sub.w	r0, r5, r9
      1.0 * ((1 << input_integer_bits) - 1) *
   bc41c:	460f      	mov	r7, r1
      (1LL << (total_signed_bits - input_integer_bits)) /
   bc41e:	f1c0 0320 	rsb	r3, r0, #32
   bc422:	f1a0 0120 	sub.w	r1, r0, #32
   bc426:	fa24 f303 	lsr.w	r3, r4, r3
   bc42a:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   bc42e:	fa04 f000 	lsl.w	r0, r4, r0
   bc432:	4319      	orrs	r1, r3
   bc434:	f7f7 ff82 	bl	b433c <__aeabi_l2d>
   bc438:	4602      	mov	r2, r0
   bc43a:	460b      	mov	r3, r1
   bc43c:	4630      	mov	r0, r6
   bc43e:	4639      	mov	r1, r7
   bc440:	f7f7 ffaa 	bl	b4398 <__aeabi_dmul>
      (1LL << input_left_shift);
   bc444:	f1c8 0320 	rsb	r3, r8, #32
      1.0 * ((1 << input_integer_bits) - 1) *
   bc448:	460f      	mov	r7, r1
      (1LL << input_left_shift);
   bc44a:	f1a8 0120 	sub.w	r1, r8, #32
   bc44e:	fa24 f303 	lsr.w	r3, r4, r3
   bc452:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   bc456:	4606      	mov	r6, r0
      (1LL << (total_signed_bits - input_integer_bits)) /
   bc458:	4319      	orrs	r1, r3
   bc45a:	fa04 f008 	lsl.w	r0, r4, r8
   bc45e:	f7f7 ff6d 	bl	b433c <__aeabi_l2d>
   bc462:	4602      	mov	r2, r0
   bc464:	460b      	mov	r3, r1
  const double max_input_rescaled =
   bc466:	4630      	mov	r0, r6
   bc468:	4639      	mov	r1, r7
   bc46a:	f7f8 f8bf 	bl	b45ec <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
   bc46e:	ec41 0b10 	vmov	d0, r0, r1
   bc472:	f004 ff5d 	bl	c1330 <floor>
   bc476:	ec51 0b10 	vmov	r0, r1, d0
   bc47a:	f7f8 fa3d 	bl	b48f8 <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
   bc47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bc482 <_ZN6tflite14AlignPointerUpEPhj>:
namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
   bc482:	1e4b      	subs	r3, r1, #1
   bc484:	4418      	add	r0, r3
   bc486:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
   bc48a:	4348      	muls	r0, r1
   bc48c:	4770      	bx	lr

000bc48e <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

  return kTfLiteOk;
}

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
   bc48e:	69c0      	ldr	r0, [r0, #28]
   bc490:	2104      	movs	r1, #4
   bc492:	f7ff bff6 	b.w	bc482 <_ZN6tflite14AlignPointerUpEPhj>

000bc496 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:
                                                         int* buffer_idx) {
   bc496:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc49a:	4604      	mov	r4, r0
   bc49c:	4689      	mov	r9, r1
   bc49e:	4690      	mov	r8, r2
   bc4a0:	461f      	mov	r7, r3
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
   bc4a2:	f7ff fff4 	bl	bc48e <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
   bc4a6:	69a6      	ldr	r6, [r4, #24]
   bc4a8:	230c      	movs	r3, #12
   bc4aa:	435e      	muls	r6, r3
   bc4ac:	4605      	mov	r5, r0
   bc4ae:	1981      	adds	r1, r0, r6
  size_t current_node_request_count = 0;
   bc4b0:	2200      	movs	r2, #0
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
   bc4b2:	428d      	cmp	r5, r1
   bc4b4:	d005      	beq.n	bc4c2 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x2c>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
   bc4b6:	686b      	ldr	r3, [r5, #4]
   bc4b8:	3301      	adds	r3, #1
      ++current_node_request_count;
   bc4ba:	bf08      	it	eq
   bc4bc:	3201      	addeq	r2, #1
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
   bc4be:	350c      	adds	r5, #12
   bc4c0:	e7f7      	b.n	bc4b2 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x1c>
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
   bc4c2:	2a0b      	cmp	r2, #11
   bc4c4:	d80d      	bhi.n	bc4e2 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x4c>
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
   bc4c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  current_request->bytes = bytes;
   bc4ca:	f840 9006 	str.w	r9, [r0, r6]
  current_request->subgraph_idx = subgraph_idx;
   bc4ce:	e9c5 3801 	strd	r3, r8, [r5, #4]
  *buffer_idx = scratch_buffer_request_count_;
   bc4d2:	69a3      	ldr	r3, [r4, #24]
   bc4d4:	603b      	str	r3, [r7, #0]
  ++scratch_buffer_request_count_;
   bc4d6:	69a3      	ldr	r3, [r4, #24]
   bc4d8:	3301      	adds	r3, #1
   bc4da:	61a3      	str	r3, [r4, #24]
  return kTfLiteOk;
   bc4dc:	2000      	movs	r0, #0
}
   bc4de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return kTfLiteError;
   bc4e2:	2001      	movs	r0, #1
   bc4e4:	e7fb      	b.n	bc4de <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x48>

000bc4e6 <_ZN6tflite12MicroContextD1Ev>:
namespace tflite {
MicroContext::MicroContext(MicroAllocator* allocator, const Model* model,
                           MicroGraph* graph)
    : allocator_(*allocator), graph_(*graph), model_(model) {}

MicroContext::~MicroContext() {}
   bc4e6:	4770      	bx	lr

000bc4e8 <_ZN6tflite12MicroContext24AllocatePersistentBufferEj>:

void* MicroContext::AllocatePersistentBuffer(size_t bytes) {
  return allocator_.AllocatePersistentBuffer(bytes);
   bc4e8:	6840      	ldr	r0, [r0, #4]
   bc4ea:	6803      	ldr	r3, [r0, #0]
   bc4ec:	695b      	ldr	r3, [r3, #20]
   bc4ee:	4718      	bx	r3

000bc4f0 <_ZN6tflite12MicroContext16GetScratchBufferEi>:
      bytes, graph_.GetCurrentSubgraphIndex(), buffer_idx);
}

void* MicroContext::GetScratchBuffer(int buffer_idx) {
  ScratchBufferHandle* handle = scratch_buffer_handles_ + buffer_idx;
  return handle->data;
   bc4f0:	6903      	ldr	r3, [r0, #16]
}
   bc4f2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   bc4f6:	4770      	bx	lr

000bc4f8 <_ZN6tflite12MicroContext24AllocateTempTfLiteTensorEi>:

TfLiteTensor* MicroContext::AllocateTempTfLiteTensor(int tensor_idx) {
   bc4f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
   bc4fa:	e9d0 4201 	ldrd	r4, r2, [r0, #4]
TfLiteTensor* MicroContext::AllocateTempTfLiteTensor(int tensor_idx) {
   bc4fe:	460b      	mov	r3, r1
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
   bc500:	6955      	ldr	r5, [r2, #20]
                                             tensor_idx,
                                             graph_.GetCurrentSubgraphIndex());
   bc502:	6821      	ldr	r1, [r4, #0]
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
   bc504:	9500      	str	r5, [sp, #0]
   bc506:	684d      	ldr	r5, [r1, #4]
   bc508:	6912      	ldr	r2, [r2, #16]
   bc50a:	68c1      	ldr	r1, [r0, #12]
   bc50c:	4620      	mov	r0, r4
   bc50e:	47a8      	blx	r5
}
   bc510:	b003      	add	sp, #12
   bc512:	bd30      	pop	{r4, r5, pc}

000bc514 <_ZN6tflite12MicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:
  }
  return AllocateTempTfLiteTensor(tensor_index);
}

void MicroContext::DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
  return allocator_.DeallocateTempTfLiteTensor(tensor);
   bc514:	6840      	ldr	r0, [r0, #4]
   bc516:	6803      	ldr	r3, [r0, #0]
   bc518:	689b      	ldr	r3, [r3, #8]
   bc51a:	4718      	bx	r3

000bc51c <_ZN6tflite12MicroContext13GetEvalTensorEi>:
}

TfLiteEvalTensor* MicroContext::GetEvalTensor(int tensor_idx) {
  return &graph_.GetAllocations()[graph_.GetCurrentSubgraphIndex()]
   bc51c:	6882      	ldr	r2, [r0, #8]
              .tensors[tensor_idx];
   bc51e:	e9d2 3004 	ldrd	r3, r0, [r2, #16]
   bc522:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
}
   bc526:	200c      	movs	r0, #12
              .tensors[tensor_idx];
   bc528:	685b      	ldr	r3, [r3, #4]
}
   bc52a:	fb00 3001 	mla	r0, r0, r1, r3
   bc52e:	4770      	bx	lr

000bc530 <_ZN6tflite12MicroContextD0Ev>:
MicroContext::~MicroContext() {}
   bc530:	b510      	push	{r4, lr}
   bc532:	2118      	movs	r1, #24
   bc534:	4604      	mov	r4, r0
   bc536:	f7f8 fcba 	bl	b4eae <_ZdlPvj>
   bc53a:	4620      	mov	r0, r4
   bc53c:	bd10      	pop	{r4, pc}

000bc53e <_ZN6tflite12MicroContext27RequestScratchBufferInArenaEjPi>:
                                                       int* buffer_idx) {
   bc53e:	b410      	push	{r4}
  // allowing MicroGraph to init / prepare / invoke subgraphs in the model.
  void SetSubgraphAllocations(SubgraphAllocations* subgraph_allocations);

  // Get the current subgraph index. Within an on operator, this is guaranteed
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
   bc540:	6884      	ldr	r4, [r0, #8]
  return allocator_.RequestScratchBufferInArena(
   bc542:	6840      	ldr	r0, [r0, #4]
                                                       int* buffer_idx) {
   bc544:	4613      	mov	r3, r2
  return allocator_.RequestScratchBufferInArena(
   bc546:	6962      	ldr	r2, [r4, #20]
}
   bc548:	f85d 4b04 	ldr.w	r4, [sp], #4
  return allocator_.RequestScratchBufferInArena(
   bc54c:	f7ff bfa3 	b.w	bc496 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>

000bc550 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>:
MicroContext::MicroContext(MicroAllocator* allocator, const Model* model,
   bc550:	b530      	push	{r4, r5, lr}
    : allocator_(*allocator), graph_(*graph), model_(model) {}
   bc552:	4d04      	ldr	r5, [pc, #16]	; (bc564 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE+0x14>)
   bc554:	e9c0 3202 	strd	r3, r2, [r0, #8]
   bc558:	2300      	movs	r3, #0
   bc55a:	e9c0 5100 	strd	r5, r1, [r0]
   bc55e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bc562:	bd30      	pop	{r4, r5, pc}
   bc564:	000c7574 	.word	0x000c7574

000bc568 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>:
  if (index >= 0 && index < max_size) {
   bc568:	2900      	cmp	r1, #0
   bc56a:	db04      	blt.n	bc576 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0xe>
   bc56c:	4291      	cmp	r1, r2
   bc56e:	da02      	bge.n	bc576 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0xe>
    const int tensor_index = tensor_indices[index];
   bc570:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    if (tensor_index != kTfLiteOptionalTensor) {
   bc574:	4770      	bx	lr
  return -1;
   bc576:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   bc57a:	4770      	bx	lr

000bc57c <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>:
                                                    int index) {
   bc57c:	b510      	push	{r4, lr}
   bc57e:	460b      	mov	r3, r1
   bc580:	4611      	mov	r1, r2
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
   bc582:	681a      	ldr	r2, [r3, #0]
   bc584:	1d13      	adds	r3, r2, #4
   bc586:	6812      	ldr	r2, [r2, #0]
                                                    int index) {
   bc588:	4604      	mov	r4, r0
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
   bc58a:	f7ff ffed 	bl	bc568 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
  if (tensor_index < 0) {
   bc58e:	1e01      	subs	r1, r0, #0
   bc590:	db05      	blt.n	bc59e <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x22>
  return AllocateTempTfLiteTensor(tensor_index);
   bc592:	6823      	ldr	r3, [r4, #0]
   bc594:	4620      	mov	r0, r4
   bc596:	695b      	ldr	r3, [r3, #20]
}
   bc598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return AllocateTempTfLiteTensor(tensor_index);
   bc59c:	4718      	bx	r3
}
   bc59e:	2000      	movs	r0, #0
   bc5a0:	bd10      	pop	{r4, pc}

000bc5a2 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>:
                                                     int index) {
   bc5a2:	b510      	push	{r4, lr}
   bc5a4:	460b      	mov	r3, r1
   bc5a6:	4611      	mov	r1, r2
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
   bc5a8:	685a      	ldr	r2, [r3, #4]
   bc5aa:	1d13      	adds	r3, r2, #4
   bc5ac:	6812      	ldr	r2, [r2, #0]
                                                     int index) {
   bc5ae:	4604      	mov	r4, r0
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
   bc5b0:	f7ff ffda 	bl	bc568 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
  if (tensor_index < 0) {
   bc5b4:	1e01      	subs	r1, r0, #0
   bc5b6:	db05      	blt.n	bc5c4 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x22>
  return AllocateTempTfLiteTensor(tensor_index);
   bc5b8:	6823      	ldr	r3, [r4, #0]
   bc5ba:	4620      	mov	r0, r4
   bc5bc:	695b      	ldr	r3, [r3, #20]
}
   bc5be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return AllocateTempTfLiteTensor(tensor_index);
   bc5c2:	4718      	bx	r3
}
   bc5c4:	2000      	movs	r0, #0
   bc5c6:	bd10      	pop	{r4, pc}

000bc5c8 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei>:
    const TfLiteNode* node, int index) {
   bc5c8:	b510      	push	{r4, lr}
   bc5ca:	460b      	mov	r3, r1
   bc5cc:	4611      	mov	r1, r2
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
   bc5ce:	689a      	ldr	r2, [r3, #8]
   bc5d0:	1d13      	adds	r3, r2, #4
   bc5d2:	6812      	ldr	r2, [r2, #0]
    const TfLiteNode* node, int index) {
   bc5d4:	4604      	mov	r4, r0
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
   bc5d6:	f7ff ffc7 	bl	bc568 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
  if (tensor_index < 0) {
   bc5da:	1e01      	subs	r1, r0, #0
   bc5dc:	db05      	blt.n	bc5ea <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x22>
  return AllocateTempTfLiteTensor(tensor_index);
   bc5de:	6823      	ldr	r3, [r4, #0]
   bc5e0:	4620      	mov	r0, r4
   bc5e2:	695b      	ldr	r3, [r3, #20]
}
   bc5e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return AllocateTempTfLiteTensor(tensor_index);
   bc5e8:	4718      	bx	r3
}
   bc5ea:	2000      	movs	r0, #0
   bc5ec:	bd10      	pop	{r4, pc}

000bc5ee <_ZN6tflite25MicroContextReportOpErrorEP13TfLiteContextPKcz>:
  external_context_payload_ = external_context_payload;
  return kTfLiteOk;
}

void MicroContextReportOpError(struct TfLiteContext* context,
                               const char* format, ...) {
   bc5ee:	b40e      	push	{r1, r2, r3}
   bc5f0:	b503      	push	{r0, r1, lr}
   bc5f2:	a903      	add	r1, sp, #12
   bc5f4:	f851 0b04 	ldr.w	r0, [r1], #4
  va_list args;
  va_start(args, format);
   bc5f8:	9101      	str	r1, [sp, #4]
  Log(format, args);
   bc5fa:	f000 f805 	bl	bc608 <_Z3LogPKcSt9__va_list>
  va_end(args);
}
   bc5fe:	b002      	add	sp, #8
   bc600:	f85d eb04 	ldr.w	lr, [sp], #4
   bc604:	b003      	add	sp, #12
   bc606:	4770      	bx	lr

000bc608 <_Z3LogPKcSt9__va_list>:
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
  DebugLog(log_buffer);
  DebugLog("\r\n");
#endif
}
   bc608:	4770      	bx	lr

000bc60a <_ZNK6tflite12RuntimeShape4DimsEi>:

  ~RuntimeShape() {}

  int32_t DimensionsCount() const { return size_; }
  int32_t Dims(int i) const {
    TFLITE_DCHECK_GE(i, 0);
   bc60a:	2900      	cmp	r1, #0
  int32_t Dims(int i) const {
   bc60c:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
   bc60e:	da01      	bge.n	bc614 <_ZNK6tflite12RuntimeShape4DimsEi+0xa>
   bc610:	f002 fcfe 	bl	bf010 <abort>
    TFLITE_DCHECK_LT(i, size_);
   bc614:	6803      	ldr	r3, [r0, #0]
   bc616:	428b      	cmp	r3, r1
   bc618:	ddfa      	ble.n	bc610 <_ZNK6tflite12RuntimeShape4DimsEi+0x6>
    return dims_[i];
   bc61a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  }
   bc61e:	6840      	ldr	r0, [r0, #4]
   bc620:	bd08      	pop	{r3, pc}

000bc622 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
   bc622:	b510      	push	{r4, lr}
   bc624:	4604      	mov	r4, r0
  if (tensor == nullptr) {
   bc626:	b911      	cbnz	r1, bc62e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0xc>
  RuntimeShape() : size_(0) {}
   bc628:	6001      	str	r1, [r0, #0]

  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   bc62a:	4620      	mov	r0, r4
   bc62c:	bd10      	pop	{r4, pc}
  const int dims_size = dims->size;
   bc62e:	6889      	ldr	r1, [r1, #8]
   bc630:	f851 2b04 	ldr.w	r2, [r1], #4
      : size_(dimensions_count) {
   bc634:	f840 2b04 	str.w	r2, [r0], #4
  const int32_t* DimsDataUpTo5D() const { return dims_; }

  void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
    size_ = dimensions_count;
    int32_t* dst_dims = DimsData();
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   bc638:	0092      	lsls	r2, r2, #2
   bc63a:	f006 fdc1 	bl	c31c0 <memcpy>
  }
   bc63e:	e7f4      	b.n	bc62a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x8>

000bc640 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  int32_t batches;
  int32_t accum_depth;
  int32_t output_depth;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   bc640:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   bc642:	6b43      	ldr	r3, [r0, #52]	; 0x34
   bc644:	b90b      	cbnz	r3, bc64a <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
   bc646:	f002 fce3 	bl	bf010 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
}
   bc64a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   bc64e:	213c      	movs	r1, #60	; 0x3c
   bc650:	4718      	bx	r3
	...

000bc654 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>:
  if (data.buffer_idx > -1) {
    ctx->buf = context->GetScratchBuffer(context, data.buffer_idx);
  }
}

TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
   bc654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc658:	b0ab      	sub	sp, #172	; 0xac
   bc65a:	e9dd 8a34 	ldrd	r8, sl, [sp, #208]	; 0xd0
   bc65e:	4604      	mov	r4, r0
   bc660:	460e      	mov	r6, r1
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
   bc662:	a824      	add	r0, sp, #144	; 0x90
   bc664:	4651      	mov	r1, sl
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
   bc666:	4699      	mov	r9, r3
   bc668:	4615      	mov	r5, r2
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
   bc66a:	f000 fa73 	bl	bcb54 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int output_dim_count = output_shape.DimensionsCount();
  TFLITE_DCHECK_GE(output_dim_count, 2);
   bc66e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   bc670:	3b02      	subs	r3, #2
   bc672:	2b02      	cmp	r3, #2
   bc674:	d901      	bls.n	bc67a <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x26>
   bc676:	f002 fccb 	bl	bf010 <abort>
  input_dims->c = data.accum_depth;
   bc67a:	6b72      	ldr	r2, [r6, #52]	; 0x34
  input_dims->n = data.batches;
   bc67c:	6b31      	ldr	r1, [r6, #48]	; 0x30
  quant_params->multiplier = data.reference_op_data.output_multiplier;
   bc67e:	6833      	ldr	r3, [r6, #0]
   bc680:	930b      	str	r3, [sp, #44]	; 0x2c
  filter_dims->n = data.accum_depth;
   bc682:	e9cd 2212 	strd	r2, r2, [sp, #72]	; 0x48
  filter_dims->c = data.output_depth;
   bc686:	6bb2      	ldr	r2, [r6, #56]	; 0x38
  quant_params->shift = data.reference_op_data.output_shift;
   bc688:	6873      	ldr	r3, [r6, #4]
   bc68a:	930c      	str	r3, [sp, #48]	; 0x30
  output_dims->n = data.batches;
   bc68c:	e9cd 211a 	strd	r2, r1, [sp, #104]	; 0x68
  input_dims->h = 1;
   bc690:	2301      	movs	r3, #1
  input_dims->n = data.batches;
   bc692:	910f      	str	r1, [sp, #60]	; 0x3c
  if (data.buffer_idx > -1) {
   bc694:	6af1      	ldr	r1, [r6, #44]	; 0x2c
  output_dims->c = data.output_depth;
   bc696:	921e      	str	r2, [sp, #120]	; 0x78
  input_dims->w = 1;
   bc698:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  filter_dims->w = 1;
   bc69c:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  bias_dims->n = 1;
   bc6a0:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  bias_dims->w = 1;
   bc6a4:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
  output_dims->w = 1;
   bc6a8:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
  ctx->buf = nullptr;
   bc6ac:	2300      	movs	r3, #0
  if (data.buffer_idx > -1) {
   bc6ae:	4299      	cmp	r1, r3
  ctx->size = 0;
   bc6b0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  if (data.buffer_idx > -1) {
   bc6b4:	db03      	blt.n	bc6be <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x6a>
    ctx->buf = context->GetScratchBuffer(context, data.buffer_idx);
   bc6b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   bc6b8:	4620      	mov	r0, r4
   bc6ba:	4798      	blx	r3
   bc6bc:	900d      	str	r0, [sp, #52]	; 0x34
}

// Returns const data for a TfLiteEvalTensor struct that could be null.
template <typename T>
const T* GetOptionalTensorData(const TfLiteEvalTensor* tensor) {
  return tensor == nullptr ? nullptr
   bc6be:	f1b8 0f00 	cmp.w	r8, #0
   bc6c2:	d001      	beq.n	bc6c8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x74>
   bc6c4:	f8d8 8000 	ldr.w	r8, [r8]
  const int32_t* bias_data =
      tflite::micro::GetOptionalTensorData<int32_t>(bias);

#if EI_TFLITE_DISABLE_CONV_2D_IN_I8
    cmsis_nn_fc_params fc_params;
    fc_params.input_offset = -data.reference_op_data.input_zero_point;
   bc6c8:	6973      	ldr	r3, [r6, #20]
   bc6ca:	425b      	negs	r3, r3
   bc6cc:	931f      	str	r3, [sp, #124]	; 0x7c
    fc_params.output_offset = data.reference_op_data.output_zero_point;
   bc6ce:	69f3      	ldr	r3, [r6, #28]
   bc6d0:	9321      	str	r3, [sp, #132]	; 0x84
    fc_params.filter_offset = 0;
    fc_params.activation.min = data.reference_op_data.output_activation_min;
   bc6d2:	68b3      	ldr	r3, [r6, #8]
   bc6d4:	9322      	str	r3, [sp, #136]	; 0x88
    fc_params.filter_offset = 0;
   bc6d6:	f04f 0b00 	mov.w	fp, #0
    fc_params.activation.max = data.reference_op_data.output_activation_max;
   bc6da:	68f3      	ldr	r3, [r6, #12]
    fc_params.filter_offset = 0;
   bc6dc:	f8cd b080 	str.w	fp, [sp, #128]	; 0x80
    fc_params.activation.max = data.reference_op_data.output_activation_max;
   bc6e0:	9323      	str	r3, [sp, #140]	; 0x8c
  TFLITE_DCHECK(tensor != nullptr);
   bc6e2:	2d00      	cmp	r5, #0
   bc6e4:	d0c7      	beq.n	bc676 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x22>
  return reinterpret_cast<const T*>(tensor->data.raw);
   bc6e6:	682b      	ldr	r3, [r5, #0]
   bc6e8:	f8d9 2000 	ldr.w	r2, [r9]
  TFLITE_DCHECK(tensor != nullptr);
   bc6ec:	f1ba 0f00 	cmp.w	sl, #0
   bc6f0:	d0c1      	beq.n	bc676 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x22>

    TF_LITE_ENSURE_EQ(
   bc6f2:	ae17      	add	r6, sp, #92	; 0x5c
   bc6f4:	f8da 1000 	ldr.w	r1, [sl]
   bc6f8:	9106      	str	r1, [sp, #24]
   bc6fa:	e9cd 2602 	strd	r2, r6, [sp, #8]
   bc6fe:	af1b      	add	r7, sp, #108	; 0x6c
   bc700:	aa13      	add	r2, sp, #76	; 0x4c
   bc702:	e9cd 3200 	strd	r3, r2, [sp]
   bc706:	e9cd 8704 	strd	r8, r7, [sp, #16]
   bc70a:	ab0f      	add	r3, sp, #60	; 0x3c
   bc70c:	aa0b      	add	r2, sp, #44	; 0x2c
   bc70e:	a91f      	add	r1, sp, #124	; 0x7c
   bc710:	a80d      	add	r0, sp, #52	; 0x34
   bc712:	f7f8 fc6f 	bl	b4ff4 <arm_fully_connected_s8>
   bc716:	b308      	cbz	r0, bc75c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x108>
   bc718:	6923      	ldr	r3, [r4, #16]
   bc71a:	9309      	str	r3, [sp, #36]	; 0x24
   bc71c:	f8da 3000 	ldr.w	r3, [sl]
   bc720:	e9cd 7305 	strd	r7, r3, [sp, #20]
   bc724:	f8d9 3000 	ldr.w	r3, [r9]
   bc728:	9302      	str	r3, [sp, #8]
   bc72a:	ab13      	add	r3, sp, #76	; 0x4c
   bc72c:	9301      	str	r3, [sp, #4]
   bc72e:	682b      	ldr	r3, [r5, #0]
   bc730:	9300      	str	r3, [sp, #0]
   bc732:	aa0b      	add	r2, sp, #44	; 0x2c
   bc734:	ab0f      	add	r3, sp, #60	; 0x3c
   bc736:	a91f      	add	r1, sp, #124	; 0x7c
   bc738:	e9cd 6803 	strd	r6, r8, [sp, #12]
   bc73c:	a80d      	add	r0, sp, #52	; 0x34
   bc73e:	f7f8 fc59 	bl	b4ff4 <arm_fully_connected_s8>
   bc742:	4b08      	ldr	r3, [pc, #32]	; (bc764 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x110>)
   bc744:	9301      	str	r3, [sp, #4]
   bc746:	4b08      	ldr	r3, [pc, #32]	; (bc768 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x114>)
   bc748:	9300      	str	r3, [sp, #0]
   bc74a:	e9cd 0b02 	strd	r0, fp, [sp, #8]
   bc74e:	4a07      	ldr	r2, [pc, #28]	; (bc76c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x118>)
   bc750:	4907      	ldr	r1, [pc, #28]	; (bc770 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x11c>)
   bc752:	4620      	mov	r0, r4
   bc754:	23f2      	movs	r3, #242	; 0xf2
   bc756:	9c09      	ldr	r4, [sp, #36]	; 0x24
   bc758:	47a0      	blx	r4
   bc75a:	2001      	movs	r0, #1
        ARM_CMSIS_NN_SUCCESS);
  }
#endif

  return kTfLiteOk;
}
   bc75c:	b02b      	add	sp, #172	; 0xac
   bc75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc762:	bf00      	nop
   bc764:	000c7640 	.word	0x000c7640
   bc768:	000c7655 	.word	0x000c7655
   bc76c:	000c75a0 	.word	0x000c75a0
   bc770:	000c7626 	.word	0x000c7626

000bc774 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
      ARM_CMSIS_NN_SUCCESS);

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   bc774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
   bc778:	694b      	ldr	r3, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   bc77a:	b088      	sub	sp, #32
   bc77c:	4604      	mov	r4, r0
   bc77e:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
   bc780:	b90b      	cbnz	r3, bc786 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x12>
   bc782:	f002 fc45 	bl	bf010 <abort>
  const auto* params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
   bc786:	4b1b      	ldr	r3, [pc, #108]	; (bc7f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x80>)
   bc788:	681a      	ldr	r2, [r3, #0]
   bc78a:	f000 f9d3 	bl	bcb34 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
   bc78e:	4b1a      	ldr	r3, [pc, #104]	; (bc7f8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x84>)
   bc790:	4629      	mov	r1, r5
   bc792:	681a      	ldr	r2, [r3, #0]
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
   bc794:	4606      	mov	r6, r0
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
   bc796:	4620      	mov	r0, r4
   bc798:	f000 f9cc 	bl	bcb34 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
   bc79c:	4a17      	ldr	r2, [pc, #92]	; (bc7fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x88>)
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
   bc79e:	9003      	str	r0, [sp, #12]
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
   bc7a0:	4629      	mov	r1, r5
   bc7a2:	6812      	ldr	r2, [r2, #0]
   bc7a4:	4620      	mov	r0, r4
   bc7a6:	f000 f9c5 	bl	bcb34 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
   bc7aa:	4a15      	ldr	r2, [pc, #84]	; (bc800 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8c>)
   bc7ac:	4629      	mov	r1, r5
   bc7ae:	6812      	ldr	r2, [r2, #0]
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
   bc7b0:	4607      	mov	r7, r0
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
   bc7b2:	4620      	mov	r0, r4
   bc7b4:	f000 f9c0 	bl	bcb38 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  TFLITE_DCHECK(node->user_data != nullptr);
   bc7b8:	692d      	ldr	r5, [r5, #16]
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
   bc7ba:	4680      	mov	r8, r0
  TFLITE_DCHECK(node->user_data != nullptr);
   bc7bc:	2d00      	cmp	r5, #0
   bc7be:	d0e0      	beq.n	bc782 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  TfLiteEvalTensor filter_int8 = tflite::micro::MakeUnpackedInt4Tensor(
      context, data.reference_op_data.filter_buffer_index, filter);
   bc7c0:	9b03      	ldr	r3, [sp, #12]
   bc7c2:	6a2a      	ldr	r2, [r5, #32]
   bc7c4:	4621      	mov	r1, r4
   bc7c6:	a805      	add	r0, sp, #20
   bc7c8:	f000 f9d5 	bl	bcb76 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
   bc7cc:	7a33      	ldrb	r3, [r6, #8]
   bc7ce:	2b09      	cmp	r3, #9
   bc7d0:	d10e      	bne.n	bc7f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7c>
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<float>(output));
      break;
    }
    case kTfLiteInt8: {
      switch (filter_int8.type) {
   bc7d2:	f89d 301c 	ldrb.w	r3, [sp, #28]
   bc7d6:	2b09      	cmp	r3, #9
   bc7d8:	d10a      	bne.n	bc7f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7c>
#if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_I8
        MicroPrintf("Filter data type %s currently not supported.",
                              TfLiteTypeGetName(filter->type));
        return kTfLiteError;
#endif
          return EvalQuantizedInt8(context, node, data, input, &filter_int8,
   bc7da:	e9cd 7800 	strd	r7, r8, [sp]
   bc7de:	ab05      	add	r3, sp, #20
   bc7e0:	4632      	mov	r2, r6
   bc7e2:	4629      	mov	r1, r5
   bc7e4:	4620      	mov	r0, r4
   bc7e6:	f7ff ff35 	bl	bc654 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>
                  input->type);
      return kTfLiteError;
    }
  }
  return kTfLiteOk;
}
   bc7ea:	b008      	add	sp, #32
   bc7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return kTfLiteError;
   bc7f0:	2001      	movs	r0, #1
   bc7f2:	e7fa      	b.n	bc7ea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x76>
   bc7f4:	000c77c4 	.word	0x000c77c4
   bc7f8:	000c77cc 	.word	0x000c77cc
   bc7fc:	000c77c0 	.word	0x000c77c0
   bc800:	000c77c8 	.word	0x000c77c8

000bc804 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   bc804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   bc808:	f8d1 8010 	ldr.w	r8, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   bc80c:	b09f      	sub	sp, #124	; 0x7c
   bc80e:	4605      	mov	r5, r0
   bc810:	460e      	mov	r6, r1
  TFLITE_DCHECK(node->user_data != nullptr);
   bc812:	f1b8 0f00 	cmp.w	r8, #0
   bc816:	d101      	bne.n	bc81c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
   bc818:	f002 fbfa 	bl	bf010 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   bc81c:	694b      	ldr	r3, [r1, #20]
   bc81e:	9305      	str	r3, [sp, #20]
   bc820:	2b00      	cmp	r3, #0
   bc822:	d0f9      	beq.n	bc818 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14>

  TF_LITE_REMOVE_VIRTUAL_DELETE
};

inline MicroContext* GetMicroContext(const struct TfLiteContext* context) {
  return reinterpret_cast<MicroContext*>(context->impl_);
   bc824:	6884      	ldr	r4, [r0, #8]
      micro_context->AllocateTempInputTensor(node, kFullyConnectedInputTensor);
   bc826:	4a7f      	ldr	r2, [pc, #508]	; (bca24 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
   bc828:	6823      	ldr	r3, [r4, #0]
   bc82a:	6812      	ldr	r2, [r2, #0]
   bc82c:	699b      	ldr	r3, [r3, #24]
   bc82e:	4620      	mov	r0, r4
   bc830:	4798      	blx	r3
  TF_LITE_ENSURE(context, input != nullptr);
   bc832:	4607      	mov	r7, r0
   bc834:	b960      	cbnz	r0, bc850 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4c>
   bc836:	4b7c      	ldr	r3, [pc, #496]	; (bca28 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x224>)
   bc838:	692c      	ldr	r4, [r5, #16]
   bc83a:	9300      	str	r3, [sp, #0]
   bc83c:	2347      	movs	r3, #71	; 0x47
  TF_LITE_ENSURE(context, filter != nullptr);
   bc83e:	4a7b      	ldr	r2, [pc, #492]	; (bca2c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
   bc840:	497b      	ldr	r1, [pc, #492]	; (bca30 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
   bc842:	4628      	mov	r0, r5
   bc844:	47a0      	blx	r4
   bc846:	2601      	movs	r6, #1
}
   bc848:	4630      	mov	r0, r6
   bc84a:	b01f      	add	sp, #124	; 0x7c
   bc84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      node, kFullyConnectedWeightsTensor);
   bc850:	6823      	ldr	r3, [r4, #0]
  TfLiteTensor* filter = micro_context->AllocateTempInputTensor(
   bc852:	4a78      	ldr	r2, [pc, #480]	; (bca34 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x230>)
   bc854:	699b      	ldr	r3, [r3, #24]
   bc856:	6812      	ldr	r2, [r2, #0]
   bc858:	4631      	mov	r1, r6
   bc85a:	4620      	mov	r0, r4
   bc85c:	4798      	blx	r3
  TF_LITE_ENSURE(context, filter != nullptr);
   bc85e:	4681      	mov	r9, r0
   bc860:	b920      	cbnz	r0, bc86c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x68>
   bc862:	4b75      	ldr	r3, [pc, #468]	; (bca38 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x234>)
   bc864:	9300      	str	r3, [sp, #0]
   bc866:	692c      	ldr	r4, [r5, #16]
   bc868:	234a      	movs	r3, #74	; 0x4a
   bc86a:	e7e8      	b.n	bc83e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
      micro_context->AllocateTempInputTensor(node, kFullyConnectedBiasTensor);
   bc86c:	6823      	ldr	r3, [r4, #0]
   bc86e:	4a73      	ldr	r2, [pc, #460]	; (bca3c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
   bc870:	699b      	ldr	r3, [r3, #24]
   bc872:	6812      	ldr	r2, [r2, #0]
   bc874:	4631      	mov	r1, r6
   bc876:	4620      	mov	r0, r4
   bc878:	4798      	blx	r3
      node, kFullyConnectedOutputTensor);
   bc87a:	6823      	ldr	r3, [r4, #0]
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(
   bc87c:	4a70      	ldr	r2, [pc, #448]	; (bca40 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
      micro_context->AllocateTempInputTensor(node, kFullyConnectedBiasTensor);
   bc87e:	9004      	str	r0, [sp, #16]
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(
   bc880:	69db      	ldr	r3, [r3, #28]
   bc882:	6812      	ldr	r2, [r2, #0]
   bc884:	4631      	mov	r1, r6
   bc886:	4620      	mov	r0, r4
   bc888:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
   bc88a:	4682      	mov	sl, r0
   bc88c:	b920      	cbnz	r0, bc898 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x94>
   bc88e:	4b6d      	ldr	r3, [pc, #436]	; (bca44 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
   bc890:	9300      	str	r3, [sp, #0]
   bc892:	692c      	ldr	r4, [r5, #16]
   bc894:	234f      	movs	r3, #79	; 0x4f
   bc896:	e7d2      	b.n	bc83e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
   bc898:	7838      	ldrb	r0, [r7, #0]
   bc89a:	f89a 3000 	ldrb.w	r3, [sl]
   bc89e:	4283      	cmp	r3, r0
   bc8a0:	d013      	beq.n	bc8ca <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
   bc8a2:	692e      	ldr	r6, [r5, #16]
   bc8a4:	f7ff fbae 	bl	bc004 <TfLiteTypeGetName>
   bc8a8:	4604      	mov	r4, r0
   bc8aa:	f89a 0000 	ldrb.w	r0, [sl]
   bc8ae:	f7ff fba9 	bl	bc004 <TfLiteTypeGetName>
   bc8b2:	4b65      	ldr	r3, [pc, #404]	; (bca48 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
   bc8b4:	9301      	str	r3, [sp, #4]
   bc8b6:	4b65      	ldr	r3, [pc, #404]	; (bca4c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>)
   bc8b8:	9300      	str	r3, [sp, #0]
   bc8ba:	e9cd 4002 	strd	r4, r0, [sp, #8]
   bc8be:	4a5b      	ldr	r2, [pc, #364]	; (bca2c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
   bc8c0:	4963      	ldr	r1, [pc, #396]	; (bca50 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
   bc8c2:	2351      	movs	r3, #81	; 0x51
   bc8c4:	4628      	mov	r0, r5
   bc8c6:	47b0      	blx	r6
   bc8c8:	e7bd      	b.n	bc846 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x42>
  const RuntimeShape filter_shape = GetTensorShape(filter);
   bc8ca:	4649      	mov	r1, r9
   bc8cc:	a80c      	add	r0, sp, #48	; 0x30
   bc8ce:	f7ff fea8 	bl	bc622 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
   bc8d2:	4651      	mov	r1, sl
   bc8d4:	a812      	add	r0, sp, #72	; 0x48
   bc8d6:	f7ff fea4 	bl	bc622 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
   bc8da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  int32_t DimensionsCount() const { return size_; }
   bc8dc:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   bc8e0:	3a01      	subs	r2, #1
   bc8e2:	4611      	mov	r1, r2
   bc8e4:	a80c      	add	r0, sp, #48	; 0x30
   bc8e6:	9207      	str	r2, [sp, #28]
   bc8e8:	f7ff fe8f 	bl	bc60a <_ZNK6tflite12RuntimeShape4DimsEi>
  filter_dims.c = output_shape.Dims(output_dim_count - 1);
   bc8ec:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   bc8f0:	4619      	mov	r1, r3
  filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
   bc8f2:	9008      	str	r0, [sp, #32]
  filter_dims.h = 1;
   bc8f4:	2601      	movs	r6, #1
  filter_dims.c = output_shape.Dims(output_dim_count - 1);
   bc8f6:	a812      	add	r0, sp, #72	; 0x48
   bc8f8:	9306      	str	r3, [sp, #24]
  filter_dims.w = 1;
   bc8fa:	e9cd 6609 	strd	r6, r6, [sp, #36]	; 0x24
  filter_dims.c = output_shape.Dims(output_dim_count - 1);
   bc8fe:	f7ff fe84 	bl	bc60a <_ZNK6tflite12RuntimeShape4DimsEi>
  data->accum_depth = filter_shape.Dims(filter_dim_count - 1);
   bc902:	9a07      	ldr	r2, [sp, #28]
  filter_dims.c = output_shape.Dims(output_dim_count - 1);
   bc904:	900b      	str	r0, [sp, #44]	; 0x2c
  data->accum_depth = filter_shape.Dims(filter_dim_count - 1);
   bc906:	4611      	mov	r1, r2
   bc908:	a80c      	add	r0, sp, #48	; 0x30
   bc90a:	f7ff fe7e 	bl	bc60a <_ZNK6tflite12RuntimeShape4DimsEi>
// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
  const int dims_count = shape.DimensionsCount();
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   bc90e:	9b06      	ldr	r3, [sp, #24]
   bc910:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
   bc914:	2b00      	cmp	r3, #0
   bc916:	f6ff af7f 	blt.w	bc818 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14>
   bc91a:	a912      	add	r1, sp, #72	; 0x48
  const auto* dims_data = shape.DimsData();
  int flat_size = 1;
  for (int i = 0; i < dims_count; ++i) {
   bc91c:	2200      	movs	r2, #0
   bc91e:	4593      	cmp	fp, r2
   bc920:	d007      	beq.n	bc932 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12e>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   bc922:	4293      	cmp	r3, r2
   bc924:	bf14      	ite	ne
   bc926:	6848      	ldrne	r0, [r1, #4]
   bc928:	2001      	moveq	r0, #1
   bc92a:	4346      	muls	r6, r0
  for (int i = 0; i < dims_count; ++i) {
   bc92c:	3201      	adds	r2, #1
   bc92e:	3104      	adds	r1, #4
   bc930:	e7f5      	b.n	bc91e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11a>
  data->output_depth = output_shape.Dims(output_dim_count - 1);
   bc932:	4619      	mov	r1, r3
  data->batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   bc934:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
  data->output_depth = output_shape.Dims(output_dim_count - 1);
   bc938:	a812      	add	r0, sp, #72	; 0x48
   bc93a:	f7ff fe66 	bl	bc60a <_ZNK6tflite12RuntimeShape4DimsEi>
  data->buffer_idx = -1;
   bc93e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bc942:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
   bc946:	9b05      	ldr	r3, [sp, #20]
  data->output_depth = output_shape.Dims(output_dim_count - 1);
   bc948:	f8c8 0038 	str.w	r0, [r8, #56]	; 0x38
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
   bc94c:	7819      	ldrb	r1, [r3, #0]
   bc94e:	9b04      	ldr	r3, [sp, #16]
   bc950:	783a      	ldrb	r2, [r7, #0]
   bc952:	4628      	mov	r0, r5
   bc954:	e9cd 9300 	strd	r9, r3, [sp]
   bc958:	e9cd a802 	strd	sl, r8, [sp, #8]
   bc95c:	463b      	mov	r3, r7
   bc95e:	f000 f88b 	bl	bca78 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
   bc962:	4606      	mov	r6, r0
   bc964:	2800      	cmp	r0, #0
   bc966:	f47f af6f 	bne.w	bc848 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x44>
  if (input->type == kTfLiteInt16) {
   bc96a:	783b      	ldrb	r3, [r7, #0]
   bc96c:	2b07      	cmp	r3, #7
   bc96e:	f43f af6a 	beq.w	bc846 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x42>
  } else if (input->type == kTfLiteInt8) {
   bc972:	2b09      	cmp	r3, #9
   bc974:	d129      	bne.n	bc9ca <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1c6>
    const RuntimeShape input_shape = GetTensorShape(input);
   bc976:	4639      	mov	r1, r7
   bc978:	a818      	add	r0, sp, #96	; 0x60
    TFLITE_DCHECK_GE(output_dim_count, 2);
   bc97a:	f1ab 0b02 	sub.w	fp, fp, #2
    const RuntimeShape input_shape = GetTensorShape(input);
   bc97e:	f7ff fe50 	bl	bc622 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_GE(output_dim_count, 2);
   bc982:	f1bb 0f02 	cmp.w	fp, #2
   bc986:	f63f af47 	bhi.w	bc818 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14>
    buf_size = arm_fully_connected_s8_get_buffer_size(&filter_dims);
   bc98a:	a808      	add	r0, sp, #32
   bc98c:	f7f8 fb66 	bl	b505c <arm_fully_connected_s8_get_buffer_size>
   bc990:	4683      	mov	fp, r0
  if (filter->type == kTfLiteInt4) {
   bc992:	f899 3000 	ldrb.w	r3, [r9]
   bc996:	2b12      	cmp	r3, #18
   bc998:	d11e      	bne.n	bc9d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1d4>
                     reinterpret_cast<const int32_t*>(filter->dims->data))
   bc99a:	f8d9 1008 	ldr.w	r1, [r9, #8]
   bc99e:	f851 3b04 	ldr.w	r3, [r1], #4
      : size_(dimensions_count) {
   bc9a2:	9318      	str	r3, [sp, #96]	; 0x60
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   bc9a4:	009a      	lsls	r2, r3, #2
   bc9a6:	a819      	add	r0, sp, #100	; 0x64
   bc9a8:	9305      	str	r3, [sp, #20]
   bc9aa:	f006 fc09 	bl	c31c0 <memcpy>

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  int FlatSize() const {
    int buffer_size = 1;
   bc9ae:	9b05      	ldr	r3, [sp, #20]
   bc9b0:	f10d 0c60 	add.w	ip, sp, #96	; 0x60
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
    for (int i = 0; i < size_; i++) {
   bc9b4:	2200      	movs	r2, #0
    int buffer_size = 1;
   bc9b6:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
   bc9b8:	4293      	cmp	r3, r2
   bc9ba:	f10c 0c04 	add.w	ip, ip, #4
   bc9be:	dd06      	ble.n	bc9ce <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ca>
      buffer_size *= dims_data[i];
   bc9c0:	f8dc 0000 	ldr.w	r0, [ip]
    for (int i = 0; i < size_; i++) {
   bc9c4:	3201      	adds	r2, #1
      buffer_size *= dims_data[i];
   bc9c6:	4341      	muls	r1, r0
    for (int i = 0; i < size_; i++) {
   bc9c8:	e7f6      	b.n	bc9b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b4>
  int32_t buf_size = 0;
   bc9ca:	4683      	mov	fp, r0
   bc9cc:	e7e1      	b.n	bc992 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    context->RequestScratchBufferInArena(
   bc9ce:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   bc9d0:	f108 0220 	add.w	r2, r8, #32
   bc9d4:	4628      	mov	r0, r5
   bc9d6:	4798      	blx	r3
  if (buf_size > 0) {
   bc9d8:	f1bb 0f00 	cmp.w	fp, #0
   bc9dc:	dc18      	bgt.n	bca10 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20c>
  micro_context->DeallocateTempTfLiteTensor(output);
   bc9de:	6823      	ldr	r3, [r4, #0]
   bc9e0:	4651      	mov	r1, sl
   bc9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bc9e4:	4620      	mov	r0, r4
   bc9e6:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
   bc9e8:	6823      	ldr	r3, [r4, #0]
   bc9ea:	4639      	mov	r1, r7
   bc9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bc9ee:	4620      	mov	r0, r4
   bc9f0:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
   bc9f2:	6823      	ldr	r3, [r4, #0]
   bc9f4:	4649      	mov	r1, r9
   bc9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bc9f8:	4620      	mov	r0, r4
   bc9fa:	4798      	blx	r3
  if (bias != nullptr) {
   bc9fc:	9b04      	ldr	r3, [sp, #16]
   bc9fe:	2b00      	cmp	r3, #0
   bca00:	f43f af22 	beq.w	bc848 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x44>
    micro_context->DeallocateTempTfLiteTensor(bias);
   bca04:	6823      	ldr	r3, [r4, #0]
   bca06:	9904      	ldr	r1, [sp, #16]
   bca08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bca0a:	4620      	mov	r0, r4
   bca0c:	4798      	blx	r3
   bca0e:	e71b      	b.n	bc848 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x44>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
   bca10:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   bca12:	f108 022c 	add.w	r2, r8, #44	; 0x2c
   bca16:	4659      	mov	r1, fp
   bca18:	4628      	mov	r0, r5
   bca1a:	4798      	blx	r3
   bca1c:	2800      	cmp	r0, #0
   bca1e:	d0de      	beq.n	bc9de <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1da>
   bca20:	4606      	mov	r6, r0
  ~RuntimeShape() {}
   bca22:	e711      	b.n	bc848 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x44>
   bca24:	000c77c4 	.word	0x000c77c4
   bca28:	000c7757 	.word	0x000c7757
   bca2c:	000c75a0 	.word	0x000c75a0
   bca30:	000c74ed 	.word	0x000c74ed
   bca34:	000c77cc 	.word	0x000c77cc
   bca38:	000c7768 	.word	0x000c7768
   bca3c:	000c77c0 	.word	0x000c77c0
   bca40:	000c77c8 	.word	0x000c77c8
   bca44:	000c777a 	.word	0x000c777a
   bca48:	000c77a6 	.word	0x000c77a6
   bca4c:	000c77b3 	.word	0x000c77b3
   bca50:	000c778c 	.word	0x000c778c

000bca54 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt16(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
   bca54:	b513      	push	{r0, r1, r4, lr}
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
   bca56:	2300      	movs	r3, #0
   bca58:	9300      	str	r3, [sp, #0]
   bca5a:	4a04      	ldr	r2, [pc, #16]	; (bca6c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x18>)
   bca5c:	4b04      	ldr	r3, [pc, #16]	; (bca70 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x1c>)
   bca5e:	4905      	ldr	r1, [pc, #20]	; (bca74 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x20>)
TfLiteRegistration Register_FULLY_CONNECTED() {
   bca60:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
   bca62:	f000 f83f 	bl	bcae4 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
}
   bca66:	4620      	mov	r0, r4
   bca68:	b002      	add	sp, #8
   bca6a:	bd10      	pop	{r4, pc}
   bca6c:	000bc805 	.word	0x000bc805
   bca70:	000bc775 	.word	0x000bc775
   bca74:	000bc641 	.word	0x000bc641

000bca78 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
   bca78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bca7c:	b085      	sub	sp, #20
  if (data_type != kTfLiteFloat32) {
   bca7e:	2a01      	cmp	r2, #1
    OpDataFullyConnected* data) {
   bca80:	e9dd 840e 	ldrd	r8, r4, [sp, #56]	; 0x38
   bca84:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   bca88:	4606      	mov	r6, r0
   bca8a:	460f      	mov	r7, r1
   bca8c:	461d      	mov	r5, r3
  if (data_type != kTfLiteFloat32) {
   bca8e:	d027      	beq.n	bcae0 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x68>
    double real_multiplier = 0.0;
   bca90:	2200      	movs	r2, #0
   bca92:	2300      	movs	r3, #0
   bca94:	e9cd 2302 	strd	r2, r3, [sp, #8]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   bca98:	ab02      	add	r3, sp, #8
   bca9a:	e9cd 8300 	strd	r8, r3, [sp]
   bca9e:	464a      	mov	r2, r9
   bcaa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bcaa2:	4629      	mov	r1, r5
   bcaa4:	f7ff fb20 	bl	bc0e8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
   bcaa8:	b9b8      	cbnz	r0, bcada <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x62>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
   bcaaa:	1d21      	adds	r1, r4, #4
   bcaac:	4620      	mov	r0, r4
   bcaae:	ed9d 0b02 	vldr	d0, [sp, #8]
   bcab2:	f7ff fc0b 	bl	bc2cc <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
   bcab6:	692b      	ldr	r3, [r5, #16]
   bcab8:	6163      	str	r3, [r4, #20]
    // int8 quantization. See
    // https://github.com/tensorflow/tensorflow/issues/44912 for additional
    // context.
    // this is removed to fix #7125
    // TFLITE_DCHECK(filter->params.zero_point == 0);
    data->filter_zero_point = filter->params.zero_point;
   bcaba:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bcabe:	61a3      	str	r3, [r4, #24]
    data->output_zero_point = output->params.zero_point;
   bcac0:	f8d8 3010 	ldr.w	r3, [r8, #16]
   bcac4:	61e3      	str	r3, [r4, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
   bcac6:	f104 030c 	add.w	r3, r4, #12
   bcaca:	9300      	str	r3, [sp, #0]
   bcacc:	4642      	mov	r2, r8
   bcace:	f104 0308 	add.w	r3, r4, #8
   bcad2:	4639      	mov	r1, r7
   bcad4:	4630      	mov	r0, r6
   bcad6:	f7ff fb5d 	bl	bc194 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
                                             &data->output_activation_min,
                                             &data->output_activation_max);
  }
  return kTfLiteOk;
}
   bcada:	b005      	add	sp, #20
   bcadc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return kTfLiteOk;
   bcae0:	2000      	movs	r0, #0
   bcae2:	e7fa      	b.n	bcada <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x62>

000bcae4 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>:

TfLiteRegistration RegisterOp(
    void* (*init)(TfLiteContext* context, const char* buffer, size_t length),
    TfLiteStatus (*prepare)(TfLiteContext* context, TfLiteNode* node),
    TfLiteStatus (*invoke)(TfLiteContext* context, TfLiteNode* node),
    void (*free)(TfLiteContext* context, void* buffer)) {
   bcae4:	b510      	push	{r4, lr}
          /*invoke=*/invoke,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0,
          /*registration_external=*/nullptr};
   bcae6:	6001      	str	r1, [r0, #0]
   bcae8:	9902      	ldr	r1, [sp, #8]
   bcaea:	60c3      	str	r3, [r0, #12]
   bcaec:	2300      	movs	r3, #0
   bcaee:	e9c0 1201 	strd	r1, r2, [r0, #4]
   bcaf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bcaf6:	e9c0 3306 	strd	r3, r3, [r0, #24]
   bcafa:	6203      	str	r3, [r0, #32]
}
   bcafc:	bd10      	pop	{r4, pc}

000bcafe <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                      const TfLiteNode* node, int index) {
   bcafe:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(context != nullptr);
   bcb00:	b908      	cbnz	r0, bcb06 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x8>
   bcb02:	f002 fa85 	bl	bf010 <abort>
  TFLITE_DCHECK(node != nullptr);
   bcb06:	2900      	cmp	r1, #0
   bcb08:	d0fb      	beq.n	bcb02 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x4>
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
   bcb0a:	680b      	ldr	r3, [r1, #0]
  const int tensor_index = ValidateTensorIndexing(
   bcb0c:	4619      	mov	r1, r3
  if (index >= 0 && index < max_size) {
   bcb0e:	2a00      	cmp	r2, #0
  const int tensor_index = ValidateTensorIndexing(
   bcb10:	f851 5b04 	ldr.w	r5, [r1], #4
  if (index >= 0 && index < max_size) {
   bcb14:	db0c      	blt.n	bcb30 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x32>
   bcb16:	4295      	cmp	r5, r2
   bcb18:	dd0a      	ble.n	bcb30 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x32>

  if (tensor_index < 0) {
   bcb1a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   bcb1e:	2900      	cmp	r1, #0
   bcb20:	db06      	blt.n	bcb30 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x32>
    return nullptr;
  }

  return context->GetEvalTensor(context, node->inputs->data[index]);
   bcb22:	eb03 0282 	add.w	r2, r3, r2, lsl #2
}
   bcb26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return context->GetEvalTensor(context, node->inputs->data[index]);
   bcb2a:	6d03      	ldr	r3, [r0, #80]	; 0x50
   bcb2c:	6851      	ldr	r1, [r2, #4]
   bcb2e:	4718      	bx	r3
}
   bcb30:	2000      	movs	r0, #0
   bcb32:	bd70      	pop	{r4, r5, r6, pc}

000bcb34 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
  return GetMutableEvalInput(context, node, index);
   bcb34:	f7ff bfe3 	b.w	bcafe <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>

000bcb38 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:
}

// Returns the TfLiteEvalTensor struct for a given output index in a node.
TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                const TfLiteNode* node, int index) {
   bcb38:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
   bcb3a:	b908      	cbnz	r0, bcb40 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x8>
   bcb3c:	f002 fa68 	bl	bf010 <abort>
  TFLITE_DCHECK(node != nullptr);
   bcb40:	2900      	cmp	r1, #0
   bcb42:	d0fb      	beq.n	bcb3c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x4>
  return context->GetEvalTensor(context, node->outputs->data[index]);
   bcb44:	6849      	ldr	r1, [r1, #4]
   bcb46:	6d03      	ldr	r3, [r0, #80]	; 0x50
   bcb48:	eb01 0282 	add.w	r2, r1, r2, lsl #2
}
   bcb4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->GetEvalTensor(context, node->outputs->data[index]);
   bcb50:	6851      	ldr	r1, [r2, #4]
   bcb52:	4718      	bx	r3

000bcb54 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
   bcb54:	b510      	push	{r4, lr}
   bcb56:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
   bcb58:	b109      	cbz	r1, bcb5e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xa>
   bcb5a:	6849      	ldr	r1, [r1, #4]
   bcb5c:	b919      	cbnz	r1, bcb66 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x12>
  RuntimeShape() : size_(0) {}
   bcb5e:	2300      	movs	r3, #0
   bcb60:	6023      	str	r3, [r4, #0]
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   bcb62:	4620      	mov	r0, r4
   bcb64:	bd10      	pop	{r4, pc}
  const int dims_size = dims->size;
   bcb66:	f851 2b04 	ldr.w	r2, [r1], #4
      : size_(dimensions_count) {
   bcb6a:	f840 2b04 	str.w	r2, [r0], #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   bcb6e:	0092      	lsls	r2, r2, #2
   bcb70:	f006 fb26 	bl	c31c0 <memcpy>
  }
   bcb74:	e7f5      	b.n	bcb62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xe>

000bcb76 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>:
  return kTfLiteOk;
}

TfLiteEvalTensor MakeUnpackedInt4Tensor(TfLiteContext* context,
                                        int scratch_buffer_index,
                                        const TfLiteEvalTensor* tensor) {
   bcb76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcb7a:	461d      	mov	r5, r3
  if (tensor->type != kTfLiteInt4) {
   bcb7c:	7a1b      	ldrb	r3, [r3, #8]
   bcb7e:	2b12      	cmp	r3, #18
                                        const TfLiteEvalTensor* tensor) {
   bcb80:	4604      	mov	r4, r0
   bcb82:	b086      	sub	sp, #24
   bcb84:	4608      	mov	r0, r1
   bcb86:	4611      	mov	r1, r2
  if (tensor->type != kTfLiteInt4) {
   bcb88:	d007      	beq.n	bcb9a <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x24>
    return *tensor;
   bcb8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   bcb8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
      tflite::micro::GetTensorData<int8_t>(tensor),
      tflite::micro::GetTensorShape(tensor).FlatSize(),
      tflite::micro::GetTensorData<int8_t>(&new_tensor));
  return new_tensor;
}
   bcb92:	4620      	mov	r0, r4
   bcb94:	b006      	add	sp, #24
   bcb96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      context->GetScratchBuffer(context, scratch_buffer_index));
   bcb9a:	6c03      	ldr	r3, [r0, #64]	; 0x40
   bcb9c:	4798      	blx	r3
      tflite::micro::GetTensorShape(tensor).FlatSize(),
   bcb9e:	4629      	mov	r1, r5
      context->GetScratchBuffer(context, scratch_buffer_index));
   bcba0:	4606      	mov	r6, r0
      tflite::micro::GetTensorShape(tensor).FlatSize(),
   bcba2:	4668      	mov	r0, sp
  return reinterpret_cast<const T*>(tensor->data.raw);
   bcba4:	e9d5 8700 	ldrd	r8, r7, [r5]
   bcba8:	f7ff ffd4 	bl	bcb54 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    for (int i = 0; i < size_; i++) {
   bcbac:	9d00      	ldr	r5, [sp, #0]
   bcbae:	466b      	mov	r3, sp
   bcbb0:	2200      	movs	r2, #0
    int buffer_size = 1;
   bcbb2:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
   bcbb4:	4295      	cmp	r5, r2
   bcbb6:	f103 0304 	add.w	r3, r3, #4
   bcbba:	dd03      	ble.n	bcbc4 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x4e>
      buffer_size *= dims_data[i];
   bcbbc:	6818      	ldr	r0, [r3, #0]
    for (int i = 0; i < size_; i++) {
   bcbbe:	3201      	adds	r2, #1
      buffer_size *= dims_data[i];
   bcbc0:	4341      	muls	r1, r0
    for (int i = 0; i < size_; i++) {
   bcbc2:	e7f7      	b.n	bcbb4 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x3e>
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
   bcbc4:	4632      	mov	r2, r6
   bcbc6:	4640      	mov	r0, r8
   bcbc8:	f7ff fb6c 	bl	bc2a4 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>
  return new_tensor;
   bcbcc:	2309      	movs	r3, #9
   bcbce:	e9c4 6700 	strd	r6, r7, [r4]
   bcbd2:	7223      	strb	r3, [r4, #8]
   bcbd4:	e7dd      	b.n	bcb92 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x1c>

000bcbd6 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  SoftmaxParams softmax_params;
  int32_t num_rows;
  int32_t row_size;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   bcbd6:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   bcbd8:	6b43      	ldr	r3, [r0, #52]	; 0x34
   bcbda:	b90b      	cbnz	r3, bcbe0 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
   bcbdc:	f002 fa18 	bl	bf010 <abort>
  return context->AllocatePersistentBuffer(context,
                                           sizeof(CMSISNNSoftmaxParams));
}
   bcbe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context,
   bcbe4:	2140      	movs	r1, #64	; 0x40
   bcbe6:	4718      	bx	r3

000bcbe8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
  micro_context->DeallocateTempTfLiteTensor(input);
  micro_context->DeallocateTempTfLiteTensor(output);
  return ret_val;
}

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   bcbe8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
   bcbea:	2200      	movs	r2, #0
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   bcbec:	460d      	mov	r5, r1
   bcbee:	4606      	mov	r6, r0
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
   bcbf0:	f7ff ffa0 	bl	bcb34 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
   bcbf4:	4629      	mov	r1, r5
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
   bcbf6:	4604      	mov	r4, r0
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
   bcbf8:	2200      	movs	r2, #0
   bcbfa:	4630      	mov	r0, r6
   bcbfc:	f7ff ff9c 	bl	bcb38 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  TFLITE_DCHECK(node->user_data != nullptr);
   bcc00:	6929      	ldr	r1, [r5, #16]
   bcc02:	b909      	cbnz	r1, bcc08 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x20>
   bcc04:	f002 fa04 	bl	bf010 <abort>
  const CMSISNNSoftmaxParams op_data =
      *static_cast<const CMSISNNSoftmaxParams*>(node->user_data);

  switch (input->type) {
   bcc08:	7a23      	ldrb	r3, [r4, #8]
   bcc0a:	2b09      	cmp	r3, #9
   bcc0c:	d111      	bne.n	bcc32 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x4a>
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I8
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
#endif
      if (output->type == kTfLiteInt8) {
   bcc0e:	7a03      	ldrb	r3, [r0, #8]
   bcc10:	2b09      	cmp	r3, #9
   bcc12:	d10e      	bne.n	bcc32 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x4a>
#if EI_TFLITE_DISABLE_SOFTMAX_OUT_I8
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  output->type);
      return kTfLiteError;
#endif
        arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input),
   bcc14:	6803      	ldr	r3, [r0, #0]
   bcc16:	9302      	str	r3, [sp, #8]
   bcc18:	698b      	ldr	r3, [r1, #24]
   bcc1a:	9301      	str	r3, [sp, #4]
   bcc1c:	68cb      	ldr	r3, [r1, #12]
   bcc1e:	9300      	str	r3, [sp, #0]
   bcc20:	688b      	ldr	r3, [r1, #8]
   bcc22:	6820      	ldr	r0, [r4, #0]
   bcc24:	e9d1 120e 	ldrd	r1, r2, [r1, #56]	; 0x38
   bcc28:	f7f9 f80e 	bl	b5c48 <arm_softmax_s8>
                           op_data.softmax_params.input_multiplier,
                           op_data.softmax_params.input_left_shift,
                           op_data.softmax_params.diff_min,
                           tflite::micro::GetTensorData<int16_t>(output));
      }
      return kTfLiteOk;
   bcc2c:	2000      	movs	r0, #0
    default:
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
  }
}
   bcc2e:	b004      	add	sp, #16
   bcc30:	bd70      	pop	{r4, r5, r6, pc}
      return kTfLiteError;
   bcc32:	2001      	movs	r0, #1
   bcc34:	e7fb      	b.n	bcc2e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x46>
	...

000bcc38 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   bcc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcc3c:	680b      	ldr	r3, [r1, #0]
   bcc3e:	b093      	sub	sp, #76	; 0x4c
   bcc40:	4605      	mov	r5, r0
   bcc42:	4688      	mov	r8, r1
inline int SizeOfDimension(const TfLiteEvalTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) {
  return node->inputs == nullptr ? 0 : node->inputs->size;
   bcc44:	b113      	cbz	r3, bcc4c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14>
   bcc46:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   bcc48:	2b01      	cmp	r3, #1
   bcc4a:	d010      	beq.n	bcc6e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x36>
   bcc4c:	2401      	movs	r4, #1
   bcc4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bcc52:	4b58      	ldr	r3, [pc, #352]	; (bcdb4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
   bcc54:	9301      	str	r3, [sp, #4]
   bcc56:	4b58      	ldr	r3, [pc, #352]	; (bcdb8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x180>)
   bcc58:	9300      	str	r3, [sp, #0]
   bcc5a:	692e      	ldr	r6, [r5, #16]
   bcc5c:	4a57      	ldr	r2, [pc, #348]	; (bcdbc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
   bcc5e:	4958      	ldr	r1, [pc, #352]	; (bcdc0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x188>)
   bcc60:	2334      	movs	r3, #52	; 0x34
   bcc62:	4628      	mov	r0, r5
   bcc64:	47b0      	blx	r6
}
   bcc66:	4620      	mov	r0, r4
   bcc68:	b013      	add	sp, #76	; 0x4c
   bcc6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   bcc6e:	684c      	ldr	r4, [r1, #4]
}
inline int NumOutputs(const TfLiteNode* node) {
  return node->outputs == nullptr ? 0 : node->outputs->size;
   bcc70:	b114      	cbz	r4, bcc78 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
   bcc72:	6824      	ldr	r4, [r4, #0]
   bcc74:	2c01      	cmp	r4, #1
   bcc76:	d00e      	beq.n	bcc96 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5e>
   bcc78:	2601      	movs	r6, #1
   bcc7a:	e9cd 4602 	strd	r4, r6, [sp, #8]
   bcc7e:	4b4d      	ldr	r3, [pc, #308]	; (bcdb4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
   bcc80:	9301      	str	r3, [sp, #4]
   bcc82:	4b50      	ldr	r3, [pc, #320]	; (bcdc4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
   bcc84:	9300      	str	r3, [sp, #0]
   bcc86:	692c      	ldr	r4, [r5, #16]
   bcc88:	4a4c      	ldr	r2, [pc, #304]	; (bcdbc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
   bcc8a:	494d      	ldr	r1, [pc, #308]	; (bcdc0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x188>)
   bcc8c:	2335      	movs	r3, #53	; 0x35
   bcc8e:	4628      	mov	r0, r5
   bcc90:	47a0      	blx	r4
   bcc92:	4634      	mov	r4, r6
   bcc94:	e7e7      	b.n	bcc66 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e>
   bcc96:	6886      	ldr	r6, [r0, #8]
  TfLiteTensor* input = micro_context->AllocateTempInputTensor(node, 0);
   bcc98:	6833      	ldr	r3, [r6, #0]
   bcc9a:	2200      	movs	r2, #0
   bcc9c:	699b      	ldr	r3, [r3, #24]
   bcc9e:	4630      	mov	r0, r6
   bcca0:	4798      	blx	r3
  TF_LITE_ENSURE(context, input != nullptr);
   bcca2:	4607      	mov	r7, r0
   bcca4:	b940      	cbnz	r0, bccb8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x80>
   bcca6:	4b48      	ldr	r3, [pc, #288]	; (bcdc8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>)
   bcca8:	9300      	str	r3, [sp, #0]
   bccaa:	692e      	ldr	r6, [r5, #16]
   bccac:	2337      	movs	r3, #55	; 0x37
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
   bccae:	4a43      	ldr	r2, [pc, #268]	; (bcdbc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
   bccb0:	4946      	ldr	r1, [pc, #280]	; (bcdcc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x194>)
   bccb2:	4628      	mov	r0, r5
   bccb4:	47b0      	blx	r6
   bccb6:	e7d6      	b.n	bcc66 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   bccb8:	6883      	ldr	r3, [r0, #8]
   bccba:	681b      	ldr	r3, [r3, #0]
   bccbc:	2b00      	cmp	r3, #0
   bccbe:	dc04      	bgt.n	bccca <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x92>
   bccc0:	4b43      	ldr	r3, [pc, #268]	; (bcdd0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x198>)
   bccc2:	9300      	str	r3, [sp, #0]
   bccc4:	692e      	ldr	r6, [r5, #16]
   bccc6:	2338      	movs	r3, #56	; 0x38
   bccc8:	e7f1      	b.n	bccae <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x76>
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(node, 0);
   bccca:	6833      	ldr	r3, [r6, #0]
   bcccc:	2200      	movs	r2, #0
   bccce:	69db      	ldr	r3, [r3, #28]
   bccd0:	4641      	mov	r1, r8
   bccd2:	4630      	mov	r0, r6
   bccd4:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
   bccd6:	4681      	mov	r9, r0
   bccd8:	b920      	cbnz	r0, bcce4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xac>
   bccda:	4b3e      	ldr	r3, [pc, #248]	; (bcdd4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
   bccdc:	9300      	str	r3, [sp, #0]
   bccde:	692e      	ldr	r6, [r5, #16]
   bcce0:	233a      	movs	r3, #58	; 0x3a
   bcce2:	e7e4      	b.n	bccae <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x76>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
   bcce4:	f8d8 a010 	ldr.w	sl, [r8, #16]
   bcce8:	f1ba 0f00 	cmp.w	sl, #0
   bccec:	d104      	bne.n	bccf8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc0>
   bccee:	4b3a      	ldr	r3, [pc, #232]	; (bcdd8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a0>)
   bccf0:	9300      	str	r3, [sp, #0]
   bccf2:	692e      	ldr	r6, [r5, #16]
   bccf4:	233c      	movs	r3, #60	; 0x3c
   bccf6:	e7da      	b.n	bccae <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x76>
  auto ret_val = CalculateSoftmaxParams(context, input, output, params,
   bccf8:	f8cd a000 	str.w	sl, [sp]
   bccfc:	f8d8 3014 	ldr.w	r3, [r8, #20]
   bcd00:	4602      	mov	r2, r0
   bcd02:	4639      	mov	r1, r7
   bcd04:	4628      	mov	r0, r5
   bcd06:	f000 f87b 	bl	bce00 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
   bcd0a:	68b9      	ldr	r1, [r7, #8]
   bcd0c:	f851 bb04 	ldr.w	fp, [r1], #4
      : size_(dimensions_count) {
   bcd10:	f8cd b018 	str.w	fp, [sp, #24]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   bcd14:	ea4f 028b 	mov.w	r2, fp, lsl #2
   bcd18:	4604      	mov	r4, r0
   bcd1a:	a807      	add	r0, sp, #28
   bcd1c:	f006 fa50 	bl	c31c0 <memcpy>
   bcd20:	f8d9 1008 	ldr.w	r1, [r9, #8]
   bcd24:	f851 2b04 	ldr.w	r2, [r1], #4
      : size_(dimensions_count) {
   bcd28:	920c      	str	r2, [sp, #48]	; 0x30
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   bcd2a:	a80d      	add	r0, sp, #52	; 0x34
   bcd2c:	0092      	lsls	r2, r2, #2
   bcd2e:	f006 fa47 	bl	c31c0 <memcpy>
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   bcd32:	f10b 38ff 	add.w	r8, fp, #4294967295	; 0xffffffff

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
   bcd36:	2500      	movs	r5, #0
   bcd38:	455d      	cmp	r5, fp
   bcd3a:	da11      	bge.n	bcd60 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x128>
    if (i != skip_dim) {
   bcd3c:	45a8      	cmp	r8, r5
   bcd3e:	d00d      	beq.n	bcd5c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x124>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   bcd40:	4629      	mov	r1, r5
   bcd42:	a806      	add	r0, sp, #24
   bcd44:	f7ff fc61 	bl	bc60a <_ZNK6tflite12RuntimeShape4DimsEi>
   bcd48:	4629      	mov	r1, r5
   bcd4a:	9005      	str	r0, [sp, #20]
   bcd4c:	a80c      	add	r0, sp, #48	; 0x30
   bcd4e:	f7ff fc5c 	bl	bc60a <_ZNK6tflite12RuntimeShape4DimsEi>
   bcd52:	9b05      	ldr	r3, [sp, #20]
   bcd54:	4283      	cmp	r3, r0
   bcd56:	d001      	beq.n	bcd5c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x124>
   bcd58:	f002 f95a 	bl	bf010 <abort>
  for (int i = 0; i < dims_count; ++i) {
   bcd5c:	3501      	adds	r5, #1
   bcd5e:	e7eb      	b.n	bcd38 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x100>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   bcd60:	f1b8 0f00 	cmp.w	r8, #0
   bcd64:	dbf8      	blt.n	bcd58 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>
   bcd66:	aa06      	add	r2, sp, #24
  int flat_size = 1;
   bcd68:	2301      	movs	r3, #1
  for (int i = 0; i < dims_count; ++i) {
   bcd6a:	2100      	movs	r1, #0
   bcd6c:	4610      	mov	r0, r2
   bcd6e:	458b      	cmp	fp, r1
   bcd70:	d007      	beq.n	bcd82 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   bcd72:	4588      	cmp	r8, r1
   bcd74:	bf14      	ite	ne
   bcd76:	6855      	ldrne	r5, [r2, #4]
   bcd78:	2501      	moveq	r5, #1
   bcd7a:	436b      	muls	r3, r5
  for (int i = 0; i < dims_count; ++i) {
   bcd7c:	3101      	adds	r1, #1
   bcd7e:	3204      	adds	r2, #4
   bcd80:	e7f5      	b.n	bcd6e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x136>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   bcd82:	4641      	mov	r1, r8
   bcd84:	9305      	str	r3, [sp, #20]
   bcd86:	f7ff fc40 	bl	bc60a <_ZNK6tflite12RuntimeShape4DimsEi>
   bcd8a:	4641      	mov	r1, r8
   bcd8c:	4605      	mov	r5, r0
   bcd8e:	a80c      	add	r0, sp, #48	; 0x30
   bcd90:	f7ff fc3b 	bl	bc60a <_ZNK6tflite12RuntimeShape4DimsEi>
   bcd94:	4285      	cmp	r5, r0
   bcd96:	d1df      	bne.n	bcd58 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>
  op_data->num_rows = outer_size;
   bcd98:	9b05      	ldr	r3, [sp, #20]
  op_data->row_size = depth;
   bcd9a:	e9ca 350e 	strd	r3, r5, [sl, #56]	; 0x38
  micro_context->DeallocateTempTfLiteTensor(input);
   bcd9e:	6833      	ldr	r3, [r6, #0]
   bcda0:	4639      	mov	r1, r7
   bcda2:	4630      	mov	r0, r6
   bcda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bcda6:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
   bcda8:	6833      	ldr	r3, [r6, #0]
   bcdaa:	4649      	mov	r1, r9
   bcdac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bcdae:	4630      	mov	r0, r6
   bcdb0:	4798      	blx	r3
  ~RuntimeShape() {}
   bcdb2:	e758      	b.n	bcc66 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e>
   bcdb4:	000c7887 	.word	0x000c7887
   bcdb8:	000c784e 	.word	0x000c784e
   bcdbc:	000c77d0 	.word	0x000c77d0
   bcdc0:	000c7626 	.word	0x000c7626
   bcdc4:	000c785e 	.word	0x000c785e
   bcdc8:	000c7757 	.word	0x000c7757
   bcdcc:	000c74ed 	.word	0x000c74ed
   bcdd0:	000c786f 	.word	0x000c786f
   bcdd4:	000c777a 	.word	0x000c777a
   bcdd8:	000c7889 	.word	0x000c7889

000bcddc <_ZN6tflite16Register_SOFTMAXEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
   bcddc:	b513      	push	{r0, r1, r4, lr}
  return tflite::micro::RegisterOp(Init, Prepare, SoftmaxEval);
   bcdde:	2300      	movs	r3, #0
   bcde0:	9300      	str	r3, [sp, #0]
   bcde2:	4a04      	ldr	r2, [pc, #16]	; (bcdf4 <_ZN6tflite16Register_SOFTMAXEv+0x18>)
   bcde4:	4b04      	ldr	r3, [pc, #16]	; (bcdf8 <_ZN6tflite16Register_SOFTMAXEv+0x1c>)
   bcde6:	4905      	ldr	r1, [pc, #20]	; (bcdfc <_ZN6tflite16Register_SOFTMAXEv+0x20>)
TfLiteRegistration Register_SOFTMAX() {
   bcde8:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, Prepare, SoftmaxEval);
   bcdea:	f7ff fe7b 	bl	bcae4 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
}
   bcdee:	4620      	mov	r0, r4
   bcdf0:	b002      	add	sp, #8
   bcdf2:	bd10      	pop	{r4, pc}
   bcdf4:	000bcc39 	.word	0x000bcc39
   bcdf8:	000bcbe9 	.word	0x000bcbe9
   bcdfc:	000bcbd7 	.word	0x000bcbd7

000bce00 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
   bce00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bce04:	ed2d 8b02 	vpush	{d8}
  if (InitializeLutForInt16(context, input, output, op_data) != kTfLiteOk) {
    return kTfLiteError;
  }
#endif

  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
   bce08:	780e      	ldrb	r6, [r1, #0]
                                    SoftmaxParams* op_data) {
   bce0a:	b088      	sub	sp, #32
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
   bce0c:	2e09      	cmp	r6, #9
                                    SoftmaxParams* op_data) {
   bce0e:	9f10      	ldr	r7, [sp, #64]	; 0x40
   bce10:	4604      	mov	r4, r0
   bce12:	460d      	mov	r5, r1
   bce14:	4698      	mov	r8, r3
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
   bce16:	d00a      	beq.n	bce2e <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e>
    if (input->type == kTfLiteInt16) {
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   bce18:	6907      	ldr	r7, [r0, #16]
   bce1a:	4630      	mov	r0, r6
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
  } else {
#if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   bce1c:	f7ff f8f2 	bl	bc004 <TfLiteTypeGetName>
   bce20:	782b      	ldrb	r3, [r5, #0]
   bce22:	4951      	ldr	r1, [pc, #324]	; (bcf68 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x168>)
   bce24:	4602      	mov	r2, r0
   bce26:	4620      	mov	r0, r4
   bce28:	47b8      	blx	r7
                    TfLiteTypeGetName(input->type), input->type);
    return kTfLiteError;
   bce2a:	2001      	movs	r0, #1
   bce2c:	e097      	b.n	bcf5e <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x15e>
      if (output->type == kTfLiteInt16) {
   bce2e:	7813      	ldrb	r3, [r2, #0]
   bce30:	2b07      	cmp	r3, #7
   bce32:	d139      	bne.n	bcea8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xa8>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
   bce34:	6913      	ldr	r3, [r2, #16]
   bce36:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
   bce3a:	d00c      	beq.n	bce56 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
   bce3c:	4a4b      	ldr	r2, [pc, #300]	; (bcf6c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>)
   bce3e:	e9cd 3202 	strd	r3, r2, [sp, #8]
   bce42:	4b4b      	ldr	r3, [pc, #300]	; (bcf70 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x170>)
   bce44:	9301      	str	r3, [sp, #4]
   bce46:	4b4b      	ldr	r3, [pc, #300]	; (bcf74 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x174>)
   bce48:	9300      	str	r3, [sp, #0]
   bce4a:	6904      	ldr	r4, [r0, #16]
   bce4c:	236e      	movs	r3, #110	; 0x6e
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
   bce4e:	4a4a      	ldr	r2, [pc, #296]	; (bcf78 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x178>)
   bce50:	494a      	ldr	r1, [pc, #296]	; (bcf7c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17c>)
   bce52:	47a0      	blx	r4
   bce54:	e7e9      	b.n	bce2a <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
   bce56:	eddf 7a4a 	vldr	s15, [pc, #296]	; bcf80 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x180>
   bce5a:	ed92 7a03 	vldr	s14, [r2, #12]
   bce5e:	eddf 6a49 	vldr	s13, [pc, #292]	; bcf84 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x184>
   bce62:	eeb4 7ae7 	vcmpe.f32	s14, s15
   bce66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bce6a:	bfcc      	ite	gt
   bce6c:	ee77 7a67 	vsubgt.f32	s15, s14, s15
   bce70:	ee77 7ac7 	vsuble.f32	s15, s15, s14
   bce74:	eef4 7ae6 	vcmpe.f32	s15, s13
   bce78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bce7c:	dd4a      	ble.n	bcf14 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x114>
   bce7e:	4b42      	ldr	r3, [pc, #264]	; (bcf88 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x188>)
   bce80:	2200      	movs	r2, #0
   bce82:	ee17 0a10 	vmov	r0, s14
   bce86:	e9cd 2304 	strd	r2, r3, [sp, #16]
   bce8a:	f7f7 fa2d 	bl	b42e8 <__aeabi_f2d>
   bce8e:	4b3f      	ldr	r3, [pc, #252]	; (bcf8c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x18c>)
   bce90:	9301      	str	r3, [sp, #4]
   bce92:	e9cd 0102 	strd	r0, r1, [sp, #8]
   bce96:	4b3e      	ldr	r3, [pc, #248]	; (bcf90 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x190>)
   bce98:	9300      	str	r3, [sp, #0]
   bce9a:	6925      	ldr	r5, [r4, #16]
   bce9c:	4a36      	ldr	r2, [pc, #216]	; (bcf78 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x178>)
   bce9e:	493d      	ldr	r1, [pc, #244]	; (bcf94 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x194>)
   bcea0:	236f      	movs	r3, #111	; 0x6f
   bcea2:	4620      	mov	r0, r4
   bcea4:	47a8      	blx	r5
   bcea6:	e7c0      	b.n	bce2a <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
   bcea8:	2b09      	cmp	r3, #9
   bceaa:	d013      	beq.n	bced4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd4>
   bceac:	6907      	ldr	r7, [r0, #16]
   bceae:	4618      	mov	r0, r3
   bceb0:	f7ff f8a8 	bl	bc004 <TfLiteTypeGetName>
   bceb4:	4605      	mov	r5, r0
   bceb6:	4630      	mov	r0, r6
   bceb8:	f7ff f8a4 	bl	bc004 <TfLiteTypeGetName>
   bcebc:	4b36      	ldr	r3, [pc, #216]	; (bcf98 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x198>)
   bcebe:	9301      	str	r3, [sp, #4]
   bcec0:	4b36      	ldr	r3, [pc, #216]	; (bcf9c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x19c>)
   bcec2:	9300      	str	r3, [sp, #0]
   bcec4:	e9cd 5002 	strd	r5, r0, [sp, #8]
   bcec8:	4a2b      	ldr	r2, [pc, #172]	; (bcf78 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x178>)
   bceca:	4935      	ldr	r1, [pc, #212]	; (bcfa0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1a0>)
   bcecc:	2372      	movs	r3, #114	; 0x72
   bcece:	4620      	mov	r0, r4
   bced0:	47b8      	blx	r7
   bced2:	e7aa      	b.n	bce2a <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
   bced4:	6913      	ldr	r3, [r2, #16]
   bced6:	f113 0f80 	cmn.w	r3, #128	; 0x80
   bceda:	d00a      	beq.n	bcef2 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf2>
   bcedc:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   bcee0:	e9cd 3202 	strd	r3, r2, [sp, #8]
   bcee4:	4b2f      	ldr	r3, [pc, #188]	; (bcfa4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1a4>)
   bcee6:	9301      	str	r3, [sp, #4]
   bcee8:	4b22      	ldr	r3, [pc, #136]	; (bcf74 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x174>)
   bceea:	9300      	str	r3, [sp, #0]
   bceec:	6904      	ldr	r4, [r0, #16]
   bceee:	2373      	movs	r3, #115	; 0x73
   bcef0:	e7ad      	b.n	bce4e <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x4e>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
   bcef2:	ed92 7a03 	vldr	s14, [r2, #12]
   bcef6:	eddf 7a2c 	vldr	s15, [pc, #176]	; bcfa8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1a8>
   bcefa:	eeb4 7a67 	vcmp.f32	s14, s15
   bcefe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bcf02:	d007      	beq.n	bcf14 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x114>
   bcf04:	4b29      	ldr	r3, [pc, #164]	; (bcfac <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1ac>)
   bcf06:	9300      	str	r3, [sp, #0]
   bcf08:	6904      	ldr	r4, [r0, #16]
   bcf0a:	4a1b      	ldr	r2, [pc, #108]	; (bcf78 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x178>)
   bcf0c:	4928      	ldr	r1, [pc, #160]	; (bcfb0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1b0>)
   bcf0e:	2374      	movs	r3, #116	; 0x74
   bcf10:	47a0      	blx	r4
   bcf12:	e78a      	b.n	bce2a <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a>
      tflite::PreprocessSoftmaxScaling(
   bcf14:	68e8      	ldr	r0, [r5, #12]
   bcf16:	f7f7 f9e7 	bl	b42e8 <__aeabi_f2d>
   bcf1a:	ec41 0b18 	vmov	d8, r0, r1
   bcf1e:	f8d8 0000 	ldr.w	r0, [r8]
   bcf22:	f7f7 f9e1 	bl	b42e8 <__aeabi_f2d>
   bcf26:	eeb0 1a48 	vmov.f32	s2, s16
   bcf2a:	eef0 1a68 	vmov.f32	s3, s17
   bcf2e:	f107 0408 	add.w	r4, r7, #8
   bcf32:	ec41 0b10 	vmov	d0, r0, r1
   bcf36:	aa07      	add	r2, sp, #28
   bcf38:	4621      	mov	r1, r4
   bcf3a:	2005      	movs	r0, #5
   bcf3c:	f7ff fa24 	bl	bc388 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
   bcf40:	9907      	ldr	r1, [sp, #28]
   bcf42:	60f9      	str	r1, [r7, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
   bcf44:	221f      	movs	r2, #31
   bcf46:	2005      	movs	r0, #5
   bcf48:	f7ff fa5a 	bl	bc400 <_ZN6tflite20CalculateInputRadiusEiii>
   bcf4c:	f7f7 f9ba 	bl	b42c4 <__aeabi_i2d>
   bcf50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
      op_data->diff_min =
   bcf54:	4619      	mov	r1, r3
   bcf56:	f7f7 fccf 	bl	b48f8 <__aeabi_d2iz>
   bcf5a:	61b8      	str	r0, [r7, #24]
#endif
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    op_data->beta = static_cast<double>(params->beta);
  }
  return kTfLiteOk;
   bcf5c:	2000      	movs	r0, #0
}
   bcf5e:	b008      	add	sp, #32
   bcf60:	ecbd 8b02 	vpop	{d8}
   bcf64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bcf68:	000c78a4 	.word	0x000c78a4
   bcf6c:	ffff8000 	.word	0xffff8000
   bcf70:	000c7945 	.word	0x000c7945
   bcf74:	000c794c 	.word	0x000c794c
   bcf78:	000c78c0 	.word	0x000c78c0
   bcf7c:	000c7626 	.word	0x000c7626
   bcf80:	37800000 	.word	0x37800000
   bcf84:	3283126f 	.word	0x3283126f
   bcf88:	3ef00000 	.word	0x3ef00000
   bcf8c:	000c7986 	.word	0x000c7986
   bcf90:	000c7992 	.word	0x000c7992
   bcf94:	000c7966 	.word	0x000c7966
   bcf98:	000c79a7 	.word	0x000c79a7
   bcf9c:	000c77a6 	.word	0x000c77a6
   bcfa0:	000c778c 	.word	0x000c778c
   bcfa4:	000c79b3 	.word	0x000c79b3
   bcfa8:	3b800000 	.word	0x3b800000
   bcfac:	000c79b8 	.word	0x000c79b8
   bcfb0:	000c74ed 	.word	0x000c74ed

000bcfb4 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>:
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
   bcfb4:	b530      	push	{r4, r5, lr}
  tensor->type = tensorData[i].type;
   bcfb6:	2418      	movs	r4, #24
static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
   bcfb8:	460b      	mov	r3, r1
  tensor->type = tensorData[i].type;
   bcfba:	4344      	muls	r4, r0
   bcfbc:	4915      	ldr	r1, [pc, #84]	; (bd014 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x60>)
   bcfbe:	190a      	adds	r2, r1, r4
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
   bcfc0:	5d0c      	ldrb	r4, [r1, r4]
  tensor->type = tensorData[i].type;
   bcfc2:	7855      	ldrb	r5, [r2, #1]
  tensor->allocation_type = tensorData[i].allocation_type;
   bcfc4:	751c      	strb	r4, [r3, #20]
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
   bcfc6:	2c02      	cmp	r4, #2
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
   bcfc8:	bf08      	it	eq
   bcfca:	4c13      	ldreq	r4, [pc, #76]	; (bd018 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x64>)
  tensor->type = tensorData[i].type;
   bcfcc:	701d      	strb	r5, [r3, #0]
  tensor->is_variable = false;
   bcfce:	f04f 0500 	mov.w	r5, #0
   bcfd2:	f883 502d 	strb.w	r5, [r3, #45]	; 0x2d
  tensor->bytes = tensorData[i].bytes;
   bcfd6:	68d5      	ldr	r5, [r2, #12]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
   bcfd8:	bf08      	it	eq
   bcfda:	6824      	ldreq	r4, [r4, #0]
  tensor->bytes = tensorData[i].bytes;
   bcfdc:	619d      	str	r5, [r3, #24]
  tensor->dims = tensorData[i].dims;
   bcfde:	6895      	ldr	r5, [r2, #8]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
   bcfe0:	6852      	ldr	r2, [r2, #4]
  tensor->dims = tensorData[i].dims;
   bcfe2:	609d      	str	r5, [r3, #8]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
   bcfe4:	bf08      	it	eq
   bcfe6:	1912      	addeq	r2, r2, r4

    tensor->data.data =  start;
   bcfe8:	605a      	str	r2, [r3, #4]
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
   bcfea:	2218      	movs	r2, #24
   bcfec:	fb02 1200 	mla	r2, r2, r0, r1
   bcff0:	f103 0430 	add.w	r4, r3, #48	; 0x30
   bcff4:	6951      	ldr	r1, [r2, #20]
   bcff6:	6910      	ldr	r0, [r2, #16]
   bcff8:	e884 0003 	stmia.w	r4, {r0, r1}
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
   bcffc:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
   bd000:	2901      	cmp	r1, #1
   bd002:	d106      	bne.n	bd012 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x5e>
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
   bd004:	6952      	ldr	r2, [r2, #20]
    tensor->params.scale = quant->scale->data[0];
   bd006:	6811      	ldr	r1, [r2, #0]
   bd008:	6849      	ldr	r1, [r1, #4]
   bd00a:	60d9      	str	r1, [r3, #12]
    tensor->params.zero_point = quant->zero_point->data[0];
   bd00c:	6852      	ldr	r2, [r2, #4]
   bd00e:	6852      	ldr	r2, [r2, #4]
   bd010:	611a      	str	r2, [r3, #16]
  }

}
   bd012:	bd30      	pop	{r4, r5, pc}
   bd014:	2003d0cc 	.word	0x2003d0cc
   bd018:	2003dc80 	.word	0x2003dc80

000bd01c <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti>:

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
   bd01c:	4b04      	ldr	r3, [pc, #16]	; (bd030 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x14>)
   bd01e:	681b      	ldr	r3, [r3, #0]
   bd020:	428b      	cmp	r3, r1
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
   bd022:	bfa3      	ittte	ge
   bd024:	4b03      	ldrge	r3, [pc, #12]	; (bd034 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x18>)
   bd026:	eb03 01c1 	addge.w	r1, r3, r1, lsl #3
   bd02a:	6848      	ldrge	r0, [r1, #4]
    return NULL;
   bd02c:	2000      	movlt	r0, #0
}
   bd02e:	4770      	bx	lr
   bd030:	2003dec8 	.word	0x2003dec8
   bd034:	2003de78 	.word	0x2003de78

000bd038 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>:

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
   bd038:	4a08      	ldr	r2, [pc, #32]	; (bd05c <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x24>)
   bd03a:	f647 73ff 	movw	r3, #32767	; 0x7fff
   bd03e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
   bd042:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   bd046:	f8a2 30c8 	strh.w	r3, [r2, #200]	; 0xc8
   bd04a:	f8a2 310c 	strh.w	r3, [r2, #268]	; 0x10c
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
   bd04e:	4a04      	ldr	r2, [pc, #16]	; (bd060 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x28>)
   bd050:	8193      	strh	r3, [r2, #12]
   bd052:	8393      	strh	r3, [r2, #28]
   bd054:	8593      	strh	r3, [r2, #44]	; 0x2c
   bd056:	8793      	strh	r3, [r2, #60]	; 0x3c
  }
}
   bd058:	4770      	bx	lr
   bd05a:	bf00      	nop
   bd05c:	2003dd28 	.word	0x2003dd28
   bd060:	2003de38 	.word	0x2003de38

000bd064 <_ZN12_GLOBAL__N_115EonMicroContext16GetScratchBufferEi>:
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
   bd064:	2000      	movs	r0, #0
   bd066:	f7ff bfd9 	b.w	bd01c <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti>

000bd06a <_ZN12_GLOBAL__N_115EonMicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
   bd06a:	4770      	bx	lr

000bd06c <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti>:
                                       int tensor_idx) {
   bd06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
   bd06e:	4b1b      	ldr	r3, [pc, #108]	; (bd0dc <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x70>)
   bd070:	681a      	ldr	r2, [r3, #0]
   bd072:	4b1b      	ldr	r3, [pc, #108]	; (bd0e0 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x74>)
   bd074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   bd078:	4a1a      	ldr	r2, [pc, #104]	; (bd0e4 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x78>)
   bd07a:	440b      	add	r3, r1
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
   bd07c:	4614      	mov	r4, r2
   bd07e:	2100      	movs	r1, #0
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
   bd080:	f647 75ff 	movw	r5, #32767	; 0x7fff
    if (tflEvalTensors[ix].index == tensor_idx) {
   bd084:	f9b2 000c 	ldrsh.w	r0, [r2, #12]
   bd088:	4298      	cmp	r0, r3
   bd08a:	d102      	bne.n	bd092 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x26>
      return &tflEvalTensors[ix].tensor;
   bd08c:	eb04 1001 	add.w	r0, r4, r1, lsl #4
}
   bd090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
   bd092:	42a8      	cmp	r0, r5
   bd094:	d117      	bne.n	bd0c6 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x5a>
  tensor->type = tensorData[i].type;
   bd096:	2218      	movs	r2, #24
   bd098:	4e13      	ldr	r6, [pc, #76]	; (bd0e8 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x7c>)
   bd09a:	435a      	muls	r2, r3
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
   bd09c:	010d      	lsls	r5, r1, #4
   bd09e:	eb04 1001 	add.w	r0, r4, r1, lsl #4
  tensor->type = tensorData[i].type;
   bd0a2:	18b1      	adds	r1, r6, r2
  if(allocation_type == kTfLiteArenaRw) {
   bd0a4:	5cb2      	ldrb	r2, [r6, r2]
  tensor->type = tensorData[i].type;
   bd0a6:	784f      	ldrb	r7, [r1, #1]
   bd0a8:	7207      	strb	r7, [r0, #8]
  if(allocation_type == kTfLiteArenaRw) {
   bd0aa:	2a02      	cmp	r2, #2
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
   bd0ac:	bf08      	it	eq
   bd0ae:	4a0f      	ldreq	r2, [pc, #60]	; (bd0ec <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x80>)
  tensor->dims = tensorData[i].dims;
   bd0b0:	688f      	ldr	r7, [r1, #8]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
   bd0b2:	bf08      	it	eq
   bd0b4:	6812      	ldreq	r2, [r2, #0]
   bd0b6:	6849      	ldr	r1, [r1, #4]
  tensor->dims = tensorData[i].dims;
   bd0b8:	6047      	str	r7, [r0, #4]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
   bd0ba:	bf08      	it	eq
   bd0bc:	1889      	addeq	r1, r1, r2
    tensor->data.data =  start;
   bd0be:	1962      	adds	r2, r4, r5
   bd0c0:	5161      	str	r1, [r4, r5]
      tflEvalTensors[ix].index = tensor_idx;
   bd0c2:	8193      	strh	r3, [r2, #12]
      return &tflEvalTensors[ix].tensor;
   bd0c4:	e7e4      	b.n	bd090 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x24>
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
   bd0c6:	3101      	adds	r1, #1
   bd0c8:	2904      	cmp	r1, #4
   bd0ca:	f102 0210 	add.w	r2, r2, #16
   bd0ce:	d1d9      	bne.n	bd084 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x18>
  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
   bd0d0:	4807      	ldr	r0, [pc, #28]	; (bd0f0 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x84>)
   bd0d2:	f7fe febb 	bl	bbe4c <_Z9ei_printfPKcz>
  return nullptr;
   bd0d6:	2000      	movs	r0, #0
   bd0d8:	e7da      	b.n	bd090 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x24>
   bd0da:	bf00      	nop
   bd0dc:	2003dccc 	.word	0x2003dccc
   bd0e0:	000c8198 	.word	0x000c8198
   bd0e4:	2003de38 	.word	0x2003de38
   bd0e8:	2003d0cc 	.word	0x2003d0cc
   bd0ec:	2003dc80 	.word	0x2003dc80
   bd0f0:	000c79da 	.word	0x000c79da

000bd0f4 <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi>:
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
   bd0f4:	2000      	movs	r0, #0
   bd0f6:	f7ff bfb9 	b.w	bd06c <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti>
	...

000bd0fc <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti>:
                               int tensor_idx) {
   bd0fc:	b538      	push	{r3, r4, r5, lr}
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
   bd0fe:	4b15      	ldr	r3, [pc, #84]	; (bd154 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x58>)
   bd100:	681a      	ldr	r2, [r3, #0]
   bd102:	4b15      	ldr	r3, [pc, #84]	; (bd158 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x5c>)
   bd104:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
   bd108:	4b14      	ldr	r3, [pc, #80]	; (bd15c <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x60>)
   bd10a:	440d      	add	r5, r1
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
   bd10c:	461c      	mov	r4, r3
   bd10e:	2100      	movs	r1, #0
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
   bd110:	f647 70ff 	movw	r0, #32767	; 0x7fff
    if (tflTensors[ix].index == tensor_idx) {
   bd114:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   bd118:	42aa      	cmp	r2, r5
   bd11a:	d104      	bne.n	bd126 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x2a>
      return &tflTensors[ix].tensor;
   bd11c:	2344      	movs	r3, #68	; 0x44
   bd11e:	fb03 4401 	mla	r4, r3, r1, r4
}
   bd122:	4620      	mov	r0, r4
   bd124:	bd38      	pop	{r3, r4, r5, pc}
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
   bd126:	4282      	cmp	r2, r0
   bd128:	d109      	bne.n	bd13e <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x42>
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
   bd12a:	2344      	movs	r3, #68	; 0x44
   bd12c:	fb03 4401 	mla	r4, r3, r1, r4
   bd130:	4621      	mov	r1, r4
   bd132:	4628      	mov	r0, r5
   bd134:	f7ff ff3e 	bl	bcfb4 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
      tflTensors[ix].index = tensor_idx;
   bd138:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
      return &tflTensors[ix].tensor;
   bd13c:	e7f1      	b.n	bd122 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x26>
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
   bd13e:	3101      	adds	r1, #1
   bd140:	2904      	cmp	r1, #4
   bd142:	f103 0344 	add.w	r3, r3, #68	; 0x44
   bd146:	d1e5      	bne.n	bd114 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x18>
  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
   bd148:	4805      	ldr	r0, [pc, #20]	; (bd160 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x64>)
   bd14a:	f7fe fe7f 	bl	bbe4c <_Z9ei_printfPKcz>
  return nullptr;
   bd14e:	2400      	movs	r4, #0
   bd150:	e7e7      	b.n	bd122 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x26>
   bd152:	bf00      	nop
   bd154:	2003dccc 	.word	0x2003dccc
   bd158:	000c8198 	.word	0x000c8198
   bd15c:	2003dd28 	.word	0x2003dd28
   bd160:	000c7a10 	.word	0x000c7a10

000bd164 <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi>:
    return GetTensorImpl(nullptr, tensor_index);
   bd164:	2000      	movs	r0, #0
   bd166:	f7ff bfc9 	b.w	bd0fc <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti>
	...

000bd16c <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>:
                                       size_t bytes) {
   bd16c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;
   bd16e:	f011 030f 	ands.w	r3, r1, #15
                                       size_t bytes) {
   bd172:	460a      	mov	r2, r1
  if (current_location - (bytes + align_bytes) < tensor_boundary) {
   bd174:	491a      	ldr	r1, [pc, #104]	; (bd1e0 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x74>)
   bd176:	481b      	ldr	r0, [pc, #108]	; (bd1e4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x78>)
   bd178:	680c      	ldr	r4, [r1, #0]
   bd17a:	6800      	ldr	r0, [r0, #0]
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;
   bd17c:	bf18      	it	ne
   bd17e:	f1c3 0310 	rsbne	r3, r3, #16
  if (current_location - (bytes + align_bytes) < tensor_boundary) {
   bd182:	4413      	add	r3, r2
   bd184:	1ae3      	subs	r3, r4, r3
   bd186:	4298      	cmp	r0, r3
   bd188:	d91f      	bls.n	bd1ca <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x5e>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
   bd18a:	4d17      	ldr	r5, [pc, #92]	; (bd1e8 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x7c>)
   bd18c:	682b      	ldr	r3, [r5, #0]
   bd18e:	2b09      	cmp	r3, #9
   bd190:	d907      	bls.n	bd1a2 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x36>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
   bd192:	4816      	ldr	r0, [pc, #88]	; (bd1ec <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x80>)
   bd194:	4611      	mov	r1, r2
   bd196:	f7fe fe59 	bl	bbe4c <_Z9ei_printfPKcz>
      return NULL;
   bd19a:	2400      	movs	r4, #0
}
   bd19c:	4620      	mov	r0, r4
   bd19e:	b003      	add	sp, #12
   bd1a0:	bd30      	pop	{r4, r5, pc}
    ptr = ei_calloc(bytes, 1);
   bd1a2:	4610      	mov	r0, r2
   bd1a4:	2101      	movs	r1, #1
   bd1a6:	9201      	str	r2, [sp, #4]
   bd1a8:	f7fe ff28 	bl	bbffc <_Z9ei_callocjj>
    if (ptr == NULL) {
   bd1ac:	9a01      	ldr	r2, [sp, #4]
   bd1ae:	4604      	mov	r4, r0
   bd1b0:	b920      	cbnz	r0, bd1bc <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x50>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
   bd1b2:	480f      	ldr	r0, [pc, #60]	; (bd1f0 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x84>)
   bd1b4:	4611      	mov	r1, r2
   bd1b6:	f7fe fe49 	bl	bbe4c <_Z9ei_printfPKcz>
      return NULL;
   bd1ba:	e7ef      	b.n	bd19c <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x30>
    overflow_buffers[overflow_buffers_ix++] = ptr;
   bd1bc:	682b      	ldr	r3, [r5, #0]
   bd1be:	1c5a      	adds	r2, r3, #1
   bd1c0:	602a      	str	r2, [r5, #0]
   bd1c2:	4a0c      	ldr	r2, [pc, #48]	; (bd1f4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x88>)
   bd1c4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    return ptr;
   bd1c8:	e7e8      	b.n	bd19c <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x30>
  current_location -= 15; // for alignment
   bd1ca:	1aa4      	subs	r4, r4, r2
   bd1cc:	3c0f      	subs	r4, #15
  current_location += 16 - ((uintptr_t)(current_location) & 15);
   bd1ce:	f024 040f 	bic.w	r4, r4, #15
   bd1d2:	3410      	adds	r4, #16
   bd1d4:	600c      	str	r4, [r1, #0]
  memset(ptr, 0, bytes);
   bd1d6:	4620      	mov	r0, r4
   bd1d8:	2100      	movs	r1, #0
   bd1da:	f006 f819 	bl	c3210 <memset>
  return ptr;
   bd1de:	e7dd      	b.n	bd19c <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x30>
   bd1e0:	2003de9c 	.word	0x2003de9c
   bd1e4:	2003de98 	.word	0x2003de98
   bd1e8:	2003decc 	.word	0x2003decc
   bd1ec:	000c7a48 	.word	0x000c7a48
   bd1f0:	000c7ac5 	.word	0x000c7ac5
   bd1f4:	2003dea0 	.word	0x2003dea0

000bd1f8 <_ZN12_GLOBAL__N_115EonMicroContext24AllocatePersistentBufferEj>:
    return AllocatePersistentBufferImpl(nullptr, bytes);
   bd1f8:	2000      	movs	r0, #0
   bd1fa:	f7ff bfb7 	b.w	bd16c <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>
	...

000bd200 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>:
class EonMicroContext : public MicroContext {
   bd200:	b510      	push	{r4, lr}
   bd202:	4b03      	ldr	r3, [pc, #12]	; (bd210 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev+0x10>)
   bd204:	6003      	str	r3, [r0, #0]
   bd206:	4604      	mov	r4, r0
   bd208:	f7ff f96d 	bl	bc4e6 <_ZN6tflite12MicroContextD1Ev>
   bd20c:	4620      	mov	r0, r4
   bd20e:	bd10      	pop	{r4, pc}
   bd210:	000c81a8 	.word	0x000c81a8

000bd214 <_ZN12_GLOBAL__N_115EonMicroContextD0Ev>:
   bd214:	b510      	push	{r4, lr}
   bd216:	4604      	mov	r4, r0
   bd218:	f7ff fff2 	bl	bd200 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>
   bd21c:	4620      	mov	r0, r4
   bd21e:	2118      	movs	r1, #24
   bd220:	f7f7 fe45 	bl	b4eae <_ZdlPvj>
   bd224:	4620      	mov	r0, r4
   bd226:	bd10      	pop	{r4, pc}

000bd228 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi>:
                                                int* buffer_idx) {
   bd228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
   bd22a:	4e0e      	ldr	r6, [pc, #56]	; (bd264 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x3c>)
   bd22c:	6833      	ldr	r3, [r6, #0]
   bd22e:	2b03      	cmp	r3, #3
                                                int* buffer_idx) {
   bd230:	460d      	mov	r5, r1
   bd232:	4617      	mov	r7, r2
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
   bd234:	d904      	bls.n	bd240 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x18>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
   bd236:	480c      	ldr	r0, [pc, #48]	; (bd268 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x40>)
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
   bd238:	f7fe fe08 	bl	bbe4c <_Z9ei_printfPKcz>
    return kTfLiteError;
   bd23c:	2001      	movs	r0, #1
}
   bd23e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
   bd240:	f7ff ff94 	bl	bd16c <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>
  if (!b.ptr) {
   bd244:	b910      	cbnz	r0, bd24c <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x24>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
   bd246:	4809      	ldr	r0, [pc, #36]	; (bd26c <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x44>)
   bd248:	4629      	mov	r1, r5
   bd24a:	e7f5      	b.n	bd238 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x10>
  scratch_buffers[scratch_buffers_ix] = b;
   bd24c:	6833      	ldr	r3, [r6, #0]
   bd24e:	4c08      	ldr	r4, [pc, #32]	; (bd270 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x48>)
  *buffer_idx = scratch_buffers_ix;
   bd250:	603b      	str	r3, [r7, #0]
  scratch_buffers[scratch_buffers_ix] = b;
   bd252:	f844 5033 	str.w	r5, [r4, r3, lsl #3]
   bd256:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
  scratch_buffers_ix++;
   bd25a:	3301      	adds	r3, #1
  scratch_buffers[scratch_buffers_ix] = b;
   bd25c:	6060      	str	r0, [r4, #4]
  scratch_buffers_ix++;
   bd25e:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
   bd260:	2000      	movs	r0, #0
   bd262:	e7ec      	b.n	bd23e <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x16>
   bd264:	2003dec8 	.word	0x2003dec8
   bd268:	000c7afb 	.word	0x000c7afb
   bd26c:	000c7b53 	.word	0x000c7b53
   bd270:	2003de78 	.word	0x2003de78

000bd274 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi>:
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
   bd274:	2000      	movs	r0, #0
   bd276:	f7ff bfd7 	b.w	bd228 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi>
	...

000bd27c <_Z19tflite_learn_3_initPFPvjjE>:
};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
   bd27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd280:	4603      	mov	r3, r0
   bd282:	b0a1      	sub	sp, #132	; 0x84
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
   bd284:	f44f 71c0 	mov.w	r1, #384	; 0x180
   bd288:	2010      	movs	r0, #16
   bd28a:	4798      	blx	r3
   bd28c:	4b50      	ldr	r3, [pc, #320]	; (bd3d0 <_Z19tflite_learn_3_initPFPvjjE+0x154>)
   bd28e:	6018      	str	r0, [r3, #0]
  if (!tensor_arena) {
   bd290:	b938      	cbnz	r0, bd2a2 <_Z19tflite_learn_3_initPFPvjjE+0x26>
    ei_printf("ERR: failed to allocate tensor arena\n");
   bd292:	4850      	ldr	r0, [pc, #320]	; (bd3d4 <_Z19tflite_learn_3_initPFPvjjE+0x158>)
   bd294:	f7fe fdda 	bl	bbe4c <_Z9ei_printfPKcz>
    return kTfLiteError;
   bd298:	2501      	movs	r5, #1
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}
   bd29a:	4628      	mov	r0, r5
   bd29c:	b021      	add	sp, #132	; 0x84
   bd29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tensor_boundary = tensor_arena;
   bd2a2:	4c4d      	ldr	r4, [pc, #308]	; (bd3d8 <_Z19tflite_learn_3_initPFPvjjE+0x15c>)
  current_location = tensor_arena + kTensorArenaSize;
   bd2a4:	4e4d      	ldr	r6, [pc, #308]	; (bd3dc <_Z19tflite_learn_3_initPFPvjjE+0x160>)
  tensor_boundary = tensor_arena;
   bd2a6:	6020      	str	r0, [r4, #0]
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
   bd2a8:	2300      	movs	r3, #0
  current_location = tensor_arena + kTensorArenaSize;
   bd2aa:	f500 70c0 	add.w	r0, r0, #384	; 0x180
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
   bd2ae:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   bd2b2:	461a      	mov	r2, r3
  current_location = tensor_arena + kTensorArenaSize;
   bd2b4:	6030      	str	r0, [r6, #0]
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
   bd2b6:	4619      	mov	r1, r3
   bd2b8:	4640      	mov	r0, r8
   bd2ba:	f7ff f949 	bl	bc550 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>
   bd2be:	4b48      	ldr	r3, [pc, #288]	; (bd3e0 <_Z19tflite_learn_3_initPFPvjjE+0x164>)
   bd2c0:	930a      	str	r3, [sp, #40]	; 0x28
  ctx.impl_ = static_cast<void*>(&micro_context_);
   bd2c2:	4b48      	ldr	r3, [pc, #288]	; (bd3e4 <_Z19tflite_learn_3_initPFPvjjE+0x168>)
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
   bd2c4:	4a48      	ldr	r2, [pc, #288]	; (bd3e8 <_Z19tflite_learn_3_initPFPvjjE+0x16c>)
   bd2c6:	635a      	str	r2, [r3, #52]	; 0x34
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
   bd2c8:	4a48      	ldr	r2, [pc, #288]	; (bd3ec <_Z19tflite_learn_3_initPFPvjjE+0x170>)
   bd2ca:	63da      	str	r2, [r3, #60]	; 0x3c
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
   bd2cc:	4a48      	ldr	r2, [pc, #288]	; (bd3f0 <_Z19tflite_learn_3_initPFPvjjE+0x174>)
   bd2ce:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetTensor = &GetTensorImpl;
   bd2d0:	4a48      	ldr	r2, [pc, #288]	; (bd3f4 <_Z19tflite_learn_3_initPFPvjjE+0x178>)
   bd2d2:	64da      	str	r2, [r3, #76]	; 0x4c
  ctx.GetEvalTensor = &GetEvalTensorImpl;
   bd2d4:	4a48      	ldr	r2, [pc, #288]	; (bd3f8 <_Z19tflite_learn_3_initPFPvjjE+0x17c>)
   bd2d6:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.ReportError = &MicroContextReportOpError;
   bd2d8:	4a48      	ldr	r2, [pc, #288]	; (bd3fc <_Z19tflite_learn_3_initPFPvjjE+0x180>)
   bd2da:	611a      	str	r2, [r3, #16]
   bd2dc:	4f48      	ldr	r7, [pc, #288]	; (bd400 <_Z19tflite_learn_3_initPFPvjjE+0x184>)
  ctx.impl_ = static_cast<void*>(&micro_context_);
   bd2de:	f8c3 8008 	str.w	r8, [r3, #8]
  ctx.tensors_size = 11;
   bd2e2:	220b      	movs	r2, #11
   bd2e4:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < 11; ++i) {
   bd2e6:	2500      	movs	r5, #0
    init_tflite_tensor(i, &tensor);
   bd2e8:	a910      	add	r1, sp, #64	; 0x40
   bd2ea:	4628      	mov	r0, r5
   bd2ec:	f7ff fe62 	bl	bcfb4 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
    if (tensor.allocation_type == kTfLiteArenaRw) {
   bd2f0:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
   bd2f4:	2b02      	cmp	r3, #2
   bd2f6:	d106      	bne.n	bd306 <_Z19tflite_learn_3_initPFPvjjE+0x8a>
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
   bd2f8:	68fa      	ldr	r2, [r7, #12]
   bd2fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   bd2fc:	4413      	add	r3, r2
      if (data_end_ptr > tensor_boundary) {
   bd2fe:	6822      	ldr	r2, [r4, #0]
   bd300:	429a      	cmp	r2, r3
        tensor_boundary = data_end_ptr;
   bd302:	bf38      	it	cc
   bd304:	6023      	strcc	r3, [r4, #0]
  for (size_t i = 0; i < 11; ++i) {
   bd306:	3501      	adds	r5, #1
   bd308:	2d0b      	cmp	r5, #11
   bd30a:	f107 0718 	add.w	r7, r7, #24
   bd30e:	d1eb      	bne.n	bd2e8 <_Z19tflite_learn_3_initPFPvjjE+0x6c>
  if (tensor_boundary > current_location /* end of arena size */) {
   bd310:	6822      	ldr	r2, [r4, #0]
   bd312:	6833      	ldr	r3, [r6, #0]
   bd314:	429a      	cmp	r2, r3
   bd316:	d907      	bls.n	bd328 <_Z19tflite_learn_3_initPFPvjjE+0xac>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
   bd318:	483a      	ldr	r0, [pc, #232]	; (bd404 <_Z19tflite_learn_3_initPFPvjjE+0x188>)
   bd31a:	f7fe fd97 	bl	bbe4c <_Z9ei_printfPKcz>
    return kTfLiteError;
   bd31e:	2501      	movs	r5, #1
  EonMicroContext micro_context_;
   bd320:	4640      	mov	r0, r8
   bd322:	f7ff ff6d 	bl	bd200 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>
   bd326:	e7b8      	b.n	bd29a <_Z19tflite_learn_3_initPFPvjjE+0x1e>
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
   bd328:	4668      	mov	r0, sp
   bd32a:	466f      	mov	r7, sp
   bd32c:	f7ff fb92 	bl	bca54 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
   bd330:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   bd332:	4c35      	ldr	r4, [pc, #212]	; (bd408 <_Z19tflite_learn_3_initPFPvjjE+0x18c>)
    current_subgraph_index = g;
   bd334:	f8df a0d8 	ldr.w	sl, [pc, #216]	; bd410 <_Z19tflite_learn_3_initPFPvjjE+0x194>
   bd338:	f8df 90d8 	ldr.w	r9, [pc, #216]	; bd414 <_Z19tflite_learn_3_initPFPvjjE+0x198>
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
   bd33c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd33e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   bd340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd342:	4626      	mov	r6, r4
   bd344:	683b      	ldr	r3, [r7, #0]
   bd346:	f846 3b04 	str.w	r3, [r6], #4
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
   bd34a:	4668      	mov	r0, sp
   bd34c:	466d      	mov	r5, sp
   bd34e:	f7ff fd45 	bl	bcddc <_ZN6tflite16Register_SOFTMAXEv>
   bd352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd354:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   bd356:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd358:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   bd35a:	683b      	ldr	r3, [r7, #0]
   bd35c:	6033      	str	r3, [r6, #0]
    current_subgraph_index = g;
   bd35e:	4e2b      	ldr	r6, [pc, #172]	; (bd40c <_Z19tflite_learn_3_initPFPvjjE+0x190>)
   bd360:	2500      	movs	r5, #0
   bd362:	f8ca 5000 	str.w	r5, [sl]
   bd366:	4637      	mov	r7, r6
   bd368:	46cb      	mov	fp, r9
   bd36a:	3c20      	subs	r4, #32
      if (registrations[used_ops[i]].init) {
   bd36c:	f81b 3b01 	ldrb.w	r3, [fp], #1
   bd370:	2224      	movs	r2, #36	; 0x24
   bd372:	4353      	muls	r3, r2
   bd374:	58e3      	ldr	r3, [r4, r3]
   bd376:	b123      	cbz	r3, bd382 <_Z19tflite_learn_3_initPFPvjjE+0x106>
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
   bd378:	6979      	ldr	r1, [r7, #20]
   bd37a:	481a      	ldr	r0, [pc, #104]	; (bd3e4 <_Z19tflite_learn_3_initPFPvjjE+0x168>)
   bd37c:	2200      	movs	r2, #0
   bd37e:	4798      	blx	r3
   bd380:	6138      	str	r0, [r7, #16]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
   bd382:	3501      	adds	r5, #1
   bd384:	2d04      	cmp	r5, #4
   bd386:	f107 0728 	add.w	r7, r7, #40	; 0x28
   bd38a:	d1ef      	bne.n	bd36c <_Z19tflite_learn_3_initPFPvjjE+0xf0>
    current_subgraph_index = g;
   bd38c:	2300      	movs	r3, #0
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
   bd38e:	4f15      	ldr	r7, [pc, #84]	; (bd3e4 <_Z19tflite_learn_3_initPFPvjjE+0x168>)
    current_subgraph_index = g;
   bd390:	f8ca 3000 	str.w	r3, [sl]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
   bd394:	469b      	mov	fp, r3
      if (registrations[used_ops[i]].prepare) {
   bd396:	2324      	movs	r3, #36	; 0x24
   bd398:	f819 2b01 	ldrb.w	r2, [r9], #1
   bd39c:	fb03 4202 	mla	r2, r3, r2, r4
   bd3a0:	6895      	ldr	r5, [r2, #8]
   bd3a2:	b955      	cbnz	r5, bd3ba <_Z19tflite_learn_3_initPFPvjjE+0x13e>
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
   bd3a4:	f10b 0b01 	add.w	fp, fp, #1
   bd3a8:	f1bb 0f04 	cmp.w	fp, #4
   bd3ac:	f106 0628 	add.w	r6, r6, #40	; 0x28
   bd3b0:	d1f2      	bne.n	bd398 <_Z19tflite_learn_3_initPFPvjjE+0x11c>
  current_subgraph_index = 0;
   bd3b2:	2500      	movs	r5, #0
   bd3b4:	f8ca 5000 	str.w	r5, [sl]
  return kTfLiteOk;
   bd3b8:	e7b2      	b.n	bd320 <_Z19tflite_learn_3_initPFPvjjE+0xa4>
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
   bd3ba:	4631      	mov	r1, r6
   bd3bc:	4638      	mov	r0, r7
        ResetTensors();
   bd3be:	f7ff fe3b 	bl	bd038 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
   bd3c2:	47a8      	blx	r5
        if (status != kTfLiteOk) {
   bd3c4:	2324      	movs	r3, #36	; 0x24
   bd3c6:	4605      	mov	r5, r0
   bd3c8:	2800      	cmp	r0, #0
   bd3ca:	d0eb      	beq.n	bd3a4 <_Z19tflite_learn_3_initPFPvjjE+0x128>
   bd3cc:	e7a8      	b.n	bd320 <_Z19tflite_learn_3_initPFPvjjE+0xa4>
   bd3ce:	bf00      	nop
   bd3d0:	2003dc80 	.word	0x2003dc80
   bd3d4:	000c7b86 	.word	0x000c7b86
   bd3d8:	2003de98 	.word	0x2003de98
   bd3dc:	2003de9c 	.word	0x2003de9c
   bd3e0:	000c81a8 	.word	0x000c81a8
   bd3e4:	2003dcd0 	.word	0x2003dcd0
   bd3e8:	000bd16d 	.word	0x000bd16d
   bd3ec:	000bd229 	.word	0x000bd229
   bd3f0:	000bd01d 	.word	0x000bd01d
   bd3f4:	000bd0fd 	.word	0x000bd0fd
   bd3f8:	000bd06d 	.word	0x000bd06d
   bd3fc:	000bc5ef 	.word	0x000bc5ef
   bd400:	2003d0cc 	.word	0x2003d0cc
   bd404:	000c7bac 	.word	0x000c7bac
   bd408:	2003dc84 	.word	0x2003dc84
   bd40c:	2003d1d4 	.word	0x2003d1d4
   bd410:	2003dccc 	.word	0x2003dccc
   bd414:	000c8194 	.word	0x000c8194

000bd418 <_Z20tflite_learn_3_inputiP12TfLiteTensor>:

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
   bd418:	b508      	push	{r3, lr}
  init_tflite_tensor(in_tensor_indices[index], tensor);
   bd41a:	2000      	movs	r0, #0
   bd41c:	f7ff fdca 	bl	bcfb4 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
  return kTfLiteOk;
}
   bd420:	2000      	movs	r0, #0
   bd422:	bd08      	pop	{r3, pc}

000bd424 <_Z21tflite_learn_3_outputiP12TfLiteTensor>:

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
   bd424:	b508      	push	{r3, lr}
  init_tflite_tensor(out_tensor_indices[index], tensor);
   bd426:	200a      	movs	r0, #10
   bd428:	f7ff fdc4 	bl	bcfb4 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
  return kTfLiteOk;
}
   bd42c:	2000      	movs	r0, #0
   bd42e:	bd08      	pop	{r3, pc}

000bd430 <_Z21tflite_learn_3_invokev>:

TfLiteStatus tflite_learn_3_invoke() {
   bd430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd434:	4e0c      	ldr	r6, [pc, #48]	; (bd468 <_Z21tflite_learn_3_invokev+0x38>)
   bd436:	4d0d      	ldr	r5, [pc, #52]	; (bd46c <_Z21tflite_learn_3_invokev+0x3c>)
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);
   bd438:	4f0d      	ldr	r7, [pc, #52]	; (bd470 <_Z21tflite_learn_3_invokev+0x40>)
   bd43a:	f8df 9038 	ldr.w	r9, [pc, #56]	; bd474 <_Z21tflite_learn_3_invokev+0x44>
  for (size_t i = 0; i < 4; ++i) {
   bd43e:	2400      	movs	r4, #0
    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);
   bd440:	f04f 0824 	mov.w	r8, #36	; 0x24
    ResetTensors();
   bd444:	f7ff fdf8 	bl	bd038 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>
    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);
   bd448:	f816 3b01 	ldrb.w	r3, [r6], #1
   bd44c:	fb08 7303 	mla	r3, r8, r3, r7
   bd450:	4629      	mov	r1, r5
   bd452:	68db      	ldr	r3, [r3, #12]
   bd454:	4648      	mov	r0, r9
   bd456:	4798      	blx	r3
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
   bd458:	b920      	cbnz	r0, bd464 <_Z21tflite_learn_3_invokev+0x34>
  for (size_t i = 0; i < 4; ++i) {
   bd45a:	3401      	adds	r4, #1
   bd45c:	2c04      	cmp	r4, #4
   bd45e:	f105 0528 	add.w	r5, r5, #40	; 0x28
   bd462:	d1ef      	bne.n	bd444 <_Z21tflite_learn_3_invokev+0x14>
      return status;
    }
  }
  return kTfLiteOk;
}
   bd464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd468:	000c8194 	.word	0x000c8194
   bd46c:	2003d1d4 	.word	0x2003d1d4
   bd470:	2003dc84 	.word	0x2003dc84
   bd474:	2003dcd0 	.word	0x2003dcd0

000bd478 <_Z20tflite_learn_3_resetPFvPvE>:

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
   bd478:	b570      	push	{r4, r5, r6, lr}
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
   bd47a:	4a0a      	ldr	r2, [pc, #40]	; (bd4a4 <_Z20tflite_learn_3_resetPFvPvE+0x2c>)
   bd47c:	4e0a      	ldr	r6, [pc, #40]	; (bd4a8 <_Z20tflite_learn_3_resetPFvPvE+0x30>)

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
   bd47e:	4d0b      	ldr	r5, [pc, #44]	; (bd4ac <_Z20tflite_learn_3_resetPFvPvE+0x34>)
TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
   bd480:	4603      	mov	r3, r0
  free_fnc(tensor_arena);
   bd482:	6810      	ldr	r0, [r2, #0]
   bd484:	4798      	blx	r3
  scratch_buffers_ix = 0;
   bd486:	4b0a      	ldr	r3, [pc, #40]	; (bd4b0 <_Z20tflite_learn_3_resetPFvPvE+0x38>)
   bd488:	2400      	movs	r4, #0
   bd48a:	601c      	str	r4, [r3, #0]
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
   bd48c:	682b      	ldr	r3, [r5, #0]
   bd48e:	42a3      	cmp	r3, r4
   bd490:	d905      	bls.n	bd49e <_Z20tflite_learn_3_resetPFvPvE+0x26>
    ei_free(overflow_buffers[ix]);
   bd492:	f856 0b04 	ldr.w	r0, [r6], #4
   bd496:	f7fe fdb3 	bl	bc000 <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
   bd49a:	3401      	adds	r4, #1
   bd49c:	e7f6      	b.n	bd48c <_Z20tflite_learn_3_resetPFvPvE+0x14>
  }
  overflow_buffers_ix = 0;
   bd49e:	2000      	movs	r0, #0
   bd4a0:	6028      	str	r0, [r5, #0]
  return kTfLiteOk;
}
   bd4a2:	bd70      	pop	{r4, r5, r6, pc}
   bd4a4:	2003dc80 	.word	0x2003dc80
   bd4a8:	2003dea0 	.word	0x2003dea0
   bd4ac:	2003decc 	.word	0x2003decc
   bd4b0:	2003dec8 	.word	0x2003dec8

000bd4b4 <_GLOBAL__sub_I__Z19tflite_learn_3_initPFPvjjE>:
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 32), (TfLiteIntArray*)&g0::tensor_dimension0, 26, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
   bd4b4:	4b08      	ldr	r3, [pc, #32]	; (bd4d8 <_GLOBAL__sub_I__Z19tflite_learn_3_initPFPvjjE+0x24>)
   bd4b6:	681a      	ldr	r2, [r3, #0]
};
   bd4b8:	4b08      	ldr	r3, [pc, #32]	; (bd4dc <_GLOBAL__sub_I__Z19tflite_learn_3_initPFPvjjE+0x28>)
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 32), (TfLiteIntArray*)&g0::tensor_dimension0, 26, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
   bd4ba:	f102 0120 	add.w	r1, r2, #32
};
   bd4be:	6059      	str	r1, [r3, #4]
   bd4c0:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension9, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
   bd4c4:	f102 0110 	add.w	r1, r2, #16
};
   bd4c8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
   bd4cc:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
   bd4d0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
}
   bd4d4:	4770      	bx	lr
   bd4d6:	bf00      	nop
   bd4d8:	2003dc80 	.word	0x2003dc80
   bd4dc:	2003d0cc 	.word	0x2003d0cc

000bd4e0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
   bd4e0:	b530      	push	{r4, r5, lr}
                                                 uint16_t reg_addr,
                                                 uint8_t width,
                                                 uint8_t byteorder,
                                                 uint8_t address_width) {
   bd4e2:	2500      	movs	r5, #0
  _i2cdevice = i2cdevice;
  _spidevice = NULL;
   bd4e4:	e9c0 1500 	strd	r1, r5, [r0]
  _addrwidth = address_width;
  _address = reg_addr;
   bd4e8:	8142      	strh	r2, [r0, #10]
  _addrwidth = address_width;
   bd4ea:	f89d 1010 	ldrb.w	r1, [sp, #16]
  _byteorder = byteorder;
   bd4ee:	f89d 200c 	ldrb.w	r2, [sp, #12]
                                                 uint8_t address_width) {
   bd4f2:	6145      	str	r5, [r0, #20]
  _addrwidth = address_width;
   bd4f4:	7341      	strb	r1, [r0, #13]
  _byteorder = byteorder;
   bd4f6:	7382      	strb	r2, [r0, #14]
  _width = width;
   bd4f8:	7303      	strb	r3, [r0, #12]
}
   bd4fa:	bd30      	pop	{r4, r5, pc}

000bd4fc <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bd4fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bd4fe:	4604      	mov	r4, r0

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bd500:	8940      	ldrh	r0, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bd502:	7aa3      	ldrb	r3, [r4, #10]
   bd504:	f88d 300c 	strb.w	r3, [sp, #12]
   bd508:	0a00      	lsrs	r0, r0, #8
   bd50a:	f88d 000d 	strb.w	r0, [sp, #13]

  if (_i2cdevice) {
   bd50e:	6820      	ldr	r0, [r4, #0]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bd510:	460d      	mov	r5, r1
   bd512:	4616      	mov	r6, r2
  if (_i2cdevice) {
   bd514:	b140      	cbz	r0, bd528 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2c>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bd516:	7b63      	ldrb	r3, [r4, #13]
   bd518:	9301      	str	r3, [sp, #4]
   bd51a:	ab03      	add	r3, sp, #12
   bd51c:	9300      	str	r3, [sp, #0]
   bd51e:	2301      	movs	r3, #1
   bd520:	f000 f8e2 	bl	bd6e8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   bd524:	b004      	add	sp, #16
   bd526:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   bd528:	6860      	ldr	r0, [r4, #4]
   bd52a:	2800      	cmp	r0, #0
   bd52c:	d0fa      	beq.n	bd524 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x28>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bd52e:	7a22      	ldrb	r2, [r4, #8]
   bd530:	b922      	cbnz	r2, bd53c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x40>
      addrbuffer[0] &= ~0x80;
   bd532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   bd536:	f88d 300c 	strb.w	r3, [sp, #12]
   bd53a:	e003      	b.n	bd544 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x48>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bd53c:	2a02      	cmp	r2, #2
   bd53e:	d009      	beq.n	bd554 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x58>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bd540:	2a01      	cmp	r2, #1
   bd542:	d00a      	beq.n	bd55a <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5e>
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bd544:	7b63      	ldrb	r3, [r4, #13]
   bd546:	9300      	str	r3, [sp, #0]
   bd548:	4632      	mov	r2, r6
   bd54a:	ab03      	add	r3, sp, #12
   bd54c:	4629      	mov	r1, r5
   bd54e:	f000 fa34 	bl	bd9ba <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   bd552:	e7e7      	b.n	bd524 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x28>
      addrbuffer[0] |= 0x80;
   bd554:	f063 037f 	orn	r3, r3, #127	; 0x7f
   bd558:	e7ed      	b.n	bd536 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x3a>
      addrbuffer[0] &= ~0x80;
   bd55a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   bd55e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   bd562:	e7e8      	b.n	bd536 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x3a>

000bd564 <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   bd564:	b4f0      	push	{r4, r5, r6, r7}
   bd566:	460b      	mov	r3, r1
  if (numbytes == 0) {
   bd568:	b902      	cbnz	r2, bd56c <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   bd56a:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   bd56c:	2a04      	cmp	r2, #4
   bd56e:	d814      	bhi.n	bd59a <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   bd570:	f100 050f 	add.w	r5, r0, #15
   bd574:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   bd576:	1884      	adds	r4, r0, r2
   bd578:	4629      	mov	r1, r5
   bd57a:	4284      	cmp	r4, r0
   bd57c:	d009      	beq.n	bd592 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   bd57e:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
   bd580:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
   bd582:	b927      	cbnz	r7, bd58e <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   bd584:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   bd586:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   bd588:	3501      	adds	r5, #1
   bd58a:	3c01      	subs	r4, #1
   bd58c:	e7f5      	b.n	bd57a <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   bd58e:	73a6      	strb	r6, [r4, #14]
   bd590:	e7f9      	b.n	bd586 <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   bd592:	4620      	mov	r0, r4
}
   bd594:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   bd596:	f7ff bfb1 	b.w	bd4fc <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   bd59a:	2000      	movs	r0, #0
   bd59c:	bcf0      	pop	{r4, r5, r6, r7}
   bd59e:	4770      	bx	lr

000bd5a0 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bd5a0:	b530      	push	{r4, r5, lr}
   bd5a2:	460b      	mov	r3, r1
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bd5a4:	8941      	ldrh	r1, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bd5a6:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bd5a8:	b085      	sub	sp, #20
   bd5aa:	4605      	mov	r5, r0

  if (_i2cdevice) {
   bd5ac:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bd5ae:	f88d 400c 	strb.w	r4, [sp, #12]
   bd5b2:	0a09      	lsrs	r1, r1, #8
   bd5b4:	f88d 100d 	strb.w	r1, [sp, #13]
  if (_i2cdevice) {
   bd5b8:	b140      	cbz	r0, bd5cc <_ZN23Adafruit_BusIO_Register4readEPhh+0x2c>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd5ba:	2100      	movs	r1, #0
   bd5bc:	e9cd 2100 	strd	r2, r1, [sp]
   bd5c0:	7b6a      	ldrb	r2, [r5, #13]
   bd5c2:	a903      	add	r1, sp, #12
   bd5c4:	f000 f8e2 	bl	bd78c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   bd5c8:	b005      	add	sp, #20
   bd5ca:	bd30      	pop	{r4, r5, pc}
  if (_spidevice) {
   bd5cc:	6868      	ldr	r0, [r5, #4]
   bd5ce:	2800      	cmp	r0, #0
   bd5d0:	d0fa      	beq.n	bd5c8 <_ZN23Adafruit_BusIO_Register4readEPhh+0x28>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bd5d2:	7a29      	ldrb	r1, [r5, #8]
   bd5d4:	b921      	cbnz	r1, bd5e0 <_ZN23Adafruit_BusIO_Register4readEPhh+0x40>
      addrbuffer[0] |= 0x80;
   bd5d6:	f064 047f 	orn	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80 | 0x40;
   bd5da:	f88d 400c 	strb.w	r4, [sp, #12]
   bd5de:	e003      	b.n	bd5e8 <_ZN23Adafruit_BusIO_Register4readEPhh+0x48>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bd5e0:	2902      	cmp	r1, #2
   bd5e2:	d009      	beq.n	bd5f8 <_ZN23Adafruit_BusIO_Register4readEPhh+0x58>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bd5e4:	2901      	cmp	r1, #1
   bd5e6:	d00a      	beq.n	bd5fe <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd5e8:	21ff      	movs	r1, #255	; 0xff
   bd5ea:	e9cd 2100 	strd	r2, r1, [sp]
   bd5ee:	7b6a      	ldrb	r2, [r5, #13]
   bd5f0:	a903      	add	r1, sp, #12
   bd5f2:	f000 fa14 	bl	bda1e <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   bd5f6:	e7e7      	b.n	bd5c8 <_ZN23Adafruit_BusIO_Register4readEPhh+0x28>
      addrbuffer[0] &= ~0x80;
   bd5f8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   bd5fc:	e7ed      	b.n	bd5da <_ZN23Adafruit_BusIO_Register4readEPhh+0x3a>
      addrbuffer[0] |= 0x80 | 0x40;
   bd5fe:	f064 043f 	orn	r4, r4, #63	; 0x3f
   bd602:	e7ea      	b.n	bd5da <_ZN23Adafruit_BusIO_Register4readEPhh+0x3a>

000bd604 <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   bd604:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   bd606:	f100 050f 	add.w	r5, r0, #15
   bd60a:	7b02      	ldrb	r2, [r0, #12]
   bd60c:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   bd60e:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   bd610:	f7ff ffc6 	bl	bd5a0 <_ZN23Adafruit_BusIO_Register4readEPhh>
   bd614:	b178      	cbz	r0, bd636 <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   bd616:	7b22      	ldrb	r2, [r4, #12]
   bd618:	4629      	mov	r1, r5
   bd61a:	4422      	add	r2, r4
  uint32_t value = 0;
   bd61c:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   bd61e:	42a2      	cmp	r2, r4
   bd620:	d00b      	beq.n	bd63a <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   bd622:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   bd624:	7ba0      	ldrb	r0, [r4, #14]
   bd626:	b920      	cbnz	r0, bd632 <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   bd628:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   bd62a:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   bd62c:	3a01      	subs	r2, #1
   bd62e:	3101      	adds	r1, #1
   bd630:	e7f5      	b.n	bd61e <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   bd632:	7808      	ldrb	r0, [r1, #0]
   bd634:	e7f9      	b.n	bd62a <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   bd636:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   bd63a:	bd38      	pop	{r3, r4, r5, pc}

000bd63c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
   bd63c:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
   bd63e:	6001      	str	r1, [r0, #0]
  _bits = bits;
   bd640:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   bd642:	7143      	strb	r3, [r0, #5]
}
   bd644:	bd10      	pop	{r4, pc}

000bd646 <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
   bd646:	b510      	push	{r4, lr}
   bd648:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bd64a:	6800      	ldr	r0, [r0, #0]
   bd64c:	f7ff ffda 	bl	bd604 <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
   bd650:	7922      	ldrb	r2, [r4, #4]
   bd652:	2301      	movs	r3, #1
   bd654:	4093      	lsls	r3, r2
  val >>= _shift;
   bd656:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
   bd658:	3b01      	subs	r3, #1
  val >>= _shift;
   bd65a:	40d0      	lsrs	r0, r2
}
   bd65c:	4018      	ands	r0, r3
   bd65e:	bd10      	pop	{r4, pc}

000bd660 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bd660:	b570      	push	{r4, r5, r6, lr}
   bd662:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bd664:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bd666:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   bd668:	f7ff ffcc 	bl	bd604 <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
   bd66c:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
   bd66e:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
   bd670:	2201      	movs	r2, #1
   bd672:	409a      	lsls	r2, r3
   bd674:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
   bd676:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
   bd67a:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   bd67e:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
   bd680:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   bd682:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
   bd686:	4329      	orrs	r1, r5
   bd688:	7b02      	ldrb	r2, [r0, #12]
}
   bd68a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
   bd68e:	f7ff bf69 	b.w	bd564 <_ZN23Adafruit_BusIO_Register5writeEmh>

000bd692 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   bd692:	6042      	str	r2, [r0, #4]
  _begun = false;
   bd694:	2200      	movs	r2, #0
   bd696:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   bd698:	2220      	movs	r2, #32
  _addr = addr;
   bd69a:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   bd69c:	60c2      	str	r2, [r0, #12]
#endif
}
   bd69e:	4770      	bx	lr

000bd6a0 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   bd6a0:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   bd6a2:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   bd6a4:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   bd6a6:	b153      	cbz	r3, bd6be <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   bd6a8:	7821      	ldrb	r1, [r4, #0]
   bd6aa:	6860      	ldr	r0, [r4, #4]
   bd6ac:	f001 fe43 	bl	bf336 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   bd6b0:	6860      	ldr	r0, [r4, #4]
   bd6b2:	f001 fe48 	bl	bf346 <_ZN7TwoWire15endTransmissionEv>
   bd6b6:	fab0 f080 	clz	r0, r0
   bd6ba:	0940      	lsrs	r0, r0, #5
    return true;
  }
  return false;
}
   bd6bc:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   bd6be:	2101      	movs	r1, #1
   bd6c0:	f000 f803 	bl	bd6ca <_ZN18Adafruit_I2CDevice5beginEb>
   bd6c4:	2800      	cmp	r0, #0
   bd6c6:	d1ef      	bne.n	bd6a8 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   bd6c8:	e7f8      	b.n	bd6bc <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000bd6ca <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bd6ca:	b538      	push	{r3, r4, r5, lr}
   bd6cc:	4604      	mov	r4, r0
  _wire->begin();
   bd6ce:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bd6d0:	460d      	mov	r5, r1
  _wire->begin();
   bd6d2:	f001 fdfd 	bl	bf2d0 <_ZN7TwoWire5beginEv>
  _begun = true;
   bd6d6:	2001      	movs	r0, #1
   bd6d8:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   bd6da:	b125      	cbz	r5, bd6e6 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   bd6dc:	4620      	mov	r0, r4
}
   bd6de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   bd6e2:	f7ff bfdd 	b.w	bd6a0 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   bd6e6:	bd38      	pop	{r3, r4, r5, pc}

000bd6e8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   bd6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd6ec:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   bd6f0:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   bd6f2:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   bd6f4:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   bd6f6:	4432      	add	r2, r6
   bd6f8:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   bd6fa:	4604      	mov	r4, r0
   bd6fc:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   bd6fe:	d902      	bls.n	bd706 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   bd700:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("Failed to send!");
#endif
    return false;
  }
}
   bd702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   bd706:	7801      	ldrb	r1, [r0, #0]
   bd708:	6840      	ldr	r0, [r0, #4]
   bd70a:	f001 fe14 	bl	bf336 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bd70e:	b97e      	cbnz	r6, bd730 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   bd710:	6860      	ldr	r0, [r4, #4]
   bd712:	6803      	ldr	r3, [r0, #0]
   bd714:	462a      	mov	r2, r5
   bd716:	68db      	ldr	r3, [r3, #12]
   bd718:	4641      	mov	r1, r8
   bd71a:	4798      	blx	r3
   bd71c:	4285      	cmp	r5, r0
   bd71e:	d1ef      	bne.n	bd700 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   bd720:	6860      	ldr	r0, [r4, #4]
   bd722:	4639      	mov	r1, r7
   bd724:	f001 fe0b 	bl	bf33e <_ZN7TwoWire15endTransmissionEh>
   bd728:	fab0 f080 	clz	r0, r0
   bd72c:	0940      	lsrs	r0, r0, #5
   bd72e:	e7e8      	b.n	bd702 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bd730:	f1b9 0f00 	cmp.w	r9, #0
   bd734:	d0ec      	beq.n	bd710 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   bd736:	6860      	ldr	r0, [r4, #4]
   bd738:	6803      	ldr	r3, [r0, #0]
   bd73a:	4632      	mov	r2, r6
   bd73c:	68db      	ldr	r3, [r3, #12]
   bd73e:	4649      	mov	r1, r9
   bd740:	4798      	blx	r3
   bd742:	4286      	cmp	r6, r0
   bd744:	d1dc      	bne.n	bd700 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   bd746:	e7e3      	b.n	bd710 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000bd748 <_ZN18Adafruit_I2CDevice4readEPhjb>:
 *    @param  buffer Pointer to buffer of data to read into
 *    @param  len Number of bytes from buffer to read.
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   bd748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd74c:	4615      	mov	r5, r2
  if (len > maxBufferSize()) {
   bd74e:	68c2      	ldr	r2, [r0, #12]
   bd750:	42aa      	cmp	r2, r5
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   bd752:	4604      	mov	r4, r0
   bd754:	460e      	mov	r6, r1
  if (len > maxBufferSize()) {
   bd756:	d314      	bcc.n	bd782 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    DEBUG_SERIAL.println(F("\tI2CDevice could not read such a large buffer"));
#endif
    return false;
  }

  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   bd758:	7801      	ldrb	r1, [r0, #0]
   bd75a:	6840      	ldr	r0, [r0, #4]
   bd75c:	b2ea      	uxtb	r2, r5
   bd75e:	f001 fdd6 	bl	bf30e <_ZN7TwoWire11requestFromEhjh>
  if (recv != len) {
   bd762:	4285      	cmp	r5, r0
   bd764:	d10d      	bne.n	bd782 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
   bd766:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   bd768:	fa1f f887 	uxth.w	r8, r7
   bd76c:	4545      	cmp	r5, r8
   bd76e:	f107 0701 	add.w	r7, r7, #1
   bd772:	d909      	bls.n	bd788 <_ZN18Adafruit_I2CDevice4readEPhjb+0x40>
    buffer[i] = _wire->read();
   bd774:	6860      	ldr	r0, [r4, #4]
   bd776:	6803      	ldr	r3, [r0, #0]
   bd778:	695b      	ldr	r3, [r3, #20]
   bd77a:	4798      	blx	r3
   bd77c:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   bd780:	e7f2      	b.n	bd768 <_ZN18Adafruit_I2CDevice4readEPhjb+0x20>
    return false;
   bd782:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bd784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd788:	2001      	movs	r0, #1
   bd78a:	e7fb      	b.n	bd784 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3c>

000bd78c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   bd78c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bd78e:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   bd790:	2300      	movs	r3, #0
   bd792:	e9cd 3300 	strd	r3, r3, [sp]
   bd796:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   bd79a:	9e06      	ldr	r6, [sp, #24]
   bd79c:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   bd79e:	f7ff ffa3 	bl	bd6e8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   bd7a2:	b140      	cbz	r0, bd7b6 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   bd7a4:	2301      	movs	r3, #1
   bd7a6:	4632      	mov	r2, r6
   bd7a8:	4629      	mov	r1, r5
   bd7aa:	4620      	mov	r0, r4
}
   bd7ac:	b002      	add	sp, #8
   bd7ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   bd7b2:	f7ff bfc9 	b.w	bd748 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   bd7b6:	b002      	add	sp, #8
   bd7b8:	bd70      	pop	{r4, r5, r6, pc}

000bd7ba <_ZN18Adafruit_I2CDevice8setSpeedEm>:
 *    underlying Wire support!
 *    @param desiredclk The desired I2C SCL frequency
 *    @return True if this platform supports changing I2C speed.
 *    Not necessarily that the speed was achieved!
 */
bool Adafruit_I2CDevice::setSpeed(uint32_t desiredclk) {
   bd7ba:	b508      	push	{r3, lr}

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   bd7bc:	6840      	ldr	r0, [r0, #4]
   bd7be:	f001 fd83 	bl	bf2c8 <_ZN7TwoWire8setSpeedEm>
  _wire->setClock(desiredclk);
  return true;
#else
  return false;
#endif
}
   bd7c2:	2001      	movs	r0, #1
   bd7c4:	bd08      	pop	{r3, pc}

000bd7c6 <_ZN18Adafruit_SPIDeviceD1Ev>:
}

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
   bd7c6:	b510      	push	{r4, lr}
   bd7c8:	4604      	mov	r4, r0
  if (_spiSetting) {
   bd7ca:	6840      	ldr	r0, [r0, #4]
   bd7cc:	b110      	cbz	r0, bd7d4 <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
   bd7ce:	6803      	ldr	r3, [r0, #0]
   bd7d0:	689b      	ldr	r3, [r3, #8]
   bd7d2:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
   bd7d4:	4620      	mov	r0, r4
   bd7d6:	bd10      	pop	{r4, pc}

000bd7d8 <_ZN18Adafruit_SPIDevice5beginEv>:
/*!
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
   bd7d8:	b538      	push	{r3, r4, r5, lr}
   bd7da:	4604      	mov	r4, r0
  pinMode(_cs, OUTPUT);
   bd7dc:	f990 000e 	ldrsb.w	r0, [r0, #14]
   bd7e0:	2101      	movs	r1, #1
   bd7e2:	b280      	uxth	r0, r0
   bd7e4:	f003 fc94 	bl	c1110 <pinMode>
  digitalWrite(_cs, HIGH);
   bd7e8:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd7ec:	2101      	movs	r1, #1
   bd7ee:	b280      	uxth	r0, r0
   bd7f0:	f003 fc9f 	bl	c1132 <digitalWrite>

  if (_spi) { // hardware SPI
   bd7f4:	6825      	ldr	r5, [r4, #0]
   bd7f6:	b135      	cbz	r5, bd806 <_ZN18Adafruit_SPIDevice5beginEv+0x2e>
    _spi->begin();
   bd7f8:	4628      	mov	r0, r5
   bd7fa:	f003 f909 	bl	c0a10 <_ZN8SPIClass5beginEv>
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
   bd7fe:	2001      	movs	r0, #1
   bd800:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return true;
}
   bd804:	bd38      	pop	{r3, r4, r5, pc}
    pinMode(_sck, OUTPUT);
   bd806:	f994 000f 	ldrsb.w	r0, [r4, #15]
   bd80a:	2101      	movs	r1, #1
   bd80c:	b280      	uxth	r0, r0
   bd80e:	f003 fc7f 	bl	c1110 <pinMode>
    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
   bd812:	7b63      	ldrb	r3, [r4, #13]
   bd814:	f994 000f 	ldrsb.w	r0, [r4, #15]
   bd818:	2b01      	cmp	r3, #1
      digitalWrite(_sck, LOW);
   bd81a:	bf94      	ite	ls
   bd81c:	4629      	movls	r1, r5
      digitalWrite(_sck, HIGH);
   bd81e:	2101      	movhi	r1, #1
   bd820:	b280      	uxth	r0, r0
   bd822:	f003 fc86 	bl	c1132 <digitalWrite>
    if (_mosi != -1) {
   bd826:	f994 0010 	ldrsb.w	r0, [r4, #16]
   bd82a:	1c42      	adds	r2, r0, #1
   bd82c:	d009      	beq.n	bd842 <_ZN18Adafruit_SPIDevice5beginEv+0x6a>
      pinMode(_mosi, OUTPUT);
   bd82e:	2101      	movs	r1, #1
   bd830:	b280      	uxth	r0, r0
   bd832:	f003 fc6d 	bl	c1110 <pinMode>
      digitalWrite(_mosi, HIGH);
   bd836:	f994 0010 	ldrsb.w	r0, [r4, #16]
   bd83a:	2101      	movs	r1, #1
   bd83c:	b280      	uxth	r0, r0
   bd83e:	f003 fc78 	bl	c1132 <digitalWrite>
    if (_miso != -1) {
   bd842:	f994 0011 	ldrsb.w	r0, [r4, #17]
   bd846:	1c43      	adds	r3, r0, #1
   bd848:	d0d9      	beq.n	bd7fe <_ZN18Adafruit_SPIDevice5beginEv+0x26>
      pinMode(_miso, INPUT);
   bd84a:	2100      	movs	r1, #0
   bd84c:	b280      	uxth	r0, r0
   bd84e:	f003 fc5f 	bl	c1110 <pinMode>
   bd852:	e7d4      	b.n	bd7fe <_ZN18Adafruit_SPIDevice5beginEv+0x26>

000bd854 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bd854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd858:	4604      	mov	r4, r0
  if (_spi) {
   bd85a:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bd85c:	b085      	sub	sp, #20
   bd85e:	460d      	mov	r5, r1
  if (_spi) {
   bd860:	b140      	cbz	r0, bd874 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   bd862:	2300      	movs	r3, #0
   bd864:	9300      	str	r3, [sp, #0]
   bd866:	4613      	mov	r3, r2
   bd868:	460a      	mov	r2, r1
   bd86a:	f003 f96d 	bl	c0b48 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   bd86e:	b005      	add	sp, #20
   bd870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   bd874:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bd876:	68a0      	ldr	r0, [r4, #8]
   bd878:	4f48      	ldr	r7, [pc, #288]	; (bd99c <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   bd87a:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   bd87e:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bd880:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   bd882:	bf0c      	ite	eq
   bd884:	f04f 0b01 	moveq.w	fp, #1
   bd888:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bd88c:	ea1b 0f03 	tst.w	fp, r3
   bd890:	eb01 0302 	add.w	r3, r1, r2
   bd894:	bf0c      	ite	eq
   bd896:	f04f 0901 	moveq.w	r9, #1
   bd89a:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bd89e:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   bd8a0:	9303      	str	r3, [sp, #12]
   bd8a2:	9b03      	ldr	r3, [sp, #12]
   bd8a4:	42ab      	cmp	r3, r5
   bd8a6:	d0e2      	beq.n	bd86e <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   bd8a8:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   bd8ac:	465e      	mov	r6, fp
    uint8_t reply = 0;
   bd8ae:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   bd8b2:	b117      	cbz	r7, bd8ba <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   bd8b4:	4638      	mov	r0, r7
   bd8b6:	f001 f93b 	bl	beb30 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   bd8ba:	7b63      	ldrb	r3, [r4, #13]
   bd8bc:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   bd8c0:	d141      	bne.n	bd946 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bd8c2:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bd8c6:	1c5a      	adds	r2, r3, #1
   bd8c8:	d00f      	beq.n	bd8ea <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   bd8ca:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bd8ce:	bf14      	ite	ne
   bd8d0:	2301      	movne	r3, #1
   bd8d2:	2300      	moveq	r3, #0
   bd8d4:	454b      	cmp	r3, r9
   bd8d6:	d008      	beq.n	bd8ea <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   bd8d8:	6963      	ldr	r3, [r4, #20]
   bd8da:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bd8dc:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   bd8de:	2900      	cmp	r1, #0
   bd8e0:	d02c      	beq.n	bd93c <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   bd8e2:	4302      	orrs	r2, r0
   bd8e4:	601a      	str	r2, [r3, #0]
   bd8e6:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   bd8ea:	69a1      	ldr	r1, [r4, #24]
   bd8ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd8ee:	680a      	ldr	r2, [r1, #0]
   bd8f0:	4313      	orrs	r3, r2
   bd8f2:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bd8f4:	b117      	cbz	r7, bd8fc <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   bd8f6:	4638      	mov	r0, r7
   bd8f8:	f001 f91a 	bl	beb30 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   bd8fc:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bd900:	3301      	adds	r3, #1
   bd902:	d006      	beq.n	bd912 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   bd904:	69e3      	ldr	r3, [r4, #28]
   bd906:	681a      	ldr	r2, [r3, #0]
   bd908:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bd90a:	421a      	tst	r2, r3
            reply |= b;
   bd90c:	bf18      	it	ne
   bd90e:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   bd912:	69a1      	ldr	r1, [r4, #24]
   bd914:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd916:	680a      	ldr	r2, [r1, #0]
   bd918:	ea22 0303 	bic.w	r3, r2, r3
   bd91c:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   bd91e:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bd922:	3301      	adds	r3, #1
        buffer[i] = reply;
   bd924:	bf18      	it	ne
   bd926:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   bd92a:	7b23      	ldrb	r3, [r4, #12]
   bd92c:	2b00      	cmp	r3, #0
   bd92e:	d132      	bne.n	bd996 <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   bd930:	0076      	lsls	r6, r6, #1
   bd932:	b2f6      	uxtb	r6, r6
   bd934:	2e00      	cmp	r6, #0
   bd936:	d1bc      	bne.n	bd8b2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   bd938:	3501      	adds	r5, #1
   bd93a:	e7b2      	b.n	bd8a2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   bd93c:	ea22 0200 	bic.w	r2, r2, r0
   bd940:	601a      	str	r2, [r3, #0]
   bd942:	4689      	mov	r9, r1
   bd944:	e7d1      	b.n	bd8ea <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   bd946:	69a1      	ldr	r1, [r4, #24]
   bd948:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd94a:	680a      	ldr	r2, [r1, #0]
   bd94c:	4313      	orrs	r3, r2
   bd94e:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bd950:	b117      	cbz	r7, bd958 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   bd952:	4638      	mov	r0, r7
   bd954:	f001 f8ec 	bl	beb30 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   bd958:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bd95c:	3301      	adds	r3, #1
   bd95e:	d008      	beq.n	bd972 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   bd960:	6963      	ldr	r3, [r4, #20]
   bd962:	6a61      	ldr	r1, [r4, #36]	; 0x24
   bd964:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   bd966:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   bd96a:	bf14      	ite	ne
   bd96c:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   bd96e:	438a      	biceq	r2, r1
   bd970:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   bd972:	69a1      	ldr	r1, [r4, #24]
   bd974:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd976:	680a      	ldr	r2, [r1, #0]
   bd978:	ea22 0303 	bic.w	r3, r2, r3
   bd97c:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   bd97e:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bd982:	3301      	adds	r3, #1
   bd984:	d0cb      	beq.n	bd91e <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   bd986:	69e3      	ldr	r3, [r4, #28]
   bd988:	681a      	ldr	r2, [r3, #0]
   bd98a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bd98c:	421a      	tst	r2, r3
            reply |= b;
   bd98e:	bf18      	it	ne
   bd990:	ea46 0808 	orrne.w	r8, r6, r8
   bd994:	e7c3      	b.n	bd91e <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   bd996:	0876      	lsrs	r6, r6, #1
   bd998:	e7cc      	b.n	bd934 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   bd99a:	bf00      	nop
   bd99c:	0007a120 	.word	0x0007a120

000bd9a0 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   bd9a0:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   bd9a2:	2201      	movs	r2, #1
  uint8_t data = send;
   bd9a4:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   bd9a8:	f10d 0107 	add.w	r1, sp, #7
   bd9ac:	f7ff ff52 	bl	bd854 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   bd9b0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   bd9b4:	b003      	add	sp, #12
   bd9b6:	f85d fb04 	ldr.w	pc, [sp], #4

000bd9ba <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bd9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd9be:	4604      	mov	r4, r0
  if (_spi) {
   bd9c0:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bd9c2:	460e      	mov	r6, r1
   bd9c4:	4617      	mov	r7, r2
   bd9c6:	461d      	mov	r5, r3
  if (_spi) {
   bd9c8:	b110      	cbz	r0, bd9d0 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   bd9ca:	6861      	ldr	r1, [r4, #4]
   bd9cc:	f003 f84e 	bl	c0a6c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bd9d0:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd9d4:	2100      	movs	r1, #0
   bd9d6:	b280      	uxth	r0, r0
   bd9d8:	f003 fbab 	bl	c1132 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   bd9dc:	9b06      	ldr	r3, [sp, #24]
   bd9de:	eb05 0803 	add.w	r8, r5, r3
   bd9e2:	4545      	cmp	r5, r8
   bd9e4:	d108      	bne.n	bd9f8 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   bd9e6:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   bd9e8:	42b7      	cmp	r7, r6
   bd9ea:	d00b      	beq.n	bda04 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   bd9ec:	f816 1b01 	ldrb.w	r1, [r6], #1
   bd9f0:	4620      	mov	r0, r4
   bd9f2:	f7ff ffd5 	bl	bd9a0 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   bd9f6:	e7f7      	b.n	bd9e8 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   bd9f8:	f815 1b01 	ldrb.w	r1, [r5], #1
   bd9fc:	4620      	mov	r0, r4
   bd9fe:	f7ff ffcf 	bl	bd9a0 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   bda02:	e7ee      	b.n	bd9e2 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   bda04:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bda08:	2101      	movs	r1, #1
   bda0a:	b280      	uxth	r0, r0
   bda0c:	f003 fb91 	bl	c1132 <digitalWrite>

  if (_spi) {
   bda10:	6820      	ldr	r0, [r4, #0]
   bda12:	b108      	cbz	r0, bda18 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   bda14:	f003 f810 	bl	c0a38 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bda18:	2001      	movs	r0, #1
   bda1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bda1e <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   bda1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bda22:	4604      	mov	r4, r0
  if (_spi) {
   bda24:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   bda26:	f89d 801c 	ldrb.w	r8, [sp, #28]
   bda2a:	460e      	mov	r6, r1
   bda2c:	4617      	mov	r7, r2
   bda2e:	461d      	mov	r5, r3
  if (_spi) {
   bda30:	b110      	cbz	r0, bda38 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   bda32:	6861      	ldr	r1, [r4, #4]
   bda34:	f003 f81a 	bl	c0a6c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bda38:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bda3c:	2100      	movs	r1, #0
   bda3e:	b280      	uxth	r0, r0
   bda40:	f003 fb77 	bl	c1132 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   bda44:	4437      	add	r7, r6
   bda46:	42be      	cmp	r6, r7
   bda48:	d10a      	bne.n	bda60 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   bda4a:	9b06      	ldr	r3, [sp, #24]
   bda4c:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   bda4e:	42ae      	cmp	r6, r5
   bda50:	d00c      	beq.n	bda6c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   bda52:	4641      	mov	r1, r8
   bda54:	4620      	mov	r0, r4
   bda56:	f7ff ffa3 	bl	bd9a0 <_ZN18Adafruit_SPIDevice8transferEh>
   bda5a:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   bda5e:	e7f6      	b.n	bda4e <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   bda60:	f816 1b01 	ldrb.w	r1, [r6], #1
   bda64:	4620      	mov	r0, r4
   bda66:	f7ff ff9b 	bl	bd9a0 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   bda6a:	e7ec      	b.n	bda46 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   bda6c:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bda70:	2101      	movs	r1, #1
   bda72:	b280      	uxth	r0, r0
   bda74:	f003 fb5d 	bl	c1132 <digitalWrite>

  if (_spi) {
   bda78:	6820      	ldr	r0, [r4, #0]
   bda7a:	b108      	cbz	r0, bda80 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   bda7c:	f002 ffdc 	bl	c0a38 <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   bda80:	2001      	movs	r0, #1
   bda82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bda86 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   bda86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bda8a:	b085      	sub	sp, #20
   bda8c:	461f      	mov	r7, r3
   bda8e:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   bda92:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   bda96:	eba8 0902 	sub.w	r9, r8, r2
   bda9a:	eba7 0a01 	sub.w	sl, r7, r1
   bda9e:	f1b9 0f00 	cmp.w	r9, #0
   bdaa2:	bfb8      	it	lt
   bdaa4:	f1c9 0900 	rsblt	r9, r9, #0
   bdaa8:	f1ba 0f00 	cmp.w	sl, #0
   bdaac:	bfb8      	it	lt
   bdaae:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   bdab2:	45d1      	cmp	r9, sl
        uint16_t color) {
   bdab4:	4683      	mov	fp, r0
   bdab6:	460c      	mov	r4, r1
   bdab8:	4615      	mov	r5, r2
    if (steep) {
   bdaba:	dd04      	ble.n	bdac6 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   bdabc:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   bdabe:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   bdac0:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   bdac2:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   bdac4:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   bdac6:	42bc      	cmp	r4, r7
   bdac8:	dd05      	ble.n	bdad6 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   bdaca:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   bdacc:	4645      	mov	r5, r8
   bdace:	4690      	mov	r8, r2
    if (x0 > x1) {
   bdad0:	4622      	mov	r2, r4
   bdad2:	463c      	mov	r4, r7
   bdad4:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   bdad6:	1b3e      	subs	r6, r7, r4
   bdad8:	b2b2      	uxth	r2, r6
   bdada:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   bdadc:	eba8 0205 	sub.w	r2, r8, r5
   bdae0:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   bdae4:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   bdae8:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   bdaec:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   bdaf0:	4545      	cmp	r5, r8
   bdaf2:	bfb4      	ite	lt
   bdaf4:	2201      	movlt	r2, #1
   bdaf6:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   bdafa:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   bdafc:	1076      	asrs	r6, r6, #1
        ystep = -1;
   bdafe:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   bdb00:	42bc      	cmp	r4, r7
   bdb02:	dc1c      	bgt.n	bdb3e <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   bdb04:	f8db 2000 	ldr.w	r2, [fp]
   bdb08:	9303      	str	r3, [sp, #12]
        if (steep) {
   bdb0a:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   bdb0c:	f8d2 8018 	ldr.w	r8, [r2, #24]
   bdb10:	bfc7      	ittee	gt
   bdb12:	4629      	movgt	r1, r5
   bdb14:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   bdb16:	462a      	movle	r2, r5
   bdb18:	4621      	movle	r1, r4
   bdb1a:	4658      	mov	r0, fp
   bdb1c:	47c0      	blx	r8
        }
        err -= dy;
   bdb1e:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   bdb20:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   bdb22:	1ab6      	subs	r6, r6, r2
   bdb24:	b2b1      	uxth	r1, r6
   bdb26:	b236      	sxth	r6, r6
        if (err < 0) {
   bdb28:	2e00      	cmp	r6, #0
   bdb2a:	da05      	bge.n	bdb38 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   bdb2c:	9a02      	ldr	r2, [sp, #8]
   bdb2e:	4415      	add	r5, r2
            err += dx;
   bdb30:	9a00      	ldr	r2, [sp, #0]
   bdb32:	1856      	adds	r6, r2, r1
            y0 += ystep;
   bdb34:	b22d      	sxth	r5, r5
            err += dx;
   bdb36:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   bdb38:	3401      	adds	r4, #1
   bdb3a:	b224      	sxth	r4, r4
   bdb3c:	e7e0      	b.n	bdb00 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   bdb3e:	b005      	add	sp, #20
   bdb40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bdb44 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   bdb44:	4770      	bx	lr

000bdb46 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   bdb46:	b410      	push	{r4}
    drawPixel(x, y, color);
   bdb48:	6804      	ldr	r4, [r0, #0]
   bdb4a:	6924      	ldr	r4, [r4, #16]
   bdb4c:	46a4      	mov	ip, r4
}
   bdb4e:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   bdb52:	4760      	bx	ip

000bdb54 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   bdb54:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   bdb56:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   bdb58:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   bdb5c:	9502      	str	r5, [sp, #8]
   bdb5e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   bdb60:	46a4      	mov	ip, r4
}
   bdb62:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   bdb64:	4760      	bx	ip

000bdb66 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   bdb66:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   bdb68:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   bdb6a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   bdb6e:	9502      	str	r5, [sp, #8]
   bdb70:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   bdb72:	46a4      	mov	ip, r4
}
   bdb74:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   bdb76:	4760      	bx	ip

000bdb78 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   bdb78:	b470      	push	{r4, r5, r6}
   bdb7a:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   bdb7e:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   bdb82:	6804      	ldr	r4, [r0, #0]
   bdb84:	e9cd 5603 	strd	r5, r6, [sp, #12]
   bdb88:	6c24      	ldr	r4, [r4, #64]	; 0x40
   bdb8a:	46a4      	mov	ip, r4
}
   bdb8c:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   bdb8e:	4760      	bx	ip

000bdb90 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   bdb90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bdb94:	461c      	mov	r4, r3
    startWrite();
   bdb96:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   bdb98:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   bdb9c:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   bdb9e:	4605      	mov	r5, r0
   bdba0:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   bdba2:	3c01      	subs	r4, #1
   bdba4:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   bdba6:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   bdba8:	b224      	sxth	r4, r4
    startWrite();
   bdbaa:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   bdbac:	682b      	ldr	r3, [r5, #0]
   bdbae:	f8cd 8004 	str.w	r8, [sp, #4]
   bdbb2:	9400      	str	r4, [sp, #0]
   bdbb4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   bdbb6:	4628      	mov	r0, r5
   bdbb8:	463b      	mov	r3, r7
   bdbba:	4632      	mov	r2, r6
   bdbbc:	4639      	mov	r1, r7
   bdbbe:	47a0      	blx	r4
    endWrite();
   bdbc0:	682b      	ldr	r3, [r5, #0]
   bdbc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bdbc4:	4628      	mov	r0, r5
}
   bdbc6:	b002      	add	sp, #8
   bdbc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   bdbcc:	4718      	bx	r3

000bdbce <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   bdbce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bdbd2:	461d      	mov	r5, r3
    startWrite();
   bdbd4:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   bdbd6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   bdbda:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   bdbdc:	4604      	mov	r4, r0
   bdbde:	4617      	mov	r7, r2
   bdbe0:	460e      	mov	r6, r1
    startWrite();
   bdbe2:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   bdbe4:	e9cd 7800 	strd	r7, r8, [sp]
   bdbe8:	6822      	ldr	r2, [r4, #0]
   bdbea:	1e6b      	subs	r3, r5, #1
   bdbec:	4433      	add	r3, r6
   bdbee:	6a95      	ldr	r5, [r2, #40]	; 0x28
   bdbf0:	4620      	mov	r0, r4
   bdbf2:	b21b      	sxth	r3, r3
   bdbf4:	463a      	mov	r2, r7
   bdbf6:	4631      	mov	r1, r6
   bdbf8:	47a8      	blx	r5
    endWrite();
   bdbfa:	6823      	ldr	r3, [r4, #0]
   bdbfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bdbfe:	4620      	mov	r0, r4
}
   bdc00:	b002      	add	sp, #8
   bdc02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   bdc06:	4718      	bx	r3

000bdc08 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   bdc08:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   bdc0c:	461e      	mov	r6, r3
    startWrite();
   bdc0e:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   bdc10:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   bdc14:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   bdc16:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   bdc1a:	460c      	mov	r4, r1
   bdc1c:	4605      	mov	r5, r0
   bdc1e:	4617      	mov	r7, r2
    startWrite();
   bdc20:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   bdc22:	4426      	add	r6, r4
   bdc24:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   bdc26:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   bdc28:	da0b      	bge.n	bdc42 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   bdc2a:	f8cd 8000 	str.w	r8, [sp]
   bdc2e:	f8d3 a020 	ldr.w	sl, [r3, #32]
   bdc32:	4621      	mov	r1, r4
   bdc34:	464b      	mov	r3, r9
   bdc36:	463a      	mov	r2, r7
   bdc38:	4628      	mov	r0, r5
   bdc3a:	3401      	adds	r4, #1
   bdc3c:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   bdc3e:	b224      	sxth	r4, r4
   bdc40:	e7f0      	b.n	bdc24 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   bdc42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bdc44:	4628      	mov	r0, r5
}
   bdc46:	b002      	add	sp, #8
   bdc48:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   bdc4c:	4718      	bx	r3

000bdc4e <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   bdc4e:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   bdc50:	6802      	ldr	r2, [r0, #0]
   bdc52:	9101      	str	r1, [sp, #4]
   bdc54:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   bdc58:	9100      	str	r1, [sp, #0]
   bdc5a:	6c14      	ldr	r4, [r2, #64]	; 0x40
   bdc5c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   bdc60:	2200      	movs	r2, #0
   bdc62:	4611      	mov	r1, r2
   bdc64:	47a0      	blx	r4
}
   bdc66:	b002      	add	sp, #8
   bdc68:	bd10      	pop	{r4, pc}

000bdc6a <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   bdc6a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   bdc6e:	4299      	cmp	r1, r3
        uint16_t color) {
   bdc70:	4616      	mov	r6, r2
   bdc72:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   bdc76:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   bdc7a:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   bdc7c:	4680      	mov	r8, r0
   bdc7e:	460d      	mov	r5, r1
   bdc80:	461c      	mov	r4, r3
    if(x0 == x1){
   bdc82:	d113      	bne.n	bdcac <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   bdc84:	42be      	cmp	r6, r7
   bdc86:	bfc8      	it	gt
   bdc88:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   bdc8a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   bdc8e:	bfc4      	itt	gt
   bdc90:	463e      	movgt	r6, r7
   bdc92:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   bdc94:	1c7b      	adds	r3, r7, #1
   bdc96:	6b94      	ldr	r4, [r2, #56]	; 0x38
   bdc98:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   bdc9a:	b21b      	sxth	r3, r3
   bdc9c:	4632      	mov	r2, r6
   bdc9e:	4629      	mov	r1, r5
   bdca0:	4640      	mov	r0, r8
   bdca2:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   bdca4:	b003      	add	sp, #12
   bdca6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   bdcaa:	4760      	bx	ip
    } else if(y0 == y1){
   bdcac:	42be      	cmp	r6, r7
   bdcae:	d10a      	bne.n	bdcc6 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   bdcb0:	4299      	cmp	r1, r3
   bdcb2:	bfc2      	ittt	gt
   bdcb4:	460b      	movgt	r3, r1
   bdcb6:	4625      	movgt	r5, r4
   bdcb8:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   bdcba:	1c63      	adds	r3, r4, #1
   bdcbc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   bdcc0:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   bdcc2:	1b5b      	subs	r3, r3, r5
   bdcc4:	e7e9      	b.n	bdc9a <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   bdcc6:	6953      	ldr	r3, [r2, #20]
   bdcc8:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   bdcca:	e9cd 7900 	strd	r7, r9, [sp]
   bdcce:	f8d8 3000 	ldr.w	r3, [r8]
   bdcd2:	4640      	mov	r0, r8
   bdcd4:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   bdcd6:	4632      	mov	r2, r6
   bdcd8:	4623      	mov	r3, r4
   bdcda:	4629      	mov	r1, r5
   bdcdc:	47b8      	blx	r7
        endWrite();
   bdcde:	f8d8 3000 	ldr.w	r3, [r8]
   bdce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bdce4:	4640      	mov	r0, r8
}
   bdce6:	b003      	add	sp, #12
   bdce8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   bdcec:	4718      	bx	r3

000bdcee <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   bdcee:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   bdcf2:	461d      	mov	r5, r3
    startWrite();
   bdcf4:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   bdcf6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   bdcfa:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   bdcfc:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   bdd00:	4604      	mov	r4, r0
   bdd02:	460f      	mov	r7, r1
   bdd04:	4616      	mov	r6, r2
    startWrite();
   bdd06:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   bdd08:	6823      	ldr	r3, [r4, #0]
   bdd0a:	f8cd 8000 	str.w	r8, [sp]
   bdd0e:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   bdd12:	4632      	mov	r2, r6
   bdd14:	462b      	mov	r3, r5
   bdd16:	4639      	mov	r1, r7
   bdd18:	4620      	mov	r0, r4
   bdd1a:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   bdd1c:	6823      	ldr	r3, [r4, #0]
   bdd1e:	f8cd 8000 	str.w	r8, [sp]
   bdd22:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   bdd26:	4432      	add	r2, r6
   bdd28:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   bdd2c:	4639      	mov	r1, r7
   bdd2e:	462b      	mov	r3, r5
   bdd30:	4620      	mov	r0, r4
   bdd32:	b212      	sxth	r2, r2
   bdd34:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   bdd36:	6823      	ldr	r3, [r4, #0]
   bdd38:	f8cd 8000 	str.w	r8, [sp]
   bdd3c:	f8d3 a020 	ldr.w	sl, [r3, #32]
   bdd40:	4632      	mov	r2, r6
   bdd42:	464b      	mov	r3, r9
   bdd44:	4639      	mov	r1, r7
   bdd46:	4620      	mov	r0, r4
   bdd48:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   bdd4a:	1e6b      	subs	r3, r5, #1
   bdd4c:	19d9      	adds	r1, r3, r7
   bdd4e:	6823      	ldr	r3, [r4, #0]
   bdd50:	f8cd 8000 	str.w	r8, [sp]
   bdd54:	6a1d      	ldr	r5, [r3, #32]
   bdd56:	4620      	mov	r0, r4
   bdd58:	464b      	mov	r3, r9
   bdd5a:	4632      	mov	r2, r6
   bdd5c:	b209      	sxth	r1, r1
   bdd5e:	47a8      	blx	r5
    endWrite();
   bdd60:	6823      	ldr	r3, [r4, #0]
   bdd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bdd64:	4620      	mov	r0, r4
}
   bdd66:	b002      	add	sp, #8
   bdd68:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   bdd6c:	4718      	bx	r3

000bdd6e <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   bdd6e:	4770      	bx	lr

000bdd70 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   bdd70:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   bdd74:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   bdd78:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   bdd7a:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   bdd7c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   bdd80:	bf59      	ittee	pl
   bdd82:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   bdd84:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   bdd86:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   bdd88:	81c3      	strhmi	r3, [r0, #14]
}
   bdd8a:	4770      	bx	lr

000bdd8c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   bdd8c:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   bdd8e:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   bdd90:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   bdd92:	4a07      	ldr	r2, [pc, #28]	; (bddb0 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   bdd94:	4d07      	ldr	r5, [pc, #28]	; (bddb4 <_ZN12Adafruit_GFXC1Ess+0x28>)
   bdd96:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   bdd98:	2400      	movs	r4, #0
    _width    = WIDTH;
   bdd9a:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   bdd9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   bdda0:	e9c0 1205 	strd	r1, r2, [r0, #20]
   bdda4:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   bdda6:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   bdda8:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   bddaa:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   bddac:	6204      	str	r4, [r0, #32]
}
   bddae:	bd30      	pop	{r4, r5, pc}
   bddb0:	01000101 	.word	0x01000101
   bddb4:	000c86dc 	.word	0x000c86dc

000bddb8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   bddb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bddbc:	b089      	sub	sp, #36	; 0x24
   bddbe:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   bddc2:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   bddc4:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   bddc8:	9304      	str	r3, [sp, #16]
   bddca:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   bddce:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   bddd0:	9305      	str	r3, [sp, #20]
   bddd2:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   bddd6:	4604      	mov	r4, r0
    startWrite();
   bddd8:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   bddda:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   bddde:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   bdde2:	bf48      	it	mi
   bdde4:	f108 020e 	addmi.w	r2, r8, #14
   bdde8:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   bddec:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   bddee:	4635      	mov	r5, r6
   bddf0:	9b03      	ldr	r3, [sp, #12]
   bddf2:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   bddf4:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   bddf8:	189a      	adds	r2, r3, r2
   bddfa:	9b05      	ldr	r3, [sp, #20]
   bddfc:	428b      	cmp	r3, r1
   bddfe:	b212      	sxth	r2, r2
   bde00:	dd27      	ble.n	bde52 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   bde02:	9b04      	ldr	r3, [sp, #16]
   bde04:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   bde06:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   bde0a:	9306      	str	r3, [sp, #24]
   bde0c:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   bde10:	4580      	cmp	r8, r0
   bde12:	fa1f f189 	uxth.w	r1, r9
   bde16:	dd17      	ble.n	bde48 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   bde18:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   bde1a:	bf05      	ittet	eq
   bde1c:	9b06      	ldreq	r3, [sp, #24]
   bde1e:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   bde20:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   bde22:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   bde24:	bf18      	it	ne
   bde26:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   bde28:	062b      	lsls	r3, r5, #24
   bde2a:	d50a      	bpl.n	bde42 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   bde2c:	9b02      	ldr	r3, [sp, #8]
   bde2e:	6820      	ldr	r0, [r4, #0]
   bde30:	9207      	str	r2, [sp, #28]
   bde32:	4419      	add	r1, r3
   bde34:	6983      	ldr	r3, [r0, #24]
   bde36:	b209      	sxth	r1, r1
   bde38:	461f      	mov	r7, r3
   bde3a:	4620      	mov	r0, r4
   bde3c:	4653      	mov	r3, sl
   bde3e:	47b8      	blx	r7
   bde40:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   bde42:	f109 0901 	add.w	r9, r9, #1
   bde46:	e7e1      	b.n	bde0c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   bde48:	9b01      	ldr	r3, [sp, #4]
   bde4a:	3301      	adds	r3, #1
   bde4c:	9301      	str	r3, [sp, #4]
   bde4e:	445e      	add	r6, fp
   bde50:	e7ce      	b.n	bddf0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   bde52:	6823      	ldr	r3, [r4, #0]
   bde54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bde56:	4620      	mov	r0, r4
}
   bde58:	b009      	add	sp, #36	; 0x24
   bde5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   bde5e:	4718      	bx	r3

000bde60 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   bde60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bde64:	ed2d 8b02 	vpush	{d8}
   bde68:	b091      	sub	sp, #68	; 0x44
   bde6a:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   bde6c:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   bde6e:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   bde72:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   bde76:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   bde7a:	9103      	str	r1, [sp, #12]
   bde7c:	461f      	mov	r7, r3
   bde7e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   bde82:	9304      	str	r3, [sp, #16]
   bde84:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   bde86:	2a00      	cmp	r2, #0
   bde88:	f040 80c5 	bne.w	be016 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   bde8c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   bde90:	428b      	cmp	r3, r1
   bde92:	f340 814c 	ble.w	be12e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   bde96:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   bde9a:	42b3      	cmp	r3, r6
   bde9c:	f340 8147 	ble.w	be12e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   bdea0:	2306      	movs	r3, #6
   bdea2:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   bdea6:	2b00      	cmp	r3, #0
   bdea8:	f340 8141 	ble.w	be12e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   bdeac:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   bdeb0:	2b00      	cmp	r3, #0
   bdeb2:	f340 813c 	ble.w	be12e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   bdeb6:	7f03      	ldrb	r3, [r0, #28]
   bdeb8:	b91b      	cbnz	r3, bdec2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   bdeba:	2faf      	cmp	r7, #175	; 0xaf
   bdebc:	bf84      	itt	hi
   bdebe:	3701      	addhi	r7, #1
   bdec0:	b2ff      	uxtbhi	r7, r7
        startWrite();
   bdec2:	f8db 3000 	ldr.w	r3, [fp]
   bdec6:	4658      	mov	r0, fp
   bdec8:	695b      	ldr	r3, [r3, #20]
   bdeca:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   bdecc:	2205      	movs	r2, #5
   bdece:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   bded0:	2200      	movs	r2, #0
   bded2:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   bded4:	4a98      	ldr	r2, [pc, #608]	; (be138 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   bded6:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   bdeda:	18d3      	adds	r3, r2, r3
   bdedc:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   bdede:	b2b3      	uxth	r3, r6
   bdee0:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   bdee2:	9a05      	ldr	r2, [sp, #20]
   bdee4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bdee6:	5c9b      	ldrb	r3, [r3, r2]
   bdee8:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   bdeea:	b2ab      	uxth	r3, r5
   bdeec:	930b      	str	r3, [sp, #44]	; 0x2c
   bdeee:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   bdef2:	9308      	str	r3, [sp, #32]
   bdef4:	9b03      	ldr	r3, [sp, #12]
   bdef6:	fb02 f905 	mul.w	r9, r2, r5
   bdefa:	fa19 f983 	uxtah	r9, r9, r3
   bdefe:	fa0f f389 	sxth.w	r3, r9
   bdf02:	ee08 3a10 	vmov	s16, r3
   bdf06:	2308      	movs	r3, #8
   bdf08:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   bdf0a:	9b03      	ldr	r3, [sp, #12]
   bdf0c:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   bdf10:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   bdf14:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   bdf18:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   bdf1a:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   bdf1e:	07d2      	lsls	r2, r2, #31
   bdf20:	d552      	bpl.n	bdfc8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   bdf22:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   bdf24:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   bdf28:	d13e      	bne.n	bdfa8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   bdf2a:	2c01      	cmp	r4, #1
   bdf2c:	d13c      	bne.n	bdfa8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   bdf2e:	699b      	ldr	r3, [r3, #24]
   bdf30:	9906      	ldr	r1, [sp, #24]
   bdf32:	461f      	mov	r7, r3
   bdf34:	9b04      	ldr	r3, [sp, #16]
   bdf36:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   bdf38:	b212      	sxth	r2, r2
   bdf3a:	4651      	mov	r1, sl
   bdf3c:	4658      	mov	r0, fp
   bdf3e:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   bdf40:	f109 0301 	add.w	r3, r9, #1
   bdf44:	fa4f f983 	sxtb.w	r9, r3
   bdf48:	9b07      	ldr	r3, [sp, #28]
   bdf4a:	085b      	lsrs	r3, r3, #1
   bdf4c:	9307      	str	r3, [sp, #28]
   bdf4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bdf50:	3b01      	subs	r3, #1
   bdf52:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   bdf56:	930a      	str	r3, [sp, #40]	; 0x28
   bdf58:	d1de      	bne.n	bdf18 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   bdf5a:	9f05      	ldr	r7, [sp, #20]
   bdf5c:	3701      	adds	r7, #1
   bdf5e:	b27b      	sxtb	r3, r7
   bdf60:	9305      	str	r3, [sp, #20]
   bdf62:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bdf64:	3b01      	subs	r3, #1
   bdf66:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   bdf6a:	9309      	str	r3, [sp, #36]	; 0x24
   bdf6c:	d1b9      	bne.n	bdee2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   bdf6e:	9b04      	ldr	r3, [sp, #16]
   bdf70:	4543      	cmp	r3, r8
   bdf72:	d00f      	beq.n	bdf94 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   bdf74:	2d01      	cmp	r5, #1
   bdf76:	f8db 3000 	ldr.w	r3, [fp]
   bdf7a:	d13b      	bne.n	bdff4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   bdf7c:	2c01      	cmp	r4, #1
   bdf7e:	d139      	bne.n	bdff4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   bdf80:	9908      	ldr	r1, [sp, #32]
   bdf82:	f8cd 8000 	str.w	r8, [sp]
   bdf86:	3105      	adds	r1, #5
   bdf88:	6a1c      	ldr	r4, [r3, #32]
   bdf8a:	4632      	mov	r2, r6
   bdf8c:	2308      	movs	r3, #8
   bdf8e:	b209      	sxth	r1, r1
   bdf90:	4658      	mov	r0, fp
   bdf92:	47a0      	blx	r4
        endWrite();
   bdf94:	f8db 3000 	ldr.w	r3, [fp]
   bdf98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bdf9a:	4658      	mov	r0, fp
}
   bdf9c:	b011      	add	sp, #68	; 0x44
   bdf9e:	ecbd 8b02 	vpop	{d8}
   bdfa2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   bdfa6:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   bdfa8:	9906      	ldr	r1, [sp, #24]
   bdfaa:	fb14 f202 	smulbb	r2, r4, r2
   bdfae:	440a      	add	r2, r1
   bdfb0:	9904      	ldr	r1, [sp, #16]
   bdfb2:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   bdfb4:	9400      	str	r4, [sp, #0]
   bdfb6:	69db      	ldr	r3, [r3, #28]
   bdfb8:	ee18 1a10 	vmov	r1, s16
   bdfbc:	461f      	mov	r7, r3
   bdfbe:	b212      	sxth	r2, r2
   bdfc0:	462b      	mov	r3, r5
   bdfc2:	4658      	mov	r0, fp
   bdfc4:	47b8      	blx	r7
   bdfc6:	e7bb      	b.n	bdf40 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   bdfc8:	9a04      	ldr	r2, [sp, #16]
   bdfca:	4542      	cmp	r2, r8
   bdfcc:	d0b8      	beq.n	bdf40 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   bdfce:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   bdfd0:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   bdfd4:	d107      	bne.n	bdfe6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   bdfd6:	2c01      	cmp	r4, #1
   bdfd8:	d105      	bne.n	bdfe6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   bdfda:	699b      	ldr	r3, [r3, #24]
   bdfdc:	9906      	ldr	r1, [sp, #24]
   bdfde:	461f      	mov	r7, r3
   bdfe0:	440a      	add	r2, r1
   bdfe2:	4643      	mov	r3, r8
   bdfe4:	e7a8      	b.n	bdf38 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   bdfe6:	9906      	ldr	r1, [sp, #24]
   bdfe8:	f8cd 8004 	str.w	r8, [sp, #4]
   bdfec:	fb14 f202 	smulbb	r2, r4, r2
   bdff0:	440a      	add	r2, r1
   bdff2:	e7df      	b.n	bdfb4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   bdff4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bdff6:	f8cd 8004 	str.w	r8, [sp, #4]
   bdffa:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   bdffe:	9a08      	ldr	r2, [sp, #32]
   be000:	00e4      	lsls	r4, r4, #3
   be002:	440a      	add	r2, r1
   be004:	4611      	mov	r1, r2
   be006:	9400      	str	r4, [sp, #0]
   be008:	69dc      	ldr	r4, [r3, #28]
   be00a:	4632      	mov	r2, r6
   be00c:	462b      	mov	r3, r5
   be00e:	b209      	sxth	r1, r1
   be010:	4658      	mov	r0, fp
   be012:	47a0      	blx	r4
        endWrite();
   be014:	e7be      	b.n	bdf94 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   be016:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   be018:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   be01a:	6812      	ldr	r2, [r2, #0]
   be01c:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   be01e:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   be020:	b2ff      	uxtb	r7, r7
   be022:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   be026:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   be02a:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   be02c:	789a      	ldrb	r2, [r3, #2]
   be02e:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   be030:	78da      	ldrb	r2, [r3, #3]
   be032:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   be034:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   be036:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   be03a:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   be03e:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   be040:	d801      	bhi.n	be046 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   be042:	2c01      	cmp	r4, #1
   be044:	d957      	bls.n	be0f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   be046:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   be04a:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   be04c:	fa0f f38a 	sxth.w	r3, sl
   be050:	9307      	str	r3, [sp, #28]
        startWrite();
   be052:	f8db 3000 	ldr.w	r3, [fp]
   be056:	4658      	mov	r0, fp
   be058:	695b      	ldr	r3, [r3, #20]
   be05a:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   be05c:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   be05e:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   be062:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   be064:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   be068:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   be06a:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   be06c:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   be06e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   be070:	429f      	cmp	r7, r3
   be072:	d28f      	bcs.n	bdf94 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   be074:	9b07      	ldr	r3, [sp, #28]
   be076:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   be078:	443b      	add	r3, r7
   be07a:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   be07e:	2200      	movs	r2, #0
   be080:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   be082:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   be084:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   be086:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   be08a:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   be08e:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   be092:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   be094:	9a09      	ldr	r2, [sp, #36]	; 0x24
   be096:	9905      	ldr	r1, [sp, #20]
   be098:	4291      	cmp	r1, r2
   be09a:	d241      	bcs.n	be120 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   be09c:	1c5a      	adds	r2, r3, #1
   be09e:	b2d2      	uxtb	r2, r2
   be0a0:	075b      	lsls	r3, r3, #29
   be0a2:	920d      	str	r2, [sp, #52]	; 0x34
   be0a4:	d107      	bne.n	be0b6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   be0a6:	9b06      	ldr	r3, [sp, #24]
   be0a8:	9906      	ldr	r1, [sp, #24]
   be0aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   be0ac:	3301      	adds	r3, #1
   be0ae:	b29b      	uxth	r3, r3
   be0b0:	f812 9001 	ldrb.w	r9, [r2, r1]
   be0b4:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   be0b6:	f019 0f80 	tst.w	r9, #128	; 0x80
   be0ba:	d012      	beq.n	be0e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   be0bc:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   be0be:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   be0c2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   be0c6:	d11a      	bne.n	be0fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   be0c8:	2c01      	cmp	r4, #1
   be0ca:	d118      	bne.n	be0fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   be0cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   be0ce:	699b      	ldr	r3, [r3, #24]
   be0d0:	4411      	add	r1, r2
   be0d2:	9a05      	ldr	r2, [sp, #20]
   be0d4:	4411      	add	r1, r2
   be0d6:	461e      	mov	r6, r3
   be0d8:	4652      	mov	r2, sl
   be0da:	9b04      	ldr	r3, [sp, #16]
   be0dc:	b209      	sxth	r1, r1
   be0de:	4658      	mov	r0, fp
   be0e0:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   be0e2:	9e05      	ldr	r6, [sp, #20]
   be0e4:	3601      	adds	r6, #1
   be0e6:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   be0e8:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   be0ec:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   be0ee:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   be0f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   be0f4:	e7ce      	b.n	be094 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   be0f6:	2300      	movs	r3, #0
   be0f8:	e9cd 3307 	strd	r3, r3, [sp, #28]
   be0fc:	e7a9      	b.n	be052 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   be0fe:	9805      	ldr	r0, [sp, #20]
   be100:	9a08      	ldr	r2, [sp, #32]
   be102:	4402      	add	r2, r0
   be104:	fb02 1105 	mla	r1, r2, r5, r1
   be108:	9a04      	ldr	r2, [sp, #16]
   be10a:	e9cd 4200 	strd	r4, r2, [sp]
   be10e:	69db      	ldr	r3, [r3, #28]
   be110:	ee18 2a10 	vmov	r2, s16
   be114:	461e      	mov	r6, r3
   be116:	b209      	sxth	r1, r1
   be118:	462b      	mov	r3, r5
   be11a:	4658      	mov	r0, fp
   be11c:	47b0      	blx	r6
   be11e:	e7e0      	b.n	be0e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   be120:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   be122:	3701      	adds	r7, #1
   be124:	4498      	add	r8, r3
   be126:	fa5f f888 	uxtb.w	r8, r8
   be12a:	b2ff      	uxtb	r7, r7
   be12c:	e79f      	b.n	be06e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   be12e:	b011      	add	sp, #68	; 0x44
   be130:	ecbd 8b02 	vpop	{d8}
   be134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be138:	000c81d4 	.word	0x000c81d4

000be13c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   be13c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   be13e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   be140:	b085      	sub	sp, #20
   be142:	4604      	mov	r4, r0
   be144:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   be146:	2a00      	cmp	r2, #0
   be148:	d134      	bne.n	be1b4 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   be14a:	290a      	cmp	r1, #10
   be14c:	d108      	bne.n	be160 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   be14e:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   be150:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   be152:	7e42      	ldrb	r2, [r0, #25]
   be154:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   be158:	8263      	strh	r3, [r4, #18]
}
   be15a:	2001      	movs	r0, #1
   be15c:	b005      	add	sp, #20
   be15e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   be160:	290d      	cmp	r1, #13
   be162:	d0fa      	beq.n	be15a <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   be164:	7ee1      	ldrb	r1, [r4, #27]
   be166:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   be168:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   be16a:	b171      	cbz	r1, be18a <_ZN12Adafruit_GFX5writeEh+0x4e>
   be16c:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   be170:	2106      	movs	r1, #6
   be172:	fb11 6100 	smlabb	r1, r1, r0, r6
   be176:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   be17a:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   be17c:	bfc1      	itttt	gt
   be17e:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   be182:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   be184:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   be188:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   be18a:	8ae2      	ldrh	r2, [r4, #22]
   be18c:	9201      	str	r2, [sp, #4]
   be18e:	8aa2      	ldrh	r2, [r4, #20]
   be190:	9200      	str	r2, [sp, #0]
   be192:	e9cd 0502 	strd	r0, r5, [sp, #8]
   be196:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   be19a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   be19e:	4620      	mov	r0, r4
   be1a0:	f7ff fe5e 	bl	bde60 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   be1a4:	7e23      	ldrb	r3, [r4, #24]
   be1a6:	8a22      	ldrh	r2, [r4, #16]
   be1a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   be1ac:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   be1b0:	8223      	strh	r3, [r4, #16]
   be1b2:	e7d2      	b.n	be15a <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   be1b4:	290a      	cmp	r1, #10
   be1b6:	d107      	bne.n	be1c8 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   be1b8:	2300      	movs	r3, #0
   be1ba:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   be1bc:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   be1be:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   be1c0:	8a43      	ldrh	r3, [r0, #18]
   be1c2:	fb01 3302 	mla	r3, r1, r2, r3
   be1c6:	e7c7      	b.n	be158 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   be1c8:	290d      	cmp	r1, #13
   be1ca:	d0c6      	beq.n	be15a <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   be1cc:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   be1ce:	42a9      	cmp	r1, r5
   be1d0:	d3c3      	bcc.n	be15a <_ZN12Adafruit_GFX5writeEh+0x1e>
   be1d2:	7a51      	ldrb	r1, [r2, #9]
   be1d4:	4299      	cmp	r1, r3
   be1d6:	d3c0      	bcc.n	be15a <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   be1d8:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   be1da:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   be1dc:	b2ed      	uxtb	r5, r5
   be1de:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   be1e2:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   be1e4:	b328      	cbz	r0, be232 <_ZN12Adafruit_GFX5writeEh+0xf6>
   be1e6:	78e9      	ldrb	r1, [r5, #3]
   be1e8:	b319      	cbz	r1, be232 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   be1ea:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   be1ec:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   be1ee:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   be1f0:	b191      	cbz	r1, be218 <_ZN12Adafruit_GFX5writeEh+0xdc>
   be1f2:	f995 1005 	ldrsb.w	r1, [r5, #5]
   be1f6:	4408      	add	r0, r1
   be1f8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   be1fc:	fb06 1100 	mla	r1, r6, r0, r1
   be200:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   be204:	4281      	cmp	r1, r0
   be206:	dd07      	ble.n	be218 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   be208:	2000      	movs	r0, #0
   be20a:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   be20c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   be210:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   be212:	fb02 1207 	mla	r2, r2, r7, r1
   be216:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   be218:	8ae2      	ldrh	r2, [r4, #22]
   be21a:	9201      	str	r2, [sp, #4]
   be21c:	8aa2      	ldrh	r2, [r4, #20]
   be21e:	9200      	str	r2, [sp, #0]
   be220:	e9cd 6702 	strd	r6, r7, [sp, #8]
   be224:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   be228:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   be22c:	4620      	mov	r0, r4
   be22e:	f7ff fe17 	bl	bde60 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   be232:	7929      	ldrb	r1, [r5, #4]
   be234:	7e22      	ldrb	r2, [r4, #24]
   be236:	8a23      	ldrh	r3, [r4, #16]
   be238:	fb01 3302 	mla	r3, r1, r2, r3
   be23c:	e7b8      	b.n	be1b0 <_ZN12Adafruit_GFX5writeEh+0x74>

000be23e <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   be23e:	2901      	cmp	r1, #1
   be240:	bf38      	it	cc
   be242:	2101      	movcc	r1, #1
   be244:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   be246:	7641      	strb	r1, [r0, #25]
}
   be248:	4770      	bx	lr

000be24a <_ZN17Adafruit_GrayOLED9drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   be24a:	2900      	cmp	r1, #0
void Adafruit_GrayOLED::drawPixel(int16_t x, int16_t y, uint16_t color) {
   be24c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   be24e:	db66      	blt.n	be31e <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   be250:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   be254:	428c      	cmp	r4, r1
   be256:	dd62      	ble.n	be31e <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   be258:	2a00      	cmp	r2, #0
   be25a:	db60      	blt.n	be31e <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
   be25c:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   be260:	4294      	cmp	r4, r2
   be262:	dd5c      	ble.n	be31e <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   be264:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
   be266:	2c02      	cmp	r4, #2
   be268:	d05a      	beq.n	be320 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd6>
   be26a:	2c03      	cmp	r4, #3
   be26c:	d061      	beq.n	be332 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xe8>
   be26e:	2c01      	cmp	r4, #1
   be270:	d104      	bne.n	be27c <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
    case 1:
      grayoled_swap(x, y);
      x = WIDTH - x - 1;
   be272:	8904      	ldrh	r4, [r0, #8]
   be274:	43d2      	mvns	r2, r2
   be276:	4414      	add	r4, r2
      break;
   be278:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   be27a:	b221      	sxth	r1, r4
      y = HEIGHT - y - 1;
      break;
    }

    // adjust dirty window
    window_x1 = min(window_x1, x);
   be27c:	f9b0 4038 	ldrsh.w	r4, [r0, #56]	; 0x38
   be280:	428c      	cmp	r4, r1
   be282:	bfa8      	it	ge
   be284:	460c      	movge	r4, r1
   be286:	8704      	strh	r4, [r0, #56]	; 0x38
    window_y1 = min(window_y1, y);
   be288:	f9b0 403a 	ldrsh.w	r4, [r0, #58]	; 0x3a
   be28c:	4294      	cmp	r4, r2
   be28e:	bfa8      	it	ge
   be290:	4614      	movge	r4, r2
   be292:	8744      	strh	r4, [r0, #58]	; 0x3a
    window_x2 = max(window_x2, x);
   be294:	f9b0 403c 	ldrsh.w	r4, [r0, #60]	; 0x3c
   be298:	428c      	cmp	r4, r1
   be29a:	bfb8      	it	lt
   be29c:	460c      	movlt	r4, r1
   be29e:	8784      	strh	r4, [r0, #60]	; 0x3c
    window_y2 = max(window_y2, y);
   be2a0:	f9b0 403e 	ldrsh.w	r4, [r0, #62]	; 0x3e
   be2a4:	4294      	cmp	r4, r2
   be2a6:	bfb8      	it	lt
   be2a8:	4614      	movlt	r4, r2
   be2aa:	87c4      	strh	r4, [r0, #62]	; 0x3e

    if (_bpp == 1) {
   be2ac:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   be2b0:	2c01      	cmp	r4, #1
   be2b2:	d116      	bne.n	be2e2 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      switch (color) {
   be2b4:	2b01      	cmp	r3, #1
   be2b6:	d042      	beq.n	be33e <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xf4>
   be2b8:	2b02      	cmp	r3, #2
   be2ba:	d051      	beq.n	be360 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x116>
   be2bc:	b98b      	cbnz	r3, be2e2 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
      case MONOOLED_WHITE:
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
        break;
      case MONOOLED_BLACK:
        buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
   be2be:	2a00      	cmp	r2, #0
   be2c0:	8905      	ldrh	r5, [r0, #8]
   be2c2:	6b47      	ldr	r7, [r0, #52]	; 0x34
   be2c4:	4614      	mov	r4, r2
   be2c6:	bfb8      	it	lt
   be2c8:	1dd4      	addlt	r4, r2, #7
   be2ca:	10e4      	asrs	r4, r4, #3
   be2cc:	fb14 1405 	smlabb	r4, r4, r5, r1
   be2d0:	f002 0607 	and.w	r6, r2, #7
   be2d4:	2501      	movs	r5, #1
   be2d6:	fa05 f606 	lsl.w	r6, r5, r6
   be2da:	5d3d      	ldrb	r5, [r7, r4]
   be2dc:	ea25 0506 	bic.w	r5, r5, r6
   be2e0:	553d      	strb	r5, [r7, r4]
      case MONOOLED_INVERSE:
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
        break;
      }
    }
    if (_bpp == 4) {
   be2e2:	f890 404c 	ldrb.w	r4, [r0, #76]	; 0x4c
   be2e6:	2c04      	cmp	r4, #4
   be2e8:	d119      	bne.n	be31e <_ZN17Adafruit_GrayOLED9drawPixelEsst+0xd4>
      uint8_t *pixelptr = &buffer[x / 2 + (y * WIDTH / 2)];
   be2ea:	8904      	ldrh	r4, [r0, #8]
   be2ec:	fb14 f202 	smulbb	r2, r4, r2
   be2f0:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   be2f4:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
   be2f8:	f342 024f 	sbfx	r2, r2, #1, #16
   be2fc:	eb02 0264 	add.w	r2, r2, r4, asr #1
   be300:	6b44      	ldr	r4, [r0, #52]	; 0x34
      // Serial.printf("(%d, %d) -> offset %d\n", x, y, x/2 + (y * WIDTH / 2));
      if (x % 2 == 0) { // even, left nibble
        uint8_t t = pixelptr[0] & 0x0F;
   be302:	5ca0      	ldrb	r0, [r4, r2]
      if (x % 2 == 0) { // even, left nibble
   be304:	07c9      	lsls	r1, r1, #31
        t |= (color & 0xF) << 4;
        pixelptr[0] = t;
      } else { // odd, right lower nibble
        uint8_t t = pixelptr[0] & 0xF0;
        t |= color & 0xF;
   be306:	bf4b      	itete	mi
   be308:	f003 030f 	andmi.w	r3, r3, #15
        uint8_t t = pixelptr[0] & 0x0F;
   be30c:	f000 000f 	andpl.w	r0, r0, #15
        uint8_t t = pixelptr[0] & 0xF0;
   be310:	f020 000f 	bicmi.w	r0, r0, #15
        t |= (color & 0xF) << 4;
   be314:	ea40 1303 	orrpl.w	r3, r0, r3, lsl #4
        t |= color & 0xF;
   be318:	bf48      	it	mi
   be31a:	4303      	orrmi	r3, r0
        pixelptr[0] = t;
   be31c:	54a3      	strb	r3, [r4, r2]
      }
    }
  }
}
   be31e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      x = WIDTH - x - 1;
   be320:	8904      	ldrh	r4, [r0, #8]
   be322:	3c01      	subs	r4, #1
   be324:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   be326:	8944      	ldrh	r4, [r0, #10]
   be328:	43d2      	mvns	r2, r2
   be32a:	4422      	add	r2, r4
      x = WIDTH - x - 1;
   be32c:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   be32e:	b212      	sxth	r2, r2
      break;
   be330:	e7a4      	b.n	be27c <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   be332:	8944      	ldrh	r4, [r0, #10]
   be334:	3c01      	subs	r4, #1
   be336:	1a64      	subs	r4, r4, r1
      break;
   be338:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   be33a:	b222      	sxth	r2, r4
      break;
   be33c:	e79e      	b.n	be27c <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x32>
        buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
   be33e:	2a00      	cmp	r2, #0
   be340:	8905      	ldrh	r5, [r0, #8]
   be342:	6b46      	ldr	r6, [r0, #52]	; 0x34
   be344:	4614      	mov	r4, r2
   be346:	bfb8      	it	lt
   be348:	1dd4      	addlt	r4, r2, #7
   be34a:	10e4      	asrs	r4, r4, #3
   be34c:	fb14 1405 	smlabb	r4, r4, r5, r1
   be350:	f002 0707 	and.w	r7, r2, #7
   be354:	2501      	movs	r5, #1
   be356:	40bd      	lsls	r5, r7
   be358:	5d37      	ldrb	r7, [r6, r4]
   be35a:	433d      	orrs	r5, r7
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   be35c:	5535      	strb	r5, [r6, r4]
        break;
   be35e:	e7c0      	b.n	be2e2 <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x98>
        buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   be360:	2a00      	cmp	r2, #0
   be362:	8905      	ldrh	r5, [r0, #8]
   be364:	6b46      	ldr	r6, [r0, #52]	; 0x34
   be366:	4614      	mov	r4, r2
   be368:	bfb8      	it	lt
   be36a:	1dd4      	addlt	r4, r2, #7
   be36c:	10e4      	asrs	r4, r4, #3
   be36e:	fb14 1405 	smlabb	r4, r4, r5, r1
   be372:	f002 0707 	and.w	r7, r2, #7
   be376:	2501      	movs	r5, #1
   be378:	40bd      	lsls	r5, r7
   be37a:	5d37      	ldrb	r7, [r6, r4]
   be37c:	407d      	eors	r5, r7
   be37e:	e7ed      	b.n	be35c <_ZN17Adafruit_GrayOLED9drawPixelEsst+0x112>

000be380 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>:
Adafruit_GrayOLED::Adafruit_GrayOLED(uint8_t bpp, uint16_t w, uint16_t h,
   be380:	b538      	push	{r3, r4, r5, lr}
   be382:	460d      	mov	r5, r1
   be384:	4611      	mov	r1, r2
   be386:	4604      	mov	r4, r0
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   be388:	b21a      	sxth	r2, r3
   be38a:	b209      	sxth	r1, r1
   be38c:	f7ff fcfe 	bl	bdd8c <_ZN12Adafruit_GFXC1Ess>
   be390:	9a06      	ldr	r2, [sp, #24]
   be392:	4b0b      	ldr	r3, [pc, #44]	; (be3c0 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm+0x40>)
   be394:	62e2      	str	r2, [r4, #44]	; 0x2c
   be396:	9a07      	ldr	r2, [sp, #28]
   be398:	6023      	str	r3, [r4, #0]
   be39a:	2300      	movs	r3, #0
   be39c:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
   be3a0:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
   be3a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   be3a8:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
   be3ac:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   be3b0:	64a3      	str	r3, [r4, #72]	; 0x48
  _theWire = twi;
   be3b2:	9b04      	ldr	r3, [sp, #16]
      buffer(NULL), dcPin(-1), csPin(-1), rstPin(rst_pin), _bpp(bpp) {
   be3b4:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  _theWire = twi;
   be3b8:	6523      	str	r3, [r4, #80]	; 0x50
}
   be3ba:	4620      	mov	r0, r4
   be3bc:	bd38      	pop	{r3, r4, r5, pc}
   be3be:	bf00      	nop
   be3c0:	000c8734 	.word	0x000c8734

000be3c4 <_ZN17Adafruit_GrayOLEDD1Ev>:
Adafruit_GrayOLED::~Adafruit_GrayOLED(void) {
   be3c4:	b538      	push	{r3, r4, r5, lr}
   be3c6:	4b0c      	ldr	r3, [pc, #48]	; (be3f8 <_ZN17Adafruit_GrayOLEDD1Ev+0x34>)
   be3c8:	6003      	str	r3, [r0, #0]
   be3ca:	4604      	mov	r4, r0
  if (buffer) {
   be3cc:	6b40      	ldr	r0, [r0, #52]	; 0x34
   be3ce:	b118      	cbz	r0, be3d8 <_ZN17Adafruit_GrayOLEDD1Ev+0x14>
    free(buffer);
   be3d0:	f000 fe06 	bl	befe0 <free>
    buffer = NULL;
   be3d4:	2300      	movs	r3, #0
   be3d6:	6363      	str	r3, [r4, #52]	; 0x34
  if (spi_dev)
   be3d8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   be3da:	b135      	cbz	r5, be3ea <_ZN17Adafruit_GrayOLEDD1Ev+0x26>
    delete spi_dev;
   be3dc:	4628      	mov	r0, r5
   be3de:	f7ff f9f2 	bl	bd7c6 <_ZN18Adafruit_SPIDeviceD1Ev>
   be3e2:	2138      	movs	r1, #56	; 0x38
   be3e4:	4628      	mov	r0, r5
   be3e6:	f7f6 fd62 	bl	b4eae <_ZdlPvj>
  if (i2c_dev)
   be3ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   be3ec:	b110      	cbz	r0, be3f4 <_ZN17Adafruit_GrayOLEDD1Ev+0x30>
    delete i2c_dev;
   be3ee:	2110      	movs	r1, #16
   be3f0:	f7f6 fd5d 	bl	b4eae <_ZdlPvj>
}
   be3f4:	4620      	mov	r0, r4
   be3f6:	bd38      	pop	{r3, r4, r5, pc}
   be3f8:	000c8734 	.word	0x000c8734

000be3fc <_ZN17Adafruit_GrayOLED12oled_commandEh>:
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   be3fc:	b530      	push	{r4, r5, lr}
   be3fe:	b087      	sub	sp, #28
  if (i2c_dev) {                // I2C
   be400:	6a85      	ldr	r5, [r0, #40]	; 0x28
void Adafruit_GrayOLED::oled_command(uint8_t c) {
   be402:	f88d 100f 	strb.w	r1, [sp, #15]
   be406:	4604      	mov	r4, r0
  if (i2c_dev) {                // I2C
   be408:	b17d      	cbz	r5, be42a <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2e>
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   be40a:	2300      	movs	r3, #0
   be40c:	b2ca      	uxtb	r2, r1
    i2c_dev->write(buf, 2);
   be40e:	e9cd 3300 	strd	r3, r3, [sp]
    uint8_t buf[2] = {0x00, c}; // Co = 0, D/C = 0
   be412:	f88d 3014 	strb.w	r3, [sp, #20]
   be416:	f88d 2015 	strb.w	r2, [sp, #21]
    i2c_dev->write(buf, 2);
   be41a:	2301      	movs	r3, #1
   be41c:	2202      	movs	r2, #2
   be41e:	a905      	add	r1, sp, #20
   be420:	4628      	mov	r0, r5
   be422:	f7ff f961 	bl	bd6e8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   be426:	b007      	add	sp, #28
   be428:	bd30      	pop	{r4, r5, pc}
    digitalWrite(dcPin, LOW);
   be42a:	4629      	mov	r1, r5
   be42c:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   be430:	f002 fe7f 	bl	c1132 <digitalWrite>
    spi_dev->write(&c, 1);
   be434:	6a60      	ldr	r0, [r4, #36]	; 0x24
   be436:	9500      	str	r5, [sp, #0]
   be438:	462b      	mov	r3, r5
   be43a:	2201      	movs	r2, #1
   be43c:	f10d 010f 	add.w	r1, sp, #15
   be440:	f7ff fabb 	bl	bd9ba <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
}
   be444:	e7ef      	b.n	be426 <_ZN17Adafruit_GrayOLED12oled_commandEh+0x2a>

000be446 <_ZN17Adafruit_GrayOLED13invertDisplayEb>:
            different pixel mode of the display hardware is used. When
            enabled, drawing MONOOLED_BLACK (value 0) pixels will actually draw
   white, MONOOLED_WHITE (value 1) will draw black.
*/
void Adafruit_GrayOLED::invertDisplay(bool i) {
  oled_command(i ? GRAYOLED_INVERTDISPLAY : GRAYOLED_NORMALDISPLAY);
   be446:	2900      	cmp	r1, #0
   be448:	bf14      	ite	ne
   be44a:	21a7      	movne	r1, #167	; 0xa7
   be44c:	21a6      	moveq	r1, #166	; 0xa6
   be44e:	f7ff bfd5 	b.w	be3fc <_ZN17Adafruit_GrayOLED12oled_commandEh>

000be452 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>:
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   be452:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (i2c_dev) {            // I2C
   be454:	6a85      	ldr	r5, [r0, #40]	; 0x28
bool Adafruit_GrayOLED::oled_commandList(const uint8_t *c, uint8_t n) {
   be456:	b085      	sub	sp, #20
   be458:	4604      	mov	r4, r0
   be45a:	460e      	mov	r6, r1
   be45c:	4617      	mov	r7, r2
  if (i2c_dev) {            // I2C
   be45e:	b165      	cbz	r5, be47a <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x28>
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   be460:	2300      	movs	r3, #0
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   be462:	f10d 000f 	add.w	r0, sp, #15
    uint8_t dc_byte = 0x00; // Co = 0, D/C = 0
   be466:	f88d 300f 	strb.w	r3, [sp, #15]
    if (!i2c_dev->write((uint8_t *)c, n, true, &dc_byte, 1)) {
   be46a:	2301      	movs	r3, #1
   be46c:	9000      	str	r0, [sp, #0]
   be46e:	9301      	str	r3, [sp, #4]
   be470:	4628      	mov	r0, r5
   be472:	f7ff f939 	bl	bd6e8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   be476:	b005      	add	sp, #20
   be478:	bdf0      	pop	{r4, r5, r6, r7, pc}
    digitalWrite(dcPin, LOW);
   be47a:	4629      	mov	r1, r5
   be47c:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
   be480:	f002 fe57 	bl	c1132 <digitalWrite>
    if (!spi_dev->write((uint8_t *)c, n)) {
   be484:	6a60      	ldr	r0, [r4, #36]	; 0x24
   be486:	9500      	str	r5, [sp, #0]
   be488:	462b      	mov	r3, r5
   be48a:	463a      	mov	r2, r7
   be48c:	4631      	mov	r1, r6
   be48e:	f7ff fa94 	bl	bd9ba <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   be492:	e7f0      	b.n	be476 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh+0x24>

000be494 <_ZN17Adafruit_GrayOLED12clearDisplayEv>:
void Adafruit_GrayOLED::clearDisplay(void) {
   be494:	b510      	push	{r4, lr}
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   be496:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
   be49a:	8903      	ldrh	r3, [r0, #8]
   be49c:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   be4a0:	fb12 f203 	smulbb	r2, r2, r3
   be4a4:	1dcb      	adds	r3, r1, #7
   be4a6:	bf48      	it	mi
   be4a8:	f101 030e 	addmi.w	r3, r1, #14
   be4ac:	10db      	asrs	r3, r3, #3
void Adafruit_GrayOLED::clearDisplay(void) {
   be4ae:	4604      	mov	r4, r0
  memset(buffer, 0, _bpp * WIDTH * ((HEIGHT + 7) / 8));
   be4b0:	435a      	muls	r2, r3
   be4b2:	6b40      	ldr	r0, [r0, #52]	; 0x34
   be4b4:	2100      	movs	r1, #0
   be4b6:	f004 feab 	bl	c3210 <memset>
  window_x1 = 0;
   be4ba:	2300      	movs	r3, #0
   be4bc:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   be4be:	8923      	ldrh	r3, [r4, #8]
   be4c0:	3b01      	subs	r3, #1
   be4c2:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   be4c4:	8963      	ldrh	r3, [r4, #10]
   be4c6:	3b01      	subs	r3, #1
   be4c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
}
   be4ca:	bd10      	pop	{r4, pc}

000be4cc <_ZN17Adafruit_GrayOLED5_initEhb>:
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   be4cc:	b570      	push	{r4, r5, r6, lr}
  if ((!buffer) &&
   be4ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
bool Adafruit_GrayOLED::_init(uint8_t addr, bool reset) {
   be4d0:	4604      	mov	r4, r0
   be4d2:	460e      	mov	r6, r1
   be4d4:	4615      	mov	r5, r2
  if ((!buffer) &&
   be4d6:	b30b      	cbz	r3, be51c <_ZN17Adafruit_GrayOLED5_initEhb+0x50>
  if (reset && (rstPin >= 0)) {
   be4d8:	2d00      	cmp	r5, #0
   be4da:	d133      	bne.n	be544 <_ZN17Adafruit_GrayOLED5_initEhb+0x78>
  if (_theWire) { // using I2C
   be4dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   be4de:	2b00      	cmp	r3, #0
   be4e0:	d050      	beq.n	be584 <_ZN17Adafruit_GrayOLED5_initEhb+0xb8>
    i2c_dev = new Adafruit_I2CDevice(addr, _theWire);
   be4e2:	2010      	movs	r0, #16
   be4e4:	f7f6 fcdd 	bl	b4ea2 <_Znwj>
   be4e8:	4605      	mov	r5, r0
   be4ea:	b118      	cbz	r0, be4f4 <_ZN17Adafruit_GrayOLED5_initEhb+0x28>
   be4ec:	6d22      	ldr	r2, [r4, #80]	; 0x50
   be4ee:	4631      	mov	r1, r6
   be4f0:	f7ff f8cf 	bl	bd692 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   be4f4:	62a5      	str	r5, [r4, #40]	; 0x28
    if (!i2c_dev || !i2c_dev->begin()) {
   be4f6:	b31d      	cbz	r5, be540 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   be4f8:	2101      	movs	r1, #1
   be4fa:	4628      	mov	r0, r5
   be4fc:	f7ff f8e5 	bl	bd6ca <_ZN18Adafruit_I2CDevice5beginEb>
   be500:	b1f0      	cbz	r0, be540 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
  clearDisplay();
   be502:	4620      	mov	r0, r4
   be504:	f7ff ffc6 	bl	be494 <_ZN17Adafruit_GrayOLED12clearDisplayEv>
  window_x1 = 0;
   be508:	2300      	movs	r3, #0
   be50a:	63a3      	str	r3, [r4, #56]	; 0x38
  window_x2 = WIDTH - 1;
   be50c:	8923      	ldrh	r3, [r4, #8]
   be50e:	3b01      	subs	r3, #1
   be510:	87a3      	strh	r3, [r4, #60]	; 0x3c
  window_y2 = HEIGHT - 1;
   be512:	8963      	ldrh	r3, [r4, #10]
   be514:	3b01      	subs	r3, #1
   be516:	87e3      	strh	r3, [r4, #62]	; 0x3e
  return true; // Success
   be518:	2001      	movs	r0, #1
   be51a:	e012      	b.n	be542 <_ZN17Adafruit_GrayOLED5_initEhb+0x76>
      !(buffer = (uint8_t *)malloc(_bpp * WIDTH * ((HEIGHT + 7) / 8)))) {
   be51c:	8923      	ldrh	r3, [r4, #8]
   be51e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   be522:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
   be526:	fb10 f003 	smulbb	r0, r0, r3
   be52a:	1dd3      	adds	r3, r2, #7
   be52c:	bf48      	it	mi
   be52e:	f102 030e 	addmi.w	r3, r2, #14
   be532:	10db      	asrs	r3, r3, #3
   be534:	4358      	muls	r0, r3
   be536:	f000 fd4b 	bl	befd0 <malloc>
   be53a:	6360      	str	r0, [r4, #52]	; 0x34
  if ((!buffer) &&
   be53c:	2800      	cmp	r0, #0
   be53e:	d1cb      	bne.n	be4d8 <_ZN17Adafruit_GrayOLED5_initEhb+0xc>
    return false;
   be540:	2000      	movs	r0, #0
}
   be542:	bd70      	pop	{r4, r5, r6, pc}
  if (reset && (rstPin >= 0)) {
   be544:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   be546:	2800      	cmp	r0, #0
   be548:	dbc8      	blt.n	be4dc <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    pinMode(rstPin, OUTPUT);
   be54a:	2101      	movs	r1, #1
   be54c:	b280      	uxth	r0, r0
   be54e:	f002 fddf 	bl	c1110 <pinMode>
    digitalWrite(rstPin, HIGH);
   be552:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   be556:	2101      	movs	r1, #1
   be558:	f002 fdeb 	bl	c1132 <digitalWrite>
    delay(10);                  // VDD goes high at start, pause
   be55c:	200a      	movs	r0, #10
   be55e:	f000 fd8f 	bl	bf080 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   be562:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   be566:	2100      	movs	r1, #0
   be568:	f002 fde3 	bl	c1132 <digitalWrite>
    delay(10);                  // Wait 10 ms
   be56c:	200a      	movs	r0, #10
   be56e:	f000 fd87 	bl	bf080 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   be572:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   be576:	2101      	movs	r1, #1
   be578:	f002 fddb 	bl	c1132 <digitalWrite>
    delay(10);
   be57c:	200a      	movs	r0, #10
   be57e:	f000 fd7f 	bl	bf080 <delay>
   be582:	e7ab      	b.n	be4dc <_ZN17Adafruit_GrayOLED5_initEhb+0x10>
    if (!spi_dev || !spi_dev->begin()) {
   be584:	6a60      	ldr	r0, [r4, #36]	; 0x24
   be586:	2800      	cmp	r0, #0
   be588:	d0da      	beq.n	be540 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
   be58a:	f7ff f925 	bl	bd7d8 <_ZN18Adafruit_SPIDevice5beginEv>
   be58e:	2800      	cmp	r0, #0
   be590:	d0d6      	beq.n	be540 <_ZN17Adafruit_GrayOLED5_initEhb+0x74>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   be592:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   be596:	2101      	movs	r1, #1
   be598:	f002 fdba 	bl	c1110 <pinMode>
   be59c:	e7b1      	b.n	be502 <_ZN17Adafruit_GrayOLED5_initEhb+0x36>

000be59e <_ZN17Adafruit_GrayOLED11setContrastEh>:
    @brief  Adjust the display contrast.
    @param  level The contrast level from 0 to 0x7F
    @note   This has an immediate effect on the display, no need to call the
            display() function -- buffer contents are not changed.
*/
void Adafruit_GrayOLED::setContrast(uint8_t level) {
   be59e:	b507      	push	{r0, r1, r2, lr}
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   be5a0:	2381      	movs	r3, #129	; 0x81
   be5a2:	f88d 1005 	strb.w	r1, [sp, #5]
  oled_commandList(cmd, 2);
   be5a6:	2202      	movs	r2, #2
   be5a8:	a901      	add	r1, sp, #4
  uint8_t cmd[] = {GRAYOLED_SETCONTRAST, level};
   be5aa:	f88d 3004 	strb.w	r3, [sp, #4]
  oled_commandList(cmd, 2);
   be5ae:	f7ff ff50 	bl	be452 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
}
   be5b2:	b003      	add	sp, #12
   be5b4:	f85d fb04 	ldr.w	pc, [sp], #4

000be5b8 <_ZN15Adafruit_SH1107D1Ev>:
    : Adafruit_SH110X(w, h, spi, dc_pin, rst_pin, cs_pin, bitrate) {}

/*!
    @brief  Destructor for Adafruit_SH1107 object.
*/
Adafruit_SH1107::~Adafruit_SH1107(void) {}
   be5b8:	b510      	push	{r4, lr}
   be5ba:	4b03      	ldr	r3, [pc, #12]	; (be5c8 <_ZN15Adafruit_SH1107D1Ev+0x10>)
   be5bc:	6003      	str	r3, [r0, #0]
   be5be:	4604      	mov	r4, r0
   be5c0:	f000 f958 	bl	be874 <_ZN15Adafruit_SH110XD1Ev>
   be5c4:	4620      	mov	r0, r4
   be5c6:	bd10      	pop	{r4, pc}
   be5c8:	000c8970 	.word	0x000c8970

000be5cc <_ZN15Adafruit_SH1107D0Ev>:
   be5cc:	b510      	push	{r4, lr}
   be5ce:	4604      	mov	r4, r0
   be5d0:	f7ff fff2 	bl	be5b8 <_ZN15Adafruit_SH1107D1Ev>
   be5d4:	4620      	mov	r0, r4
   be5d6:	2158      	movs	r1, #88	; 0x58
   be5d8:	f7f6 fc69 	bl	b4eae <_ZdlPvj>
   be5dc:	4620      	mov	r0, r4
   be5de:	bd10      	pop	{r4, pc}

000be5e0 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm>:
Adafruit_SH1107::Adafruit_SH1107(uint16_t w, uint16_t h, TwoWire *twi,
   be5e0:	b530      	push	{r4, r5, lr}
   be5e2:	b085      	sub	sp, #20
   be5e4:	4604      	mov	r4, r0
    : Adafruit_SH110X(w, h, twi, rst_pin, clkDuring, clkAfter) {}
   be5e6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   be5e8:	9502      	str	r5, [sp, #8]
   be5ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
   be5ec:	9501      	str	r5, [sp, #4]
   be5ee:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   be5f2:	9500      	str	r5, [sp, #0]
   be5f4:	f000 f924 	bl	be840 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>
   be5f8:	4b02      	ldr	r3, [pc, #8]	; (be604 <_ZN15Adafruit_SH1107C1EttP7TwoWireamm+0x24>)
   be5fa:	6023      	str	r3, [r4, #0]
   be5fc:	4620      	mov	r0, r4
   be5fe:	b005      	add	sp, #20
   be600:	bd30      	pop	{r4, r5, pc}
   be602:	bf00      	nop
   be604:	000c8970 	.word	0x000c8970

000be608 <_ZN15Adafruit_SH11075beginEhb>:
    @return true on successful allocation/init, false otherwise.
            Well-behaved code should check the return value before
            proceeding.
    @note   MUST call this function before any drawing or updates!
*/
bool Adafruit_SH1107::begin(uint8_t addr, bool reset) {
   be608:	b530      	push	{r4, r5, lr}
   be60a:	4604      	mov	r4, r0
   be60c:	b085      	sub	sp, #20

  Adafruit_GrayOLED::_init(addr, reset);
   be60e:	f7ff ff5d 	bl	be4cc <_ZN17Adafruit_GrayOLED5_initEhb>

  setContrast(0x2F);
   be612:	212f      	movs	r1, #47	; 0x2f
   be614:	4620      	mov	r0, r4
   be616:	f7ff ffc2 	bl	be59e <_ZN17Adafruit_GrayOLED11setContrastEh>

  // the featherwing with 128x64 oled is 'rotated' so to make the splash right,
  // rotate!
  if (WIDTH == 64 && HEIGHT == 128) {
   be61a:	68a2      	ldr	r2, [r4, #8]
   be61c:	4b2f      	ldr	r3, [pc, #188]	; (be6dc <_ZN15Adafruit_SH11075beginEhb+0xd4>)
   be61e:	429a      	cmp	r2, r3
   be620:	d121      	bne.n	be666 <_ZN15Adafruit_SH11075beginEhb+0x5e>
    setRotation(1);
   be622:	6823      	ldr	r3, [r4, #0]
   be624:	2101      	movs	r1, #1
   be626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   be628:	4620      	mov	r0, r4
   be62a:	4798      	blx	r3
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   be62c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   be630:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   be634:	2320      	movs	r3, #32
   be636:	3a20      	subs	r2, #32
   be638:	3973      	subs	r1, #115	; 0x73
   be63a:	2501      	movs	r5, #1
   be63c:	e9cd 3501 	strd	r3, r5, [sp, #4]
   be640:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   be644:	2373      	movs	r3, #115	; 0x73
   be646:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   be64a:	9300      	str	r3, [sp, #0]
   be64c:	f341 014f 	sbfx	r1, r1, #1, #16
   be650:	4b23      	ldr	r3, [pc, #140]	; (be6e0 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   be652:	4620      	mov	r0, r4
   be654:	f342 024f 	sbfx	r2, r2, #1, #16
   be658:	f7ff fbae 	bl	bddb8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
               splash2_data, splash2_width, splash2_height, 1);
    setRotation(0);
   be65c:	6823      	ldr	r3, [r4, #0]
   be65e:	2100      	movs	r1, #0
   be660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   be662:	4620      	mov	r0, r4
   be664:	4798      	blx	r3
  }
  if (WIDTH == 128 && HEIGHT == 128) {
   be666:	68a3      	ldr	r3, [r4, #8]
   be668:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   be66c:	d117      	bne.n	be69e <_ZN15Adafruit_SH11075beginEhb+0x96>
    drawBitmap((HEIGHT - splash2_width) / 2, (WIDTH - splash2_height) / 2,
   be66e:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   be672:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   be676:	2320      	movs	r3, #32
   be678:	2001      	movs	r0, #1
   be67a:	3a20      	subs	r2, #32
   be67c:	3973      	subs	r1, #115	; 0x73
   be67e:	e9cd 3001 	strd	r3, r0, [sp, #4]
   be682:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   be686:	2373      	movs	r3, #115	; 0x73
   be688:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   be68c:	9300      	str	r3, [sp, #0]
   be68e:	f342 024f 	sbfx	r2, r2, #1, #16
   be692:	4b13      	ldr	r3, [pc, #76]	; (be6e0 <_ZN15Adafruit_SH11075beginEhb+0xd8>)
   be694:	f341 014f 	sbfx	r1, r1, #1, #16
   be698:	4620      	mov	r0, r4
   be69a:	f7ff fb8d 	bl	bddb8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
      SH110X_DISPLAYALLON_RESUME, // 0xa4
      SH110X_NORMALDISPLAY,       // 0xa6
  };
  // clang-format on

  if (!oled_commandList(init, sizeof(init))) {
   be69e:	4911      	ldr	r1, [pc, #68]	; (be6e4 <_ZN15Adafruit_SH11075beginEhb+0xdc>)
   be6a0:	2216      	movs	r2, #22
   be6a2:	4620      	mov	r0, r4
   be6a4:	f7ff fed5 	bl	be452 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   be6a8:	4605      	mov	r5, r0
   be6aa:	b918      	cbnz	r0, be6b4 <_ZN15Adafruit_SH11075beginEhb+0xac>
    return false;
   be6ac:	2500      	movs	r5, #0

  delay(100);                     // 100ms delay recommended
  oled_command(SH110X_DISPLAYON); // 0xaf

  return true; // Success
}
   be6ae:	4628      	mov	r0, r5
   be6b0:	b005      	add	sp, #20
   be6b2:	bd30      	pop	{r4, r5, pc}
  if (WIDTH == 128 && HEIGHT == 128) {
   be6b4:	68a3      	ldr	r3, [r4, #8]
   be6b6:	f1b3 1f80 	cmp.w	r3, #8388736	; 0x800080
   be6ba:	d007      	beq.n	be6cc <_ZN15Adafruit_SH11075beginEhb+0xc4>
  delay(100);                     // 100ms delay recommended
   be6bc:	2064      	movs	r0, #100	; 0x64
   be6be:	f000 fcdf 	bl	bf080 <delay>
  oled_command(SH110X_DISPLAYON); // 0xaf
   be6c2:	21af      	movs	r1, #175	; 0xaf
   be6c4:	4620      	mov	r0, r4
   be6c6:	f7ff fe99 	bl	be3fc <_ZN17Adafruit_GrayOLED12oled_commandEh>
  return true; // Success
   be6ca:	e7f0      	b.n	be6ae <_ZN15Adafruit_SH11075beginEhb+0xa6>
    if (!oled_commandList(init_128x128, sizeof(init_128x128))) {
   be6cc:	4906      	ldr	r1, [pc, #24]	; (be6e8 <_ZN15Adafruit_SH11075beginEhb+0xe0>)
   be6ce:	2204      	movs	r2, #4
   be6d0:	4620      	mov	r0, r4
   be6d2:	f7ff febe 	bl	be452 <_ZN17Adafruit_GrayOLED16oled_commandListEPKhh>
   be6d6:	2800      	cmp	r0, #0
   be6d8:	d1f0      	bne.n	be6bc <_ZN15Adafruit_SH11075beginEhb+0xb4>
   be6da:	e7e7      	b.n	be6ac <_ZN15Adafruit_SH11075beginEhb+0xa4>
   be6dc:	00800040 	.word	0x00800040
   be6e0:	000c8788 	.word	0x000c8788
   be6e4:	000c89c8 	.word	0x000c89c8
   be6e8:	000c89c4 	.word	0x000c89c4

000be6ec <_ZN15Adafruit_SH110X7displayEv>:
    @brief  Push data currently in RAM to SH110X display.
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SH110X::display(void) {
   be6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be6f0:	4604      	mov	r4, r0
   be6f2:	b08b      	sub	sp, #44	; 0x2c
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   be6f4:	f000 f9ec 	bl	bead0 <os_thread_yield>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();

  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   be6f8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
  Serial.print(", ");
  Serial.print(window_y2);
  Serial.println(")");
  */

  uint8_t first_page = window_y1 / 8;
   be6fc:	f9b4 603a 	ldrsh.w	r6, [r4, #58]	; 0x3a
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   be700:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
   be704:	f894 9038 	ldrb.w	r9, [r4, #56]	; 0x38
   be708:	1dda      	adds	r2, r3, #7
   be70a:	bf48      	it	mi
   be70c:	f103 020e 	addmi.w	r2, r3, #14
  uint8_t dc_byte = 0x40;
   be710:	2340      	movs	r3, #64	; 0x40
   be712:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  uint8_t pages = ((HEIGHT + 7) / 8);
   be716:	f3c2 03c7 	ubfx	r3, r2, #3, #8
   be71a:	9303      	str	r3, [sp, #12]
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   be71c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  uint8_t last_page = (window_y2 + 7) / 8;
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   be71e:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   be722:	68db      	ldr	r3, [r3, #12]
  uint8_t bytes_per_page = WIDTH;
   be724:	b2ff      	uxtb	r7, r7
  uint8_t first_page = window_y1 / 8;
   be726:	2e00      	cmp	r6, #0
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   be728:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   be72c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  uint8_t first_page = window_y1 / 8;
   be730:	bfb8      	it	lt
   be732:	3607      	addlt	r6, #7
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   be734:	b2d2      	uxtb	r2, r2
  uint16_t maxbuff = i2c_dev->maxBufferSize() - 1;
   be736:	b29b      	uxth	r3, r3
  uint8_t first_page = window_y1 / 8;
   be738:	45b9      	cmp	r9, r7
   be73a:	f3c6 06c7 	ubfx	r6, r6, #3, #8
  uint8_t page_start = min(bytes_per_page, (uint8_t)window_x1);
   be73e:	bf28      	it	cs
   be740:	46b9      	movcs	r9, r7
  uint8_t page_end = (uint8_t)max((int)0, (int)window_x2);
   be742:	9204      	str	r2, [sp, #16]
  Serial.print(page_start);
  Serial.print(" -> ");
  Serial.println(page_end);
  */

  for (uint8_t p = first_page; p < pages; p++) {
   be744:	b2db      	uxtb	r3, r3
    ptr = buffer + (uint16_t)p * (uint16_t)bytes_per_page;
    // fast forward to dirty rectangle beginning
    ptr += page_start;
    bytes_remaining -= page_start;
    // cut off end of dirty rectangle
    bytes_remaining -= (WIDTH - 1) - page_end;
   be746:	1c7a      	adds	r2, r7, #1
   be748:	fb06 9b07 	mla	fp, r6, r7, r9
   be74c:	9205      	str	r2, [sp, #20]
   be74e:	9306      	str	r3, [sp, #24]
  for (uint8_t p = first_page; p < pages; p++) {
   be750:	9b03      	ldr	r3, [sp, #12]
   be752:	429e      	cmp	r6, r3
   be754:	d26a      	bcs.n	be82c <_ZN15Adafruit_SH110X7displayEv+0x140>
    ptr += page_start;
   be756:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bytes_remaining -= (WIDTH - 1) - page_end;
   be758:	8925      	ldrh	r5, [r4, #8]

    if (i2c_dev) { // I2C
      uint8_t cmd[] = {
          0x00, (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   be75a:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
    ptr += page_start;
   be75e:	eb03 080b 	add.w	r8, r3, fp
    bytes_remaining -= (WIDTH - 1) - page_end;
   be762:	9b05      	ldr	r3, [sp, #20]
   be764:	1b5d      	subs	r5, r3, r5
   be766:	9b04      	ldr	r3, [sp, #16]
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   be768:	444a      	add	r2, r9
    bytes_remaining -= (WIDTH - 1) - page_end;
   be76a:	441d      	add	r5, r3
    if (i2c_dev) { // I2C
   be76c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   be76e:	1110      	asrs	r0, r2, #4
    bytes_remaining -= (WIDTH - 1) - page_end;
   be770:	eba5 0509 	sub.w	r5, r5, r9
   be774:	f1a6 0150 	sub.w	r1, r6, #80	; 0x50
   be778:	b2ed      	uxtb	r5, r5
    if (i2c_dev) { // I2C
   be77a:	b2c9      	uxtb	r1, r1
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
   be77c:	3010      	adds	r0, #16
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   be77e:	f002 020f 	and.w	r2, r2, #15
    if (i2c_dev) { // I2C
   be782:	b39b      	cbz	r3, be7ec <_ZN15Adafruit_SH110X7displayEv+0x100>
      uint8_t cmd[] = {
   be784:	f04f 0a00 	mov.w	sl, #0
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   be788:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
   be78c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26

      // Set high speed clk
      i2c_dev->setSpeed(i2c_preclk);
   be790:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      uint8_t cmd[] = {
   be792:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
      i2c_dev->setSpeed(i2c_preclk);
   be796:	4618      	mov	r0, r3
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   be798:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
      i2c_dev->setSpeed(i2c_preclk);
   be79c:	f7ff f80d 	bl	bd7ba <_ZN18Adafruit_I2CDevice8setSpeedEm>

      i2c_dev->write(cmd, 4);
   be7a0:	e9cd aa00 	strd	sl, sl, [sp]
   be7a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   be7a6:	2301      	movs	r3, #1
   be7a8:	2204      	movs	r2, #4
   be7aa:	a909      	add	r1, sp, #36	; 0x24
   be7ac:	f7fe ff9c 	bl	bd6e8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>

      while (bytes_remaining) {
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
   be7b0:	f10d 0a23 	add.w	sl, sp, #35	; 0x23
   be7b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      while (bytes_remaining) {
   be7b6:	b195      	cbz	r5, be7de <_ZN15Adafruit_SH110X7displayEv+0xf2>
        uint8_t to_write = min(bytes_remaining, (uint8_t)maxbuff);
   be7b8:	9b06      	ldr	r3, [sp, #24]
   be7ba:	42ab      	cmp	r3, r5
   be7bc:	bf28      	it	cs
   be7be:	462b      	movcs	r3, r5
   be7c0:	461a      	mov	r2, r3
        i2c_dev->write(ptr, to_write, true, &dc_byte, 1);
   be7c2:	2301      	movs	r3, #1
   be7c4:	4641      	mov	r1, r8
   be7c6:	e9cd a300 	strd	sl, r3, [sp]
   be7ca:	9207      	str	r2, [sp, #28]
   be7cc:	f7fe ff8c 	bl	bd6e8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
        ptr += to_write;
   be7d0:	9a07      	ldr	r2, [sp, #28]
        bytes_remaining -= to_write;
   be7d2:	1aad      	subs	r5, r5, r2
        ptr += to_write;
   be7d4:	4490      	add	r8, r2
        bytes_remaining -= to_write;
   be7d6:	b2ed      	uxtb	r5, r5
   be7d8:	f000 f97a 	bl	bead0 <os_thread_yield>
#endif // PLATFORM_THREADING
}
   be7dc:	e7ea      	b.n	be7b4 <_ZN15Adafruit_SH110X7displayEv+0xc8>
        yield();
      }

      // Set low speed clk
      i2c_dev->setSpeed(i2c_postclk);
   be7de:	6b21      	ldr	r1, [r4, #48]	; 0x30
   be7e0:	f7fe ffeb 	bl	bd7ba <_ZN18Adafruit_I2CDevice8setSpeedEm>
  for (uint8_t p = first_page; p < pages; p++) {
   be7e4:	3601      	adds	r6, #1
   be7e6:	b2f6      	uxtb	r6, r6
   be7e8:	44bb      	add	fp, r7
   be7ea:	e7b1      	b.n	be750 <_ZN15Adafruit_SH110X7displayEv+0x64>

    } else { // SPI
      uint8_t cmd[] = {
          (uint8_t)(SH110X_SETPAGEADDR + p),
          (uint8_t)(0x10 + ((page_start + _page_start_offset) >> 4)),
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   be7ec:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   be7f0:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25

      digitalWrite(dcPin, LOW);
   be7f4:	4619      	mov	r1, r3
   be7f6:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
          (uint8_t)((page_start + _page_start_offset) & 0xF)};
   be7fa:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
      digitalWrite(dcPin, LOW);
   be7fe:	9307      	str	r3, [sp, #28]
   be800:	f002 fc97 	bl	c1132 <digitalWrite>
      spi_dev->write(cmd, 3);
   be804:	9b07      	ldr	r3, [sp, #28]
   be806:	9300      	str	r3, [sp, #0]
   be808:	2203      	movs	r2, #3
   be80a:	a909      	add	r1, sp, #36	; 0x24
   be80c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   be80e:	f7ff f8d4 	bl	bd9ba <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
      digitalWrite(dcPin, HIGH);
   be812:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   be816:	2101      	movs	r1, #1
   be818:	f002 fc8b 	bl	c1132 <digitalWrite>
      spi_dev->write(ptr, bytes_remaining);
   be81c:	9b07      	ldr	r3, [sp, #28]
   be81e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   be820:	9300      	str	r3, [sp, #0]
   be822:	462a      	mov	r2, r5
   be824:	4641      	mov	r1, r8
   be826:	f7ff f8c8 	bl	bd9ba <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   be82a:	e7db      	b.n	be7e4 <_ZN15Adafruit_SH110X7displayEv+0xf8>
    }
  }
  // reset dirty window
  window_x1 = 1024;
  window_y1 = 1024;
  window_x2 = -1;
   be82c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
   be830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   be834:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  window_y2 = -1;
}
   be838:	b00b      	add	sp, #44	; 0x2c
   be83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000be840 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm>:
Adafruit_SH110X::Adafruit_SH110X(uint16_t w, uint16_t h, TwoWire *twi,
   be840:	b530      	push	{r4, r5, lr}
   be842:	b085      	sub	sp, #20
   be844:	4604      	mov	r4, r0
    : Adafruit_GrayOLED(1, w, h, twi, rst_pin, clkDuring, clkAfter) {}
   be846:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   be848:	9503      	str	r5, [sp, #12]
   be84a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   be84c:	9502      	str	r5, [sp, #8]
   be84e:	f99d 5020 	ldrsb.w	r5, [sp, #32]
   be852:	e9cd 3500 	strd	r3, r5, [sp]
   be856:	4613      	mov	r3, r2
   be858:	460a      	mov	r2, r1
   be85a:	2101      	movs	r1, #1
   be85c:	f7ff fd90 	bl	be380 <_ZN17Adafruit_GrayOLEDC1EhttP7TwoWireamm>
   be860:	4b03      	ldr	r3, [pc, #12]	; (be870 <_ZN15Adafruit_SH110XC1EttP7TwoWireamm+0x30>)
   be862:	6023      	str	r3, [r4, #0]
   be864:	4620      	mov	r0, r4
   be866:	2300      	movs	r3, #0
   be868:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   be86c:	b005      	add	sp, #20
   be86e:	bd30      	pop	{r4, r5, pc}
   be870:	000c89e8 	.word	0x000c89e8

000be874 <_ZN15Adafruit_SH110XD1Ev>:
Adafruit_SH110X::~Adafruit_SH110X(void) {}
   be874:	b510      	push	{r4, lr}
   be876:	4b03      	ldr	r3, [pc, #12]	; (be884 <_ZN15Adafruit_SH110XD1Ev+0x10>)
   be878:	6003      	str	r3, [r0, #0]
   be87a:	4604      	mov	r4, r0
   be87c:	f7ff fda2 	bl	be3c4 <_ZN17Adafruit_GrayOLEDD1Ev>
   be880:	4620      	mov	r0, r4
   be882:	bd10      	pop	{r4, pc}
   be884:	000c89e8 	.word	0x000c89e8

000be888 <_ZN17Adafruit_VCNL4040C1Ev>:
#include "Adafruit_VCNL4040.h"

/*!
 *    @brief  Instantiates a new VCNL4040 class
 */
Adafruit_VCNL4040::Adafruit_VCNL4040(void) {}
   be888:	4770      	bx	lr

000be88a <_ZN17Adafruit_VCNL404012getProximityEv>:
/*!
    @brief Gets the current proximity sensor value.
    @return The current proximity measurement in units
*/
/**************************************************************************/
uint16_t Adafruit_VCNL4040::getProximity(void) {
   be88a:	b500      	push	{lr}
  Adafruit_BusIO_Register proximity =
      Adafruit_BusIO_Register(i2c_dev, VCNL4040_PS_DATA, 2);
   be88c:	2300      	movs	r3, #0
uint16_t Adafruit_VCNL4040::getProximity(void) {
   be88e:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, VCNL4040_PS_DATA, 2);
   be890:	2201      	movs	r2, #1
   be892:	e9cd 3200 	strd	r3, r2, [sp]
   be896:	2208      	movs	r2, #8
   be898:	68c1      	ldr	r1, [r0, #12]
   be89a:	2302      	movs	r3, #2
   be89c:	eb0d 0002 	add.w	r0, sp, r2
   be8a0:	f7fe fe1e 	bl	bd4e0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  delay(10);
   be8a4:	200a      	movs	r0, #10
   be8a6:	f000 fbeb 	bl	bf080 <delay>
  return (int16_t)proximity.read();
   be8aa:	a802      	add	r0, sp, #8
   be8ac:	f7fe feaa 	bl	bd604 <_ZN23Adafruit_BusIO_Register4readEv>
}
   be8b0:	b280      	uxth	r0, r0
   be8b2:	b009      	add	sp, #36	; 0x24
   be8b4:	f85d fb04 	ldr.w	pc, [sp], #4

000be8b8 <_ZN17Adafruit_VCNL404015getAmbientLightEv>:
/*!
    @brief Gets the current ambient light sensor value.
    @return The current ambient light measurement in units
*/
/**************************************************************************/
uint16_t Adafruit_VCNL4040::getAmbientLight(void) {
   be8b8:	b500      	push	{lr}
  Adafruit_BusIO_Register ambient_light =
      Adafruit_BusIO_Register(i2c_dev, VCNL4040_ALS_DATA, 2);
   be8ba:	2300      	movs	r3, #0
uint16_t Adafruit_VCNL4040::getAmbientLight(void) {
   be8bc:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, VCNL4040_ALS_DATA, 2);
   be8be:	2201      	movs	r2, #1
   be8c0:	e9cd 3200 	strd	r3, r2, [sp]
   be8c4:	2302      	movs	r3, #2
   be8c6:	68c1      	ldr	r1, [r0, #12]
   be8c8:	2209      	movs	r2, #9
   be8ca:	a802      	add	r0, sp, #8
   be8cc:	f7fe fe08 	bl	bd4e0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return (int16_t)ambient_light.read();
   be8d0:	a802      	add	r0, sp, #8
   be8d2:	f7fe fe97 	bl	bd604 <_ZN23Adafruit_BusIO_Register4readEv>
}
   be8d6:	b280      	uxth	r0, r0
   be8d8:	b009      	add	sp, #36	; 0x24
   be8da:	f85d fb04 	ldr.w	pc, [sp], #4

000be8de <_ZN17Adafruit_VCNL404015enableProximityEb>:
    @brief Enables or disables proximity measurements.
    @param  enable
            Set to true to enable proximity measurements,
            set to false to disable.
*/
void Adafruit_VCNL4040::enableProximity(bool enable) {
   be8de:	b513      	push	{r0, r1, r4, lr}
  Adafruit_BusIO_RegisterBits ps_disable =
      Adafruit_BusIO_RegisterBits(PS_CONFIG_12, 1, 0);
   be8e0:	2300      	movs	r3, #0
void Adafruit_VCNL4040::enableProximity(bool enable) {
   be8e2:	460c      	mov	r4, r1
      Adafruit_BusIO_RegisterBits(PS_CONFIG_12, 1, 0);
   be8e4:	2201      	movs	r2, #1
   be8e6:	6801      	ldr	r1, [r0, #0]
   be8e8:	4668      	mov	r0, sp
   be8ea:	f7fe fea7 	bl	bd63c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  ps_disable.write(!enable);
   be8ee:	f084 0101 	eor.w	r1, r4, #1
   be8f2:	4668      	mov	r0, sp
   be8f4:	f7fe feb4 	bl	bd660 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   be8f8:	b002      	add	sp, #8
   be8fa:	bd10      	pop	{r4, pc}

000be8fc <_ZN17Adafruit_VCNL404018enableAmbientLightEb>:
    @brief Enables ambient light measurements
    @param  enable
            Set to true to enable ambient light measurements,
            set to false to disable.
*/
void Adafruit_VCNL4040::enableAmbientLight(bool enable) {
   be8fc:	b513      	push	{r0, r1, r4, lr}
  Adafruit_BusIO_RegisterBits als_disable =
      Adafruit_BusIO_RegisterBits(ALS_CONFIG, 1, 0);
   be8fe:	2300      	movs	r3, #0
void Adafruit_VCNL4040::enableAmbientLight(bool enable) {
   be900:	460c      	mov	r4, r1
      Adafruit_BusIO_RegisterBits(ALS_CONFIG, 1, 0);
   be902:	2201      	movs	r2, #1
   be904:	6841      	ldr	r1, [r0, #4]
   be906:	4668      	mov	r0, sp
   be908:	f7fe fe98 	bl	bd63c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  als_disable.write(!enable);
   be90c:	f084 0101 	eor.w	r1, r4, #1
   be910:	4668      	mov	r0, sp
   be912:	f7fe fea5 	bl	bd660 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   be916:	b002      	add	sp, #8
   be918:	bd10      	pop	{r4, pc}

000be91a <_ZN17Adafruit_VCNL404016enableWhiteLightEb>:
    @brief Enables white light measurements
    @param  enable
            Set to true to enable white light measurements,
            set to false to disable.
*/
void Adafruit_VCNL4040::enableWhiteLight(bool enable) {
   be91a:	b513      	push	{r0, r1, r4, lr}
  Adafruit_BusIO_RegisterBits white_disable =
      Adafruit_BusIO_RegisterBits(PS_MS, 1, 15);
   be91c:	230f      	movs	r3, #15
void Adafruit_VCNL4040::enableWhiteLight(bool enable) {
   be91e:	460c      	mov	r4, r1
      Adafruit_BusIO_RegisterBits(PS_MS, 1, 15);
   be920:	2201      	movs	r2, #1
   be922:	6881      	ldr	r1, [r0, #8]
   be924:	4668      	mov	r0, sp
   be926:	f7fe fe89 	bl	bd63c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  white_disable.write(!enable);
   be92a:	f084 0101 	eor.w	r1, r4, #1
   be92e:	4668      	mov	r0, sp
   be930:	f7fe fe96 	bl	bd660 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   be934:	b002      	add	sp, #8
   be936:	bd10      	pop	{r4, pc}

000be938 <_ZN17Adafruit_VCNL404027setProximityIntegrationTimeE26proximity_integration_time>:
    @param  integration_time
            The integration time to use for proximity measurements. Must be a
            `VCNL4040_ProximityIntegration`.
*/
void Adafruit_VCNL4040::setProximityIntegrationTime(
    VCNL4040_ProximityIntegration integration_time) {
   be938:	b513      	push	{r0, r1, r4, lr}
  Adafruit_BusIO_RegisterBits proximity_int_config =
      Adafruit_BusIO_RegisterBits(PS_CONFIG_12, 3, 1);
   be93a:	2301      	movs	r3, #1
   be93c:	2203      	movs	r2, #3
    VCNL4040_ProximityIntegration integration_time) {
   be93e:	460c      	mov	r4, r1
      Adafruit_BusIO_RegisterBits(PS_CONFIG_12, 3, 1);
   be940:	6801      	ldr	r1, [r0, #0]
   be942:	4668      	mov	r0, sp
   be944:	f7fe fe7a 	bl	bd63c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  delay(50);
   be948:	2032      	movs	r0, #50	; 0x32
   be94a:	f000 fb99 	bl	bf080 <delay>
  proximity_int_config.write(integration_time);
   be94e:	4621      	mov	r1, r4
   be950:	4668      	mov	r0, sp
   be952:	f7fe fe85 	bl	bd660 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   be956:	b002      	add	sp, #8
   be958:	bd10      	pop	{r4, pc}

000be95a <_ZN17Adafruit_VCNL404025setAmbientIntegrationTimeE24ambient_integration_time>:
    @param  integration_time
            The integration time to use for ambient light measurements. Must be
   a `VCNL4040_AmbientIntegration`.
*/
void Adafruit_VCNL4040::setAmbientIntegrationTime(
    VCNL4040_AmbientIntegration integration_time) {
   be95a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  Adafruit_BusIO_RegisterBits ambient_int_config =
      Adafruit_BusIO_RegisterBits(ALS_CONFIG, 2, 6);
   be95c:	2306      	movs	r3, #6
   be95e:	2202      	movs	r2, #2
    VCNL4040_AmbientIntegration integration_time) {
   be960:	460d      	mov	r5, r1
      Adafruit_BusIO_RegisterBits(ALS_CONFIG, 2, 6);
   be962:	6841      	ldr	r1, [r0, #4]
   be964:	4668      	mov	r0, sp
   be966:	f7fe fe69 	bl	bd63c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  // delay according to the integration time to let the reading at the old IT
  // clear out
  uint16_t old_it_ms = ((8 << ambient_int_config.read()) * 10);
   be96a:	4668      	mov	r0, sp
   be96c:	f7fe fe6b 	bl	bd646 <_ZN27Adafruit_BusIO_RegisterBits4readEv>
  uint16_t new_it_ms = ((8 << integration_time) * 10);

  ambient_int_config.write(integration_time);
   be970:	4629      	mov	r1, r5
  uint16_t old_it_ms = ((8 << ambient_int_config.read()) * 10);
   be972:	4604      	mov	r4, r0
  ambient_int_config.write(integration_time);
   be974:	4668      	mov	r0, sp
   be976:	f7fe fe73 	bl	bd660 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  uint16_t old_it_ms = ((8 << ambient_int_config.read()) * 10);
   be97a:	2308      	movs	r3, #8
   be97c:	fa03 f004 	lsl.w	r0, r3, r4
  uint16_t new_it_ms = ((8 << integration_time) * 10);
   be980:	fa03 f105 	lsl.w	r1, r3, r5
  uint16_t old_it_ms = ((8 << ambient_int_config.read()) * 10);
   be984:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  uint16_t new_it_ms = ((8 << integration_time) * 10);
   be988:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  uint16_t old_it_ms = ((8 << ambient_int_config.read()) * 10);
   be98c:	0040      	lsls	r0, r0, #1
  uint16_t new_it_ms = ((8 << integration_time) * 10);
   be98e:	0049      	lsls	r1, r1, #1
  delay((old_it_ms + new_it_ms + 1));
   be990:	b289      	uxth	r1, r1
   be992:	b280      	uxth	r0, r0
   be994:	4408      	add	r0, r1
   be996:	3001      	adds	r0, #1
   be998:	f000 fb72 	bl	bf080 <delay>
}
   be99c:	b003      	add	sp, #12
   be99e:	bd30      	pop	{r4, r5, pc}

000be9a0 <_ZN17Adafruit_VCNL404022setProximityLEDCurrentE11led_current>:
    @param  led_current
            The current value to be used for proximity measurements. Must be a
            `VCNL4040_LEDCurrent`.
*/
void Adafruit_VCNL4040::setProximityLEDCurrent(
    VCNL4040_LEDCurrent led_current) {
   be9a0:	b513      	push	{r0, r1, r4, lr}
  Adafruit_BusIO_RegisterBits led_current_config =
      Adafruit_BusIO_RegisterBits(PS_MS, 3, 8);
   be9a2:	2308      	movs	r3, #8
    VCNL4040_LEDCurrent led_current) {
   be9a4:	460c      	mov	r4, r1
      Adafruit_BusIO_RegisterBits(PS_MS, 3, 8);
   be9a6:	2203      	movs	r2, #3
   be9a8:	6881      	ldr	r1, [r0, #8]
   be9aa:	4668      	mov	r0, sp
   be9ac:	f7fe fe46 	bl	bd63c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  led_current_config.write(led_current);
   be9b0:	4621      	mov	r1, r4
   be9b2:	4668      	mov	r0, sp
   be9b4:	f7fe fe54 	bl	bd660 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   be9b8:	b002      	add	sp, #8
   be9ba:	bd10      	pop	{r4, pc}

000be9bc <_ZN17Adafruit_VCNL404024setProximityLEDDutyCycleE14led_duty_cycle>:
    @param  duty_cycle
            The duty cycle value to be used for proximity measurements. Must be
   a `VCNL4040_LEDDutyCycle`.
*/
void Adafruit_VCNL4040::setProximityLEDDutyCycle(
    VCNL4040_LEDDutyCycle duty_cycle) {
   be9bc:	b513      	push	{r0, r1, r4, lr}
  Adafruit_BusIO_RegisterBits led_duty_cycle_config =
      Adafruit_BusIO_RegisterBits(PS_CONFIG_12, 2, 6);
   be9be:	2306      	movs	r3, #6
    VCNL4040_LEDDutyCycle duty_cycle) {
   be9c0:	460c      	mov	r4, r1
      Adafruit_BusIO_RegisterBits(PS_CONFIG_12, 2, 6);
   be9c2:	2202      	movs	r2, #2
   be9c4:	6801      	ldr	r1, [r0, #0]
   be9c6:	4668      	mov	r0, sp
   be9c8:	f7fe fe38 	bl	bd63c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  led_duty_cycle_config.write(duty_cycle);
   be9cc:	4621      	mov	r1, r4
   be9ce:	4668      	mov	r0, sp
   be9d0:	f7fe fe46 	bl	bd660 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   be9d4:	b002      	add	sp, #8
   be9d6:	bd10      	pop	{r4, pc}

000be9d8 <_ZN17Adafruit_VCNL404026setProximityHighResolutionEb>:
    @brief Sets the resolution of proximity measurements
    @param  high_resolution
            Set to true to take 16-bit measurements for proximity,
            set to faluse to use 12-bit measurements.
*/
void Adafruit_VCNL4040::setProximityHighResolution(bool high_resolution) {
   be9d8:	b513      	push	{r0, r1, r4, lr}
  Adafruit_BusIO_RegisterBits ps_hd =
      Adafruit_BusIO_RegisterBits(PS_CONFIG_12, 1, 11);
   be9da:	230b      	movs	r3, #11
void Adafruit_VCNL4040::setProximityHighResolution(bool high_resolution) {
   be9dc:	460c      	mov	r4, r1
      Adafruit_BusIO_RegisterBits(PS_CONFIG_12, 1, 11);
   be9de:	2201      	movs	r2, #1
   be9e0:	6801      	ldr	r1, [r0, #0]
   be9e2:	4668      	mov	r0, sp
   be9e4:	f7fe fe2a 	bl	bd63c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  ps_hd.write(high_resolution);
   be9e8:	4621      	mov	r1, r4
   be9ea:	4668      	mov	r0, sp
   be9ec:	f7fe fe38 	bl	bd660 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   be9f0:	b002      	add	sp, #8
   be9f2:	bd10      	pop	{r4, pc}

000be9f4 <_ZN17Adafruit_VCNL40405_initEv>:
boolean Adafruit_VCNL4040::_init(void) {
   be9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
      Adafruit_BusIO_Register(i2c_dev, VCNL4040_DEVICE_ID, 2);
   be9f6:	2500      	movs	r5, #0
boolean Adafruit_VCNL4040::_init(void) {
   be9f8:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, VCNL4040_DEVICE_ID, 2);
   be9fa:	2701      	movs	r7, #1
   be9fc:	e9cd 5700 	strd	r5, r7, [sp]
   bea00:	2302      	movs	r3, #2
   bea02:	68c1      	ldr	r1, [r0, #12]
   bea04:	220c      	movs	r2, #12
boolean Adafruit_VCNL4040::_init(void) {
   bea06:	4604      	mov	r4, r0
      Adafruit_BusIO_Register(i2c_dev, VCNL4040_DEVICE_ID, 2);
   bea08:	a802      	add	r0, sp, #8
   bea0a:	f7fe fd69 	bl	bd4e0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if (chip_id.read() != 0x0186) {
   bea0e:	a802      	add	r0, sp, #8
   bea10:	f7fe fdf8 	bl	bd604 <_ZN23Adafruit_BusIO_Register4readEv>
   bea14:	f5b0 7fc3 	cmp.w	r0, #390	; 0x186
   bea18:	d13d      	bne.n	bea96 <_ZN17Adafruit_VCNL40405_initEv+0xa2>
  ALS_CONFIG = new Adafruit_BusIO_Register(i2c_dev, VCNL4040_ALS_CONFIG, 2);
   bea1a:	2018      	movs	r0, #24
   bea1c:	f7f6 fa41 	bl	b4ea2 <_Znwj>
   bea20:	4606      	mov	r6, r0
   bea22:	b130      	cbz	r0, bea32 <_ZN17Adafruit_VCNL40405_initEv+0x3e>
   bea24:	e9cd 5700 	strd	r5, r7, [sp]
   bea28:	68e1      	ldr	r1, [r4, #12]
   bea2a:	2302      	movs	r3, #2
   bea2c:	462a      	mov	r2, r5
   bea2e:	f7fe fd57 	bl	bd4e0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
   bea32:	6066      	str	r6, [r4, #4]
  PS_CONFIG_12 = new Adafruit_BusIO_Register(i2c_dev, VCNL4040_PS_CONF1_L, 2);
   bea34:	2018      	movs	r0, #24
   bea36:	f7f6 fa34 	bl	b4ea2 <_Znwj>
   bea3a:	4605      	mov	r5, r0
   bea3c:	b140      	cbz	r0, bea50 <_ZN17Adafruit_VCNL40405_initEv+0x5c>
   bea3e:	2300      	movs	r3, #0
   bea40:	2101      	movs	r1, #1
   bea42:	e9cd 3100 	strd	r3, r1, [sp]
   bea46:	2203      	movs	r2, #3
   bea48:	68e1      	ldr	r1, [r4, #12]
   bea4a:	2302      	movs	r3, #2
   bea4c:	f7fe fd48 	bl	bd4e0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
   bea50:	6025      	str	r5, [r4, #0]
  PS_MS = new Adafruit_BusIO_Register(i2c_dev, VCNL4040_PS_MS_H, 2);
   bea52:	2018      	movs	r0, #24
   bea54:	f7f6 fa25 	bl	b4ea2 <_Znwj>
   bea58:	4605      	mov	r5, r0
   bea5a:	b140      	cbz	r0, bea6e <_ZN17Adafruit_VCNL40405_initEv+0x7a>
   bea5c:	2300      	movs	r3, #0
   bea5e:	2201      	movs	r2, #1
   bea60:	e9cd 3200 	strd	r3, r2, [sp]
   bea64:	68e1      	ldr	r1, [r4, #12]
   bea66:	2302      	movs	r3, #2
   bea68:	2204      	movs	r2, #4
   bea6a:	f7fe fd39 	bl	bd4e0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  enableProximity(true);
   bea6e:	2101      	movs	r1, #1
   bea70:	4620      	mov	r0, r4
  PS_MS = new Adafruit_BusIO_Register(i2c_dev, VCNL4040_PS_MS_H, 2);
   bea72:	60a5      	str	r5, [r4, #8]
  enableProximity(true);
   bea74:	f7ff ff33 	bl	be8de <_ZN17Adafruit_VCNL404015enableProximityEb>
  enableWhiteLight(true);
   bea78:	2101      	movs	r1, #1
   bea7a:	4620      	mov	r0, r4
   bea7c:	f7ff ff4d 	bl	be91a <_ZN17Adafruit_VCNL404016enableWhiteLightEb>
  enableAmbientLight(true);
   bea80:	2101      	movs	r1, #1
   bea82:	4620      	mov	r0, r4
   bea84:	f7ff ff3a 	bl	be8fc <_ZN17Adafruit_VCNL404018enableAmbientLightEb>
  setProximityHighResolution(true);
   bea88:	4620      	mov	r0, r4
   bea8a:	2101      	movs	r1, #1
   bea8c:	f7ff ffa4 	bl	be9d8 <_ZN17Adafruit_VCNL404026setProximityHighResolutionEb>
   bea90:	2001      	movs	r0, #1
}
   bea92:	b009      	add	sp, #36	; 0x24
   bea94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return false;
   bea96:	4628      	mov	r0, r5
   bea98:	e7fb      	b.n	bea92 <_ZN17Adafruit_VCNL40405_initEv+0x9e>

000bea9a <_ZN17Adafruit_VCNL40405beginEhP7TwoWire>:
boolean Adafruit_VCNL4040::begin(uint8_t i2c_address, TwoWire *wire) {
   bea9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bea9c:	4605      	mov	r5, r0
  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
   bea9e:	2010      	movs	r0, #16
boolean Adafruit_VCNL4040::begin(uint8_t i2c_address, TwoWire *wire) {
   beaa0:	e9cd 2100 	strd	r2, r1, [sp]
  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
   beaa4:	f7f6 f9fd 	bl	b4ea2 <_Znwj>
   beaa8:	4604      	mov	r4, r0
   beaaa:	b118      	cbz	r0, beab4 <_ZN17Adafruit_VCNL40405beginEhP7TwoWire+0x1a>
   beaac:	e9dd 2100 	ldrd	r2, r1, [sp]
   beab0:	f7fe fdef 	bl	bd692 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   beab4:	60ec      	str	r4, [r5, #12]
  if (!i2c_dev->begin()) {
   beab6:	2101      	movs	r1, #1
   beab8:	4620      	mov	r0, r4
   beaba:	f7fe fe06 	bl	bd6ca <_ZN18Adafruit_I2CDevice5beginEb>
   beabe:	b128      	cbz	r0, beacc <_ZN17Adafruit_VCNL40405beginEhP7TwoWire+0x32>
  return _init();
   beac0:	4628      	mov	r0, r5
}
   beac2:	b003      	add	sp, #12
   beac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return _init();
   beac8:	f7ff bf94 	b.w	be9f4 <_ZN17Adafruit_VCNL40405_initEv>
}
   beacc:	b003      	add	sp, #12
   beace:	bd30      	pop	{r4, r5, pc}

000bead0 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   bead0:	b508      	push	{r3, lr}
   bead2:	4b02      	ldr	r3, [pc, #8]	; (beadc <os_thread_yield+0xc>)
   bead4:	681b      	ldr	r3, [r3, #0]
   bead6:	68db      	ldr	r3, [r3, #12]
   bead8:	9301      	str	r3, [sp, #4]
   beada:	bd08      	pop	{r3, pc}
   beadc:	00030248 	.word	0x00030248

000beae0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   beae0:	b508      	push	{r3, lr}
   beae2:	4b02      	ldr	r3, [pc, #8]	; (beaec <os_mutex_recursive_create+0xc>)
   beae4:	681b      	ldr	r3, [r3, #0]
   beae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   beae8:	9301      	str	r3, [sp, #4]
   beaea:	bd08      	pop	{r3, pc}
   beaec:	00030248 	.word	0x00030248

000beaf0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   beaf0:	b508      	push	{r3, lr}
   beaf2:	4b02      	ldr	r3, [pc, #8]	; (beafc <os_mutex_recursive_destroy+0xc>)
   beaf4:	681b      	ldr	r3, [r3, #0]
   beaf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   beaf8:	9301      	str	r3, [sp, #4]
   beafa:	bd08      	pop	{r3, pc}
   beafc:	00030248 	.word	0x00030248

000beb00 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   beb00:	b508      	push	{r3, lr}
   beb02:	4b02      	ldr	r3, [pc, #8]	; (beb0c <os_mutex_recursive_lock+0xc>)
   beb04:	681b      	ldr	r3, [r3, #0]
   beb06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   beb08:	9301      	str	r3, [sp, #4]
   beb0a:	bd08      	pop	{r3, pc}
   beb0c:	00030248 	.word	0x00030248

000beb10 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   beb10:	b508      	push	{r3, lr}
   beb12:	4b02      	ldr	r3, [pc, #8]	; (beb1c <os_mutex_recursive_unlock+0xc>)
   beb14:	681b      	ldr	r3, [r3, #0]
   beb16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   beb18:	9301      	str	r3, [sp, #4]
   beb1a:	bd08      	pop	{r3, pc}
   beb1c:	00030248 	.word	0x00030248

000beb20 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   beb20:	b508      	push	{r3, lr}
   beb22:	4b02      	ldr	r3, [pc, #8]	; (beb2c <HAL_RNG_GetRandomNumber+0xc>)
   beb24:	681b      	ldr	r3, [r3, #0]
   beb26:	685b      	ldr	r3, [r3, #4]
   beb28:	9301      	str	r3, [sp, #4]
   beb2a:	bd08      	pop	{r3, pc}
   beb2c:	00030218 	.word	0x00030218

000beb30 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   beb30:	b508      	push	{r3, lr}
   beb32:	4b02      	ldr	r3, [pc, #8]	; (beb3c <HAL_Delay_Microseconds+0xc>)
   beb34:	681b      	ldr	r3, [r3, #0]
   beb36:	68db      	ldr	r3, [r3, #12]
   beb38:	9301      	str	r3, [sp, #4]
   beb3a:	bd08      	pop	{r3, pc}
   beb3c:	00030218 	.word	0x00030218

000beb40 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   beb40:	b508      	push	{r3, lr}
   beb42:	4b02      	ldr	r3, [pc, #8]	; (beb4c <HAL_Timer_Get_Micro_Seconds+0xc>)
   beb44:	681b      	ldr	r3, [r3, #0]
   beb46:	691b      	ldr	r3, [r3, #16]
   beb48:	9301      	str	r3, [sp, #4]
   beb4a:	bd08      	pop	{r3, pc}
   beb4c:	00030218 	.word	0x00030218

000beb50 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   beb50:	b508      	push	{r3, lr}
   beb52:	4b02      	ldr	r3, [pc, #8]	; (beb5c <HAL_Timer_Get_Milli_Seconds+0xc>)
   beb54:	681b      	ldr	r3, [r3, #0]
   beb56:	695b      	ldr	r3, [r3, #20]
   beb58:	9301      	str	r3, [sp, #4]
   beb5a:	bd08      	pop	{r3, pc}
   beb5c:	00030218 	.word	0x00030218

000beb60 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   beb60:	b508      	push	{r3, lr}
   beb62:	4b02      	ldr	r3, [pc, #8]	; (beb6c <hal_gpio_mode+0xc>)
   beb64:	681b      	ldr	r3, [r3, #0]
   beb66:	689b      	ldr	r3, [r3, #8]
   beb68:	9301      	str	r3, [sp, #4]
   beb6a:	bd08      	pop	{r3, pc}
   beb6c:	0003022c 	.word	0x0003022c

000beb70 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   beb70:	b508      	push	{r3, lr}
   beb72:	4b02      	ldr	r3, [pc, #8]	; (beb7c <hal_gpio_get_mode+0xc>)
   beb74:	681b      	ldr	r3, [r3, #0]
   beb76:	68db      	ldr	r3, [r3, #12]
   beb78:	9301      	str	r3, [sp, #4]
   beb7a:	bd08      	pop	{r3, pc}
   beb7c:	0003022c 	.word	0x0003022c

000beb80 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   beb80:	b508      	push	{r3, lr}
   beb82:	4b02      	ldr	r3, [pc, #8]	; (beb8c <hal_gpio_write+0xc>)
   beb84:	681b      	ldr	r3, [r3, #0]
   beb86:	691b      	ldr	r3, [r3, #16]
   beb88:	9301      	str	r3, [sp, #4]
   beb8a:	bd08      	pop	{r3, pc}
   beb8c:	0003022c 	.word	0x0003022c

000beb90 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   beb90:	b508      	push	{r3, lr}
   beb92:	4b02      	ldr	r3, [pc, #8]	; (beb9c <hal_gpio_read+0xc>)
   beb94:	681b      	ldr	r3, [r3, #0]
   beb96:	695b      	ldr	r3, [r3, #20]
   beb98:	9301      	str	r3, [sp, #4]
   beb9a:	bd08      	pop	{r3, pc}
   beb9c:	0003022c 	.word	0x0003022c

000beba0 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   beba0:	b508      	push	{r3, lr}
   beba2:	4b02      	ldr	r3, [pc, #8]	; (bebac <hal_i2c_set_speed+0xc>)
   beba4:	681b      	ldr	r3, [r3, #0]
   beba6:	681b      	ldr	r3, [r3, #0]
   beba8:	9301      	str	r3, [sp, #4]
   bebaa:	bd08      	pop	{r3, pc}
   bebac:	00030228 	.word	0x00030228

000bebb0 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bebb0:	b508      	push	{r3, lr}
   bebb2:	4b02      	ldr	r3, [pc, #8]	; (bebbc <hal_i2c_begin+0xc>)
   bebb4:	681b      	ldr	r3, [r3, #0]
   bebb6:	68db      	ldr	r3, [r3, #12]
   bebb8:	9301      	str	r3, [sp, #4]
   bebba:	bd08      	pop	{r3, pc}
   bebbc:	00030228 	.word	0x00030228

000bebc0 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bebc0:	b508      	push	{r3, lr}
   bebc2:	4b02      	ldr	r3, [pc, #8]	; (bebcc <hal_i2c_begin_transmission+0xc>)
   bebc4:	681b      	ldr	r3, [r3, #0]
   bebc6:	699b      	ldr	r3, [r3, #24]
   bebc8:	9301      	str	r3, [sp, #4]
   bebca:	bd08      	pop	{r3, pc}
   bebcc:	00030228 	.word	0x00030228

000bebd0 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bebd0:	b508      	push	{r3, lr}
   bebd2:	4b02      	ldr	r3, [pc, #8]	; (bebdc <hal_i2c_end_transmission+0xc>)
   bebd4:	681b      	ldr	r3, [r3, #0]
   bebd6:	69db      	ldr	r3, [r3, #28]
   bebd8:	9301      	str	r3, [sp, #4]
   bebda:	bd08      	pop	{r3, pc}
   bebdc:	00030228 	.word	0x00030228

000bebe0 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bebe0:	b508      	push	{r3, lr}
   bebe2:	4b02      	ldr	r3, [pc, #8]	; (bebec <hal_i2c_write+0xc>)
   bebe4:	681b      	ldr	r3, [r3, #0]
   bebe6:	6a1b      	ldr	r3, [r3, #32]
   bebe8:	9301      	str	r3, [sp, #4]
   bebea:	bd08      	pop	{r3, pc}
   bebec:	00030228 	.word	0x00030228

000bebf0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bebf0:	b508      	push	{r3, lr}
   bebf2:	4b02      	ldr	r3, [pc, #8]	; (bebfc <hal_i2c_available+0xc>)
   bebf4:	681b      	ldr	r3, [r3, #0]
   bebf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bebf8:	9301      	str	r3, [sp, #4]
   bebfa:	bd08      	pop	{r3, pc}
   bebfc:	00030228 	.word	0x00030228

000bec00 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bec00:	b508      	push	{r3, lr}
   bec02:	4b02      	ldr	r3, [pc, #8]	; (bec0c <hal_i2c_read+0xc>)
   bec04:	681b      	ldr	r3, [r3, #0]
   bec06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bec08:	9301      	str	r3, [sp, #4]
   bec0a:	bd08      	pop	{r3, pc}
   bec0c:	00030228 	.word	0x00030228

000bec10 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bec10:	b508      	push	{r3, lr}
   bec12:	4b02      	ldr	r3, [pc, #8]	; (bec1c <hal_i2c_peek+0xc>)
   bec14:	681b      	ldr	r3, [r3, #0]
   bec16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bec18:	9301      	str	r3, [sp, #4]
   bec1a:	bd08      	pop	{r3, pc}
   bec1c:	00030228 	.word	0x00030228

000bec20 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bec20:	b508      	push	{r3, lr}
   bec22:	4b02      	ldr	r3, [pc, #8]	; (bec2c <hal_i2c_flush+0xc>)
   bec24:	681b      	ldr	r3, [r3, #0]
   bec26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bec28:	9301      	str	r3, [sp, #4]
   bec2a:	bd08      	pop	{r3, pc}
   bec2c:	00030228 	.word	0x00030228

000bec30 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bec30:	b508      	push	{r3, lr}
   bec32:	4b02      	ldr	r3, [pc, #8]	; (bec3c <hal_i2c_is_enabled+0xc>)
   bec34:	681b      	ldr	r3, [r3, #0]
   bec36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bec38:	9301      	str	r3, [sp, #4]
   bec3a:	bd08      	pop	{r3, pc}
   bec3c:	00030228 	.word	0x00030228

000bec40 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bec40:	b508      	push	{r3, lr}
   bec42:	4b02      	ldr	r3, [pc, #8]	; (bec4c <hal_i2c_init+0xc>)
   bec44:	681b      	ldr	r3, [r3, #0]
   bec46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bec48:	9301      	str	r3, [sp, #4]
   bec4a:	bd08      	pop	{r3, pc}
   bec4c:	00030228 	.word	0x00030228

000bec50 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bec50:	b508      	push	{r3, lr}
   bec52:	4b02      	ldr	r3, [pc, #8]	; (bec5c <hal_i2c_request_ex+0xc>)
   bec54:	681b      	ldr	r3, [r3, #0]
   bec56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bec58:	9301      	str	r3, [sp, #4]
   bec5a:	bd08      	pop	{r3, pc}
   bec5c:	00030228 	.word	0x00030228

000bec60 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bec60:	b508      	push	{r3, lr}
   bec62:	4b02      	ldr	r3, [pc, #8]	; (bec6c <inet_inet_ntop+0xc>)
   bec64:	681b      	ldr	r3, [r3, #0]
   bec66:	695b      	ldr	r3, [r3, #20]
   bec68:	9301      	str	r3, [sp, #4]
   bec6a:	bd08      	pop	{r3, pc}
   bec6c:	00030264 	.word	0x00030264

000bec70 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bec70:	b508      	push	{r3, lr}
   bec72:	4b02      	ldr	r3, [pc, #8]	; (bec7c <netdb_freeaddrinfo+0xc>)
   bec74:	681b      	ldr	r3, [r3, #0]
   bec76:	689b      	ldr	r3, [r3, #8]
   bec78:	9301      	str	r3, [sp, #4]
   bec7a:	bd08      	pop	{r3, pc}
   bec7c:	00030268 	.word	0x00030268

000bec80 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bec80:	b508      	push	{r3, lr}
   bec82:	4b02      	ldr	r3, [pc, #8]	; (bec8c <netdb_getaddrinfo+0xc>)
   bec84:	681b      	ldr	r3, [r3, #0]
   bec86:	68db      	ldr	r3, [r3, #12]
   bec88:	9301      	str	r3, [sp, #4]
   bec8a:	bd08      	pop	{r3, pc}
   bec8c:	00030268 	.word	0x00030268

000bec90 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bec90:	b508      	push	{r3, lr}
   bec92:	4b02      	ldr	r3, [pc, #8]	; (bec9c <hal_spi_begin+0xc>)
   bec94:	681b      	ldr	r3, [r3, #0]
   bec96:	681b      	ldr	r3, [r3, #0]
   bec98:	9301      	str	r3, [sp, #4]
   bec9a:	bd08      	pop	{r3, pc}
   bec9c:	00030230 	.word	0x00030230

000beca0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   beca0:	b508      	push	{r3, lr}
   beca2:	4b02      	ldr	r3, [pc, #8]	; (becac <hal_spi_init+0xc>)
   beca4:	681b      	ldr	r3, [r3, #0]
   beca6:	69db      	ldr	r3, [r3, #28]
   beca8:	9301      	str	r3, [sp, #4]
   becaa:	bd08      	pop	{r3, pc}
   becac:	00030230 	.word	0x00030230

000becb0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   becb0:	b508      	push	{r3, lr}
   becb2:	4b02      	ldr	r3, [pc, #8]	; (becbc <hal_spi_is_enabled+0xc>)
   becb4:	681b      	ldr	r3, [r3, #0]
   becb6:	6a1b      	ldr	r3, [r3, #32]
   becb8:	9301      	str	r3, [sp, #4]
   becba:	bd08      	pop	{r3, pc}
   becbc:	00030230 	.word	0x00030230

000becc0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   becc0:	b508      	push	{r3, lr}
   becc2:	4b02      	ldr	r3, [pc, #8]	; (beccc <hal_spi_info+0xc>)
   becc4:	681b      	ldr	r3, [r3, #0]
   becc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   becc8:	9301      	str	r3, [sp, #4]
   becca:	bd08      	pop	{r3, pc}
   beccc:	00030230 	.word	0x00030230

000becd0 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   becd0:	b508      	push	{r3, lr}
   becd2:	4b02      	ldr	r3, [pc, #8]	; (becdc <hal_spi_transfer_dma+0xc>)
   becd4:	681b      	ldr	r3, [r3, #0]
   becd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   becd8:	9301      	str	r3, [sp, #4]
   becda:	bd08      	pop	{r3, pc}
   becdc:	00030230 	.word	0x00030230

000bece0 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   bece0:	b508      	push	{r3, lr}
   bece2:	4b02      	ldr	r3, [pc, #8]	; (becec <hal_spi_transfer_dma_status+0xc>)
   bece4:	681b      	ldr	r3, [r3, #0]
   bece6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bece8:	9301      	str	r3, [sp, #4]
   becea:	bd08      	pop	{r3, pc}
   becec:	00030230 	.word	0x00030230

000becf0 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   becf0:	b508      	push	{r3, lr}
   becf2:	4b02      	ldr	r3, [pc, #8]	; (becfc <hal_spi_set_settings+0xc>)
   becf4:	681b      	ldr	r3, [r3, #0]
   becf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   becf8:	9301      	str	r3, [sp, #4]
   becfa:	bd08      	pop	{r3, pc}
   becfc:	00030230 	.word	0x00030230

000bed00 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bed00:	b508      	push	{r3, lr}
   bed02:	4b02      	ldr	r3, [pc, #8]	; (bed0c <hal_spi_acquire+0xc>)
   bed04:	681b      	ldr	r3, [r3, #0]
   bed06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bed08:	9301      	str	r3, [sp, #4]
   bed0a:	bd08      	pop	{r3, pc}
   bed0c:	00030230 	.word	0x00030230

000bed10 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bed10:	b508      	push	{r3, lr}
   bed12:	4b02      	ldr	r3, [pc, #8]	; (bed1c <hal_spi_release+0xc>)
   bed14:	681b      	ldr	r3, [r3, #0]
   bed16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bed18:	9301      	str	r3, [sp, #4]
   bed1a:	bd08      	pop	{r3, pc}
   bed1c:	00030230 	.word	0x00030230

000bed20 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bed20:	b508      	push	{r3, lr}
   bed22:	4b02      	ldr	r3, [pc, #8]	; (bed2c <hal_usart_end+0xc>)
   bed24:	681b      	ldr	r3, [r3, #0]
   bed26:	689b      	ldr	r3, [r3, #8]
   bed28:	9301      	str	r3, [sp, #4]
   bed2a:	bd08      	pop	{r3, pc}
   bed2c:	0003023c 	.word	0x0003023c

000bed30 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bed30:	b508      	push	{r3, lr}
   bed32:	4b02      	ldr	r3, [pc, #8]	; (bed3c <hal_usart_write+0xc>)
   bed34:	681b      	ldr	r3, [r3, #0]
   bed36:	68db      	ldr	r3, [r3, #12]
   bed38:	9301      	str	r3, [sp, #4]
   bed3a:	bd08      	pop	{r3, pc}
   bed3c:	0003023c 	.word	0x0003023c

000bed40 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bed40:	b508      	push	{r3, lr}
   bed42:	4b02      	ldr	r3, [pc, #8]	; (bed4c <hal_usart_available+0xc>)
   bed44:	681b      	ldr	r3, [r3, #0]
   bed46:	691b      	ldr	r3, [r3, #16]
   bed48:	9301      	str	r3, [sp, #4]
   bed4a:	bd08      	pop	{r3, pc}
   bed4c:	0003023c 	.word	0x0003023c

000bed50 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bed50:	b508      	push	{r3, lr}
   bed52:	4b02      	ldr	r3, [pc, #8]	; (bed5c <hal_usart_read+0xc>)
   bed54:	681b      	ldr	r3, [r3, #0]
   bed56:	695b      	ldr	r3, [r3, #20]
   bed58:	9301      	str	r3, [sp, #4]
   bed5a:	bd08      	pop	{r3, pc}
   bed5c:	0003023c 	.word	0x0003023c

000bed60 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bed60:	b508      	push	{r3, lr}
   bed62:	4b02      	ldr	r3, [pc, #8]	; (bed6c <hal_usart_peek+0xc>)
   bed64:	681b      	ldr	r3, [r3, #0]
   bed66:	699b      	ldr	r3, [r3, #24]
   bed68:	9301      	str	r3, [sp, #4]
   bed6a:	bd08      	pop	{r3, pc}
   bed6c:	0003023c 	.word	0x0003023c

000bed70 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bed70:	b508      	push	{r3, lr}
   bed72:	4b02      	ldr	r3, [pc, #8]	; (bed7c <hal_usart_flush+0xc>)
   bed74:	681b      	ldr	r3, [r3, #0]
   bed76:	69db      	ldr	r3, [r3, #28]
   bed78:	9301      	str	r3, [sp, #4]
   bed7a:	bd08      	pop	{r3, pc}
   bed7c:	0003023c 	.word	0x0003023c

000bed80 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bed80:	b508      	push	{r3, lr}
   bed82:	4b02      	ldr	r3, [pc, #8]	; (bed8c <hal_usart_is_enabled+0xc>)
   bed84:	681b      	ldr	r3, [r3, #0]
   bed86:	6a1b      	ldr	r3, [r3, #32]
   bed88:	9301      	str	r3, [sp, #4]
   bed8a:	bd08      	pop	{r3, pc}
   bed8c:	0003023c 	.word	0x0003023c

000bed90 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bed90:	b508      	push	{r3, lr}
   bed92:	4b02      	ldr	r3, [pc, #8]	; (bed9c <hal_usart_available_data_for_write+0xc>)
   bed94:	681b      	ldr	r3, [r3, #0]
   bed96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bed98:	9301      	str	r3, [sp, #4]
   bed9a:	bd08      	pop	{r3, pc}
   bed9c:	0003023c 	.word	0x0003023c

000beda0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   beda0:	b508      	push	{r3, lr}
   beda2:	4b02      	ldr	r3, [pc, #8]	; (bedac <hal_usart_begin_config+0xc>)
   beda4:	681b      	ldr	r3, [r3, #0]
   beda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   beda8:	9301      	str	r3, [sp, #4]
   bedaa:	bd08      	pop	{r3, pc}
   bedac:	0003023c 	.word	0x0003023c

000bedb0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bedb0:	b508      	push	{r3, lr}
   bedb2:	4b02      	ldr	r3, [pc, #8]	; (bedbc <hal_usart_init_ex+0xc>)
   bedb4:	681b      	ldr	r3, [r3, #0]
   bedb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bedb8:	9301      	str	r3, [sp, #4]
   bedba:	bd08      	pop	{r3, pc}
   bedbc:	0003023c 	.word	0x0003023c

000bedc0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bedc0:	b508      	push	{r3, lr}
   bedc2:	4b02      	ldr	r3, [pc, #8]	; (bedcc <HAL_USB_USART_Init+0xc>)
   bedc4:	681b      	ldr	r3, [r3, #0]
   bedc6:	681b      	ldr	r3, [r3, #0]
   bedc8:	9301      	str	r3, [sp, #4]
   bedca:	bd08      	pop	{r3, pc}
   bedcc:	0003024c 	.word	0x0003024c

000bedd0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bedd0:	b508      	push	{r3, lr}
   bedd2:	4b02      	ldr	r3, [pc, #8]	; (beddc <HAL_USB_USART_Begin+0xc>)
   bedd4:	681b      	ldr	r3, [r3, #0]
   bedd6:	685b      	ldr	r3, [r3, #4]
   bedd8:	9301      	str	r3, [sp, #4]
   bedda:	bd08      	pop	{r3, pc}
   beddc:	0003024c 	.word	0x0003024c

000bede0 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bede0:	b508      	push	{r3, lr}
   bede2:	4b02      	ldr	r3, [pc, #8]	; (bedec <HAL_USB_USART_End+0xc>)
   bede4:	681b      	ldr	r3, [r3, #0]
   bede6:	689b      	ldr	r3, [r3, #8]
   bede8:	9301      	str	r3, [sp, #4]
   bedea:	bd08      	pop	{r3, pc}
   bedec:	0003024c 	.word	0x0003024c

000bedf0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN_WRAP(4, hal_usb, HAL_USB_USART_Available_Data, protected, int32_t(HAL_USB_USART_Serial))
   bedf0:	b508      	push	{r3, lr}
   bedf2:	4b02      	ldr	r3, [pc, #8]	; (bedfc <HAL_USB_USART_Available_Data+0xc>)
   bedf4:	681b      	ldr	r3, [r3, #0]
   bedf6:	691b      	ldr	r3, [r3, #16]
   bedf8:	9301      	str	r3, [sp, #4]
   bedfa:	bd08      	pop	{r3, pc}
   bedfc:	0003024c 	.word	0x0003024c

000bee00 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN_WRAP(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, protected, int32_t(HAL_USB_USART_Serial))
   bee00:	b508      	push	{r3, lr}
   bee02:	4b02      	ldr	r3, [pc, #8]	; (bee0c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bee04:	681b      	ldr	r3, [r3, #0]
   bee06:	695b      	ldr	r3, [r3, #20]
   bee08:	9301      	str	r3, [sp, #4]
   bee0a:	bd08      	pop	{r3, pc}
   bee0c:	0003024c 	.word	0x0003024c

000bee10 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN_WRAP(6, hal_usb, HAL_USB_USART_Receive_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
   bee10:	b508      	push	{r3, lr}
   bee12:	4b02      	ldr	r3, [pc, #8]	; (bee1c <HAL_USB_USART_Receive_Data+0xc>)
   bee14:	681b      	ldr	r3, [r3, #0]
   bee16:	699b      	ldr	r3, [r3, #24]
   bee18:	9301      	str	r3, [sp, #4]
   bee1a:	bd08      	pop	{r3, pc}
   bee1c:	0003024c 	.word	0x0003024c

000bee20 <HAL_USB_USART_Send_Data>:
DYNALIB_FN_WRAP(7, hal_usb, HAL_USB_USART_Send_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
   bee20:	b508      	push	{r3, lr}
   bee22:	4b02      	ldr	r3, [pc, #8]	; (bee2c <HAL_USB_USART_Send_Data+0xc>)
   bee24:	681b      	ldr	r3, [r3, #0]
   bee26:	69db      	ldr	r3, [r3, #28]
   bee28:	9301      	str	r3, [sp, #4]
   bee2a:	bd08      	pop	{r3, pc}
   bee2c:	0003024c 	.word	0x0003024c

000bee30 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN_WRAP(8, hal_usb, HAL_USB_USART_Flush_Data, protected, void(HAL_USB_USART_Serial))
   bee30:	b508      	push	{r3, lr}
   bee32:	4b02      	ldr	r3, [pc, #8]	; (bee3c <HAL_USB_USART_Flush_Data+0xc>)
   bee34:	681b      	ldr	r3, [r3, #0]
   bee36:	6a1b      	ldr	r3, [r3, #32]
   bee38:	9301      	str	r3, [sp, #4]
   bee3a:	bd08      	pop	{r3, pc}
   bee3c:	0003024c 	.word	0x0003024c

000bee40 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bee40:	b508      	push	{r3, lr}
   bee42:	4b02      	ldr	r3, [pc, #8]	; (bee4c <panic_+0xc>)
   bee44:	681b      	ldr	r3, [r3, #0]
   bee46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bee48:	9301      	str	r3, [sp, #4]
   bee4a:	bd08      	pop	{r3, pc}
   bee4c:	00030260 	.word	0x00030260

000bee50 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bee50:	b508      	push	{r3, lr}
   bee52:	4b02      	ldr	r3, [pc, #8]	; (bee5c <log_level_name+0xc>)
   bee54:	681b      	ldr	r3, [r3, #0]
   bee56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bee58:	9301      	str	r3, [sp, #4]
   bee5a:	bd08      	pop	{r3, pc}
   bee5c:	00030260 	.word	0x00030260

000bee60 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bee60:	b508      	push	{r3, lr}
   bee62:	4b02      	ldr	r3, [pc, #8]	; (bee6c <log_set_callbacks+0xc>)
   bee64:	681b      	ldr	r3, [r3, #0]
   bee66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bee68:	9301      	str	r3, [sp, #4]
   bee6a:	bd08      	pop	{r3, pc}
   bee6c:	00030260 	.word	0x00030260

000bee70 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bee70:	b508      	push	{r3, lr}
   bee72:	4b02      	ldr	r3, [pc, #8]	; (bee7c <set_system_mode+0xc>)
   bee74:	681b      	ldr	r3, [r3, #0]
   bee76:	685b      	ldr	r3, [r3, #4]
   bee78:	9301      	str	r3, [sp, #4]
   bee7a:	bd08      	pop	{r3, pc}
   bee7c:	00030220 	.word	0x00030220

000bee80 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler_deprecated, void(void*))
DYNALIB_FN(3, system, system_firmwareUpdate_deprecated, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer_deprecated, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bee80:	b508      	push	{r3, lr}
   bee82:	4b02      	ldr	r3, [pc, #8]	; (bee8c <system_delay_ms+0xc>)
   bee84:	681b      	ldr	r3, [r3, #0]
   bee86:	695b      	ldr	r3, [r3, #20]
   bee88:	9301      	str	r3, [sp, #4]
   bee8a:	bd08      	pop	{r3, pc}
   bee8c:	00030220 	.word	0x00030220

000bee90 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bee90:	b508      	push	{r3, lr}
   bee92:	4b03      	ldr	r3, [pc, #12]	; (beea0 <system_ctrl_set_app_request_handler+0x10>)
   bee94:	681b      	ldr	r3, [r3, #0]
   bee96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bee9a:	9301      	str	r3, [sp, #4]
   bee9c:	bd08      	pop	{r3, pc}
   bee9e:	0000      	.short	0x0000
   beea0:	00030220 	.word	0x00030220

000beea4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   beea4:	b508      	push	{r3, lr}
   beea6:	4b03      	ldr	r3, [pc, #12]	; (beeb4 <system_ctrl_set_result+0x10>)
   beea8:	681b      	ldr	r3, [r3, #0]
   beeaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   beeae:	9301      	str	r3, [sp, #4]
   beeb0:	bd08      	pop	{r3, pc}
   beeb2:	0000      	.short	0x0000
   beeb4:	00030220 	.word	0x00030220

000beeb8 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   beeb8:	b508      	push	{r3, lr}
   beeba:	4b03      	ldr	r3, [pc, #12]	; (beec8 <system_power_management_set_config+0x10>)
   beebc:	681b      	ldr	r3, [r3, #0]
   beebe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   beec2:	9301      	str	r3, [sp, #4]
   beec4:	bd08      	pop	{r3, pc}
   beec6:	0000      	.short	0x0000
   beec8:	00030220 	.word	0x00030220

000beecc <system_power_management_get_config>:

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX1 + 2, system, system_power_management_get_config, int(hal_power_config*, void*))
   beecc:	b508      	push	{r3, lr}
   beece:	4b03      	ldr	r3, [pc, #12]	; (beedc <system_power_management_get_config+0x10>)
   beed0:	681b      	ldr	r3, [r3, #0]
   beed2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   beed6:	9301      	str	r3, [sp, #4]
   beed8:	bd08      	pop	{r3, pc}
   beeda:	0000      	.short	0x0000
   beedc:	00030220 	.word	0x00030220

000beee0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   beee0:	b508      	push	{r3, lr}
   beee2:	4b02      	ldr	r3, [pc, #8]	; (beeec <spark_set_random_seed_from_cloud_handler+0xc>)
   beee4:	681b      	ldr	r3, [r3, #0]
   beee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   beee8:	9301      	str	r3, [sp, #4]
   beeea:	bd08      	pop	{r3, pc}
   beeec:	00030244 	.word	0x00030244

000beef0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   beef0:	b508      	push	{r3, lr}
   beef2:	4b02      	ldr	r3, [pc, #8]	; (beefc <network_connect+0xc>)
   beef4:	681b      	ldr	r3, [r3, #0]
   beef6:	685b      	ldr	r3, [r3, #4]
   beef8:	9301      	str	r3, [sp, #4]
   beefa:	bd08      	pop	{r3, pc}
   beefc:	00030240 	.word	0x00030240

000bef00 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bef00:	b508      	push	{r3, lr}
   bef02:	4b02      	ldr	r3, [pc, #8]	; (bef0c <network_connecting+0xc>)
   bef04:	681b      	ldr	r3, [r3, #0]
   bef06:	689b      	ldr	r3, [r3, #8]
   bef08:	9301      	str	r3, [sp, #4]
   bef0a:	bd08      	pop	{r3, pc}
   bef0c:	00030240 	.word	0x00030240

000bef10 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bef10:	b508      	push	{r3, lr}
   bef12:	4b02      	ldr	r3, [pc, #8]	; (bef1c <network_disconnect+0xc>)
   bef14:	681b      	ldr	r3, [r3, #0]
   bef16:	68db      	ldr	r3, [r3, #12]
   bef18:	9301      	str	r3, [sp, #4]
   bef1a:	bd08      	pop	{r3, pc}
   bef1c:	00030240 	.word	0x00030240

000bef20 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bef20:	b508      	push	{r3, lr}
   bef22:	4b02      	ldr	r3, [pc, #8]	; (bef2c <network_ready+0xc>)
   bef24:	681b      	ldr	r3, [r3, #0]
   bef26:	691b      	ldr	r3, [r3, #16]
   bef28:	9301      	str	r3, [sp, #4]
   bef2a:	bd08      	pop	{r3, pc}
   bef2c:	00030240 	.word	0x00030240

000bef30 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bef30:	b508      	push	{r3, lr}
   bef32:	4b02      	ldr	r3, [pc, #8]	; (bef3c <network_on+0xc>)
   bef34:	681b      	ldr	r3, [r3, #0]
   bef36:	695b      	ldr	r3, [r3, #20]
   bef38:	9301      	str	r3, [sp, #4]
   bef3a:	bd08      	pop	{r3, pc}
   bef3c:	00030240 	.word	0x00030240

000bef40 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bef40:	b508      	push	{r3, lr}
   bef42:	4b02      	ldr	r3, [pc, #8]	; (bef4c <network_off+0xc>)
   bef44:	681b      	ldr	r3, [r3, #0]
   bef46:	699b      	ldr	r3, [r3, #24]
   bef48:	9301      	str	r3, [sp, #4]
   bef4a:	bd08      	pop	{r3, pc}
   bef4c:	00030240 	.word	0x00030240

000bef50 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bef50:	b508      	push	{r3, lr}
   bef52:	4b02      	ldr	r3, [pc, #8]	; (bef5c <network_listen+0xc>)
   bef54:	681b      	ldr	r3, [r3, #0]
   bef56:	69db      	ldr	r3, [r3, #28]
   bef58:	9301      	str	r3, [sp, #4]
   bef5a:	bd08      	pop	{r3, pc}
   bef5c:	00030240 	.word	0x00030240

000bef60 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bef60:	b508      	push	{r3, lr}
   bef62:	4b02      	ldr	r3, [pc, #8]	; (bef6c <network_listening+0xc>)
   bef64:	681b      	ldr	r3, [r3, #0]
   bef66:	6a1b      	ldr	r3, [r3, #32]
   bef68:	9301      	str	r3, [sp, #4]
   bef6a:	bd08      	pop	{r3, pc}
   bef6c:	00030240 	.word	0x00030240

000bef70 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bef70:	b508      	push	{r3, lr}
   bef72:	4b02      	ldr	r3, [pc, #8]	; (bef7c <network_set_listen_timeout+0xc>)
   bef74:	681b      	ldr	r3, [r3, #0]
   bef76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bef78:	9301      	str	r3, [sp, #4]
   bef7a:	bd08      	pop	{r3, pc}
   bef7c:	00030240 	.word	0x00030240

000bef80 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   bef80:	b508      	push	{r3, lr}
   bef82:	4b02      	ldr	r3, [pc, #8]	; (bef8c <network_get_listen_timeout+0xc>)
   bef84:	681b      	ldr	r3, [r3, #0]
   bef86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bef88:	9301      	str	r3, [sp, #4]
   bef8a:	bd08      	pop	{r3, pc}
   bef8c:	00030240 	.word	0x00030240

000bef90 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bef90:	b508      	push	{r3, lr}
   bef92:	4b02      	ldr	r3, [pc, #8]	; (bef9c <network_is_on+0xc>)
   bef94:	681b      	ldr	r3, [r3, #0]
   bef96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bef98:	9301      	str	r3, [sp, #4]
   bef9a:	bd08      	pop	{r3, pc}
   bef9c:	00030240 	.word	0x00030240

000befa0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   befa0:	b508      	push	{r3, lr}
   befa2:	4b02      	ldr	r3, [pc, #8]	; (befac <network_is_off+0xc>)
   befa4:	681b      	ldr	r3, [r3, #0]
   befa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   befa8:	9301      	str	r3, [sp, #4]
   befaa:	bd08      	pop	{r3, pc}
   befac:	00030240 	.word	0x00030240

000befb0 <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
   befb0:	b508      	push	{r3, lr}
   befb2:	4b02      	ldr	r3, [pc, #8]	; (befbc <network_prefer+0xc>)
   befb4:	681b      	ldr	r3, [r3, #0]
   befb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   befb8:	9301      	str	r3, [sp, #4]
   befba:	bd08      	pop	{r3, pc}
   befbc:	00030240 	.word	0x00030240

000befc0 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
   befc0:	b508      	push	{r3, lr}
   befc2:	4b02      	ldr	r3, [pc, #8]	; (befcc <network_is_preferred+0xc>)
   befc4:	681b      	ldr	r3, [r3, #0]
   befc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   befc8:	9301      	str	r3, [sp, #4]
   befca:	bd08      	pop	{r3, pc}
   befcc:	00030240 	.word	0x00030240

000befd0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || defined(DYNALIB_IMPORT)

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   befd0:	b508      	push	{r3, lr}
   befd2:	4b02      	ldr	r3, [pc, #8]	; (befdc <malloc+0xc>)
   befd4:	681b      	ldr	r3, [r3, #0]
   befd6:	681b      	ldr	r3, [r3, #0]
   befd8:	9301      	str	r3, [sp, #4]
   befda:	bd08      	pop	{r3, pc}
   befdc:	0003021c 	.word	0x0003021c

000befe0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   befe0:	b508      	push	{r3, lr}
   befe2:	4b02      	ldr	r3, [pc, #8]	; (befec <free+0xc>)
   befe4:	681b      	ldr	r3, [r3, #0]
   befe6:	685b      	ldr	r3, [r3, #4]
   befe8:	9301      	str	r3, [sp, #4]
   befea:	bd08      	pop	{r3, pc}
   befec:	0003021c 	.word	0x0003021c

000beff0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   beff0:	b508      	push	{r3, lr}
   beff2:	4b02      	ldr	r3, [pc, #8]	; (beffc <realloc+0xc>)
   beff4:	681b      	ldr	r3, [r3, #0]
   beff6:	689b      	ldr	r3, [r3, #8]
   beff8:	9301      	str	r3, [sp, #4]
   beffa:	bd08      	pop	{r3, pc}
   beffc:	0003021c 	.word	0x0003021c

000bf000 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bf000:	b508      	push	{r3, lr}
   bf002:	4b02      	ldr	r3, [pc, #8]	; (bf00c <vsnprintf+0xc>)
   bf004:	681b      	ldr	r3, [r3, #0]
   bf006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bf008:	9301      	str	r3, [sp, #4]
   bf00a:	bd08      	pop	{r3, pc}
   bf00c:	0003021c 	.word	0x0003021c

000bf010 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bf010:	b508      	push	{r3, lr}
   bf012:	4b02      	ldr	r3, [pc, #8]	; (bf01c <abort+0xc>)
   bf014:	681b      	ldr	r3, [r3, #0]
   bf016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bf018:	9301      	str	r3, [sp, #4]
   bf01a:	bd08      	pop	{r3, pc}
   bf01c:	0003021c 	.word	0x0003021c

000bf020 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bf020:	b508      	push	{r3, lr}
   bf022:	4b02      	ldr	r3, [pc, #8]	; (bf02c <_malloc_r+0xc>)
   bf024:	681b      	ldr	r3, [r3, #0]
   bf026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bf028:	9301      	str	r3, [sp, #4]
   bf02a:	bd08      	pop	{r3, pc}
   bf02c:	0003021c 	.word	0x0003021c

000bf030 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bf030:	b508      	push	{r3, lr}
   bf032:	4b02      	ldr	r3, [pc, #8]	; (bf03c <__errno+0xc>)
   bf034:	681b      	ldr	r3, [r3, #0]
   bf036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bf038:	9301      	str	r3, [sp, #4]
   bf03a:	bd08      	pop	{r3, pc}
   bf03c:	0003021c 	.word	0x0003021c

000bf040 <__assert_func>:

#if defined(DYNALIB_EXPORT) || defined(DYNALIB_IMPORT)
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bf040:	b508      	push	{r3, lr}
   bf042:	4b02      	ldr	r3, [pc, #8]	; (bf04c <__assert_func+0xc>)
   bf044:	681b      	ldr	r3, [r3, #0]
   bf046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bf048:	9301      	str	r3, [sp, #4]
   bf04a:	bd08      	pop	{r3, pc}
   bf04c:	0003021c 	.word	0x0003021c

000bf050 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   bf050:	b508      	push	{r3, lr}
   bf052:	4b02      	ldr	r3, [pc, #8]	; (bf05c <newlib_impure_ptr_callback+0xc>)
   bf054:	681b      	ldr	r3, [r3, #0]
   bf056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bf058:	9301      	str	r3, [sp, #4]
   bf05a:	bd08      	pop	{r3, pc}
   bf05c:	0003021c 	.word	0x0003021c

000bf060 <__cxa_guard_acquire>:

DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
DYNALIB_FN(22, rt, __cxa_guard_acquire, int(__guard*))
   bf060:	b508      	push	{r3, lr}
   bf062:	4b02      	ldr	r3, [pc, #8]	; (bf06c <__cxa_guard_acquire+0xc>)
   bf064:	681b      	ldr	r3, [r3, #0]
   bf066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bf068:	9301      	str	r3, [sp, #4]
   bf06a:	bd08      	pop	{r3, pc}
   bf06c:	0003021c 	.word	0x0003021c

000bf070 <__cxa_guard_release>:
DYNALIB_FN(23, rt, __cxa_guard_release, void(__guard*))
   bf070:	b508      	push	{r3, lr}
   bf072:	4b02      	ldr	r3, [pc, #8]	; (bf07c <__cxa_guard_release+0xc>)
   bf074:	681b      	ldr	r3, [r3, #0]
   bf076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bf078:	9301      	str	r3, [sp, #4]
   bf07a:	bd08      	pop	{r3, pc}
   bf07c:	0003021c 	.word	0x0003021c

000bf080 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bf080:	2100      	movs	r1, #0
   bf082:	f7ff befd 	b.w	bee80 <system_delay_ms>

000bf086 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   bf086:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   bf088:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   bf08a:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   bf08c:	b17c      	cbz	r4, bf0ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   bf08e:	6863      	ldr	r3, [r4, #4]
   bf090:	3b01      	subs	r3, #1
   bf092:	6063      	str	r3, [r4, #4]
   bf094:	b95b      	cbnz	r3, bf0ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   bf096:	6823      	ldr	r3, [r4, #0]
   bf098:	4620      	mov	r0, r4
   bf09a:	689b      	ldr	r3, [r3, #8]
   bf09c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bf09e:	68a3      	ldr	r3, [r4, #8]
   bf0a0:	3b01      	subs	r3, #1
   bf0a2:	60a3      	str	r3, [r4, #8]
   bf0a4:	b91b      	cbnz	r3, bf0ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   bf0a6:	6823      	ldr	r3, [r4, #0]
   bf0a8:	4620      	mov	r0, r4
   bf0aa:	68db      	ldr	r3, [r3, #12]
   bf0ac:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   bf0ae:	4628      	mov	r0, r5
   bf0b0:	bd38      	pop	{r3, r4, r5, pc}

000bf0b2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   bf0b2:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   bf0b4:	6843      	ldr	r3, [r0, #4]
   bf0b6:	3b01      	subs	r3, #1
    {
   bf0b8:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   bf0ba:	6043      	str	r3, [r0, #4]
   bf0bc:	b963      	cbnz	r3, bf0d8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   bf0be:	6803      	ldr	r3, [r0, #0]
   bf0c0:	689b      	ldr	r3, [r3, #8]
   bf0c2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bf0c4:	68a3      	ldr	r3, [r4, #8]
   bf0c6:	3b01      	subs	r3, #1
   bf0c8:	60a3      	str	r3, [r4, #8]
   bf0ca:	b92b      	cbnz	r3, bf0d8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   bf0cc:	6823      	ldr	r3, [r4, #0]
   bf0ce:	4620      	mov	r0, r4
   bf0d0:	68db      	ldr	r3, [r3, #12]
    }
   bf0d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   bf0d6:	4718      	bx	r3
    }
   bf0d8:	bd10      	pop	{r4, pc}

000bf0da <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   bf0da:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bf0dc:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bf0e0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bf0e2:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bf0e6:	42ae      	cmp	r6, r5
   bf0e8:	d004      	beq.n	bf0f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bf0ea:	4628      	mov	r0, r5
   bf0ec:	f001 fd69 	bl	c0bc2 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bf0f0:	3510      	adds	r5, #16
   bf0f2:	e7f8      	b.n	bf0e6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bf0f4:	6820      	ldr	r0, [r4, #0]
   bf0f6:	f7ff ff73 	bl	befe0 <free>
    AllocatorT::free(data_);
}
   bf0fa:	4620      	mov	r0, r4
   bf0fc:	bd70      	pop	{r4, r5, r6, pc}
	...

000bf100 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   bf100:	4802      	ldr	r0, [pc, #8]	; (bf10c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bf102:	2300      	movs	r3, #0
   bf104:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   bf106:	f7ff bceb 	b.w	beae0 <os_mutex_recursive_create>
   bf10a:	bf00      	nop
   bf10c:	2003dedc 	.word	0x2003dedc

000bf110 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bf110:	2200      	movs	r2, #0
   bf112:	6840      	ldr	r0, [r0, #4]
   bf114:	4611      	mov	r1, r2
   bf116:	f7ff bf03 	b.w	bef20 <network_ready>

000bf11a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bf11a:	2200      	movs	r2, #0
   bf11c:	6840      	ldr	r0, [r0, #4]
   bf11e:	4611      	mov	r1, r2
   bf120:	f7ff bf1e 	b.w	bef60 <network_listening>

000bf124 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bf124:	2200      	movs	r2, #0
   bf126:	6840      	ldr	r0, [r0, #4]
   bf128:	4611      	mov	r1, r2
   bf12a:	f7ff bf29 	b.w	bef80 <network_get_listen_timeout>

000bf12e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bf12e:	6840      	ldr	r0, [r0, #4]
   bf130:	2200      	movs	r2, #0
   bf132:	f7ff bf1d 	b.w	bef70 <network_set_listen_timeout>

000bf136 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bf136:	6840      	ldr	r0, [r0, #4]
   bf138:	2200      	movs	r2, #0
   bf13a:	f081 0101 	eor.w	r1, r1, #1
   bf13e:	f7ff bf07 	b.w	bef50 <network_listen>

000bf142 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bf142:	2300      	movs	r3, #0
   bf144:	6840      	ldr	r0, [r0, #4]
   bf146:	461a      	mov	r2, r3
   bf148:	4619      	mov	r1, r3
   bf14a:	f7ff bef9 	b.w	bef40 <network_off>

000bf14e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bf14e:	2300      	movs	r3, #0
   bf150:	6840      	ldr	r0, [r0, #4]
   bf152:	461a      	mov	r2, r3
   bf154:	4619      	mov	r1, r3
   bf156:	f7ff beeb 	b.w	bef30 <network_on>

000bf15a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bf15a:	2200      	movs	r2, #0
   bf15c:	6840      	ldr	r0, [r0, #4]
   bf15e:	4611      	mov	r1, r2
   bf160:	f7ff bece 	b.w	bef00 <network_connecting>

000bf164 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bf164:	6840      	ldr	r0, [r0, #4]
   bf166:	2200      	movs	r2, #0
   bf168:	2102      	movs	r1, #2
   bf16a:	f7ff bed1 	b.w	bef10 <network_disconnect>

000bf16e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bf16e:	2300      	movs	r3, #0
   bf170:	6840      	ldr	r0, [r0, #4]
   bf172:	461a      	mov	r2, r3
   bf174:	f7ff bebc 	b.w	beef0 <network_connect>

000bf178 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bf178:	4b08      	ldr	r3, [pc, #32]	; (bf19c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bf17a:	b510      	push	{r4, lr}
   bf17c:	2428      	movs	r4, #40	; 0x28
   bf17e:	4622      	mov	r2, r4
   bf180:	4618      	mov	r0, r3
   bf182:	2100      	movs	r1, #0
   bf184:	f004 f844 	bl	c3210 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bf188:	4b05      	ldr	r3, [pc, #20]	; (bf1a0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bf18a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bf18c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf190:	6042      	str	r2, [r0, #4]
   bf192:	2204      	movs	r2, #4
   bf194:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bf196:	4a03      	ldr	r2, [pc, #12]	; (bf1a4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bf198:	601a      	str	r2, [r3, #0]
   bf19a:	bd10      	pop	{r4, pc}
   bf19c:	2003dee8 	.word	0x2003dee8
   bf1a0:	2003dee0 	.word	0x2003dee0
   bf1a4:	000c8a44 	.word	0x000c8a44

000bf1a8 <_GLOBAL__sub_I__ZN8particle10CloudEvent15s_subscriptionsE>:
        capacity_(0) {
   bf1a8:	4b02      	ldr	r3, [pc, #8]	; (bf1b4 <_GLOBAL__sub_I__ZN8particle10CloudEvent15s_subscriptionsE+0xc>)
   bf1aa:	2200      	movs	r2, #0
   bf1ac:	e9c3 2200 	strd	r2, r2, [r3]
   bf1b0:	609a      	str	r2, [r3, #8]
        // Keep the reference around until the application callback is called
        d.unwrap();
    }
}

} // namespace particle
   bf1b2:	4770      	bx	lr
   bf1b4:	2003df10 	.word	0x2003df10

000bf1b8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bf1b8:	2200      	movs	r2, #0
   bf1ba:	6840      	ldr	r0, [r0, #4]
   bf1bc:	4611      	mov	r1, r2
   bf1be:	f7ff becf 	b.w	bef60 <network_listening>

000bf1c2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bf1c2:	2200      	movs	r2, #0
   bf1c4:	6840      	ldr	r0, [r0, #4]
   bf1c6:	4611      	mov	r1, r2
   bf1c8:	f7ff beda 	b.w	bef80 <network_get_listen_timeout>

000bf1cc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bf1cc:	6840      	ldr	r0, [r0, #4]
   bf1ce:	2200      	movs	r2, #0
   bf1d0:	f7ff bece 	b.w	bef70 <network_set_listen_timeout>

000bf1d4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bf1d4:	6840      	ldr	r0, [r0, #4]
   bf1d6:	2200      	movs	r2, #0
   bf1d8:	f081 0101 	eor.w	r1, r1, #1
   bf1dc:	f7ff beb8 	b.w	bef50 <network_listen>

000bf1e0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bf1e0:	2300      	movs	r3, #0
   bf1e2:	6840      	ldr	r0, [r0, #4]
   bf1e4:	461a      	mov	r2, r3
   bf1e6:	4619      	mov	r1, r3
   bf1e8:	f7ff beaa 	b.w	bef40 <network_off>

000bf1ec <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bf1ec:	2300      	movs	r3, #0
   bf1ee:	6840      	ldr	r0, [r0, #4]
   bf1f0:	461a      	mov	r2, r3
   bf1f2:	4619      	mov	r1, r3
   bf1f4:	f7ff be9c 	b.w	bef30 <network_on>

000bf1f8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bf1f8:	2200      	movs	r2, #0
   bf1fa:	6840      	ldr	r0, [r0, #4]
   bf1fc:	4611      	mov	r1, r2
   bf1fe:	f7ff be8f 	b.w	bef20 <network_ready>

000bf202 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bf202:	2200      	movs	r2, #0
   bf204:	6840      	ldr	r0, [r0, #4]
   bf206:	4611      	mov	r1, r2
   bf208:	f7ff be7a 	b.w	bef00 <network_connecting>

000bf20c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bf20c:	6840      	ldr	r0, [r0, #4]
   bf20e:	2200      	movs	r2, #0
   bf210:	2102      	movs	r1, #2
   bf212:	f7ff be7d 	b.w	bef10 <network_disconnect>

000bf216 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bf216:	2300      	movs	r3, #0
   bf218:	6840      	ldr	r0, [r0, #4]
   bf21a:	461a      	mov	r2, r3
   bf21c:	f7ff be68 	b.w	beef0 <network_connect>

000bf220 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bf220:	4b02      	ldr	r3, [pc, #8]	; (bf22c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bf222:	2203      	movs	r2, #3
   bf224:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bf226:	4a02      	ldr	r2, [pc, #8]	; (bf230 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bf228:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bf22a:	4770      	bx	lr
   bf22c:	2003df1c 	.word	0x2003df1c
   bf230:	000c8a88 	.word	0x000c8a88

000bf234 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bf234:	4770      	bx	lr

000bf236 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bf236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf238:	4606      	mov	r6, r0
   bf23a:	4615      	mov	r5, r2
   bf23c:	460c      	mov	r4, r1
   bf23e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bf240:	42bc      	cmp	r4, r7
   bf242:	d006      	beq.n	bf252 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bf244:	6833      	ldr	r3, [r6, #0]
   bf246:	f814 1b01 	ldrb.w	r1, [r4], #1
   bf24a:	689b      	ldr	r3, [r3, #8]
   bf24c:	4630      	mov	r0, r6
   bf24e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bf250:	e7f6      	b.n	bf240 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bf252:	4628      	mov	r0, r5
   bf254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf256 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bf256:	7c00      	ldrb	r0, [r0, #16]
   bf258:	2200      	movs	r2, #0
   bf25a:	f7ff bcc1 	b.w	bebe0 <hal_i2c_write>

000bf25e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bf25e:	7c00      	ldrb	r0, [r0, #16]
   bf260:	2100      	movs	r1, #0
   bf262:	f7ff bcc5 	b.w	bebf0 <hal_i2c_available>

000bf266 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bf266:	7c00      	ldrb	r0, [r0, #16]
   bf268:	2100      	movs	r1, #0
   bf26a:	f7ff bcc9 	b.w	bec00 <hal_i2c_read>

000bf26e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bf26e:	7c00      	ldrb	r0, [r0, #16]
   bf270:	2100      	movs	r1, #0
   bf272:	f7ff bccd 	b.w	bec10 <hal_i2c_peek>

000bf276 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bf276:	7c00      	ldrb	r0, [r0, #16]
   bf278:	2100      	movs	r1, #0
   bf27a:	f7ff bcd1 	b.w	bec20 <hal_i2c_flush>

000bf27e <_ZN7TwoWireD0Ev>:
   bf27e:	b510      	push	{r4, lr}
   bf280:	2114      	movs	r1, #20
   bf282:	4604      	mov	r4, r0
   bf284:	f7f5 fe13 	bl	b4eae <_ZdlPvj>
   bf288:	4620      	mov	r0, r4
   bf28a:	bd10      	pop	{r4, pc}

000bf28c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bf28c:	b538      	push	{r3, r4, r5, lr}
   bf28e:	4604      	mov	r4, r0
   bf290:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bf292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bf296:	2200      	movs	r2, #0
   bf298:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bf29c:	4b09      	ldr	r3, [pc, #36]	; (bf2c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   bf29e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bf2a0:	4608      	mov	r0, r1
   bf2a2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   bf2a4:	4629      	mov	r1, r5
   bf2a6:	f7ff fccb 	bl	bec40 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bf2aa:	30bf      	adds	r0, #191	; 0xbf
   bf2ac:	d108      	bne.n	bf2c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   bf2ae:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bf2b0:	07db      	lsls	r3, r3, #31
   bf2b2:	d505      	bpl.n	bf2c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   bf2b4:	6868      	ldr	r0, [r5, #4]
   bf2b6:	f7ff fe93 	bl	befe0 <free>
    free(conf.tx_buffer);
   bf2ba:	68e8      	ldr	r0, [r5, #12]
   bf2bc:	f7ff fe90 	bl	befe0 <free>
}
   bf2c0:	4620      	mov	r0, r4
   bf2c2:	bd38      	pop	{r3, r4, r5, pc}
   bf2c4:	000c8acc 	.word	0x000c8acc

000bf2c8 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bf2c8:	7c00      	ldrb	r0, [r0, #16]
   bf2ca:	2200      	movs	r2, #0
   bf2cc:	f7ff bc68 	b.w	beba0 <hal_i2c_set_speed>

000bf2d0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bf2d0:	2300      	movs	r3, #0
   bf2d2:	7c00      	ldrb	r0, [r0, #16]
   bf2d4:	461a      	mov	r2, r3
   bf2d6:	4619      	mov	r1, r3
   bf2d8:	f7ff bc6a 	b.w	bebb0 <hal_i2c_begin>

000bf2dc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bf2dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bf2de:	2200      	movs	r2, #0
   bf2e0:	2318      	movs	r3, #24
   bf2e2:	e9cd 2200 	strd	r2, r2, [sp]
   bf2e6:	f8ad 3000 	strh.w	r3, [sp]
    };
   bf2ea:	780b      	ldrb	r3, [r1, #0]
   bf2ec:	f88d 3004 	strb.w	r3, [sp, #4]
   bf2f0:	684b      	ldr	r3, [r1, #4]
   bf2f2:	9302      	str	r3, [sp, #8]
   bf2f4:	68cb      	ldr	r3, [r1, #12]
   bf2f6:	9303      	str	r3, [sp, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0),
   bf2f8:	7a0b      	ldrb	r3, [r1, #8]
   bf2fa:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bf2fc:	7c00      	ldrb	r0, [r0, #16]
    };
   bf2fe:	690b      	ldr	r3, [r1, #16]
   bf300:	9305      	str	r3, [sp, #20]
   bf302:	4669      	mov	r1, sp
   bf304:	f7ff fca4 	bl	bec50 <hal_i2c_request_ex>
}
   bf308:	b007      	add	sp, #28
   bf30a:	f85d fb04 	ldr.w	pc, [sp], #4

000bf30e <_ZN7TwoWire11requestFromEhjh>:
{
   bf30e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        buffer_(nullptr) {
   bf310:	f88d 1004 	strb.w	r1, [sp, #4]
   bf314:	2100      	movs	r1, #0
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bf316:	1a5b      	subs	r3, r3, r1
   bf318:	f04f 0c64 	mov.w	ip, #100	; 0x64
   bf31c:	e9cd c104 	strd	ip, r1, [sp, #16]
   bf320:	bf18      	it	ne
   bf322:	2301      	movne	r3, #1
   bf324:	a901      	add	r1, sp, #4
    size_ = size;
   bf326:	9202      	str	r2, [sp, #8]
   bf328:	f88d 300c 	strb.w	r3, [sp, #12]
   bf32c:	f7ff ffd6 	bl	bf2dc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bf330:	b007      	add	sp, #28
   bf332:	f85d fb04 	ldr.w	pc, [sp], #4

000bf336 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bf336:	7c00      	ldrb	r0, [r0, #16]
   bf338:	2200      	movs	r2, #0
   bf33a:	f7ff bc41 	b.w	bebc0 <hal_i2c_begin_transmission>

000bf33e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bf33e:	7c00      	ldrb	r0, [r0, #16]
   bf340:	2200      	movs	r2, #0
   bf342:	f7ff bc45 	b.w	bebd0 <hal_i2c_end_transmission>

000bf346 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bf346:	2101      	movs	r1, #1
   bf348:	f7ff bff9 	b.w	bf33e <_ZN7TwoWire15endTransmissionEh>

000bf34c <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t>:
      : address_{address},
   bf34c:	4b05      	ldr	r3, [pc, #20]	; (bf364 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t+0x18>)
        buffer_(nullptr) {
   bf34e:	21ff      	movs	r1, #255	; 0xff
   bf350:	2200      	movs	r2, #0
   bf352:	e9c3 1200 	strd	r1, r2, [r3]
   bf356:	2001      	movs	r0, #1
   bf358:	2164      	movs	r1, #100	; 0x64
   bf35a:	e9c3 0102 	strd	r0, r1, [r3, #8]
   bf35e:	611a      	str	r2, [r3, #16]

namespace particle {
namespace detail {
const WireTransmission WIRE_INVALID_TRANSMISSION(0xff);
} // detail
} // particle
   bf360:	4770      	bx	lr
   bf362:	bf00      	nop
   bf364:	2003df24 	.word	0x2003df24

000bf368 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bf368:	4770      	bx	lr

000bf36a <_ZN9IPAddressD0Ev>:
   bf36a:	b510      	push	{r4, lr}
   bf36c:	2118      	movs	r1, #24
   bf36e:	4604      	mov	r4, r0
   bf370:	f7f5 fd9d 	bl	b4eae <_ZdlPvj>
   bf374:	4620      	mov	r0, r4
   bf376:	bd10      	pop	{r4, pc}

000bf378 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bf378:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bf37a:	7d03      	ldrb	r3, [r0, #20]
   bf37c:	2b06      	cmp	r3, #6
{
   bf37e:	b08d      	sub	sp, #52	; 0x34
   bf380:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bf382:	f100 0704 	add.w	r7, r0, #4
   bf386:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bf38a:	d012      	beq.n	bf3b2 <_ZNK9IPAddress7printToER5Print+0x3a>
   bf38c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bf390:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bf394:	220a      	movs	r2, #10
   bf396:	4630      	mov	r0, r6
   bf398:	f001 fb05 	bl	c09a6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bf39c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bf39e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bf3a0:	d019      	beq.n	bf3d6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bf3a2:	2c00      	cmp	r4, #0
   bf3a4:	d0f4      	beq.n	bf390 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bf3a6:	212e      	movs	r1, #46	; 0x2e
   bf3a8:	4630      	mov	r0, r6
   bf3aa:	f001 fae3 	bl	c0974 <_ZN5Print5printEc>
   bf3ae:	4404      	add	r4, r0
   bf3b0:	e7ee      	b.n	bf390 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bf3b2:	232f      	movs	r3, #47	; 0x2f
   bf3b4:	466a      	mov	r2, sp
   bf3b6:	4639      	mov	r1, r7
   bf3b8:	200a      	movs	r0, #10
		buf[0] = 0;
   bf3ba:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bf3be:	f7ff fc4f 	bl	bec60 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bf3c2:	4668      	mov	r0, sp
   bf3c4:	f7f5 fd2a 	bl	b4e1c <strlen>
   bf3c8:	6833      	ldr	r3, [r6, #0]
   bf3ca:	4602      	mov	r2, r0
   bf3cc:	68db      	ldr	r3, [r3, #12]
   bf3ce:	4669      	mov	r1, sp
   bf3d0:	4630      	mov	r0, r6
   bf3d2:	4798      	blx	r3
   bf3d4:	4604      	mov	r4, r0
    }
    return n;
}
   bf3d6:	4620      	mov	r0, r4
   bf3d8:	b00d      	add	sp, #52	; 0x34
   bf3da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bf3dc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bf3dc:	b510      	push	{r4, lr}
   bf3de:	4b05      	ldr	r3, [pc, #20]	; (bf3f4 <_ZN9IPAddressC1Ev+0x18>)
   bf3e0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bf3e2:	2211      	movs	r2, #17
   bf3e4:	f840 3b04 	str.w	r3, [r0], #4
   bf3e8:	2100      	movs	r1, #0
   bf3ea:	f003 ff11 	bl	c3210 <memset>
}
   bf3ee:	4620      	mov	r0, r4
   bf3f0:	bd10      	pop	{r4, pc}
   bf3f2:	bf00      	nop
   bf3f4:	000c8af8 	.word	0x000c8af8

000bf3f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bf3f8:	4603      	mov	r3, r0
   bf3fa:	4a07      	ldr	r2, [pc, #28]	; (bf418 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bf3fc:	b510      	push	{r4, lr}
   bf3fe:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bf402:	f101 0210 	add.w	r2, r1, #16
   bf406:	f851 4b04 	ldr.w	r4, [r1], #4
   bf40a:	f843 4b04 	str.w	r4, [r3], #4
   bf40e:	4291      	cmp	r1, r2
   bf410:	d1f9      	bne.n	bf406 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bf412:	780a      	ldrb	r2, [r1, #0]
   bf414:	701a      	strb	r2, [r3, #0]
}
   bf416:	bd10      	pop	{r4, pc}
   bf418:	000c8af8 	.word	0x000c8af8

000bf41c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bf41c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bf41e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bf422:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bf426:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bf42a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bf42e:	2304      	movs	r3, #4
   bf430:	6041      	str	r1, [r0, #4]
   bf432:	7503      	strb	r3, [r0, #20]
}
   bf434:	bd10      	pop	{r4, pc}
	...

000bf438 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bf438:	b507      	push	{r0, r1, r2, lr}
   bf43a:	4b06      	ldr	r3, [pc, #24]	; (bf454 <_ZN9IPAddressC1EPKh+0x1c>)
   bf43c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bf43e:	78cb      	ldrb	r3, [r1, #3]
   bf440:	9300      	str	r3, [sp, #0]
   bf442:	788b      	ldrb	r3, [r1, #2]
   bf444:	784a      	ldrb	r2, [r1, #1]
   bf446:	7809      	ldrb	r1, [r1, #0]
   bf448:	f7ff ffe8 	bl	bf41c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bf44c:	b003      	add	sp, #12
   bf44e:	f85d fb04 	ldr.w	pc, [sp], #4
   bf452:	bf00      	nop
   bf454:	000c8af8 	.word	0x000c8af8

000bf458 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bf458:	f100 0310 	add.w	r3, r0, #16
   bf45c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bf45e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bf462:	2901      	cmp	r1, #1
   bf464:	4618      	mov	r0, r3
   bf466:	d108      	bne.n	bf47a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bf468:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bf46c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bf470:	3a01      	subs	r2, #1
   bf472:	f103 0310 	add.w	r3, r3, #16
   bf476:	d1f2      	bne.n	bf45e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bf478:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bf47a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bf47c:	bf04      	itt	eq
   bf47e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bf482:	1852      	addeq	r2, r2, r1
   bf484:	e7f4      	b.n	bf470 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bf486 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bf486:	b40e      	push	{r1, r2, r3}
   bf488:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf48a:	b088      	sub	sp, #32
   bf48c:	af00      	add	r7, sp, #0
   bf48e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf492:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bf494:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf498:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bf49a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf49c:	462b      	mov	r3, r5
   bf49e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bf4a0:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf4a2:	f7ff fdad 	bl	bf000 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bf4a6:	280f      	cmp	r0, #15
   bf4a8:	687a      	ldr	r2, [r7, #4]
   bf4aa:	d91a      	bls.n	bf4e2 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bf4ac:	f100 0308 	add.w	r3, r0, #8
   bf4b0:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bf4b4:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bf4b6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf4ba:	1c41      	adds	r1, r0, #1
   bf4bc:	462b      	mov	r3, r5
   bf4be:	4668      	mov	r0, sp
        va_start(args, fmt);
   bf4c0:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf4c2:	f7ff fd9d 	bl	bf000 <vsnprintf>
        if (n > 0) {
   bf4c6:	1e02      	subs	r2, r0, #0
   bf4c8:	dd04      	ble.n	bf4d4 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bf4ca:	6823      	ldr	r3, [r4, #0]
   bf4cc:	4669      	mov	r1, sp
   bf4ce:	689b      	ldr	r3, [r3, #8]
   bf4d0:	4620      	mov	r0, r4
   bf4d2:	4798      	blx	r3
   bf4d4:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bf4d6:	3720      	adds	r7, #32
   bf4d8:	46bd      	mov	sp, r7
   bf4da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bf4de:	b003      	add	sp, #12
   bf4e0:	4770      	bx	lr
    } else if (n > 0) {
   bf4e2:	2800      	cmp	r0, #0
   bf4e4:	d0f7      	beq.n	bf4d6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bf4e6:	6823      	ldr	r3, [r4, #0]
   bf4e8:	4602      	mov	r2, r0
   bf4ea:	689b      	ldr	r3, [r3, #8]
   bf4ec:	f107 0110 	add.w	r1, r7, #16
   bf4f0:	4620      	mov	r0, r4
   bf4f2:	4798      	blx	r3
}
   bf4f4:	e7ef      	b.n	bf4d6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bf4f6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bf4f6:	b538      	push	{r3, r4, r5, lr}
   bf4f8:	680b      	ldr	r3, [r1, #0]
   bf4fa:	6003      	str	r3, [r0, #0]
   bf4fc:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bf4fe:	6843      	ldr	r3, [r0, #4]
   bf500:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bf502:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bf504:	d008      	beq.n	bf518 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bf506:	b115      	cbz	r5, bf50e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bf508:	686b      	ldr	r3, [r5, #4]
   bf50a:	3301      	adds	r3, #1
   bf50c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bf50e:	6860      	ldr	r0, [r4, #4]
   bf510:	b108      	cbz	r0, bf516 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bf512:	f7ff fdce 	bl	bf0b2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bf516:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bf518:	bd38      	pop	{r3, r4, r5, pc}

000bf51a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   bf51a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bf51c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bf51e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bf522:	689b      	ldr	r3, [r3, #8]
   bf524:	2201      	movs	r2, #1
   bf526:	f10d 0107 	add.w	r1, sp, #7
   bf52a:	4798      	blx	r3
}
   bf52c:	b003      	add	sp, #12
   bf52e:	f85d fb04 	ldr.w	pc, [sp], #4

000bf532 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bf532:	460b      	mov	r3, r1
   bf534:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bf536:	2200      	movs	r2, #0
   bf538:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bf53a:	e9c0 2200 	strd	r2, r2, [r0]
   bf53e:	4604      	mov	r4, r0
        t_ = t;
   bf540:	6083      	str	r3, [r0, #8]
    if (t) {
   bf542:	b90b      	cbnz	r3, bf548 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bf544:	4620      	mov	r0, r4
   bf546:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bf548:	f7ff ffd5 	bl	bf4f6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bf54c:	e7fa      	b.n	bf544 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bf54e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bf54e:	6883      	ldr	r3, [r0, #8]
   bf550:	b1eb      	cbz	r3, bf58e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bf552:	781a      	ldrb	r2, [r3, #0]
   bf554:	2a03      	cmp	r2, #3
   bf556:	d81a      	bhi.n	bf58e <_ZNK5spark9JSONValue4typeEv+0x40>
   bf558:	e8df f002 	tbb	[pc, r2]
   bf55c:	1b021704 	.word	0x1b021704
   bf560:	2005      	movs	r0, #5
   bf562:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bf564:	6802      	ldr	r2, [r0, #0]
   bf566:	685b      	ldr	r3, [r3, #4]
   bf568:	6852      	ldr	r2, [r2, #4]
   bf56a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bf56c:	282d      	cmp	r0, #45	; 0x2d
   bf56e:	d012      	beq.n	bf596 <_ZNK5spark9JSONValue4typeEv+0x48>
   bf570:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bf574:	2b09      	cmp	r3, #9
   bf576:	d90e      	bls.n	bf596 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bf578:	2874      	cmp	r0, #116	; 0x74
   bf57a:	d00e      	beq.n	bf59a <_ZNK5spark9JSONValue4typeEv+0x4c>
   bf57c:	2866      	cmp	r0, #102	; 0x66
   bf57e:	d00c      	beq.n	bf59a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bf580:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bf584:	4258      	negs	r0, r3
   bf586:	4158      	adcs	r0, r3
   bf588:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bf58a:	2006      	movs	r0, #6
   bf58c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bf58e:	2000      	movs	r0, #0
   bf590:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bf592:	2004      	movs	r0, #4
   bf594:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bf596:	2003      	movs	r0, #3
   bf598:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bf59a:	2002      	movs	r0, #2
}
   bf59c:	4770      	bx	lr

000bf59e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bf59e:	b510      	push	{r4, lr}
   bf5a0:	4604      	mov	r4, r0
    switch (type()) {
   bf5a2:	f7ff ffd4 	bl	bf54e <_ZNK5spark9JSONValue4typeEv>
   bf5a6:	2802      	cmp	r0, #2
   bf5a8:	d00e      	beq.n	bf5c8 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bf5aa:	1ec3      	subs	r3, r0, #3
   bf5ac:	b2db      	uxtb	r3, r3
   bf5ae:	2b01      	cmp	r3, #1
   bf5b0:	d814      	bhi.n	bf5dc <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bf5b2:	6822      	ldr	r2, [r4, #0]
   bf5b4:	68a3      	ldr	r3, [r4, #8]
   bf5b6:	6850      	ldr	r0, [r2, #4]
   bf5b8:	685b      	ldr	r3, [r3, #4]
}
   bf5ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bf5be:	220a      	movs	r2, #10
   bf5c0:	2100      	movs	r1, #0
   bf5c2:	4418      	add	r0, r3
   bf5c4:	f004 bd64 	b.w	c4090 <strtol>
        const char* const s = d_->json + t_->start;
   bf5c8:	6822      	ldr	r2, [r4, #0]
   bf5ca:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bf5cc:	6852      	ldr	r2, [r2, #4]
   bf5ce:	685b      	ldr	r3, [r3, #4]
   bf5d0:	5cd0      	ldrb	r0, [r2, r3]
   bf5d2:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bf5d6:	4258      	negs	r0, r3
   bf5d8:	4158      	adcs	r0, r3
}
   bf5da:	bd10      	pop	{r4, pc}
    switch (type()) {
   bf5dc:	2000      	movs	r0, #0
   bf5de:	e7fc      	b.n	bf5da <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bf5e0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bf5e0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bf5e2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bf5e4:	e9c0 3300 	strd	r3, r3, [r0]
   bf5e8:	4604      	mov	r4, r0
        n_(0) {
   bf5ea:	480e      	ldr	r0, [pc, #56]	; (bf624 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bf5ec:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bf5f0:	b1a9      	cbz	r1, bf61e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bf5f2:	780b      	ldrb	r3, [r1, #0]
   bf5f4:	2b03      	cmp	r3, #3
   bf5f6:	d006      	beq.n	bf606 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bf5f8:	b98b      	cbnz	r3, bf61e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bf5fa:	6813      	ldr	r3, [r2, #0]
   bf5fc:	6858      	ldr	r0, [r3, #4]
   bf5fe:	684b      	ldr	r3, [r1, #4]
   bf600:	5cc3      	ldrb	r3, [r0, r3]
   bf602:	2b6e      	cmp	r3, #110	; 0x6e
   bf604:	d007      	beq.n	bf616 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bf606:	6813      	ldr	r3, [r2, #0]
   bf608:	684d      	ldr	r5, [r1, #4]
   bf60a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bf60c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bf60e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bf610:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bf612:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bf614:	60e3      	str	r3, [r4, #12]
   bf616:	4611      	mov	r1, r2
   bf618:	4620      	mov	r0, r4
   bf61a:	f7ff ff6c 	bl	bf4f6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bf61e:	4620      	mov	r0, r4
   bf620:	bd38      	pop	{r3, r4, r5, pc}
   bf622:	bf00      	nop
   bf624:	000c5650 	.word	0x000c5650

000bf628 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bf628:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bf62a:	2500      	movs	r5, #0
   bf62c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bf62e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bf632:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bf636:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bf63a:	4604      	mov	r4, r0
   bf63c:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bf63e:	b14b      	cbz	r3, bf654 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bf640:	781a      	ldrb	r2, [r3, #0]
   bf642:	2a01      	cmp	r2, #1
   bf644:	d106      	bne.n	bf654 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bf646:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bf64a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bf64c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bf64e:	6143      	str	r3, [r0, #20]
   bf650:	f7ff ff51 	bl	bf4f6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bf654:	4620      	mov	r0, r4
   bf656:	bd38      	pop	{r3, r4, r5, pc}

000bf658 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bf658:	b510      	push	{r4, lr}
    if (!n_) {
   bf65a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bf65c:	4604      	mov	r4, r0
    if (!n_) {
   bf65e:	b163      	cbz	r3, bf67a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bf660:	6880      	ldr	r0, [r0, #8]
   bf662:	60e0      	str	r0, [r4, #12]
    --n_;
   bf664:	3b01      	subs	r3, #1
    ++t_;
   bf666:	3010      	adds	r0, #16
   bf668:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bf66a:	6120      	str	r0, [r4, #16]
    --n_;
   bf66c:	6163      	str	r3, [r4, #20]
    if (n_) {
   bf66e:	b113      	cbz	r3, bf676 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bf670:	f7ff fef2 	bl	bf458 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bf674:	60a0      	str	r0, [r4, #8]
    return true;
   bf676:	2001      	movs	r0, #1
   bf678:	e000      	b.n	bf67c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bf67a:	4618      	mov	r0, r3
}
   bf67c:	bd10      	pop	{r4, pc}

000bf67e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bf67e:	b510      	push	{r4, lr}
    write('}');
   bf680:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bf682:	4604      	mov	r4, r0
    write('}');
   bf684:	f7ff ff49 	bl	bf51a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bf688:	2301      	movs	r3, #1
   bf68a:	7123      	strb	r3, [r4, #4]
}
   bf68c:	4620      	mov	r0, r4
   bf68e:	bd10      	pop	{r4, pc}

000bf690 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bf690:	b508      	push	{r3, lr}
    switch (state_) {
   bf692:	7903      	ldrb	r3, [r0, #4]
   bf694:	2b01      	cmp	r3, #1
   bf696:	d002      	beq.n	bf69e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bf698:	2b02      	cmp	r3, #2
   bf69a:	d004      	beq.n	bf6a6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bf69c:	bd08      	pop	{r3, pc}
        write(',');
   bf69e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bf6a0:	f7ff ff3b 	bl	bf51a <_ZN5spark10JSONWriter5writeEc>
}
   bf6a4:	e7fa      	b.n	bf69c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bf6a6:	213a      	movs	r1, #58	; 0x3a
   bf6a8:	e7fa      	b.n	bf6a0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bf6aa <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bf6aa:	b510      	push	{r4, lr}
   bf6ac:	4604      	mov	r4, r0
    writeSeparator();
   bf6ae:	f7ff ffef 	bl	bf690 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bf6b2:	4620      	mov	r0, r4
   bf6b4:	217b      	movs	r1, #123	; 0x7b
   bf6b6:	f7ff ff30 	bl	bf51a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bf6ba:	2300      	movs	r3, #0
   bf6bc:	7123      	strb	r3, [r4, #4]
}
   bf6be:	4620      	mov	r0, r4
   bf6c0:	bd10      	pop	{r4, pc}
	...

000bf6c4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bf6c4:	b513      	push	{r0, r1, r4, lr}
   bf6c6:	4604      	mov	r4, r0
   bf6c8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bf6ca:	f7ff ffe1 	bl	bf690 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bf6ce:	6823      	ldr	r3, [r4, #0]
   bf6d0:	9a01      	ldr	r2, [sp, #4]
   bf6d2:	68db      	ldr	r3, [r3, #12]
   bf6d4:	4903      	ldr	r1, [pc, #12]	; (bf6e4 <_ZN5spark10JSONWriter5valueEi+0x20>)
   bf6d6:	4620      	mov	r0, r4
   bf6d8:	4798      	blx	r3
    state_ = NEXT;
   bf6da:	2301      	movs	r3, #1
}
   bf6dc:	4620      	mov	r0, r4
    state_ = NEXT;
   bf6de:	7123      	strb	r3, [r4, #4]
}
   bf6e0:	b002      	add	sp, #8
   bf6e2:	bd10      	pop	{r4, pc}
   bf6e4:	000c8b04 	.word	0x000c8b04

000bf6e8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bf6e8:	b513      	push	{r0, r1, r4, lr}
   bf6ea:	4604      	mov	r4, r0
   bf6ec:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bf6ee:	f7ff ffcf 	bl	bf690 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bf6f2:	6823      	ldr	r3, [r4, #0]
   bf6f4:	9a01      	ldr	r2, [sp, #4]
   bf6f6:	68db      	ldr	r3, [r3, #12]
   bf6f8:	4903      	ldr	r1, [pc, #12]	; (bf708 <_ZN5spark10JSONWriter5valueEj+0x20>)
   bf6fa:	4620      	mov	r0, r4
   bf6fc:	4798      	blx	r3
    state_ = NEXT;
   bf6fe:	2301      	movs	r3, #1
}
   bf700:	4620      	mov	r0, r4
    state_ = NEXT;
   bf702:	7123      	strb	r3, [r4, #4]
}
   bf704:	b002      	add	sp, #8
   bf706:	bd10      	pop	{r4, pc}
   bf708:	000c8b07 	.word	0x000c8b07

000bf70c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bf70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bf710:	460d      	mov	r5, r1
    write('"');
   bf712:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bf714:	4690      	mov	r8, r2
   bf716:	4604      	mov	r4, r0
    write('"');
   bf718:	f7ff feff 	bl	bf51a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bf71c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bf7c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bf720:	44a8      	add	r8, r5
    const char *s = str;
   bf722:	462f      	mov	r7, r5
    while (s != end) {
   bf724:	4547      	cmp	r7, r8
   bf726:	46ba      	mov	sl, r7
   bf728:	d03d      	beq.n	bf7a6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bf72a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bf72e:	2e22      	cmp	r6, #34	; 0x22
   bf730:	d006      	beq.n	bf740 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bf732:	2e5c      	cmp	r6, #92	; 0x5c
   bf734:	d004      	beq.n	bf740 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bf736:	4630      	mov	r0, r6
   bf738:	f003 fd3a 	bl	c31b0 <isprint>
   bf73c:	2800      	cmp	r0, #0
   bf73e:	d1f1      	bne.n	bf724 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bf740:	6823      	ldr	r3, [r4, #0]
   bf742:	ebaa 0205 	sub.w	r2, sl, r5
   bf746:	689b      	ldr	r3, [r3, #8]
   bf748:	4629      	mov	r1, r5
   bf74a:	4620      	mov	r0, r4
   bf74c:	4798      	blx	r3
            write('\\');
   bf74e:	215c      	movs	r1, #92	; 0x5c
   bf750:	4620      	mov	r0, r4
   bf752:	f7ff fee2 	bl	bf51a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bf756:	2e0d      	cmp	r6, #13
   bf758:	d80a      	bhi.n	bf770 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bf75a:	2e07      	cmp	r6, #7
   bf75c:	d91c      	bls.n	bf798 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bf75e:	f1a6 0308 	sub.w	r3, r6, #8
   bf762:	2b05      	cmp	r3, #5
   bf764:	d818      	bhi.n	bf798 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bf766:	e8df f003 	tbb	[pc, r3]
   bf76a:	0f0d      	.short	0x0f0d
   bf76c:	15131711 	.word	0x15131711
   bf770:	2e22      	cmp	r6, #34	; 0x22
   bf772:	d001      	beq.n	bf778 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   bf774:	2e5c      	cmp	r6, #92	; 0x5c
   bf776:	d10f      	bne.n	bf798 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   bf778:	4631      	mov	r1, r6
                write('b');
   bf77a:	4620      	mov	r0, r4
   bf77c:	f7ff fecd 	bl	bf51a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   bf780:	463d      	mov	r5, r7
    while (s != end) {
   bf782:	e7cf      	b.n	bf724 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   bf784:	2162      	movs	r1, #98	; 0x62
   bf786:	e7f8      	b.n	bf77a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   bf788:	2174      	movs	r1, #116	; 0x74
   bf78a:	e7f6      	b.n	bf77a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   bf78c:	216e      	movs	r1, #110	; 0x6e
   bf78e:	e7f4      	b.n	bf77a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   bf790:	2166      	movs	r1, #102	; 0x66
   bf792:	e7f2      	b.n	bf77a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   bf794:	2172      	movs	r1, #114	; 0x72
   bf796:	e7f0      	b.n	bf77a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   bf798:	6823      	ldr	r3, [r4, #0]
   bf79a:	4632      	mov	r2, r6
   bf79c:	68db      	ldr	r3, [r3, #12]
   bf79e:	4649      	mov	r1, r9
   bf7a0:	4620      	mov	r0, r4
   bf7a2:	4798      	blx	r3
                break;
   bf7a4:	e7ec      	b.n	bf780 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   bf7a6:	42bd      	cmp	r5, r7
   bf7a8:	d005      	beq.n	bf7b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   bf7aa:	6823      	ldr	r3, [r4, #0]
   bf7ac:	1b7a      	subs	r2, r7, r5
   bf7ae:	689b      	ldr	r3, [r3, #8]
   bf7b0:	4629      	mov	r1, r5
   bf7b2:	4620      	mov	r0, r4
   bf7b4:	4798      	blx	r3
    }
    write('"');
   bf7b6:	2122      	movs	r1, #34	; 0x22
   bf7b8:	4620      	mov	r0, r4
   bf7ba:	f7ff feae 	bl	bf51a <_ZN5spark10JSONWriter5writeEc>
}
   bf7be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bf7c2:	bf00      	nop
   bf7c4:	000c8b0a 	.word	0x000c8b0a

000bf7c8 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bf7c8:	b513      	push	{r0, r1, r4, lr}
   bf7ca:	4604      	mov	r4, r0
   bf7cc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bf7d0:	f7ff ff5e 	bl	bf690 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bf7d4:	4620      	mov	r0, r4
   bf7d6:	e9dd 2100 	ldrd	r2, r1, [sp]
   bf7da:	f7ff ff97 	bl	bf70c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   bf7de:	2302      	movs	r3, #2
}
   bf7e0:	4620      	mov	r0, r4
    state_ = VALUE;
   bf7e2:	7123      	strb	r3, [r4, #4]
}
   bf7e4:	b002      	add	sp, #8
   bf7e6:	bd10      	pop	{r4, pc}

000bf7e8 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   bf7e8:	b513      	push	{r0, r1, r4, lr}
   bf7ea:	4604      	mov	r4, r0
   bf7ec:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bf7f0:	f7ff ff4e 	bl	bf690 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   bf7f4:	4620      	mov	r0, r4
   bf7f6:	e9dd 2100 	ldrd	r2, r1, [sp]
   bf7fa:	f7ff ff87 	bl	bf70c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   bf7fe:	2301      	movs	r3, #1
}
   bf800:	4620      	mov	r0, r4
    state_ = NEXT;
   bf802:	7123      	strb	r3, [r4, #4]
}
   bf804:	b002      	add	sp, #8
   bf806:	bd10      	pop	{r4, pc}

000bf808 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   bf808:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bf80a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf80c:	4604      	mov	r4, r0
   bf80e:	460d      	mov	r5, r1
   bf810:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bf812:	d914      	bls.n	bf83e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   bf814:	4290      	cmp	r0, r2
   bf816:	d213      	bcs.n	bf840 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   bf818:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   bf81c:	1a75      	subs	r5, r6, r1
   bf81e:	f1a1 0710 	sub.w	r7, r1, #16
   bf822:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bf824:	42b7      	cmp	r7, r6
   bf826:	d018      	beq.n	bf85a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   bf828:	b11c      	cbz	r4, bf832 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   bf82a:	4631      	mov	r1, r6
   bf82c:	4620      	mov	r0, r4
   bf82e:	f001 fa31 	bl	c0c94 <_ZN6StringC1EOS_>
                end->~T();
   bf832:	4630      	mov	r0, r6
   bf834:	f001 f9c5 	bl	c0bc2 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   bf838:	3e10      	subs	r6, #16
   bf83a:	3c10      	subs	r4, #16
   bf83c:	e7f2      	b.n	bf824 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   bf83e:	d00c      	beq.n	bf85a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   bf840:	42b5      	cmp	r5, r6
   bf842:	d00a      	beq.n	bf85a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   bf844:	b11c      	cbz	r4, bf84e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   bf846:	4629      	mov	r1, r5
   bf848:	4620      	mov	r0, r4
   bf84a:	f001 fa23 	bl	c0c94 <_ZN6StringC1EOS_>
                p->~T();
   bf84e:	4628      	mov	r0, r5
   bf850:	f001 f9b7 	bl	c0bc2 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   bf854:	3510      	adds	r5, #16
   bf856:	3410      	adds	r4, #16
   bf858:	e7f2      	b.n	bf840 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   bf85a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf85c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   bf85c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bf85e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bf860:	4605      	mov	r5, r0
        if (n > 0) {
   bf862:	dd11      	ble.n	bf888 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   bf864:	0130      	lsls	r0, r6, #4
   bf866:	f7ff fbb3 	bl	befd0 <malloc>
            if (!d) {
   bf86a:	4604      	mov	r4, r0
   bf86c:	b158      	cbz	r0, bf886 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bf86e:	e9d5 1200 	ldrd	r1, r2, [r5]
   bf872:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   bf876:	f7ff ffc7 	bl	bf808 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   bf87a:	6828      	ldr	r0, [r5, #0]
   bf87c:	f7ff fbb0 	bl	befe0 <free>
        data_ = d;
   bf880:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bf882:	60ae      	str	r6, [r5, #8]
        return true;
   bf884:	2001      	movs	r0, #1
    }
   bf886:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bf888:	2400      	movs	r4, #0
   bf88a:	e7f6      	b.n	bf87a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000bf88c <_ZN5spark16JSONStreamWriter5writeEPKcj>:

inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
   bf88c:	b510      	push	{r4, lr}
   bf88e:	4604      	mov	r4, r0
    bytesWritten_ += strm_.write((const uint8_t*)data, size);
   bf890:	6880      	ldr	r0, [r0, #8]
   bf892:	6803      	ldr	r3, [r0, #0]
   bf894:	68db      	ldr	r3, [r3, #12]
   bf896:	4798      	blx	r3
   bf898:	68e3      	ldr	r3, [r4, #12]
   bf89a:	4418      	add	r0, r3
   bf89c:	60e0      	str	r0, [r4, #12]
}
   bf89e:	bd10      	pop	{r4, pc}

000bf8a0 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   bf8a0:	4770      	bx	lr

000bf8a2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   bf8a2:	4608      	mov	r0, r1
   bf8a4:	b111      	cbz	r1, bf8ac <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   bf8a6:	680b      	ldr	r3, [r1, #0]
   bf8a8:	685b      	ldr	r3, [r3, #4]
   bf8aa:	4718      	bx	r3
}
   bf8ac:	4770      	bx	lr

000bf8ae <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   bf8ae:	4770      	bx	lr

000bf8b0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bf8b0:	4770      	bx	lr

000bf8b2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   bf8b2:	4770      	bx	lr

000bf8b4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   bf8b4:	4770      	bx	lr

000bf8b6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   bf8b6:	b538      	push	{r3, r4, r5, lr}
   bf8b8:	4604      	mov	r4, r0
   bf8ba:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   bf8bc:	6800      	ldr	r0, [r0, #0]
   bf8be:	212e      	movs	r1, #46	; 0x2e
   bf8c0:	f003 fcf9 	bl	c32b6 <strchrnul>
    size = s - category;
   bf8c4:	6823      	ldr	r3, [r4, #0]
   bf8c6:	1ac3      	subs	r3, r0, r3
   bf8c8:	602b      	str	r3, [r5, #0]
    if (size) {
   bf8ca:	b123      	cbz	r3, bf8d6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   bf8cc:	7803      	ldrb	r3, [r0, #0]
   bf8ce:	b103      	cbz	r3, bf8d2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   bf8d0:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   bf8d2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bf8d4:	6020      	str	r0, [r4, #0]
}
   bf8d6:	4618      	mov	r0, r3
   bf8d8:	bd38      	pop	{r3, r4, r5, pc}

000bf8da <_ZN5spark16JSONStreamWriterD0Ev>:
   bf8da:	b510      	push	{r4, lr}
   bf8dc:	2110      	movs	r1, #16
   bf8de:	4604      	mov	r4, r0
   bf8e0:	f7f5 fae5 	bl	b4eae <_ZdlPvj>
   bf8e4:	4620      	mov	r0, r4
   bf8e6:	bd10      	pop	{r4, pc}

000bf8e8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   bf8e8:	b510      	push	{r4, lr}
   bf8ea:	2104      	movs	r1, #4
   bf8ec:	4604      	mov	r4, r0
   bf8ee:	f7f5 fade 	bl	b4eae <_ZdlPvj>
   bf8f2:	4620      	mov	r0, r4
   bf8f4:	bd10      	pop	{r4, pc}

000bf8f6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bf8f6:	b510      	push	{r4, lr}
   bf8f8:	2104      	movs	r1, #4
   bf8fa:	4604      	mov	r4, r0
   bf8fc:	f7f5 fad7 	bl	b4eae <_ZdlPvj>
   bf900:	4620      	mov	r0, r4
   bf902:	bd10      	pop	{r4, pc}

000bf904 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   bf904:	f7ff b8fc 	b.w	beb00 <os_mutex_recursive_lock>

000bf908 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   bf908:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   bf90a:	f7f5 fa7d 	bl	b4e08 <strcmp>
}
   bf90e:	fab0 f080 	clz	r0, r0
   bf912:	0940      	lsrs	r0, r0, #5
   bf914:	bd08      	pop	{r3, pc}

000bf916 <__tcf_1>:
   bf916:	4770      	bx	lr

000bf918 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   bf918:	b510      	push	{r4, lr}
   bf91a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   bf91c:	f001 faf8 	bl	c0f10 <_Z16_fetch_usbserialv>
   bf920:	4284      	cmp	r4, r0
   bf922:	d010      	beq.n	bf946 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   bf924:	f001 fc8c 	bl	c1240 <_Z22__fetch_global_Serial1v>
   bf928:	4284      	cmp	r4, r0
   bf92a:	d105      	bne.n	bf938 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   bf92c:	f001 fc88 	bl	c1240 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   bf930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   bf934:	f001 ba87 	b.w	c0e46 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   bf938:	b12c      	cbz	r4, bf946 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   bf93a:	6823      	ldr	r3, [r4, #0]
   bf93c:	4620      	mov	r0, r4
   bf93e:	685b      	ldr	r3, [r3, #4]
}
   bf940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bf944:	4718      	bx	r3
   bf946:	bd10      	pop	{r4, pc}

000bf948 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf948:	680b      	ldr	r3, [r1, #0]
   bf94a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bf94c:	684b      	ldr	r3, [r1, #4]
   bf94e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bf950:	b113      	cbz	r3, bf958 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   bf952:	685a      	ldr	r2, [r3, #4]
   bf954:	3201      	adds	r2, #1
   bf956:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf958:	4770      	bx	lr

000bf95a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   bf95a:	b513      	push	{r0, r1, r4, lr}
   bf95c:	4604      	mov	r4, r0
    return value(val, strlen(val));
   bf95e:	4608      	mov	r0, r1
   bf960:	9101      	str	r1, [sp, #4]
   bf962:	f7f5 fa5b 	bl	b4e1c <strlen>
   bf966:	9901      	ldr	r1, [sp, #4]
   bf968:	4602      	mov	r2, r0
   bf96a:	4620      	mov	r0, r4
}
   bf96c:	b002      	add	sp, #8
   bf96e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   bf972:	f7ff bf39 	b.w	bf7e8 <_ZN5spark10JSONWriter5valueEPKcj>

000bf976 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   bf976:	b513      	push	{r0, r1, r4, lr}
   bf978:	4604      	mov	r4, r0
    write(str, strlen(str));
   bf97a:	4608      	mov	r0, r1
   bf97c:	9101      	str	r1, [sp, #4]
   bf97e:	f7f5 fa4d 	bl	b4e1c <strlen>
   bf982:	6823      	ldr	r3, [r4, #0]
   bf984:	9901      	ldr	r1, [sp, #4]
   bf986:	68db      	ldr	r3, [r3, #12]
   bf988:	4602      	mov	r2, r0
   bf98a:	4620      	mov	r0, r4
}
   bf98c:	b002      	add	sp, #8
   bf98e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   bf992:	4718      	bx	r3

000bf994 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   bf994:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bf996:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   bf998:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bf99c:	68db      	ldr	r3, [r3, #12]
   bf99e:	2201      	movs	r2, #1
   bf9a0:	f10d 0107 	add.w	r1, sp, #7
   bf9a4:	4798      	blx	r3
}
   bf9a6:	b003      	add	sp, #12
   bf9a8:	f85d fb04 	ldr.w	pc, [sp], #4

000bf9ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bf9ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
inline typename spark::Vector<T, AllocatorT>::ConstIterator spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   bf9b0:	e9d0 8400 	ldrd	r8, r4, [r0]
   bf9b4:	f04f 0a14 	mov.w	sl, #20
   bf9b8:	9300      	str	r3, [sp, #0]
   bf9ba:	fb0a f404 	mul.w	r4, sl, r4
   bf9be:	4b18      	ldr	r3, [pc, #96]	; (bfa20 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bf9c0:	10a4      	asrs	r4, r4, #2
   bf9c2:	4617      	mov	r7, r2
   bf9c4:	435c      	muls	r4, r3
   bf9c6:	4645      	mov	r5, r8
      while (__len > 0)
   bf9c8:	2c00      	cmp	r4, #0
   bf9ca:	dd21      	ble.n	bfa10 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	  _DistanceType __half = __len >> 1;
   bf9cc:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   bf9ce:	fb0a f006 	mul.w	r0, sl, r6
   bf9d2:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   bf9d6:	463a      	mov	r2, r7
   bf9d8:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   bf9dc:	5828      	ldr	r0, [r5, r0]
   bf9de:	9101      	str	r1, [sp, #4]
   bf9e0:	455f      	cmp	r7, fp
   bf9e2:	bf28      	it	cs
   bf9e4:	465a      	movcs	r2, fp
   bf9e6:	f003 fc78 	bl	c32da <strncmp>
                if (cmp == 0) {
   bf9ea:	2800      	cmp	r0, #0
   bf9ec:	9901      	ldr	r1, [sp, #4]
   bf9ee:	f04f 0301 	mov.w	r3, #1
   bf9f2:	d10b      	bne.n	bfa0c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   bf9f4:	455f      	cmp	r7, fp
   bf9f6:	d103      	bne.n	bfa00 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   bf9f8:	9a00      	ldr	r2, [sp, #0]
   bf9fa:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bf9fc:	4634      	mov	r4, r6
   bf9fe:	e7e3      	b.n	bf9c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  if (__comp(__middle, __val))
   bfa00:	d9fc      	bls.n	bf9fc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	      __len = __len - __half - 1;
   bfa02:	1ba6      	subs	r6, r4, r6
	      ++__first;
   bfa04:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   bfa08:	3e01      	subs	r6, #1
   bfa0a:	e7f7      	b.n	bf9fc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   bfa0c:	dbf9      	blt.n	bfa02 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   bfa0e:	e7f5      	b.n	bf9fc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   bfa10:	eba5 0508 	sub.w	r5, r5, r8
}
   bfa14:	4802      	ldr	r0, [pc, #8]	; (bfa20 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bfa16:	10ad      	asrs	r5, r5, #2
   bfa18:	4368      	muls	r0, r5
   bfa1a:	b003      	add	sp, #12
   bfa1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bfa20:	cccccccd 	.word	0xcccccccd

000bfa24 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bfa24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   bfa26:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   bfa28:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bfa2a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   bfa2c:	b303      	cbz	r3, bfa70 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   bfa2e:	b1f9      	cbz	r1, bfa70 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   bfa30:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   bfa32:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   bfa36:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   bfa38:	a903      	add	r1, sp, #12
   bfa3a:	a801      	add	r0, sp, #4
   bfa3c:	f7ff ff3b 	bl	bf8b6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bfa40:	4601      	mov	r1, r0
   bfa42:	b1a8      	cbz	r0, bfa70 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   bfa44:	f10d 030b 	add.w	r3, sp, #11
   bfa48:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   bfa4a:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   bfa4e:	4620      	mov	r0, r4
   bfa50:	f7ff ffac 	bl	bf9ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   bfa54:	f89d 300b 	ldrb.w	r3, [sp, #11]
   bfa58:	b153      	cbz	r3, bfa70 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   bfa5a:	6823      	ldr	r3, [r4, #0]
   bfa5c:	2414      	movs	r4, #20
   bfa5e:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   bfa62:	3408      	adds	r4, #8
            if (node.level >= 0) {
   bfa64:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   bfa68:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   bfa6a:	bfa8      	it	ge
   bfa6c:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   bfa6e:	e7e3      	b.n	bfa38 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   bfa70:	4628      	mov	r0, r5
   bfa72:	b004      	add	sp, #16
   bfa74:	bd70      	pop	{r4, r5, r6, pc}

000bfa76 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bfa76:	b40e      	push	{r1, r2, r3}
   bfa78:	b5f0      	push	{r4, r5, r6, r7, lr}
   bfa7a:	b08c      	sub	sp, #48	; 0x30
   bfa7c:	af00      	add	r7, sp, #0
   bfa7e:	f107 0544 	add.w	r5, r7, #68	; 0x44
   bfa82:	4604      	mov	r4, r0
   bfa84:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bfa88:	607a      	str	r2, [r7, #4]
   bfa8a:	462b      	mov	r3, r5
   bfa8c:	2120      	movs	r1, #32
   bfa8e:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   bfa92:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bfa94:	f7ff fab4 	bl	bf000 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   bfa98:	281f      	cmp	r0, #31
   bfa9a:	687a      	ldr	r2, [r7, #4]
   bfa9c:	d91a      	bls.n	bfad4 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   bfa9e:	f100 0308 	add.w	r3, r0, #8
   bfaa2:	f023 0307 	bic.w	r3, r3, #7
        }
   bfaa6:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   bfaa8:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bfaac:	1c41      	adds	r1, r0, #1
   bfaae:	462b      	mov	r3, r5
   bfab0:	4668      	mov	r0, sp
        va_start(args, fmt);
   bfab2:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bfab4:	f7ff faa4 	bl	bf000 <vsnprintf>
        if (n > 0) {
   bfab8:	1e02      	subs	r2, r0, #0
   bfaba:	dd04      	ble.n	bfac6 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   bfabc:	6823      	ldr	r3, [r4, #0]
   bfabe:	4669      	mov	r1, sp
   bfac0:	68db      	ldr	r3, [r3, #12]
   bfac2:	4620      	mov	r0, r4
   bfac4:	4798      	blx	r3
   bfac6:	46b5      	mov	sp, r6
}
   bfac8:	3730      	adds	r7, #48	; 0x30
   bfaca:	46bd      	mov	sp, r7
   bfacc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bfad0:	b003      	add	sp, #12
   bfad2:	4770      	bx	lr
    } else if (n > 0) {
   bfad4:	2800      	cmp	r0, #0
   bfad6:	d0f7      	beq.n	bfac8 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   bfad8:	6823      	ldr	r3, [r4, #0]
   bfada:	4602      	mov	r2, r0
   bfadc:	68db      	ldr	r3, [r3, #12]
   bfade:	f107 0110 	add.w	r1, r7, #16
   bfae2:	4620      	mov	r0, r4
   bfae4:	4798      	blx	r3
}
   bfae6:	e7ef      	b.n	bfac8 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000bfae8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   bfae8:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   bfaea:	4c09      	ldr	r4, [pc, #36]	; (bfb10 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   bfaec:	7823      	ldrb	r3, [r4, #0]
   bfaee:	f3bf 8f5b 	dmb	ish
   bfaf2:	07db      	lsls	r3, r3, #31
   bfaf4:	d409      	bmi.n	bfb0a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bfaf6:	4620      	mov	r0, r4
   bfaf8:	f7ff fab2 	bl	bf060 <__cxa_guard_acquire>
   bfafc:	b128      	cbz	r0, bfb0a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bfafe:	4620      	mov	r0, r4
   bfb00:	f7ff fab6 	bl	bf070 <__cxa_guard_release>
   bfb04:	4803      	ldr	r0, [pc, #12]	; (bfb14 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   bfb06:	f003 fb41 	bl	c318c <atexit>
}
   bfb0a:	4803      	ldr	r0, [pc, #12]	; (bfb18 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   bfb0c:	bd10      	pop	{r4, pc}
   bfb0e:	bf00      	nop
   bfb10:	2003df3c 	.word	0x2003df3c
   bfb14:	000bf8af 	.word	0x000bf8af
   bfb18:	2003d274 	.word	0x2003d274

000bfb1c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   bfb1c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   bfb1e:	4c09      	ldr	r4, [pc, #36]	; (bfb44 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   bfb20:	7823      	ldrb	r3, [r4, #0]
   bfb22:	f3bf 8f5b 	dmb	ish
   bfb26:	07db      	lsls	r3, r3, #31
   bfb28:	d409      	bmi.n	bfb3e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bfb2a:	4620      	mov	r0, r4
   bfb2c:	f7ff fa98 	bl	bf060 <__cxa_guard_acquire>
   bfb30:	b128      	cbz	r0, bfb3e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bfb32:	4620      	mov	r0, r4
   bfb34:	f7ff fa9c 	bl	bf070 <__cxa_guard_release>
   bfb38:	4803      	ldr	r0, [pc, #12]	; (bfb48 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   bfb3a:	f003 fb27 	bl	c318c <atexit>
    return &factory;
}
   bfb3e:	4803      	ldr	r0, [pc, #12]	; (bfb4c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   bfb40:	bd10      	pop	{r4, pc}
   bfb42:	bf00      	nop
   bfb44:	2003df40 	.word	0x2003df40
   bfb48:	000bf917 	.word	0x000bf917
   bfb4c:	2003d278 	.word	0x2003d278

000bfb50 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   bfb50:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bfb52:	2500      	movs	r5, #0
   bfb54:	4604      	mov	r4, r0
   bfb56:	e9c0 5500 	strd	r5, r5, [r0]
   bfb5a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bfb5e:	6085      	str	r5, [r0, #8]
   bfb60:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   bfb62:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   bfb66:	f7fe ffbb 	bl	beae0 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   bfb6a:	f7ff ffbd 	bl	bfae8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   bfb6e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bfb70:	f7ff ffd4 	bl	bfb1c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   bfb74:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bfb76:	6220      	str	r0, [r4, #32]
}
   bfb78:	4620      	mov	r0, r4
   bfb7a:	bd38      	pop	{r3, r4, r5, pc}

000bfb7c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   bfb7c:	b510      	push	{r4, lr}
    static LogManager mgr;
   bfb7e:	4c0a      	ldr	r4, [pc, #40]	; (bfba8 <_ZN5spark10LogManager8instanceEv+0x2c>)
   bfb80:	7823      	ldrb	r3, [r4, #0]
   bfb82:	f3bf 8f5b 	dmb	ish
   bfb86:	07db      	lsls	r3, r3, #31
   bfb88:	d40c      	bmi.n	bfba4 <_ZN5spark10LogManager8instanceEv+0x28>
   bfb8a:	4620      	mov	r0, r4
   bfb8c:	f7ff fa68 	bl	bf060 <__cxa_guard_acquire>
   bfb90:	b140      	cbz	r0, bfba4 <_ZN5spark10LogManager8instanceEv+0x28>
   bfb92:	4806      	ldr	r0, [pc, #24]	; (bfbac <_ZN5spark10LogManager8instanceEv+0x30>)
   bfb94:	f7ff ffdc 	bl	bfb50 <_ZN5spark10LogManagerC1Ev>
   bfb98:	4620      	mov	r0, r4
   bfb9a:	f7ff fa69 	bl	bf070 <__cxa_guard_release>
   bfb9e:	4804      	ldr	r0, [pc, #16]	; (bfbb0 <_ZN5spark10LogManager8instanceEv+0x34>)
   bfba0:	f003 faf4 	bl	c318c <atexit>
    return &mgr;
}
   bfba4:	4801      	ldr	r0, [pc, #4]	; (bfbac <_ZN5spark10LogManager8instanceEv+0x30>)
   bfba6:	bd10      	pop	{r4, pc}
   bfba8:	2003df38 	.word	0x2003df38
   bfbac:	2003df48 	.word	0x2003df48
   bfbb0:	000c00f5 	.word	0x000c00f5

000bfbb4 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   bfbb4:	4a02      	ldr	r2, [pc, #8]	; (bfbc0 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   bfbb6:	4903      	ldr	r1, [pc, #12]	; (bfbc4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   bfbb8:	4803      	ldr	r0, [pc, #12]	; (bfbc8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   bfbba:	2300      	movs	r3, #0
   bfbbc:	f7ff b950 	b.w	bee60 <log_set_callbacks>
   bfbc0:	000bfed9 	.word	0x000bfed9
   bfbc4:	000bfe65 	.word	0x000bfe65
   bfbc8:	000bfde5 	.word	0x000bfde5

000bfbcc <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   bfbcc:	2300      	movs	r3, #0
   bfbce:	461a      	mov	r2, r3
   bfbd0:	4619      	mov	r1, r3
   bfbd2:	4618      	mov	r0, r3
   bfbd4:	f7ff b944 	b.w	bee60 <log_set_callbacks>

000bfbd8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   bfbd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   bfbda:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   bfbdc:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bfbde:	4668      	mov	r0, sp
   bfbe0:	f7ff feb2 	bl	bf948 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   bfbe4:	466a      	mov	r2, sp
   bfbe6:	4629      	mov	r1, r5
   bfbe8:	4620      	mov	r0, r4
   bfbea:	f7ff fd1d 	bl	bf628 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   bfbee:	a801      	add	r0, sp, #4
   bfbf0:	f7ff fa49 	bl	bf086 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfbf4:	4620      	mov	r0, r4
   bfbf6:	b003      	add	sp, #12
   bfbf8:	bd30      	pop	{r4, r5, pc}

000bfbfa <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   bfbfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   bfbfc:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   bfbfe:	4604      	mov	r4, r0
   bfc00:	4668      	mov	r0, sp
   bfc02:	f7ff fea1 	bl	bf948 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   bfc06:	466a      	mov	r2, sp
   bfc08:	4629      	mov	r1, r5
   bfc0a:	4620      	mov	r0, r4
   bfc0c:	f7ff fce8 	bl	bf5e0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   bfc10:	a801      	add	r0, sp, #4
   bfc12:	f7ff fa38 	bl	bf086 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfc16:	4620      	mov	r0, r4
   bfc18:	b003      	add	sp, #12
   bfc1a:	bd30      	pop	{r4, r5, pc}

000bfc1c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   bfc1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   bfc1e:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   bfc20:	4604      	mov	r4, r0
   bfc22:	4668      	mov	r0, sp
   bfc24:	f7ff fe90 	bl	bf948 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   bfc28:	466a      	mov	r2, sp
   bfc2a:	4629      	mov	r1, r5
   bfc2c:	4620      	mov	r0, r4
   bfc2e:	f7ff fc80 	bl	bf532 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   bfc32:	a801      	add	r0, sp, #4
   bfc34:	f7ff fa27 	bl	bf086 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfc38:	4620      	mov	r0, r4
   bfc3a:	b003      	add	sp, #12
   bfc3c:	bd30      	pop	{r4, r5, pc}
	...

000bfc40 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   bfc40:	b570      	push	{r4, r5, r6, lr}
   bfc42:	b08a      	sub	sp, #40	; 0x28
   bfc44:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   bfc46:	4601      	mov	r1, r0
   bfc48:	a804      	add	r0, sp, #16
   bfc4a:	f7ff ffc5 	bl	bfbd8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   bfc4e:	4e14      	ldr	r6, [pc, #80]	; (bfca0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   bfc50:	a804      	add	r0, sp, #16
   bfc52:	f7ff fd01 	bl	bf658 <_ZN5spark18JSONObjectIterator4nextEv>
   bfc56:	b1e8      	cbz	r0, bfc94 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   bfc58:	a904      	add	r1, sp, #16
   bfc5a:	4668      	mov	r0, sp
   bfc5c:	f7ff ffcd 	bl	bfbfa <_ZNK5spark18JSONObjectIterator4nameEv>
   bfc60:	9802      	ldr	r0, [sp, #8]
   bfc62:	4631      	mov	r1, r6
   bfc64:	f7ff fe50 	bl	bf908 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   bfc68:	4604      	mov	r4, r0
   bfc6a:	b110      	cbz	r0, bfc72 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   bfc6c:	1e2c      	subs	r4, r5, #0
   bfc6e:	bf18      	it	ne
   bfc70:	2401      	movne	r4, #1
   bfc72:	a801      	add	r0, sp, #4
   bfc74:	f7ff fa07 	bl	bf086 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfc78:	2c00      	cmp	r4, #0
   bfc7a:	d0e9      	beq.n	bfc50 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   bfc7c:	a904      	add	r1, sp, #16
   bfc7e:	4668      	mov	r0, sp
   bfc80:	f7ff ffcc 	bl	bfc1c <_ZNK5spark18JSONObjectIterator5valueEv>
   bfc84:	4668      	mov	r0, sp
   bfc86:	f7ff fc8a 	bl	bf59e <_ZNK5spark9JSONValue5toIntEv>
   bfc8a:	6028      	str	r0, [r5, #0]
   bfc8c:	a801      	add	r0, sp, #4
   bfc8e:	f7ff f9fa 	bl	bf086 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfc92:	e7dd      	b.n	bfc50 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   bfc94:	a805      	add	r0, sp, #20
   bfc96:	f7ff f9f6 	bl	bf086 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfc9a:	b00a      	add	sp, #40	; 0x28
   bfc9c:	bd70      	pop	{r4, r5, r6, pc}
   bfc9e:	bf00      	nop
   bfca0:	000c8b10 	.word	0x000c8b10

000bfca4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bfca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bfca6:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   bfca8:	4620      	mov	r0, r4
   bfcaa:	4913      	ldr	r1, [pc, #76]	; (bfcf8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bfcac:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   bfcae:	f7f5 f8ab 	bl	b4e08 <strcmp>
   bfcb2:	b950      	cbnz	r0, bfcca <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   bfcb4:	f001 f92c 	bl	c0f10 <_Z16_fetch_usbserialv>
   bfcb8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   bfcbc:	f001 f918 	bl	c0ef0 <_ZN9USBSerial5beginEl>
}
   bfcc0:	b003      	add	sp, #12
   bfcc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   bfcc6:	f001 b923 	b.w	c0f10 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   bfcca:	490c      	ldr	r1, [pc, #48]	; (bfcfc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   bfccc:	4620      	mov	r0, r4
   bfcce:	f7f5 f89b 	bl	b4e08 <strcmp>
   bfcd2:	b978      	cbnz	r0, bfcf4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   bfcd4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   bfcd8:	a901      	add	r1, sp, #4
   bfcda:	4628      	mov	r0, r5
        int baud = 9600;
   bfcdc:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   bfcde:	f7ff ffaf 	bl	bfc40 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   bfce2:	f001 faad 	bl	c1240 <_Z22__fetch_global_Serial1v>
   bfce6:	9901      	ldr	r1, [sp, #4]
   bfce8:	f001 f8aa 	bl	c0e40 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   bfcec:	f001 faa8 	bl	c1240 <_Z22__fetch_global_Serial1v>
}
   bfcf0:	b003      	add	sp, #12
   bfcf2:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   bfcf4:	2000      	movs	r0, #0
   bfcf6:	e7fb      	b.n	bfcf0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   bfcf8:	000c8b15 	.word	0x000c8b15
   bfcfc:	000c8b1c 	.word	0x000c8b1c

000bfd00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bfd00:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bfd02:	e9d0 5300 	ldrd	r5, r3, [r0]
   bfd06:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   bfd08:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bfd0a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bfd0e:	42ae      	cmp	r6, r5
   bfd10:	d005      	beq.n	bfd1e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   bfd12:	f105 0008 	add.w	r0, r5, #8
   bfd16:	f7ff fff3 	bl	bfd00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bfd1a:	3514      	adds	r5, #20
   bfd1c:	e7f7      	b.n	bfd0e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   bfd1e:	6820      	ldr	r0, [r4, #0]
   bfd20:	f7ff f95e 	bl	befe0 <free>
}
   bfd24:	4620      	mov	r0, r4
   bfd26:	bd70      	pop	{r4, r5, r6, pc}

000bfd28 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   bfd28:	b510      	push	{r4, lr}
   bfd2a:	4604      	mov	r4, r0
   bfd2c:	300c      	adds	r0, #12
   bfd2e:	f7ff ffe7 	bl	bfd00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bfd32:	4620      	mov	r0, r4
   bfd34:	f7ff f9d1 	bl	bf0da <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bfd38:	4620      	mov	r0, r4
   bfd3a:	bd10      	pop	{r4, pc}

000bfd3c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   bfd3c:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   bfd3e:	4b04      	ldr	r3, [pc, #16]	; (bfd50 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   bfd40:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   bfd42:	f840 3b04 	str.w	r3, [r0], #4
   bfd46:	f7ff ffef 	bl	bfd28 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   bfd4a:	4620      	mov	r0, r4
   bfd4c:	bd10      	pop	{r4, pc}
   bfd4e:	bf00      	nop
   bfd50:	000c60b4 	.word	0x000c60b4

000bfd54 <_ZN5spark16StreamLogHandlerD0Ev>:
   bfd54:	b510      	push	{r4, lr}
   bfd56:	4604      	mov	r4, r0
   bfd58:	f7ff fff0 	bl	bfd3c <_ZN5spark16StreamLogHandlerD1Ev>
   bfd5c:	4620      	mov	r0, r4
   bfd5e:	2124      	movs	r1, #36	; 0x24
   bfd60:	f7f5 f8a5 	bl	b4eae <_ZdlPvj>
   bfd64:	4620      	mov	r0, r4
   bfd66:	bd10      	pop	{r4, pc}

000bfd68 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   bfd68:	b510      	push	{r4, lr}
   bfd6a:	4b03      	ldr	r3, [pc, #12]	; (bfd78 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   bfd6c:	6003      	str	r3, [r0, #0]
   bfd6e:	4604      	mov	r4, r0
   bfd70:	f7ff ffe4 	bl	bfd3c <_ZN5spark16StreamLogHandlerD1Ev>
   bfd74:	4620      	mov	r0, r4
   bfd76:	bd10      	pop	{r4, pc}
   bfd78:	000c8bb4 	.word	0x000c8bb4

000bfd7c <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   bfd7c:	b510      	push	{r4, lr}
   bfd7e:	4604      	mov	r4, r0
   bfd80:	f7ff fff2 	bl	bfd68 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   bfd84:	4620      	mov	r0, r4
   bfd86:	2124      	movs	r1, #36	; 0x24
   bfd88:	f7f5 f891 	bl	b4eae <_ZdlPvj>
   bfd8c:	4620      	mov	r0, r4
   bfd8e:	bd10      	pop	{r4, pc}

000bfd90 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   bfd90:	680a      	ldr	r2, [r1, #0]
   bfd92:	6002      	str	r2, [r0, #0]
   bfd94:	684a      	ldr	r2, [r1, #4]
   bfd96:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   bfd98:	2200      	movs	r2, #0
   bfd9a:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bfd9e:	b510      	push	{r4, lr}
   bfda0:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   bfda2:	688c      	ldr	r4, [r1, #8]
   bfda4:	6084      	str	r4, [r0, #8]
   bfda6:	68cc      	ldr	r4, [r1, #12]
   bfda8:	60c4      	str	r4, [r0, #12]
   bfdaa:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bfdac:	608a      	str	r2, [r1, #8]
   bfdae:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   bfdb0:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bfdb2:	610a      	str	r2, [r1, #16]
   bfdb4:	bd10      	pop	{r4, pc}

000bfdb6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
   bfdb6:	2200      	movs	r2, #0
   bfdb8:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   bfdbc:	b510      	push	{r4, lr}
        capacity_(0) {
   bfdbe:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   bfdc0:	680c      	ldr	r4, [r1, #0]
   bfdc2:	6004      	str	r4, [r0, #0]
   bfdc4:	684c      	ldr	r4, [r1, #4]
   bfdc6:	6044      	str	r4, [r0, #4]
   bfdc8:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bfdca:	600a      	str	r2, [r1, #0]
   bfdcc:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bfdce:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bfdd0:	608a      	str	r2, [r1, #8]
}
   bfdd2:	bd10      	pop	{r4, pc}

000bfdd4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   bfdd4:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bfdd6:	6803      	ldr	r3, [r0, #0]
   bfdd8:	4604      	mov	r4, r0
   bfdda:	6818      	ldr	r0, [r3, #0]
   bfddc:	f7fe fe98 	bl	beb10 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   bfde0:	4620      	mov	r0, r4
   bfde2:	bd10      	pop	{r4, pc}

000bfde4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   bfde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfde8:	b087      	sub	sp, #28
   bfdea:	4680      	mov	r8, r0
   bfdec:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   bfdee:	4b1c      	ldr	r3, [pc, #112]	; (bfe60 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   bfdf0:	685b      	ldr	r3, [r3, #4]
   bfdf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bfdf6:	4689      	mov	r9, r1
   bfdf8:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   bfdfa:	b96b      	cbnz	r3, bfe18 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   bfdfc:	f7ff febe 	bl	bfb7c <_ZN5spark10LogManager8instanceEv>
   bfe00:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bfe02:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   bfe06:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfe08:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   bfe0a:	f7ff fd7b 	bl	bf904 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   bfe0e:	7b23      	ldrb	r3, [r4, #12]
   bfe10:	b12b      	cbz	r3, bfe1e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   bfe12:	a805      	add	r0, sp, #20
   bfe14:	f7ff ffde 	bl	bfdd4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   bfe18:	b007      	add	sp, #28
   bfe1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   bfe1e:	2301      	movs	r3, #1
   bfe20:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   bfe22:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   bfe26:	fa5f f989 	uxtb.w	r9, r9
   bfe2a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bfe2e:	45aa      	cmp	sl, r5
   bfe30:	d012      	beq.n	bfe58 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   bfe32:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   bfe36:	4631      	mov	r1, r6
   bfe38:	1d38      	adds	r0, r7, #4
   bfe3a:	f7ff fdf3 	bl	bfa24 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bfe3e:	4581      	cmp	r9, r0
   bfe40:	d3f5      	bcc.n	bfe2e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   bfe42:	683b      	ldr	r3, [r7, #0]
   bfe44:	9a03      	ldr	r2, [sp, #12]
   bfe46:	9200      	str	r2, [sp, #0]
   bfe48:	f8d3 b008 	ldr.w	fp, [r3, #8]
   bfe4c:	464a      	mov	r2, r9
   bfe4e:	4633      	mov	r3, r6
   bfe50:	4641      	mov	r1, r8
   bfe52:	4638      	mov	r0, r7
   bfe54:	47d8      	blx	fp
   bfe56:	e7ea      	b.n	bfe2e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   bfe58:	2300      	movs	r3, #0
   bfe5a:	7323      	strb	r3, [r4, #12]
   bfe5c:	e7d9      	b.n	bfe12 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   bfe5e:	bf00      	nop
   bfe60:	e000ed00 	.word	0xe000ed00

000bfe64 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   bfe64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfe68:	469b      	mov	fp, r3
   bfe6a:	4b1a      	ldr	r3, [pc, #104]	; (bfed4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   bfe6c:	685b      	ldr	r3, [r3, #4]
   bfe6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bfe72:	4680      	mov	r8, r0
   bfe74:	4689      	mov	r9, r1
   bfe76:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   bfe78:	b96b      	cbnz	r3, bfe96 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   bfe7a:	f7ff fe7f 	bl	bfb7c <_ZN5spark10LogManager8instanceEv>
   bfe7e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bfe80:	f100 0324 	add.w	r3, r0, #36	; 0x24
   bfe84:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfe86:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bfe88:	f7ff fd3c 	bl	bf904 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   bfe8c:	7b23      	ldrb	r3, [r4, #12]
   bfe8e:	b12b      	cbz	r3, bfe9c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   bfe90:	a801      	add	r0, sp, #4
   bfe92:	f7ff ff9f 	bl	bfdd4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bfe96:	b003      	add	sp, #12
   bfe98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   bfe9c:	2301      	movs	r3, #1
   bfe9e:	7323      	strb	r3, [r4, #12]
   bfea0:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   bfea4:	b2f6      	uxtb	r6, r6
   bfea6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bfeaa:	4555      	cmp	r5, sl
   bfeac:	d00e      	beq.n	bfecc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   bfeae:	f855 7b04 	ldr.w	r7, [r5], #4
   bfeb2:	4659      	mov	r1, fp
   bfeb4:	1d38      	adds	r0, r7, #4
   bfeb6:	f7ff fdb5 	bl	bfa24 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bfeba:	4286      	cmp	r6, r0
   bfebc:	d3f5      	bcc.n	bfeaa <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   bfebe:	683b      	ldr	r3, [r7, #0]
   bfec0:	464a      	mov	r2, r9
   bfec2:	68db      	ldr	r3, [r3, #12]
   bfec4:	4641      	mov	r1, r8
   bfec6:	4638      	mov	r0, r7
   bfec8:	4798      	blx	r3
   bfeca:	e7ee      	b.n	bfeaa <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   bfecc:	2300      	movs	r3, #0
   bfece:	7323      	strb	r3, [r4, #12]
   bfed0:	e7de      	b.n	bfe90 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   bfed2:	bf00      	nop
   bfed4:	e000ed00 	.word	0xe000ed00

000bfed8 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   bfed8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bfedc:	4b16      	ldr	r3, [pc, #88]	; (bff38 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   bfede:	685b      	ldr	r3, [r3, #4]
   bfee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bfee4:	4605      	mov	r5, r0
   bfee6:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   bfee8:	bb1b      	cbnz	r3, bff32 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   bfeea:	f7ff fe47 	bl	bfb7c <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   bfeee:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   bfef2:	4604      	mov	r4, r0
   bfef4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfef6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bfef8:	f7ff fd04 	bl	bf904 <_ZN14RecursiveMutex4lockEv.isra.0>
   bfefc:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   bff00:	2446      	movs	r4, #70	; 0x46
   bff02:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bff06:	45b0      	cmp	r8, r6
   bff08:	d109      	bne.n	bff1e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   bff0a:	a801      	add	r0, sp, #4
   bff0c:	f7ff ff62 	bl	bfdd4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   bff10:	42a5      	cmp	r5, r4
   bff12:	bfb4      	ite	lt
   bff14:	2000      	movlt	r0, #0
   bff16:	2001      	movge	r0, #1
}
   bff18:	b002      	add	sp, #8
   bff1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   bff1e:	f856 0b04 	ldr.w	r0, [r6], #4
   bff22:	4639      	mov	r1, r7
   bff24:	3004      	adds	r0, #4
   bff26:	f7ff fd7d 	bl	bfa24 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   bff2a:	4284      	cmp	r4, r0
   bff2c:	bfa8      	it	ge
   bff2e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   bff30:	e7e9      	b.n	bff06 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   bff32:	2000      	movs	r0, #0
   bff34:	e7f0      	b.n	bff18 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   bff36:	bf00      	nop
   bff38:	e000ed00 	.word	0xe000ed00

000bff3c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bff3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bff3e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   bff42:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bff44:	4604      	mov	r4, r0
   bff46:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bff48:	db0d      	blt.n	bff66 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   bff4a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   bff4c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bff4e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bff50:	dd04      	ble.n	bff5c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   bff52:	00b9      	lsls	r1, r7, #2
   bff54:	f7ff f84c 	bl	beff0 <realloc>
            if (!d) {
   bff58:	b918      	cbnz	r0, bff62 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   bff5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   bff5c:	f7ff f840 	bl	befe0 <free>
        T* d = nullptr;
   bff60:	2000      	movs	r0, #0
        data_ = d;
   bff62:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bff64:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bff66:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   bff68:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bff6a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   bff6e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   bff70:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   bff74:	1d08      	adds	r0, r1, #4
   bff76:	f003 f931 	bl	c31dc <memmove>
    new(p) T(std::move(value));
   bff7a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   bff7e:	6863      	ldr	r3, [r4, #4]
   bff80:	3301      	adds	r3, #1
   bff82:	6063      	str	r3, [r4, #4]
    return true;
   bff84:	2001      	movs	r0, #1
   bff86:	e7e8      	b.n	bff5a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000bff88 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   bff88:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   bff8a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   bff8e:	4604      	mov	r4, r0
   bff90:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bff92:	9301      	str	r3, [sp, #4]
   bff94:	460d      	mov	r5, r1
      { _M_device.lock(); }
   bff96:	f7ff fcb5 	bl	bf904 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   bff9a:	e9d4 3200 	ldrd	r3, r2, [r4]
   bff9e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   bffa2:	4293      	cmp	r3, r2
   bffa4:	4619      	mov	r1, r3
   bffa6:	d00b      	beq.n	bffc0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   bffa8:	6809      	ldr	r1, [r1, #0]
   bffaa:	42a9      	cmp	r1, r5
   bffac:	f103 0304 	add.w	r3, r3, #4
   bffb0:	d1f7      	bne.n	bffa2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   bffb2:	a801      	add	r0, sp, #4
   bffb4:	f7ff ff0e 	bl	bfdd4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bffb8:	2500      	movs	r5, #0
}
   bffba:	4628      	mov	r0, r5
   bffbc:	b003      	add	sp, #12
   bffbe:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   bffc0:	4629      	mov	r1, r5
   bffc2:	4620      	mov	r0, r4
   bffc4:	f7ff ffba 	bl	bff3c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   bffc8:	4605      	mov	r5, r0
   bffca:	2800      	cmp	r0, #0
   bffcc:	d0f1      	beq.n	bffb2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   bffce:	6863      	ldr	r3, [r4, #4]
   bffd0:	2b01      	cmp	r3, #1
   bffd2:	d101      	bne.n	bffd8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   bffd4:	f7ff fdee 	bl	bfbb4 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bffd8:	a801      	add	r0, sp, #4
   bffda:	f7ff fefb 	bl	bfdd4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bffde:	e7ec      	b.n	bffba <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000bffe0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bffe0:	b570      	push	{r4, r5, r6, lr}
   bffe2:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   bffe4:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bffe8:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   bffea:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   bffee:	4282      	cmp	r2, r0
   bfff0:	d00f      	beq.n	c0012 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   bfff2:	4601      	mov	r1, r0
            if (*p == value) {
   bfff4:	681d      	ldr	r5, [r3, #0]
   bfff6:	f851 6b04 	ldr.w	r6, [r1], #4
   bfffa:	42ae      	cmp	r6, r5
   bfffc:	d107      	bne.n	c000e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   bfffe:	1a52      	subs	r2, r2, r1
   c0000:	f003 f8ec 	bl	c31dc <memmove>
    --size_;
   c0004:	6863      	ldr	r3, [r4, #4]
   c0006:	3b01      	subs	r3, #1
   c0008:	6063      	str	r3, [r4, #4]
    return true;
   c000a:	2001      	movs	r0, #1
}
   c000c:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   c000e:	4608      	mov	r0, r1
   c0010:	e7ed      	b.n	bffee <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   c0012:	2000      	movs	r0, #0
   c0014:	e7fa      	b.n	c000c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000c0016 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   c0016:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   c0018:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   c001c:	4604      	mov	r4, r0
   c001e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   c0020:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0022:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   c0024:	f7ff fc6e 	bl	bf904 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   c0028:	a901      	add	r1, sp, #4
   c002a:	4620      	mov	r0, r4
   c002c:	f7ff ffd8 	bl	bffe0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   c0030:	b118      	cbz	r0, c003a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   c0032:	6863      	ldr	r3, [r4, #4]
   c0034:	b90b      	cbnz	r3, c003a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   c0036:	f7ff fdc9 	bl	bfbcc <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c003a:	a803      	add	r0, sp, #12
   c003c:	f7ff feca 	bl	bfdd4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   c0040:	b004      	add	sp, #16
   c0042:	bd10      	pop	{r4, pc}

000c0044 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   c0044:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   c0046:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   c004a:	2318      	movs	r3, #24
   c004c:	4604      	mov	r4, r0
   c004e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   c0052:	42ae      	cmp	r6, r5
   c0054:	d015      	beq.n	c0082 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   c0056:	f105 0110 	add.w	r1, r5, #16
   c005a:	4620      	mov	r0, r4
   c005c:	f7ff ffc0 	bl	bffe0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   c0060:	6863      	ldr	r3, [r4, #4]
   c0062:	b90b      	cbnz	r3, c0068 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   c0064:	f7ff fdb2 	bl	bfbcc <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   c0068:	69e0      	ldr	r0, [r4, #28]
   c006a:	6929      	ldr	r1, [r5, #16]
   c006c:	6803      	ldr	r3, [r0, #0]
   c006e:	68db      	ldr	r3, [r3, #12]
   c0070:	4798      	blx	r3
        if (h.stream) {
   c0072:	6969      	ldr	r1, [r5, #20]
   c0074:	b119      	cbz	r1, c007e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   c0076:	6a20      	ldr	r0, [r4, #32]
   c0078:	6803      	ldr	r3, [r0, #0]
   c007a:	68db      	ldr	r3, [r3, #12]
   c007c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   c007e:	3518      	adds	r5, #24
   c0080:	e7e7      	b.n	c0052 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   c0082:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   c0086:	2618      	movs	r6, #24
   c0088:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c008c:	42ae      	cmp	r6, r5
   c008e:	d004      	beq.n	c009a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   c0090:	4628      	mov	r0, r5
   c0092:	f000 fd96 	bl	c0bc2 <_ZN6StringD1Ev>
   c0096:	3518      	adds	r5, #24
   c0098:	e7f8      	b.n	c008c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   c009a:	2300      	movs	r3, #0
   c009c:	6163      	str	r3, [r4, #20]
}
   c009e:	bd70      	pop	{r4, r5, r6, pc}

000c00a0 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   c00a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c00a2:	4604      	mov	r4, r0
    resetSystemCallbacks();
   c00a4:	f7ff fd92 	bl	bfbcc <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c00a8:	f104 0324 	add.w	r3, r4, #36	; 0x24
   c00ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c00ae:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c00b0:	f7ff fc28 	bl	bf904 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   c00b4:	4620      	mov	r0, r4
   c00b6:	f7ff ffc5 	bl	c0044 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   c00ba:	a801      	add	r0, sp, #4
   c00bc:	f7ff fe8a 	bl	bfdd4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   c00c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   c00c2:	b108      	cbz	r0, c00c8 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   c00c4:	f7fe fd14 	bl	beaf0 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   c00c8:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   c00cc:	2618      	movs	r6, #24
   c00ce:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c00d2:	42ae      	cmp	r6, r5
   c00d4:	d004      	beq.n	c00e0 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   c00d6:	4628      	mov	r0, r5
   c00d8:	f000 fd73 	bl	c0bc2 <_ZN6StringD1Ev>
   c00dc:	3518      	adds	r5, #24
   c00de:	e7f8      	b.n	c00d2 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   c00e0:	6920      	ldr	r0, [r4, #16]
   c00e2:	f7fe ff7d 	bl	befe0 <free>
   c00e6:	6820      	ldr	r0, [r4, #0]
   c00e8:	f7fe ff7a 	bl	befe0 <free>
}
   c00ec:	4620      	mov	r0, r4
   c00ee:	b002      	add	sp, #8
   c00f0:	bd70      	pop	{r4, r5, r6, pc}
	...

000c00f4 <__tcf_2>:
    static LogManager mgr;
   c00f4:	4801      	ldr	r0, [pc, #4]	; (c00fc <__tcf_2+0x8>)
   c00f6:	f7ff bfd3 	b.w	c00a0 <_ZN5spark10LogManagerD1Ev>
   c00fa:	bf00      	nop
   c00fc:	2003df48 	.word	0x2003df48

000c0100 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   c0100:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   c0102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0104:	4604      	mov	r4, r0
   c0106:	460d      	mov	r5, r1
   c0108:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   c010a:	d915      	bls.n	c0138 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   c010c:	4290      	cmp	r0, r2
   c010e:	d214      	bcs.n	c013a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   c0110:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   c0114:	1a75      	subs	r5, r6, r1
   c0116:	f1a1 0714 	sub.w	r7, r1, #20
   c011a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   c011c:	42b7      	cmp	r7, r6
   c011e:	d01a      	beq.n	c0156 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   c0120:	b11c      	cbz	r4, c012a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   c0122:	4631      	mov	r1, r6
   c0124:	4620      	mov	r0, r4
   c0126:	f7ff fe33 	bl	bfd90 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   c012a:	f106 0008 	add.w	r0, r6, #8
   c012e:	f7ff fde7 	bl	bfd00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   c0132:	3e14      	subs	r6, #20
   c0134:	3c14      	subs	r4, #20
   c0136:	e7f1      	b.n	c011c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   c0138:	d00d      	beq.n	c0156 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   c013a:	42b5      	cmp	r5, r6
   c013c:	d00b      	beq.n	c0156 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   c013e:	b11c      	cbz	r4, c0148 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   c0140:	4629      	mov	r1, r5
   c0142:	4620      	mov	r0, r4
   c0144:	f7ff fe24 	bl	bfd90 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   c0148:	f105 0008 	add.w	r0, r5, #8
   c014c:	f7ff fdd8 	bl	bfd00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   c0150:	3514      	adds	r5, #20
   c0152:	3414      	adds	r4, #20
   c0154:	e7f1      	b.n	c013a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   c0156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c0158 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c0158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c015c:	4690      	mov	r8, r2
   c015e:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   c0160:	2300      	movs	r3, #0
   c0162:	9103      	str	r1, [sp, #12]
    return size_;
   c0164:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   c0168:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c016a:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   c016c:	4299      	cmp	r1, r3
        capacity_(0) {
   c016e:	e9c0 3300 	strd	r3, r3, [r0]
   c0172:	e9c0 3302 	strd	r3, r3, [r0, #8]
   c0176:	e9c0 3304 	strd	r3, r3, [r0, #16]
   c017a:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c017e:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c0180:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   c0182:	dc23      	bgt.n	c01cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   c0184:	e9d8 5700 	ldrd	r5, r7, [r8]
   c0188:	2314      	movs	r3, #20
   c018a:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   c018e:	42af      	cmp	r7, r5
   c0190:	d03b      	beq.n	c020a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   c0192:	4629      	mov	r1, r5
   c0194:	a80b      	add	r0, sp, #44	; 0x2c
   c0196:	f000 fd7d 	bl	c0c94 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   c019a:	a90b      	add	r1, sp, #44	; 0x2c
   c019c:	a80f      	add	r0, sp, #60	; 0x3c
   c019e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   c01a0:	f000 fd78 	bl	c0c94 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c01a4:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   c01a8:	4299      	cmp	r1, r3
   c01aa:	da1b      	bge.n	c01e4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   c01ac:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   c01ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   c01b0:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   c01b4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   c01b8:	4631      	mov	r1, r6
   c01ba:	f106 0010 	add.w	r0, r6, #16
   c01be:	f7ff fb23 	bl	bf808 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   c01c2:	b9ee      	cbnz	r6, c0200 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   c01c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c01c6:	3301      	adds	r3, #1
   c01c8:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   c01ca:	e011      	b.n	c01f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   c01cc:	a808      	add	r0, sp, #32
   c01ce:	f7ff fb45 	bl	bf85c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c01d2:	2800      	cmp	r0, #0
   c01d4:	d1d6      	bne.n	c0184 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   c01d6:	a808      	add	r0, sp, #32
   c01d8:	f7fe ff7f 	bl	bf0da <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   c01dc:	4620      	mov	r0, r4
   c01de:	b015      	add	sp, #84	; 0x54
   c01e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c01e4:	3101      	adds	r1, #1
   c01e6:	a808      	add	r0, sp, #32
   c01e8:	f7ff fb38 	bl	bf85c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c01ec:	2800      	cmp	r0, #0
   c01ee:	d1dd      	bne.n	c01ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   c01f0:	a80f      	add	r0, sp, #60	; 0x3c
   c01f2:	f000 fce6 	bl	c0bc2 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   c01f6:	a80b      	add	r0, sp, #44	; 0x2c
   c01f8:	f000 fce3 	bl	c0bc2 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   c01fc:	3514      	adds	r5, #20
   c01fe:	e7c6      	b.n	c018e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   c0200:	a90f      	add	r1, sp, #60	; 0x3c
   c0202:	4630      	mov	r0, r6
   c0204:	f000 fd46 	bl	c0c94 <_ZN6StringC1EOS_>
   c0208:	e7dc      	b.n	c01c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   c020a:	2600      	movs	r6, #0
   c020c:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   c0210:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   c0212:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   c0216:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   c021a:	429e      	cmp	r6, r3
   c021c:	da7c      	bge.n	c0318 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   c021e:	0133      	lsls	r3, r6, #4
   c0220:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   c0222:	9306      	str	r3, [sp, #24]
        if (!category) {
   c0224:	b90b      	cbnz	r3, c022a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   c0226:	3601      	adds	r6, #1
   c0228:	e7f5      	b.n	c0216 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   c022a:	2300      	movs	r3, #0
   c022c:	9307      	str	r3, [sp, #28]
   c022e:	fb09 f306 	mul.w	r3, r9, r6
   c0232:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   c0234:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   c0236:	a907      	add	r1, sp, #28
   c0238:	a806      	add	r0, sp, #24
   c023a:	f7ff fb3c 	bl	bf8b6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   c023e:	4682      	mov	sl, r0
   c0240:	2800      	cmp	r0, #0
   c0242:	d0f0      	beq.n	c0226 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   c0244:	f04f 0300 	mov.w	r3, #0
   c0248:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c024c:	4601      	mov	r1, r0
   c024e:	9a07      	ldr	r2, [sp, #28]
   c0250:	f10d 0317 	add.w	r3, sp, #23
   c0254:	4628      	mov	r0, r5
   c0256:	f7ff fba9 	bl	bf9ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c025a:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c025e:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0260:	2f00      	cmp	r7, #0
   c0262:	d14a      	bne.n	c02fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   c0264:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   c0268:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   c026c:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   c0270:	f64f 73ff 	movw	r3, #65535	; 0xffff
   c0274:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   c0278:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   c027c:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c027e:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   c0282:	4293      	cmp	r3, r2
   c0284:	db17      	blt.n	c02b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   c0286:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   c028a:	f1ba 0f00 	cmp.w	sl, #0
   c028e:	dd30      	ble.n	c02f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   c0290:	fb09 f00a 	mul.w	r0, r9, sl
   c0294:	f7fe fe9c 	bl	befd0 <malloc>
            if (!d) {
   c0298:	4683      	mov	fp, r0
   c029a:	b360      	cbz	r0, c02f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   c029c:	e9d5 1200 	ldrd	r1, r2, [r5]
   c02a0:	fb09 1202 	mla	r2, r9, r2, r1
   c02a4:	f7ff ff2c 	bl	c0100 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   c02a8:	6828      	ldr	r0, [r5, #0]
   c02aa:	f7fe fe99 	bl	befe0 <free>
        data_ = d;
   c02ae:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   c02b2:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   c02b6:	682b      	ldr	r3, [r5, #0]
   c02b8:	9a01      	ldr	r2, [sp, #4]
   c02ba:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   c02be:	686a      	ldr	r2, [r5, #4]
   c02c0:	4651      	mov	r1, sl
   c02c2:	fb09 3202 	mla	r2, r9, r2, r3
   c02c6:	f10a 0014 	add.w	r0, sl, #20
   c02ca:	f7ff ff19 	bl	c0100 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   c02ce:	f1ba 0f00 	cmp.w	sl, #0
   c02d2:	d003      	beq.n	c02dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   c02d4:	a90f      	add	r1, sp, #60	; 0x3c
   c02d6:	4650      	mov	r0, sl
   c02d8:	f7ff fd5a 	bl	bfd90 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   c02dc:	686b      	ldr	r3, [r5, #4]
   c02de:	3301      	adds	r3, #1
   c02e0:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   c02e2:	a811      	add	r0, sp, #68	; 0x44
   c02e4:	f7ff fd0c 	bl	bfd00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c02e8:	b13f      	cbz	r7, c02fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   c02ea:	a80b      	add	r0, sp, #44	; 0x2c
   c02ec:	f7ff fd08 	bl	bfd00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c02f0:	e771      	b.n	c01d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   c02f2:	46bb      	mov	fp, r7
   c02f4:	e7d8      	b.n	c02a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c02f6:	2701      	movs	r7, #1
   c02f8:	e7f3      	b.n	c02e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   c02fa:	9b01      	ldr	r3, [sp, #4]
   c02fc:	682d      	ldr	r5, [r5, #0]
   c02fe:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   c0302:	9b06      	ldr	r3, [sp, #24]
   c0304:	781b      	ldrb	r3, [r3, #0]
   c0306:	b92b      	cbnz	r3, c0314 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   c0308:	f8d8 3000 	ldr.w	r3, [r8]
   c030c:	9a02      	ldr	r2, [sp, #8]
   c030e:	4413      	add	r3, r2
   c0310:	7c1b      	ldrb	r3, [r3, #16]
   c0312:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   c0314:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   c0316:	e78e      	b.n	c0236 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0318:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   c031a:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c031c:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   c031e:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0320:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c0322:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   c0324:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   c0326:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0328:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   c032a:	60a2      	str	r2, [r4, #8]
   c032c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   c032e:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0330:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   c0332:	60e2      	str	r2, [r4, #12]
   c0334:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   c0336:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0338:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   c033a:	6122      	str	r2, [r4, #16]
   c033c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   c033e:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   c0340:	9b03      	ldr	r3, [sp, #12]
   c0342:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   c0344:	6162      	str	r2, [r4, #20]
   c0346:	7623      	strb	r3, [r4, #24]
   c0348:	e7cf      	b.n	c02ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000c034c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c034c:	b5f0      	push	{r4, r5, r6, r7, lr}
   c034e:	4604      	mov	r4, r0
   c0350:	b087      	sub	sp, #28
   c0352:	460d      	mov	r5, r1
        filter_(level, filters) {
   c0354:	4626      	mov	r6, r4
        stream_(&stream) {
   c0356:	4619      	mov	r1, r3
   c0358:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c035a:	4617      	mov	r7, r2
        stream_(&stream) {
   c035c:	f7f7 ff16 	bl	b818c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   c0360:	4b0b      	ldr	r3, [pc, #44]	; (c0390 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   c0362:	f846 3b04 	str.w	r3, [r6], #4
   c0366:	4669      	mov	r1, sp
   c0368:	a803      	add	r0, sp, #12
   c036a:	f7f7 ff0f 	bl	b818c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   c036e:	aa03      	add	r2, sp, #12
   c0370:	4639      	mov	r1, r7
   c0372:	4630      	mov	r0, r6
   c0374:	f7ff fef0 	bl	c0158 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c0378:	a803      	add	r0, sp, #12
   c037a:	f7f7 fbe0 	bl	b7b3e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   c037e:	4668      	mov	r0, sp
   c0380:	f7f7 fbdd 	bl	b7b3e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c0384:	4b03      	ldr	r3, [pc, #12]	; (c0394 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   c0386:	6023      	str	r3, [r4, #0]
}
   c0388:	4620      	mov	r0, r4
        stream_(&stream) {
   c038a:	6225      	str	r5, [r4, #32]
}
   c038c:	b007      	add	sp, #28
   c038e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c0390:	000c60b4 	.word	0x000c60b4
   c0394:	000c8b9c 	.word	0x000c8b9c

000c0398 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   c0398:	b5f0      	push	{r4, r5, r6, r7, lr}
   c039a:	460f      	mov	r7, r1
   c039c:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c039e:	491d      	ldr	r1, [pc, #116]	; (c0414 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   c03a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c03a2:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   c03a4:	4616      	mov	r6, r2
   c03a6:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c03a8:	f7f4 fd2e 	bl	b4e08 <strcmp>
   c03ac:	b9c0      	cbnz	r0, c03e0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   c03ae:	b1a4      	cbz	r4, c03da <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   c03b0:	4629      	mov	r1, r5
   c03b2:	a801      	add	r0, sp, #4
   c03b4:	f7ff fcff 	bl	bfdb6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c03b8:	4917      	ldr	r1, [pc, #92]	; (c0418 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c03ba:	2024      	movs	r0, #36	; 0x24
   c03bc:	f000 ff64 	bl	c1288 <_ZnwjRKSt9nothrow_t>
   c03c0:	4605      	mov	r5, r0
   c03c2:	b130      	cbz	r0, c03d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   c03c4:	ab01      	add	r3, sp, #4
   c03c6:	4632      	mov	r2, r6
   c03c8:	4621      	mov	r1, r4
   c03ca:	f7ff ffbf 	bl	c034c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c03ce:	4b13      	ldr	r3, [pc, #76]	; (c041c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   c03d0:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c03d2:	a801      	add	r0, sp, #4
   c03d4:	f7f7 fbb3 	bl	b7b3e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c03d8:	462c      	mov	r4, r5
}
   c03da:	4620      	mov	r0, r4
   c03dc:	b005      	add	sp, #20
   c03de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   c03e0:	490f      	ldr	r1, [pc, #60]	; (c0420 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   c03e2:	4638      	mov	r0, r7
   c03e4:	f7f4 fd10 	bl	b4e08 <strcmp>
   c03e8:	b990      	cbnz	r0, c0410 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   c03ea:	2c00      	cmp	r4, #0
   c03ec:	d0f5      	beq.n	c03da <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c03ee:	4629      	mov	r1, r5
   c03f0:	a801      	add	r0, sp, #4
   c03f2:	f7ff fce0 	bl	bfdb6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c03f6:	4908      	ldr	r1, [pc, #32]	; (c0418 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c03f8:	2024      	movs	r0, #36	; 0x24
   c03fa:	f000 ff45 	bl	c1288 <_ZnwjRKSt9nothrow_t>
   c03fe:	4605      	mov	r5, r0
   c0400:	2800      	cmp	r0, #0
   c0402:	d0e6      	beq.n	c03d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   c0404:	ab01      	add	r3, sp, #4
   c0406:	4632      	mov	r2, r6
   c0408:	4621      	mov	r1, r4
   c040a:	f7ff ff9f 	bl	c034c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c040e:	e7e0      	b.n	c03d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   c0410:	2400      	movs	r4, #0
   c0412:	e7e2      	b.n	c03da <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   c0414:	000c8b24 	.word	0x000c8b24
   c0418:	000c8d18 	.word	0x000c8d18
   c041c:	000c8bb4 	.word	0x000c8bb4
   c0420:	000c8b28 	.word	0x000c8b28

000c0424 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   c0424:	4b01      	ldr	r3, [pc, #4]	; (c042c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   c0426:	4a02      	ldr	r2, [pc, #8]	; (c0430 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   c0428:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   c042a:	4770      	bx	lr
   c042c:	2003df44 	.word	0x2003df44
   c0430:	000c8b39 	.word	0x000c8b39

000c0434 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c0434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c0438:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   c043a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c043e:	4604      	mov	r4, r0
   c0440:	460e      	mov	r6, r1
   c0442:	4617      	mov	r7, r2
   c0444:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   c0446:	f000 fd63 	bl	c0f10 <_Z16_fetch_usbserialv>
   c044a:	4581      	cmp	r9, r0
   c044c:	d04c      	beq.n	c04e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   c044e:	792b      	ldrb	r3, [r5, #4]
   c0450:	0719      	lsls	r1, r3, #28
   c0452:	d504      	bpl.n	c045e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   c0454:	696a      	ldr	r2, [r5, #20]
   c0456:	4954      	ldr	r1, [pc, #336]	; (c05a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   c0458:	4620      	mov	r0, r4
   c045a:	f7ff fb0c 	bl	bfa76 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   c045e:	f1b8 0f00 	cmp.w	r8, #0
   c0462:	d00d      	beq.n	c0480 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   c0464:	215b      	movs	r1, #91	; 0x5b
   c0466:	4620      	mov	r0, r4
   c0468:	f7ff fa94 	bl	bf994 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   c046c:	4641      	mov	r1, r8
   c046e:	4620      	mov	r0, r4
   c0470:	f7ff fa81 	bl	bf976 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   c0474:	6823      	ldr	r3, [r4, #0]
   c0476:	494d      	ldr	r1, [pc, #308]	; (c05ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   c0478:	68db      	ldr	r3, [r3, #12]
   c047a:	2202      	movs	r2, #2
   c047c:	4620      	mov	r0, r4
   c047e:	4798      	blx	r3
    if (attr.has_file) {
   c0480:	792b      	ldrb	r3, [r5, #4]
   c0482:	07da      	lsls	r2, r3, #31
   c0484:	d523      	bpl.n	c04ce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   c0486:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   c048a:	212f      	movs	r1, #47	; 0x2f
   c048c:	4640      	mov	r0, r8
   c048e:	f002 ff38 	bl	c3302 <strrchr>
    if (s1) {
   c0492:	b108      	cbz	r0, c0498 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   c0494:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   c0498:	4641      	mov	r1, r8
   c049a:	4620      	mov	r0, r4
   c049c:	f7ff fa6b 	bl	bf976 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   c04a0:	792b      	ldrb	r3, [r5, #4]
   c04a2:	079b      	lsls	r3, r3, #30
   c04a4:	d508      	bpl.n	c04b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   c04a6:	213a      	movs	r1, #58	; 0x3a
   c04a8:	4620      	mov	r0, r4
   c04aa:	f7ff fa73 	bl	bf994 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   c04ae:	68ea      	ldr	r2, [r5, #12]
   c04b0:	493f      	ldr	r1, [pc, #252]	; (c05b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   c04b2:	4620      	mov	r0, r4
   c04b4:	f7ff fadf 	bl	bfa76 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   c04b8:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   c04ba:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   c04bc:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   c04c0:	68db      	ldr	r3, [r3, #12]
   c04c2:	bf14      	ite	ne
   c04c4:	493b      	ldrne	r1, [pc, #236]	; (c05b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   c04c6:	493c      	ldreq	r1, [pc, #240]	; (c05b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   c04c8:	2202      	movs	r2, #2
            write(": ", 2);
   c04ca:	4620      	mov	r0, r4
   c04cc:	4798      	blx	r3
    if (attr.has_function) {
   c04ce:	792b      	ldrb	r3, [r5, #4]
   c04d0:	0758      	lsls	r0, r3, #29
   c04d2:	d51d      	bpl.n	c0510 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c04d4:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c04d6:	460b      	mov	r3, r1
   c04d8:	461a      	mov	r2, r3
    for (; *s; ++s) {
   c04da:	f813 0b01 	ldrb.w	r0, [r3], #1
   c04de:	b160      	cbz	r0, c04fa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   c04e0:	2820      	cmp	r0, #32
   c04e2:	d108      	bne.n	c04f6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   c04e4:	4619      	mov	r1, r3
   c04e6:	e7f7      	b.n	c04d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   c04e8:	4834      	ldr	r0, [pc, #208]	; (c05bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   c04ea:	f000 f982 	bl	c07f2 <_ZN5spark12NetworkClass9listeningEv>
   c04ee:	2800      	cmp	r0, #0
   c04f0:	d0ad      	beq.n	c044e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   c04f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   c04f6:	2828      	cmp	r0, #40	; 0x28
   c04f8:	d1ee      	bne.n	c04d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   c04fa:	6823      	ldr	r3, [r4, #0]
   c04fc:	1a52      	subs	r2, r2, r1
   c04fe:	68db      	ldr	r3, [r3, #12]
   c0500:	4620      	mov	r0, r4
   c0502:	4798      	blx	r3
        write("(): ", 4);
   c0504:	6823      	ldr	r3, [r4, #0]
   c0506:	492e      	ldr	r1, [pc, #184]	; (c05c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   c0508:	68db      	ldr	r3, [r3, #12]
   c050a:	2204      	movs	r2, #4
   c050c:	4620      	mov	r0, r4
   c050e:	4798      	blx	r3
    return log_level_name(level, nullptr);
   c0510:	2100      	movs	r1, #0
   c0512:	4638      	mov	r0, r7
   c0514:	f7fe fc9c 	bl	bee50 <log_level_name>
   c0518:	4601      	mov	r1, r0
    write(s);
   c051a:	4620      	mov	r0, r4
   c051c:	f7ff fa2b 	bl	bf976 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   c0520:	6823      	ldr	r3, [r4, #0]
   c0522:	4925      	ldr	r1, [pc, #148]	; (c05b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   c0524:	68db      	ldr	r3, [r3, #12]
   c0526:	2202      	movs	r2, #2
   c0528:	4620      	mov	r0, r4
   c052a:	4798      	blx	r3
    if (msg) {
   c052c:	b11e      	cbz	r6, c0536 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   c052e:	4631      	mov	r1, r6
   c0530:	4620      	mov	r0, r4
   c0532:	f7ff fa20 	bl	bf976 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   c0536:	792b      	ldrb	r3, [r5, #4]
   c0538:	f013 0f30 	tst.w	r3, #48	; 0x30
   c053c:	d02c      	beq.n	c0598 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   c053e:	6823      	ldr	r3, [r4, #0]
   c0540:	4920      	ldr	r1, [pc, #128]	; (c05c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   c0542:	68db      	ldr	r3, [r3, #12]
   c0544:	2202      	movs	r2, #2
   c0546:	4620      	mov	r0, r4
   c0548:	4798      	blx	r3
        if (attr.has_code) {
   c054a:	792b      	ldrb	r3, [r5, #4]
   c054c:	06d9      	lsls	r1, r3, #27
   c054e:	d50a      	bpl.n	c0566 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   c0550:	6823      	ldr	r3, [r4, #0]
   c0552:	491d      	ldr	r1, [pc, #116]	; (c05c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   c0554:	68db      	ldr	r3, [r3, #12]
   c0556:	2207      	movs	r2, #7
   c0558:	4620      	mov	r0, r4
   c055a:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   c055c:	69aa      	ldr	r2, [r5, #24]
   c055e:	491b      	ldr	r1, [pc, #108]	; (c05cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   c0560:	4620      	mov	r0, r4
   c0562:	f7ff fa88 	bl	bfa76 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   c0566:	792b      	ldrb	r3, [r5, #4]
   c0568:	069a      	lsls	r2, r3, #26
   c056a:	d511      	bpl.n	c0590 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   c056c:	06db      	lsls	r3, r3, #27
   c056e:	d505      	bpl.n	c057c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   c0570:	6823      	ldr	r3, [r4, #0]
   c0572:	4910      	ldr	r1, [pc, #64]	; (c05b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   c0574:	68db      	ldr	r3, [r3, #12]
   c0576:	2202      	movs	r2, #2
   c0578:	4620      	mov	r0, r4
   c057a:	4798      	blx	r3
            write("details = ", 10);
   c057c:	6823      	ldr	r3, [r4, #0]
   c057e:	4914      	ldr	r1, [pc, #80]	; (c05d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   c0580:	68db      	ldr	r3, [r3, #12]
   c0582:	4620      	mov	r0, r4
   c0584:	220a      	movs	r2, #10
   c0586:	4798      	blx	r3
            write(attr.details);
   c0588:	69e9      	ldr	r1, [r5, #28]
   c058a:	4620      	mov	r0, r4
   c058c:	f7ff f9f3 	bl	bf976 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   c0590:	215d      	movs	r1, #93	; 0x5d
   c0592:	4620      	mov	r0, r4
   c0594:	f7ff f9fe 	bl	bf994 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   c0598:	6823      	ldr	r3, [r4, #0]
   c059a:	490e      	ldr	r1, [pc, #56]	; (c05d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   c059c:	68db      	ldr	r3, [r3, #12]
   c059e:	4620      	mov	r0, r4
   c05a0:	2202      	movs	r2, #2
}
   c05a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   c05a6:	4718      	bx	r3
   c05a8:	000c8b3d 	.word	0x000c8b3d
   c05ac:	000c8b44 	.word	0x000c8b44
   c05b0:	000c8b04 	.word	0x000c8b04
   c05b4:	000c8b47 	.word	0x000c8b47
   c05b8:	000c8b4c 	.word	0x000c8b4c
   c05bc:	2003df70 	.word	0x2003df70
   c05c0:	000c8b4a 	.word	0x000c8b4a
   c05c4:	000c8b4f 	.word	0x000c8b4f
   c05c8:	000c8b52 	.word	0x000c8b52
   c05cc:	000c8b5a 	.word	0x000c8b5a
   c05d0:	000c8b5d 	.word	0x000c8b5d
   c05d4:	000c603d 	.word	0x000c603d

000c05d8 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   c05d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c05dc:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   c05de:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   c05e0:	460d      	mov	r5, r1
   c05e2:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   c05e4:	f000 fc94 	bl	c0f10 <_Z16_fetch_usbserialv>
   c05e8:	4287      	cmp	r7, r0
   c05ea:	d007      	beq.n	c05fc <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   c05ec:	6a20      	ldr	r0, [r4, #32]
   c05ee:	6803      	ldr	r3, [r0, #0]
   c05f0:	4632      	mov	r2, r6
   c05f2:	4629      	mov	r1, r5
   c05f4:	68db      	ldr	r3, [r3, #12]
}
   c05f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   c05fa:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   c05fc:	4803      	ldr	r0, [pc, #12]	; (c060c <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   c05fe:	f000 f8f8 	bl	c07f2 <_ZN5spark12NetworkClass9listeningEv>
   c0602:	2800      	cmp	r0, #0
   c0604:	d0f2      	beq.n	c05ec <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   c0606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c060a:	bf00      	nop
   c060c:	2003df70 	.word	0x2003df70

000c0610 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c0610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c0614:	b085      	sub	sp, #20
    return stream_;
   c0616:	f8d0 9020 	ldr.w	r9, [r0, #32]
   c061a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   c061c:	4605      	mov	r5, r0
   c061e:	460f      	mov	r7, r1
   c0620:	4690      	mov	r8, r2
   c0622:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   c0624:	f000 fc74 	bl	c0f10 <_Z16_fetch_usbserialv>
   c0628:	4581      	cmp	r9, r0
   c062a:	d105      	bne.n	c0638 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   c062c:	4849      	ldr	r0, [pc, #292]	; (c0754 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   c062e:	f000 f8e0 	bl	c07f2 <_ZN5spark12NetworkClass9listeningEv>
   c0632:	2800      	cmp	r0, #0
   c0634:	f040 808a 	bne.w	c074c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   c0638:	6a2b      	ldr	r3, [r5, #32]
        bytesWritten_(0) {
   c063a:	4a47      	ldr	r2, [pc, #284]	; (c0758 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   c063c:	9200      	str	r2, [sp, #0]
        state_(BEGIN) {
   c063e:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   c0642:	4668      	mov	r0, sp
        bytesWritten_(0) {
   c0644:	e9cd 3902 	strd	r3, r9, [sp, #8]
        state_(BEGIN) {
   c0648:	f88d 9004 	strb.w	r9, [sp, #4]
   c064c:	f7ff f82d 	bl	bf6aa <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   c0650:	4649      	mov	r1, r9
   c0652:	4640      	mov	r0, r8
   c0654:	f7fe fbfc 	bl	bee50 <log_level_name>
    json.name("l", 1).value(s);
   c0658:	4940      	ldr	r1, [pc, #256]	; (c075c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   c065a:	4680      	mov	r8, r0
   c065c:	2201      	movs	r2, #1
   c065e:	4668      	mov	r0, sp
   c0660:	f7ff f8b2 	bl	bf7c8 <_ZN5spark10JSONWriter4nameEPKcj>
   c0664:	4641      	mov	r1, r8
   c0666:	f7ff f978 	bl	bf95a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   c066a:	b13f      	cbz	r7, c067c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6c>
        json.name("m", 1).value(msg);
   c066c:	493c      	ldr	r1, [pc, #240]	; (c0760 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   c066e:	2201      	movs	r2, #1
   c0670:	4668      	mov	r0, sp
   c0672:	f7ff f8a9 	bl	bf7c8 <_ZN5spark10JSONWriter4nameEPKcj>
   c0676:	4639      	mov	r1, r7
   c0678:	f7ff f96f 	bl	bf95a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   c067c:	b13e      	cbz	r6, c068e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7e>
        json.name("c", 1).value(category);
   c067e:	4939      	ldr	r1, [pc, #228]	; (c0764 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   c0680:	2201      	movs	r2, #1
   c0682:	4668      	mov	r0, sp
   c0684:	f7ff f8a0 	bl	bf7c8 <_ZN5spark10JSONWriter4nameEPKcj>
   c0688:	4631      	mov	r1, r6
   c068a:	f7ff f966 	bl	bf95a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   c068e:	7923      	ldrb	r3, [r4, #4]
   c0690:	07df      	lsls	r7, r3, #31
   c0692:	d50e      	bpl.n	c06b2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa2>
        s = extractFileName(attr.file); // Strip directory path
   c0694:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   c0696:	212f      	movs	r1, #47	; 0x2f
   c0698:	4630      	mov	r0, r6
   c069a:	f002 fe32 	bl	c3302 <strrchr>
    if (s1) {
   c069e:	b100      	cbz	r0, c06a2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x92>
        return s1 + 1;
   c06a0:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   c06a2:	4931      	ldr	r1, [pc, #196]	; (c0768 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   c06a4:	2201      	movs	r2, #1
   c06a6:	4668      	mov	r0, sp
   c06a8:	f7ff f88e 	bl	bf7c8 <_ZN5spark10JSONWriter4nameEPKcj>
   c06ac:	4631      	mov	r1, r6
   c06ae:	f7ff f954 	bl	bf95a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   c06b2:	7923      	ldrb	r3, [r4, #4]
   c06b4:	079e      	lsls	r6, r3, #30
   c06b6:	d507      	bpl.n	c06c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb8>
        json.name("ln", 2).value(attr.line);
   c06b8:	492c      	ldr	r1, [pc, #176]	; (c076c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   c06ba:	2202      	movs	r2, #2
   c06bc:	4668      	mov	r0, sp
   c06be:	f7ff f883 	bl	bf7c8 <_ZN5spark10JSONWriter4nameEPKcj>
   c06c2:	68e1      	ldr	r1, [r4, #12]
   c06c4:	f7fe fffe 	bl	bf6c4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   c06c8:	7923      	ldrb	r3, [r4, #4]
   c06ca:	0758      	lsls	r0, r3, #29
   c06cc:	d514      	bpl.n	c06f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe8>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c06ce:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c06d0:	4633      	mov	r3, r6
   c06d2:	461f      	mov	r7, r3
    for (; *s; ++s) {
   c06d4:	f813 2b01 	ldrb.w	r2, [r3], #1
   c06d8:	b12a      	cbz	r2, c06e6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd6>
        if (*s == ' ') {
   c06da:	2a20      	cmp	r2, #32
   c06dc:	d101      	bne.n	c06e2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd2>
            s1 = s + 1; // Skip return type
   c06de:	461e      	mov	r6, r3
   c06e0:	e7f7      	b.n	c06d2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        } else if (*s == '(') {
   c06e2:	2a28      	cmp	r2, #40	; 0x28
   c06e4:	d1f5      	bne.n	c06d2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        json.name("fn", 2).value(s, n);
   c06e6:	4922      	ldr	r1, [pc, #136]	; (c0770 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   c06e8:	2202      	movs	r2, #2
   c06ea:	4668      	mov	r0, sp
   c06ec:	f7ff f86c 	bl	bf7c8 <_ZN5spark10JSONWriter4nameEPKcj>
   c06f0:	1bba      	subs	r2, r7, r6
   c06f2:	4631      	mov	r1, r6
   c06f4:	f7ff f878 	bl	bf7e8 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   c06f8:	7923      	ldrb	r3, [r4, #4]
   c06fa:	0719      	lsls	r1, r3, #28
   c06fc:	d507      	bpl.n	c070e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfe>
        json.name("t", 1).value((unsigned)attr.time);
   c06fe:	491d      	ldr	r1, [pc, #116]	; (c0774 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   c0700:	2201      	movs	r2, #1
   c0702:	4668      	mov	r0, sp
   c0704:	f7ff f860 	bl	bf7c8 <_ZN5spark10JSONWriter4nameEPKcj>
   c0708:	6961      	ldr	r1, [r4, #20]
   c070a:	f7fe ffed 	bl	bf6e8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   c070e:	7923      	ldrb	r3, [r4, #4]
   c0710:	06da      	lsls	r2, r3, #27
   c0712:	d507      	bpl.n	c0724 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   c0714:	4918      	ldr	r1, [pc, #96]	; (c0778 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   c0716:	2204      	movs	r2, #4
   c0718:	4668      	mov	r0, sp
   c071a:	f7ff f855 	bl	bf7c8 <_ZN5spark10JSONWriter4nameEPKcj>
   c071e:	69a1      	ldr	r1, [r4, #24]
   c0720:	f7fe ffd0 	bl	bf6c4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   c0724:	7923      	ldrb	r3, [r4, #4]
   c0726:	069b      	lsls	r3, r3, #26
   c0728:	d507      	bpl.n	c073a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   c072a:	4914      	ldr	r1, [pc, #80]	; (c077c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   c072c:	2206      	movs	r2, #6
   c072e:	4668      	mov	r0, sp
   c0730:	f7ff f84a 	bl	bf7c8 <_ZN5spark10JSONWriter4nameEPKcj>
   c0734:	69e1      	ldr	r1, [r4, #28]
   c0736:	f7ff f910 	bl	bf95a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   c073a:	4668      	mov	r0, sp
   c073c:	f7fe ff9f 	bl	bf67e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   c0740:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   c0742:	490f      	ldr	r1, [pc, #60]	; (c0780 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   c0744:	6803      	ldr	r3, [r0, #0]
   c0746:	2202      	movs	r2, #2
   c0748:	68db      	ldr	r3, [r3, #12]
   c074a:	4798      	blx	r3
}
   c074c:	b005      	add	sp, #20
   c074e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c0752:	bf00      	nop
   c0754:	2003df70 	.word	0x2003df70
   c0758:	000c8b84 	.word	0x000c8b84
   c075c:	000c8b1a 	.word	0x000c8b1a
   c0760:	000c8b68 	.word	0x000c8b68
   c0764:	000c91a0 	.word	0x000c91a0
   c0768:	000c52b1 	.word	0x000c52b1
   c076c:	000c8b6a 	.word	0x000c8b6a
   c0770:	000c8b6d 	.word	0x000c8b6d
   c0774:	000c5fd7 	.word	0x000c5fd7
   c0778:	000c8b70 	.word	0x000c8b70
   c077c:	000c8b75 	.word	0x000c8b75
   c0780:	000c603d 	.word	0x000c603d

000c0784 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   c0784:	2300      	movs	r3, #0
   c0786:	6840      	ldr	r0, [r0, #4]
   c0788:	461a      	mov	r2, r3
   c078a:	f7fe bbb1 	b.w	beef0 <network_connect>

000c078e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   c078e:	6840      	ldr	r0, [r0, #4]
   c0790:	2200      	movs	r2, #0
   c0792:	2102      	movs	r1, #2
   c0794:	f7fe bbbc 	b.w	bef10 <network_disconnect>

000c0798 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   c0798:	2200      	movs	r2, #0
   c079a:	6840      	ldr	r0, [r0, #4]
   c079c:	4611      	mov	r1, r2
   c079e:	f7fe bbaf 	b.w	bef00 <network_connecting>

000c07a2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   c07a2:	2200      	movs	r2, #0
   c07a4:	6840      	ldr	r0, [r0, #4]
   c07a6:	4611      	mov	r1, r2
   c07a8:	f7fe bbba 	b.w	bef20 <network_ready>

000c07ac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   c07ac:	2300      	movs	r3, #0
   c07ae:	6840      	ldr	r0, [r0, #4]
   c07b0:	461a      	mov	r2, r3
   c07b2:	4619      	mov	r1, r3
   c07b4:	f7fe bbbc 	b.w	bef30 <network_on>

000c07b8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   c07b8:	2300      	movs	r3, #0
   c07ba:	6840      	ldr	r0, [r0, #4]
   c07bc:	461a      	mov	r2, r3
   c07be:	4619      	mov	r1, r3
   c07c0:	f7fe bbbe 	b.w	bef40 <network_off>

000c07c4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   c07c4:	6840      	ldr	r0, [r0, #4]
   c07c6:	2100      	movs	r1, #0
   c07c8:	f7fe bbe2 	b.w	bef90 <network_is_on>

000c07cc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   c07cc:	6840      	ldr	r0, [r0, #4]
   c07ce:	2100      	movs	r1, #0
   c07d0:	f7fe bbe6 	b.w	befa0 <network_is_off>

000c07d4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   c07d4:	6840      	ldr	r0, [r0, #4]
   c07d6:	2200      	movs	r2, #0
   c07d8:	f081 0101 	eor.w	r1, r1, #1
   c07dc:	f7fe bbb8 	b.w	bef50 <network_listen>

000c07e0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   c07e0:	6840      	ldr	r0, [r0, #4]
   c07e2:	2200      	movs	r2, #0
   c07e4:	f7fe bbc4 	b.w	bef70 <network_set_listen_timeout>

000c07e8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   c07e8:	2200      	movs	r2, #0
   c07ea:	6840      	ldr	r0, [r0, #4]
   c07ec:	4611      	mov	r1, r2
   c07ee:	f7fe bbc7 	b.w	bef80 <network_get_listen_timeout>

000c07f2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   c07f2:	2200      	movs	r2, #0
   c07f4:	6840      	ldr	r0, [r0, #4]
   c07f6:	4611      	mov	r1, r2
   c07f8:	f7fe bbb2 	b.w	bef60 <network_listening>

000c07fc <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
   c07fc:	6840      	ldr	r0, [r0, #4]
   c07fe:	2100      	movs	r1, #0
   c0800:	f7fe bbde 	b.w	befc0 <network_is_preferred>

000c0804 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   c0804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c0808:	b095      	sub	sp, #84	; 0x54
   c080a:	4614      	mov	r4, r2
   c080c:	460d      	mov	r5, r1
   c080e:	4607      	mov	r7, r0
    IPAddress addr;
   c0810:	f7fe fde4 	bl	bf3dc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   c0814:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   c0816:	221c      	movs	r2, #28
   c0818:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   c081a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   c081c:	f002 fcf8 	bl	c3210 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   c0820:	2340      	movs	r3, #64	; 0x40
   c0822:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   c0824:	4620      	mov	r0, r4
   c0826:	466b      	mov	r3, sp
   c0828:	aa0c      	add	r2, sp, #48	; 0x30
   c082a:	2100      	movs	r1, #0
   c082c:	f7fe fa28 	bl	bec80 <netdb_getaddrinfo>
    if (!r) {
   c0830:	4604      	mov	r4, r0
   c0832:	2800      	cmp	r0, #0
   c0834:	d14b      	bne.n	c08ce <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c0836:	4602      	mov	r2, r0
   c0838:	2101      	movs	r1, #1
   c083a:	6868      	ldr	r0, [r5, #4]
   c083c:	f7fe fb70 	bl	bef20 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c0840:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c0842:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c0844:	4622      	mov	r2, r4
   c0846:	6868      	ldr	r0, [r5, #4]
   c0848:	f7fe fb6a 	bl	bef20 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c084c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c084e:	4681      	mov	r9, r0
        bool ok = false;
   c0850:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c0852:	2e00      	cmp	r6, #0
   c0854:	d03b      	beq.n	c08ce <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   c0856:	2900      	cmp	r1, #0
   c0858:	d139      	bne.n	c08ce <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   c085a:	6873      	ldr	r3, [r6, #4]
   c085c:	2b02      	cmp	r3, #2
   c085e:	d003      	beq.n	c0868 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   c0860:	2b0a      	cmp	r3, #10
   c0862:	d011      	beq.n	c0888 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c0864:	69f6      	ldr	r6, [r6, #28]
   c0866:	e7f4      	b.n	c0852 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   c0868:	f1b8 0f00 	cmp.w	r8, #0
   c086c:	d0fa      	beq.n	c0864 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   c086e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   c0870:	a806      	add	r0, sp, #24
   c0872:	3104      	adds	r1, #4
class IPAddress : public Printable {
   c0874:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   c0876:	f7fe fddf 	bl	bf438 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   c087a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c087c:	1d3c      	adds	r4, r7, #4
   c087e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c0880:	682b      	ldr	r3, [r5, #0]
   c0882:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c0884:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   c0886:	e7ed      	b.n	c0864 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   c0888:	f1b9 0f00 	cmp.w	r9, #0
   c088c:	d0ea      	beq.n	c0864 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   c088e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   c0890:	2210      	movs	r2, #16
   c0892:	a801      	add	r0, sp, #4
   c0894:	f002 fcbc 	bl	c3210 <memset>
                    a.v = 6;
   c0898:	2306      	movs	r3, #6
   c089a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   c089e:	ad01      	add	r5, sp, #4
   c08a0:	f104 0308 	add.w	r3, r4, #8
   c08a4:	3418      	adds	r4, #24
   c08a6:	6818      	ldr	r0, [r3, #0]
   c08a8:	6859      	ldr	r1, [r3, #4]
   c08aa:	462a      	mov	r2, r5
   c08ac:	c203      	stmia	r2!, {r0, r1}
   c08ae:	3308      	adds	r3, #8
   c08b0:	42a3      	cmp	r3, r4
   c08b2:	4615      	mov	r5, r2
   c08b4:	d1f7      	bne.n	c08a6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   c08b6:	a901      	add	r1, sp, #4
   c08b8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   c08ba:	ad07      	add	r5, sp, #28
   c08bc:	f7fe fd9c 	bl	bf3f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   c08c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c08c2:	1d3c      	adds	r4, r7, #4
   c08c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c08c6:	682b      	ldr	r3, [r5, #0]
   c08c8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c08ca:	4649      	mov	r1, r9
   c08cc:	e7ca      	b.n	c0864 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   c08ce:	9800      	ldr	r0, [sp, #0]
   c08d0:	f7fe f9ce 	bl	bec70 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   c08d4:	4638      	mov	r0, r7
   c08d6:	b015      	add	sp, #84	; 0x54
   c08d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000c08dc <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
   c08dc:	3803      	subs	r0, #3
   c08de:	2803      	cmp	r0, #3
   c08e0:	bf9a      	itte	ls
   c08e2:	4b02      	ldrls	r3, [pc, #8]	; (c08ec <_ZN5spark12NetworkClass4fromEm+0x10>)
   c08e4:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
   c08e8:	4801      	ldrhi	r0, [pc, #4]	; (c08f0 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
   c08ea:	4770      	bx	lr
   c08ec:	000c8bf4 	.word	0x000c8bf4
   c08f0:	2003df70 	.word	0x2003df70

000c08f4 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
   c08f4:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
   c08f6:	2200      	movs	r2, #0
   c08f8:	6840      	ldr	r0, [r0, #4]
   c08fa:	f7fe fb59 	bl	befb0 <network_prefer>
}
   c08fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
   c0902:	f7ff bfeb 	b.w	c08dc <_ZN5spark12NetworkClass4fromEm>
	...

000c0908 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   c0908:	4b02      	ldr	r3, [pc, #8]	; (c0914 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   c090a:	4a03      	ldr	r2, [pc, #12]	; (c0918 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   c090c:	601a      	str	r2, [r3, #0]
   c090e:	2200      	movs	r2, #0
   c0910:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   c0912:	4770      	bx	lr
   c0914:	2003df70 	.word	0x2003df70
   c0918:	000c8c0c 	.word	0x000c8c0c

000c091c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   c091c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c091e:	4606      	mov	r6, r0
   c0920:	460d      	mov	r5, r1
  size_t n = 0;
   c0922:	188f      	adds	r7, r1, r2
   c0924:	2400      	movs	r4, #0
  while (size--) {
   c0926:	42bd      	cmp	r5, r7
   c0928:	d00c      	beq.n	c0944 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   c092a:	6833      	ldr	r3, [r6, #0]
   c092c:	f815 1b01 	ldrb.w	r1, [r5], #1
   c0930:	689b      	ldr	r3, [r3, #8]
   c0932:	4630      	mov	r0, r6
   c0934:	4798      	blx	r3
     if (chunk>=0)
   c0936:	1e03      	subs	r3, r0, #0
   c0938:	db01      	blt.n	c093e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   c093a:	441c      	add	r4, r3
  while (size--) {
   c093c:	e7f3      	b.n	c0926 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   c093e:	2c00      	cmp	r4, #0
   c0940:	bf08      	it	eq
   c0942:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   c0944:	4620      	mov	r0, r4
   c0946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c0948 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   c0948:	b513      	push	{r0, r1, r4, lr}
   c094a:	4604      	mov	r4, r0
    }
   c094c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   c094e:	b159      	cbz	r1, c0968 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   c0950:	9101      	str	r1, [sp, #4]
   c0952:	f7f4 fa63 	bl	b4e1c <strlen>
   c0956:	6823      	ldr	r3, [r4, #0]
   c0958:	9901      	ldr	r1, [sp, #4]
   c095a:	68db      	ldr	r3, [r3, #12]
   c095c:	4602      	mov	r2, r0
   c095e:	4620      	mov	r0, r4
    }
   c0960:	b002      	add	sp, #8
   c0962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   c0966:	4718      	bx	r3
    }
   c0968:	b002      	add	sp, #8
   c096a:	bd10      	pop	{r4, pc}

000c096c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   c096c:	b508      	push	{r3, lr}
  return write(str);
   c096e:	f7ff ffeb 	bl	c0948 <_ZN5Print5writeEPKc>
}
   c0972:	bd08      	pop	{r3, pc}

000c0974 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   c0974:	6803      	ldr	r3, [r0, #0]
   c0976:	689b      	ldr	r3, [r3, #8]
   c0978:	4718      	bx	r3

000c097a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   c097a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   c097c:	210d      	movs	r1, #13
{
   c097e:	4605      	mov	r5, r0
  size_t n = print('\r');
   c0980:	f7ff fff8 	bl	c0974 <_ZN5Print5printEc>
  n += print('\n');
   c0984:	210a      	movs	r1, #10
  size_t n = print('\r');
   c0986:	4604      	mov	r4, r0
  n += print('\n');
   c0988:	4628      	mov	r0, r5
   c098a:	f7ff fff3 	bl	c0974 <_ZN5Print5printEc>
  return n;
}
   c098e:	4420      	add	r0, r4
   c0990:	bd38      	pop	{r3, r4, r5, pc}

000c0992 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   c0992:	b538      	push	{r3, r4, r5, lr}
   c0994:	4605      	mov	r5, r0
  return write(str);
   c0996:	f7ff ffd7 	bl	c0948 <_ZN5Print5writeEPKc>
   c099a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   c099c:	4628      	mov	r0, r5
   c099e:	f7ff ffec 	bl	c097a <_ZN5Print7printlnEv>
  return n;
}
   c09a2:	4420      	add	r0, r4
   c09a4:	bd38      	pop	{r3, r4, r5, pc}

000c09a6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   c09a6:	b530      	push	{r4, r5, lr}
   c09a8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   c09aa:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   c09ac:	2a01      	cmp	r2, #1
  *str = '\0';
   c09ae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   c09b2:	bf98      	it	ls
   c09b4:	220a      	movls	r2, #10
   c09b6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   c09b8:	460d      	mov	r5, r1
   c09ba:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   c09be:	fb01 5312 	mls	r3, r1, r2, r5
   c09c2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c09c6:	2b09      	cmp	r3, #9
   c09c8:	bf94      	ite	ls
   c09ca:	3330      	addls	r3, #48	; 0x30
   c09cc:	3337      	addhi	r3, #55	; 0x37
   c09ce:	b2db      	uxtb	r3, r3
  } while(n);
   c09d0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c09d2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   c09d6:	d9ef      	bls.n	c09b8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   c09d8:	4621      	mov	r1, r4
   c09da:	f7ff ffb5 	bl	c0948 <_ZN5Print5writeEPKc>
}
   c09de:	b00b      	add	sp, #44	; 0x2c
   c09e0:	bd30      	pop	{r4, r5, pc}
	...

000c09e4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   c09e4:	4b01      	ldr	r3, [pc, #4]	; (c09ec <_GLOBAL__sub_I_RGB+0x8>)
   c09e6:	2200      	movs	r2, #0
   c09e8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   c09ea:	4770      	bx	lr
   c09ec:	2003df78 	.word	0x2003df78

000c09f0 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   c09f0:	2100      	movs	r1, #0
   c09f2:	f7fe b98d 	b.w	bed10 <hal_spi_release>

000c09f6 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   c09f6:	2100      	movs	r1, #0
   c09f8:	f7fe b982 	b.w	bed00 <hal_spi_acquire>

000c09fc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   c09fc:	b510      	push	{r4, lr}
   c09fe:	4604      	mov	r4, r0
   c0a00:	4608      	mov	r0, r1
{
    _spi = spi;
   c0a02:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   c0a04:	f7fe f94c 	bl	beca0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   c0a08:	2300      	movs	r3, #0
   c0a0a:	6063      	str	r3, [r4, #4]
}
   c0a0c:	4620      	mov	r0, r4
   c0a0e:	bd10      	pop	{r4, pc}

000c0a10 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   c0a10:	b513      	push	{r0, r1, r4, lr}
   c0a12:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   c0a14:	7800      	ldrb	r0, [r0, #0]
   c0a16:	f7ff ffee 	bl	c09f6 <_ZN8SPIClass4lockEv.isra.0>
   c0a1a:	b958      	cbnz	r0, c0a34 <_ZN8SPIClass5beginEv+0x24>
   c0a1c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   c0a1e:	9001      	str	r0, [sp, #4]
   c0a20:	f64f 71ff 	movw	r1, #65535	; 0xffff
   c0a24:	f7fe f934 	bl	bec90 <hal_spi_begin>
        unlock();
   c0a28:	9801      	ldr	r0, [sp, #4]
    }
}
   c0a2a:	b002      	add	sp, #8
   c0a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c0a30:	f7ff bfde 	b.w	c09f0 <_ZN8SPIClass6unlockEv.isra.0>
   c0a34:	b002      	add	sp, #8
   c0a36:	bd10      	pop	{r4, pc}

000c0a38 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   c0a38:	7800      	ldrb	r0, [r0, #0]
   c0a3a:	f7ff bfd9 	b.w	c09f0 <_ZN8SPIClass6unlockEv.isra.0>
	...

000c0a40 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   c0a40:	0840      	lsrs	r0, r0, #1
{
   c0a42:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   c0a44:	6018      	str	r0, [r3, #0]
   c0a46:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   c0a48:	6818      	ldr	r0, [r3, #0]
   c0a4a:	4288      	cmp	r0, r1
   c0a4c:	b2e5      	uxtb	r5, r4
   c0a4e:	d906      	bls.n	c0a5e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   c0a50:	3401      	adds	r4, #1
   c0a52:	2c08      	cmp	r4, #8
   c0a54:	d002      	beq.n	c0a5c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   c0a56:	0840      	lsrs	r0, r0, #1
   c0a58:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   c0a5a:	e7f5      	b.n	c0a48 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   c0a5c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   c0a5e:	4b02      	ldr	r3, [pc, #8]	; (c0a68 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   c0a60:	5d5b      	ldrb	r3, [r3, r5]
   c0a62:	7013      	strb	r3, [r2, #0]
}
   c0a64:	bd30      	pop	{r4, r5, pc}
   c0a66:	bf00      	nop
   c0a68:	000c8c48 	.word	0x000c8c48

000c0a6c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   c0a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c0a70:	4606      	mov	r6, r0
   c0a72:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   c0a74:	7800      	ldrb	r0, [r0, #0]
{
   c0a76:	460c      	mov	r4, r1
    CHECK(lock());
   c0a78:	f7ff ffbd 	bl	c09f6 <_ZN8SPIClass4lockEv.isra.0>
   c0a7c:	2800      	cmp	r0, #0
   c0a7e:	db1b      	blt.n	c0ab8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   c0a80:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   c0a82:	2214      	movs	r2, #20
   c0a84:	2100      	movs	r1, #0
   c0a86:	a809      	add	r0, sp, #36	; 0x24
   c0a88:	f002 fbc2 	bl	c3210 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   c0a8c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   c0a8e:	2200      	movs	r2, #0
   c0a90:	a909      	add	r1, sp, #36	; 0x24
   c0a92:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   c0a94:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   c0a98:	f7fe f912 	bl	becc0 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   c0a9c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   c0aa0:	b113      	cbz	r3, c0aa8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   c0aa2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   c0aa6:	b155      	cbz	r5, c0abe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   c0aa8:	2700      	movs	r7, #0
   c0aaa:	46b9      	mov	r9, r7
   c0aac:	46b8      	mov	r8, r7
   c0aae:	2501      	movs	r5, #1
    if (default_ && other.default_)
   c0ab0:	7923      	ldrb	r3, [r4, #4]
   c0ab2:	b15d      	cbz	r5, c0acc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   c0ab4:	b1c3      	cbz	r3, c0ae8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   c0ab6:	2000      	movs	r0, #0
}
   c0ab8:	b00f      	add	sp, #60	; 0x3c
   c0aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   c0abe:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   c0ac2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   c0ac6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   c0aca:	e7f1      	b.n	c0ab0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   c0acc:	2b00      	cmp	r3, #0
   c0ace:	d135      	bne.n	c0b3c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   c0ad0:	68a3      	ldr	r3, [r4, #8]
   c0ad2:	4543      	cmp	r3, r8
   c0ad4:	d108      	bne.n	c0ae8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   c0ad6:	f88d 9020 	strb.w	r9, [sp, #32]
   c0ada:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c0ade:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c0ae2:	89a3      	ldrh	r3, [r4, #12]
   c0ae4:	429a      	cmp	r2, r3
   c0ae6:	d0e6      	beq.n	c0ab6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   c0ae8:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c0aea:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   c0aec:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c0af0:	980a      	ldr	r0, [sp, #40]	; 0x28
   c0af2:	ab04      	add	r3, sp, #16
   c0af4:	f10d 020f 	add.w	r2, sp, #15
   c0af8:	f7ff ffa2 	bl	c0a40 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   c0afc:	7921      	ldrb	r1, [r4, #4]
   c0afe:	b985      	cbnz	r5, c0b22 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   c0b00:	b989      	cbnz	r1, c0b26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c0b02:	68a3      	ldr	r3, [r4, #8]
   c0b04:	4543      	cmp	r3, r8
   c0b06:	d30e      	bcc.n	c0b26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   c0b08:	f88d 9020 	strb.w	r9, [sp, #32]
   c0b0c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c0b10:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c0b14:	89a3      	ldrh	r3, [r4, #12]
   c0b16:	429a      	cmp	r2, r3
   c0b18:	d105      	bne.n	c0b26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   c0b1a:	9b04      	ldr	r3, [sp, #16]
   c0b1c:	4543      	cmp	r3, r8
   c0b1e:	d102      	bne.n	c0b26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c0b20:	e7c9      	b.n	c0ab6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   c0b22:	2900      	cmp	r1, #0
   c0b24:	d1f9      	bne.n	c0b1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   c0b26:	2300      	movs	r3, #0
   c0b28:	9301      	str	r3, [sp, #4]
   c0b2a:	7b63      	ldrb	r3, [r4, #13]
   c0b2c:	9300      	str	r3, [sp, #0]
   c0b2e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   c0b32:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   c0b34:	7830      	ldrb	r0, [r6, #0]
   c0b36:	f7fe f8db 	bl	becf0 <hal_spi_set_settings>
   c0b3a:	e7bc      	b.n	c0ab6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   c0b3c:	e9cd 5500 	strd	r5, r5, [sp]
   c0b40:	462b      	mov	r3, r5
   c0b42:	462a      	mov	r2, r5
   c0b44:	2101      	movs	r1, #1
   c0b46:	e7f5      	b.n	c0b34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000c0b48 <_ZN8SPIClass8transferEPKvPvjPFvvE>:
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
}

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   c0b48:	b530      	push	{r4, r5, lr}
   c0b4a:	b087      	sub	sp, #28
   c0b4c:	4604      	mov	r4, r0
   c0b4e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   c0b50:	9500      	str	r5, [sp, #0]
   c0b52:	7800      	ldrb	r0, [r0, #0]
   c0b54:	f7fe f8bc 	bl	becd0 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   c0b58:	b93d      	cbnz	r5, c0b6a <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   c0b5a:	7820      	ldrb	r0, [r4, #0]
   c0b5c:	a902      	add	r1, sp, #8
   c0b5e:	f7fe f8bf 	bl	bece0 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   c0b62:	f89d 3014 	ldrb.w	r3, [sp, #20]
   c0b66:	07db      	lsls	r3, r3, #31
   c0b68:	d4f7      	bmi.n	c0b5a <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   c0b6a:	b007      	add	sp, #28
   c0b6c:	bd30      	pop	{r4, r5, pc}

000c0b6e <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   c0b6e:	b510      	push	{r4, lr}
   c0b70:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   c0b72:	f7fd ffed 	bl	beb50 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   c0b76:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   c0b78:	6823      	ldr	r3, [r4, #0]
   c0b7a:	4620      	mov	r0, r4
   c0b7c:	695b      	ldr	r3, [r3, #20]
   c0b7e:	4798      	blx	r3
    if (c >= 0) return c;
   c0b80:	2800      	cmp	r0, #0
   c0b82:	da08      	bge.n	c0b96 <_ZN6Stream9timedReadEv+0x28>
   c0b84:	f7fd ffe4 	bl	beb50 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   c0b88:	68e3      	ldr	r3, [r4, #12]
   c0b8a:	1ac0      	subs	r0, r0, r3
   c0b8c:	68a3      	ldr	r3, [r4, #8]
   c0b8e:	4298      	cmp	r0, r3
   c0b90:	d3f2      	bcc.n	c0b78 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   c0b92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   c0b96:	bd10      	pop	{r4, pc}

000c0b98 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   c0b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c0b9c:	4607      	mov	r7, r0
   c0b9e:	460c      	mov	r4, r1
   c0ba0:	188e      	adds	r6, r1, r2
   c0ba2:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   c0ba4:	42b5      	cmp	r5, r6
   c0ba6:	eba5 0804 	sub.w	r8, r5, r4
   c0baa:	d007      	beq.n	c0bbc <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   c0bac:	4638      	mov	r0, r7
   c0bae:	f7ff ffde 	bl	c0b6e <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   c0bb2:	1e03      	subs	r3, r0, #0
   c0bb4:	db02      	blt.n	c0bbc <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   c0bb6:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   c0bba:	e7f3      	b.n	c0ba4 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   c0bbc:	4640      	mov	r0, r8
   c0bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c0bc2 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   c0bc2:	b510      	push	{r4, lr}
   c0bc4:	4604      	mov	r4, r0
{
    free(buffer);
   c0bc6:	6800      	ldr	r0, [r0, #0]
   c0bc8:	f7fe fa0a 	bl	befe0 <free>
}
   c0bcc:	4620      	mov	r0, r4
   c0bce:	bd10      	pop	{r4, pc}

000c0bd0 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   c0bd0:	b510      	push	{r4, lr}
   c0bd2:	4604      	mov	r4, r0
    if (buffer) {
   c0bd4:	6800      	ldr	r0, [r0, #0]
   c0bd6:	b108      	cbz	r0, c0bdc <_ZN6String10invalidateEv+0xc>
        free(buffer);
   c0bd8:	f7fe fa02 	bl	befe0 <free>
    }
    buffer = nullptr;
   c0bdc:	2300      	movs	r3, #0
    capacity_ = len = 0;
   c0bde:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   c0be2:	6023      	str	r3, [r4, #0]
}
   c0be4:	bd10      	pop	{r4, pc}

000c0be6 <_ZN6String12changeBufferEj>:
    len = size;
    return true;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   c0be6:	b538      	push	{r3, r4, r5, lr}
   c0be8:	4604      	mov	r4, r0
   c0bea:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   c0bec:	6800      	ldr	r0, [r0, #0]
   c0bee:	3101      	adds	r1, #1
   c0bf0:	f7fe f9fe 	bl	beff0 <realloc>
    if (newbuffer) {
   c0bf4:	b110      	cbz	r0, c0bfc <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
   c0bf6:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   c0bfa:	2001      	movs	r0, #1
    }
    return 0;
}
   c0bfc:	bd38      	pop	{r3, r4, r5, pc}

000c0bfe <_ZN6String7reserveEj>:
{
   c0bfe:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
   c0c00:	6803      	ldr	r3, [r0, #0]
{
   c0c02:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
   c0c04:	b123      	cbz	r3, c0c10 <_ZN6String7reserveEj+0x12>
   c0c06:	6843      	ldr	r3, [r0, #4]
   c0c08:	428b      	cmp	r3, r1
   c0c0a:	d301      	bcc.n	c0c10 <_ZN6String7reserveEj+0x12>
   c0c0c:	2001      	movs	r0, #1
}
   c0c0e:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   c0c10:	4620      	mov	r0, r4
   c0c12:	f7ff ffe8 	bl	c0be6 <_ZN6String12changeBufferEj>
   c0c16:	2800      	cmp	r0, #0
   c0c18:	d0f9      	beq.n	c0c0e <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   c0c1a:	68a3      	ldr	r3, [r4, #8]
   c0c1c:	2b00      	cmp	r3, #0
   c0c1e:	d1f5      	bne.n	c0c0c <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   c0c20:	6822      	ldr	r2, [r4, #0]
   c0c22:	7013      	strb	r3, [r2, #0]
   c0c24:	e7f2      	b.n	c0c0c <_ZN6String7reserveEj+0xe>

000c0c26 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   c0c26:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c0c28:	460d      	mov	r5, r1
    if (!reserve(length)) {
   c0c2a:	4611      	mov	r1, r2
   c0c2c:	9201      	str	r2, [sp, #4]
{
   c0c2e:	4604      	mov	r4, r0
    if (!reserve(length)) {
   c0c30:	f7ff ffe5 	bl	c0bfe <_ZN6String7reserveEj>
   c0c34:	9a01      	ldr	r2, [sp, #4]
   c0c36:	b928      	cbnz	r0, c0c44 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   c0c38:	4620      	mov	r0, r4
   c0c3a:	f7ff ffc9 	bl	c0bd0 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   c0c3e:	4620      	mov	r0, r4
   c0c40:	b003      	add	sp, #12
   c0c42:	bd30      	pop	{r4, r5, pc}
    len = length;
   c0c44:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   c0c46:	4629      	mov	r1, r5
   c0c48:	6820      	ldr	r0, [r4, #0]
   c0c4a:	f002 fab9 	bl	c31c0 <memcpy>
    buffer[len] = 0;
   c0c4e:	6822      	ldr	r2, [r4, #0]
   c0c50:	68a3      	ldr	r3, [r4, #8]
   c0c52:	2100      	movs	r1, #0
   c0c54:	54d1      	strb	r1, [r2, r3]
    return *this;
   c0c56:	e7f2      	b.n	c0c3e <_ZN6String4copyEPKcj+0x18>

000c0c58 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   c0c58:	b538      	push	{r3, r4, r5, lr}
   c0c5a:	4605      	mov	r5, r0
    if (buffer) {
   c0c5c:	6800      	ldr	r0, [r0, #0]
{
   c0c5e:	460c      	mov	r4, r1
    if (buffer) {
   c0c60:	b170      	cbz	r0, c0c80 <_ZN6String4moveERS_+0x28>
        if (capacity_ >= rhs.len && rhs.buffer) {
   c0c62:	686a      	ldr	r2, [r5, #4]
   c0c64:	688b      	ldr	r3, [r1, #8]
   c0c66:	429a      	cmp	r2, r3
   c0c68:	d308      	bcc.n	c0c7c <_ZN6String4moveERS_+0x24>
   c0c6a:	6809      	ldr	r1, [r1, #0]
   c0c6c:	b131      	cbz	r1, c0c7c <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
   c0c6e:	f002 fb2c 	bl	c32ca <strcpy>
            len = rhs.len;
   c0c72:	68a3      	ldr	r3, [r4, #8]
   c0c74:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
   c0c76:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity_ = rhs.capacity_;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity_ = 0;
    rhs.len = 0;
   c0c78:	60a3      	str	r3, [r4, #8]
}
   c0c7a:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
   c0c7c:	f7fe f9b0 	bl	befe0 <free>
    buffer = rhs.buffer;
   c0c80:	6823      	ldr	r3, [r4, #0]
   c0c82:	602b      	str	r3, [r5, #0]
    capacity_ = rhs.capacity_;
   c0c84:	6863      	ldr	r3, [r4, #4]
   c0c86:	606b      	str	r3, [r5, #4]
    len = rhs.len;
   c0c88:	68a3      	ldr	r3, [r4, #8]
   c0c8a:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
   c0c8c:	2300      	movs	r3, #0
    rhs.capacity_ = 0;
   c0c8e:	e9c4 3300 	strd	r3, r3, [r4]
   c0c92:	e7f1      	b.n	c0c78 <_ZN6String4moveERS_+0x20>

000c0c94 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   c0c94:	b510      	push	{r4, lr}
    buffer = nullptr;
   c0c96:	2300      	movs	r3, #0
    capacity_ = 0;
   c0c98:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   c0c9c:	4604      	mov	r4, r0
    len = 0;
   c0c9e:	6083      	str	r3, [r0, #8]
    flags = 0;
   c0ca0:	7303      	strb	r3, [r0, #12]
    move(rval);
   c0ca2:	f7ff ffd9 	bl	c0c58 <_ZN6String4moveERS_>
}
   c0ca6:	4620      	mov	r0, r4
   c0ca8:	bd10      	pop	{r4, pc}

000c0caa <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
   c0caa:	4288      	cmp	r0, r1
{
   c0cac:	b510      	push	{r4, lr}
   c0cae:	4604      	mov	r4, r0
    if (this == &rhs) {
   c0cb0:	d005      	beq.n	c0cbe <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
   c0cb2:	680b      	ldr	r3, [r1, #0]
   c0cb4:	b12b      	cbz	r3, c0cc2 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
   c0cb6:	688a      	ldr	r2, [r1, #8]
   c0cb8:	4619      	mov	r1, r3
   c0cba:	f7ff ffb4 	bl	c0c26 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   c0cbe:	4620      	mov	r0, r4
   c0cc0:	bd10      	pop	{r4, pc}
        invalidate();
   c0cc2:	f7ff ff85 	bl	c0bd0 <_ZN6String10invalidateEv>
   c0cc6:	e7fa      	b.n	c0cbe <_ZN6StringaSERKS_+0x14>

000c0cc8 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   c0cc8:	b510      	push	{r4, lr}
    buffer = nullptr;
   c0cca:	2300      	movs	r3, #0
String::String(const String &value)
   c0ccc:	4604      	mov	r4, r0
    capacity_ = 0;
   c0cce:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
   c0cd2:	6083      	str	r3, [r0, #8]
    flags = 0;
   c0cd4:	7303      	strb	r3, [r0, #12]
    *this = value;
   c0cd6:	f7ff ffe8 	bl	c0caa <_ZN6StringaSERKS_>
}
   c0cda:	4620      	mov	r0, r4
   c0cdc:	bd10      	pop	{r4, pc}
	...

000c0ce0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   c0ce0:	4b05      	ldr	r3, [pc, #20]	; (c0cf8 <_GLOBAL__sub_I_System+0x18>)
   c0ce2:	2202      	movs	r2, #2
   c0ce4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   c0ce6:	4b05      	ldr	r3, [pc, #20]	; (c0cfc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   c0ce8:	4a05      	ldr	r2, [pc, #20]	; (c0d00 <_GLOBAL__sub_I_System+0x20>)
   c0cea:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   c0cec:	2000      	movs	r0, #0
   c0cee:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   c0cf2:	f7fe b8bd 	b.w	bee70 <set_system_mode>
   c0cf6:	bf00      	nop
   c0cf8:	2003df94 	.word	0x2003df94
   c0cfc:	2003df88 	.word	0x2003df88
   c0d00:	ffff0000 	.word	0xffff0000

000c0d04 <_ZN8particle11TetherClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   c0d04:	2200      	movs	r2, #0
   c0d06:	6840      	ldr	r0, [r0, #4]
   c0d08:	4611      	mov	r1, r2
   c0d0a:	f7fe b929 	b.w	bef60 <network_listening>

000c0d0e <_ZN8particle11TetherClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   c0d0e:	2200      	movs	r2, #0
   c0d10:	6840      	ldr	r0, [r0, #4]
   c0d12:	4611      	mov	r1, r2
   c0d14:	f7fe b934 	b.w	bef80 <network_get_listen_timeout>

000c0d18 <_ZN8particle11TetherClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   c0d18:	6840      	ldr	r0, [r0, #4]
   c0d1a:	2200      	movs	r2, #0
   c0d1c:	f7fe b928 	b.w	bef70 <network_set_listen_timeout>

000c0d20 <_ZN8particle11TetherClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   c0d20:	6840      	ldr	r0, [r0, #4]
   c0d22:	2200      	movs	r2, #0
   c0d24:	f081 0101 	eor.w	r1, r1, #1
   c0d28:	f7fe b912 	b.w	bef50 <network_listen>

000c0d2c <_ZN8particle11TetherClass3offEv>:
        network_off(*this, 0, 0, NULL);
   c0d2c:	2300      	movs	r3, #0
   c0d2e:	6840      	ldr	r0, [r0, #4]
   c0d30:	461a      	mov	r2, r3
   c0d32:	4619      	mov	r1, r3
   c0d34:	f7fe b904 	b.w	bef40 <network_off>

000c0d38 <_ZN8particle11TetherClass2onEv>:
        network_on(*this, 0, 0, NULL);
   c0d38:	2300      	movs	r3, #0
   c0d3a:	6840      	ldr	r0, [r0, #4]
   c0d3c:	461a      	mov	r2, r3
   c0d3e:	4619      	mov	r1, r3
   c0d40:	f7fe b8f6 	b.w	bef30 <network_on>

000c0d44 <_ZN8particle11TetherClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   c0d44:	2200      	movs	r2, #0
   c0d46:	6840      	ldr	r0, [r0, #4]
   c0d48:	4611      	mov	r1, r2
   c0d4a:	f7fe b8e9 	b.w	bef20 <network_ready>

000c0d4e <_ZN8particle11TetherClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   c0d4e:	2200      	movs	r2, #0
   c0d50:	6840      	ldr	r0, [r0, #4]
   c0d52:	4611      	mov	r1, r2
   c0d54:	f7fe b8d4 	b.w	bef00 <network_connecting>

000c0d58 <_ZN8particle11TetherClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   c0d58:	6840      	ldr	r0, [r0, #4]
   c0d5a:	2200      	movs	r2, #0
   c0d5c:	2102      	movs	r1, #2
   c0d5e:	f7fe b8d7 	b.w	bef10 <network_disconnect>

000c0d62 <_ZN8particle11TetherClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   c0d62:	2300      	movs	r3, #0
   c0d64:	6840      	ldr	r0, [r0, #4]
   c0d66:	461a      	mov	r2, r3
   c0d68:	f7fe b8c2 	b.w	beef0 <network_connect>

000c0d6c <_GLOBAL__sub_I__ZN8particle6TetherE>:
   c0d6c:	4b02      	ldr	r3, [pc, #8]	; (c0d78 <_GLOBAL__sub_I__ZN8particle6TetherE+0xc>)
   c0d6e:	2206      	movs	r2, #6
   c0d70:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_PPP_SERVER) {
   c0d72:	4a02      	ldr	r2, [pc, #8]	; (c0d7c <_GLOBAL__sub_I__ZN8particle6TetherE+0x10>)
   c0d74:	601a      	str	r2, [r3, #0]
        return if_request(iface, IF_REQ_DRIVER_SPECIFIC, &settings, sizeof(settings), nullptr);
    }
    return SYSTEM_ERROR_NOT_FOUND;
}

} // spark
   c0d76:	4770      	bx	lr
   c0d78:	2003df98 	.word	0x2003df98
   c0d7c:	000c8c58 	.word	0x000c8c58

000c0d80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   c0d80:	4b02      	ldr	r3, [pc, #8]	; (c0d8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   c0d82:	681a      	ldr	r2, [r3, #0]
   c0d84:	4b02      	ldr	r3, [pc, #8]	; (c0d90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   c0d86:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   c0d88:	4770      	bx	lr
   c0d8a:	bf00      	nop
   c0d8c:	2003d27c 	.word	0x2003d27c
   c0d90:	2003dfa0 	.word	0x2003dfa0

000c0d94 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   c0d94:	4770      	bx	lr

000c0d96 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c0d96:	7441      	strb	r1, [r0, #17]
}
   c0d98:	4770      	bx	lr

000c0d9a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   c0d9a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   c0d9c:	7c00      	ldrb	r0, [r0, #16]
   c0d9e:	f7fd fff7 	bl	bed90 <hal_usart_available_data_for_write>
}
   c0da2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c0da6:	bd08      	pop	{r3, pc}

000c0da8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   c0da8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   c0daa:	7c00      	ldrb	r0, [r0, #16]
   c0dac:	f7fd ffc8 	bl	bed40 <hal_usart_available>
}
   c0db0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c0db4:	bd08      	pop	{r3, pc}

000c0db6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   c0db6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   c0db8:	7c00      	ldrb	r0, [r0, #16]
   c0dba:	f7fd ffd1 	bl	bed60 <hal_usart_peek>
}
   c0dbe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c0dc2:	bd08      	pop	{r3, pc}

000c0dc4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   c0dc4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   c0dc6:	7c00      	ldrb	r0, [r0, #16]
   c0dc8:	f7fd ffc2 	bl	bed50 <hal_usart_read>
}
   c0dcc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c0dd0:	bd08      	pop	{r3, pc}

000c0dd2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   c0dd2:	7c00      	ldrb	r0, [r0, #16]
   c0dd4:	f7fd bfcc 	b.w	bed70 <hal_usart_flush>

000c0dd8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   c0dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c0dda:	7c45      	ldrb	r5, [r0, #17]
{
   c0ddc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c0dde:	b12d      	cbz	r5, c0dec <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   c0de0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   c0de2:	b003      	add	sp, #12
   c0de4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   c0de8:	f7fd bfa2 	b.w	bed30 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c0dec:	7c00      	ldrb	r0, [r0, #16]
   c0dee:	9101      	str	r1, [sp, #4]
   c0df0:	f7fd ffce 	bl	bed90 <hal_usart_available_data_for_write>
   c0df4:	2800      	cmp	r0, #0
   c0df6:	9901      	ldr	r1, [sp, #4]
   c0df8:	dcf2      	bgt.n	c0de0 <_ZN11USARTSerial5writeEh+0x8>
}
   c0dfa:	4628      	mov	r0, r5
   c0dfc:	b003      	add	sp, #12
   c0dfe:	bd30      	pop	{r4, r5, pc}

000c0e00 <_ZN11USARTSerialD0Ev>:
   c0e00:	b510      	push	{r4, lr}
   c0e02:	2114      	movs	r1, #20
   c0e04:	4604      	mov	r4, r0
   c0e06:	f7f4 f852 	bl	b4eae <_ZdlPvj>
   c0e0a:	4620      	mov	r0, r4
   c0e0c:	bd10      	pop	{r4, pc}
	...

000c0e10 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   c0e10:	b510      	push	{r4, lr}
   c0e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c0e16:	4604      	mov	r4, r0
   c0e18:	4608      	mov	r0, r1
   c0e1a:	4611      	mov	r1, r2
   c0e1c:	2200      	movs	r2, #0
   c0e1e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c0e22:	4b04      	ldr	r3, [pc, #16]	; (c0e34 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   c0e24:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c0e26:	2301      	movs	r3, #1
  _serial = serial;
   c0e28:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c0e2a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   c0e2c:	f7fd ffc0 	bl	bedb0 <hal_usart_init_ex>
}
   c0e30:	4620      	mov	r0, r4
   c0e32:	bd10      	pop	{r4, pc}
   c0e34:	000c8cb8 	.word	0x000c8cb8

000c0e38 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   c0e38:	7c00      	ldrb	r0, [r0, #16]
   c0e3a:	2300      	movs	r3, #0
   c0e3c:	f7fd bfb0 	b.w	beda0 <hal_usart_begin_config>

000c0e40 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   c0e40:	2200      	movs	r2, #0
   c0e42:	f7ff bff9 	b.w	c0e38 <_ZN11USARTSerial5beginEmm>

000c0e46 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   c0e46:	7c00      	ldrb	r0, [r0, #16]
   c0e48:	f7fd bf6a 	b.w	bed20 <hal_usart_end>

000c0e4c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c0e4c:	7441      	strb	r1, [r0, #17]
}
   c0e4e:	4770      	bx	lr

000c0e50 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c0e50:	4770      	bx	lr

000c0e52 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   c0e52:	4770      	bx	lr

000c0e54 <_ZN9USBSerial4readEv>:
{
   c0e54:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   c0e56:	2100      	movs	r1, #0
   c0e58:	7c00      	ldrb	r0, [r0, #16]
   c0e5a:	f7fd ffd9 	bl	bee10 <HAL_USB_USART_Receive_Data>
}
   c0e5e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c0e62:	bd08      	pop	{r3, pc}

000c0e64 <_ZN9USBSerial4peekEv>:
{
   c0e64:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   c0e66:	2101      	movs	r1, #1
   c0e68:	7c00      	ldrb	r0, [r0, #16]
   c0e6a:	f7fd ffd1 	bl	bee10 <HAL_USB_USART_Receive_Data>
}
   c0e6e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c0e72:	bd08      	pop	{r3, pc}

000c0e74 <_ZN9USBSerial17availableForWriteEv>:
{
   c0e74:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   c0e76:	7c00      	ldrb	r0, [r0, #16]
   c0e78:	f7fd ffc2 	bl	bee00 <HAL_USB_USART_Available_Data_For_Write>
}
   c0e7c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c0e80:	bd08      	pop	{r3, pc}

000c0e82 <_ZN9USBSerial9availableEv>:
{
   c0e82:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   c0e84:	7c00      	ldrb	r0, [r0, #16]
   c0e86:	f7fd ffb3 	bl	bedf0 <HAL_USB_USART_Available_Data>
}
   c0e8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c0e8e:	bd08      	pop	{r3, pc}

000c0e90 <_ZN9USBSerial5writeEh>:
{
   c0e90:	b513      	push	{r0, r1, r4, lr}
   c0e92:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c0e94:	7c00      	ldrb	r0, [r0, #16]
{
   c0e96:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c0e98:	f7fd ffb2 	bl	bee00 <HAL_USB_USART_Available_Data_For_Write>
   c0e9c:	2800      	cmp	r0, #0
   c0e9e:	9901      	ldr	r1, [sp, #4]
   c0ea0:	dc01      	bgt.n	c0ea6 <_ZN9USBSerial5writeEh+0x16>
   c0ea2:	7c60      	ldrb	r0, [r4, #17]
   c0ea4:	b120      	cbz	r0, c0eb0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   c0ea6:	7c20      	ldrb	r0, [r4, #16]
   c0ea8:	f7fd ffba 	bl	bee20 <HAL_USB_USART_Send_Data>
   c0eac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   c0eb0:	b002      	add	sp, #8
   c0eb2:	bd10      	pop	{r4, pc}

000c0eb4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   c0eb4:	7c00      	ldrb	r0, [r0, #16]
   c0eb6:	f7fd bfbb 	b.w	bee30 <HAL_USB_USART_Flush_Data>

000c0eba <_ZN9USBSerialD0Ev>:
   c0eba:	b510      	push	{r4, lr}
   c0ebc:	2114      	movs	r1, #20
   c0ebe:	4604      	mov	r4, r0
   c0ec0:	f7f3 fff5 	bl	b4eae <_ZdlPvj>
   c0ec4:	4620      	mov	r0, r4
   c0ec6:	bd10      	pop	{r4, pc}

000c0ec8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   c0ec8:	b510      	push	{r4, lr}
   c0eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c0ece:	4604      	mov	r4, r0
   c0ed0:	4608      	mov	r0, r1
   c0ed2:	2100      	movs	r1, #0
   c0ed4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c0ed8:	4b04      	ldr	r3, [pc, #16]	; (c0eec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   c0eda:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c0edc:	2301      	movs	r3, #1
  _serial = serial;
   c0ede:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c0ee0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   c0ee2:	4611      	mov	r1, r2
   c0ee4:	f7fd ff6c 	bl	bedc0 <HAL_USB_USART_Init>
}
   c0ee8:	4620      	mov	r0, r4
   c0eea:	bd10      	pop	{r4, pc}
   c0eec:	000c8cec 	.word	0x000c8cec

000c0ef0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   c0ef0:	7c00      	ldrb	r0, [r0, #16]
   c0ef2:	2200      	movs	r2, #0
   c0ef4:	f7fd bf6c 	b.w	bedd0 <HAL_USB_USART_Begin>

000c0ef8 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   c0ef8:	7c00      	ldrb	r0, [r0, #16]
   c0efa:	f7fd bf71 	b.w	bede0 <HAL_USB_USART_End>

000c0efe <_Z19acquireSerialBufferv>:
{
   c0efe:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   c0f00:	2214      	movs	r2, #20
{
   c0f02:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   c0f04:	2100      	movs	r1, #0
   c0f06:	f002 f983 	bl	c3210 <memset>
}
   c0f0a:	4620      	mov	r0, r4
   c0f0c:	bd10      	pop	{r4, pc}
	...

000c0f10 <_Z16_fetch_usbserialv>:
{
   c0f10:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c0f12:	4c0f      	ldr	r4, [pc, #60]	; (c0f50 <_Z16_fetch_usbserialv+0x40>)
{
   c0f14:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   c0f16:	a803      	add	r0, sp, #12
   c0f18:	f7ff fff1 	bl	c0efe <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c0f1c:	7821      	ldrb	r1, [r4, #0]
   c0f1e:	f3bf 8f5b 	dmb	ish
   c0f22:	f011 0101 	ands.w	r1, r1, #1
   c0f26:	d10f      	bne.n	c0f48 <_Z16_fetch_usbserialv+0x38>
   c0f28:	4620      	mov	r0, r4
   c0f2a:	9101      	str	r1, [sp, #4]
   c0f2c:	f7fe f898 	bl	bf060 <__cxa_guard_acquire>
   c0f30:	9901      	ldr	r1, [sp, #4]
   c0f32:	b148      	cbz	r0, c0f48 <_Z16_fetch_usbserialv+0x38>
   c0f34:	aa03      	add	r2, sp, #12
   c0f36:	4807      	ldr	r0, [pc, #28]	; (c0f54 <_Z16_fetch_usbserialv+0x44>)
   c0f38:	f7ff ffc6 	bl	c0ec8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   c0f3c:	4620      	mov	r0, r4
   c0f3e:	f7fe f897 	bl	bf070 <__cxa_guard_release>
   c0f42:	4805      	ldr	r0, [pc, #20]	; (c0f58 <_Z16_fetch_usbserialv+0x48>)
   c0f44:	f002 f922 	bl	c318c <atexit>
	return _usbserial;
}
   c0f48:	4802      	ldr	r0, [pc, #8]	; (c0f54 <_Z16_fetch_usbserialv+0x44>)
   c0f4a:	b008      	add	sp, #32
   c0f4c:	bd10      	pop	{r4, pc}
   c0f4e:	bf00      	nop
   c0f50:	2003dfa4 	.word	0x2003dfa4
   c0f54:	2003dfa8 	.word	0x2003dfa8
   c0f58:	000c0e51 	.word	0x000c0e51

000c0f5c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   c0f5c:	4b01      	ldr	r3, [pc, #4]	; (c0f64 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   c0f5e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   c0f60:	4770      	bx	lr
   c0f62:	bf00      	nop
   c0f64:	2003d284 	.word	0x2003d284

000c0f68 <serialEventRun>:
{
   c0f68:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   c0f6a:	4b0b      	ldr	r3, [pc, #44]	; (c0f98 <serialEventRun+0x30>)
   c0f6c:	b143      	cbz	r3, c0f80 <serialEventRun+0x18>
   c0f6e:	f7ff ffcf 	bl	c0f10 <_Z16_fetch_usbserialv>
   c0f72:	6803      	ldr	r3, [r0, #0]
   c0f74:	691b      	ldr	r3, [r3, #16]
   c0f76:	4798      	blx	r3
   c0f78:	2800      	cmp	r0, #0
   c0f7a:	dd01      	ble.n	c0f80 <serialEventRun+0x18>
        serialEvent();
   c0f7c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   c0f80:	4b06      	ldr	r3, [pc, #24]	; (c0f9c <serialEventRun+0x34>)
   c0f82:	b143      	cbz	r3, c0f96 <serialEventRun+0x2e>
   c0f84:	f000 f95c 	bl	c1240 <_Z22__fetch_global_Serial1v>
   c0f88:	6803      	ldr	r3, [r0, #0]
   c0f8a:	691b      	ldr	r3, [r3, #16]
   c0f8c:	4798      	blx	r3
   c0f8e:	2800      	cmp	r0, #0
   c0f90:	dd01      	ble.n	c0f96 <serialEventRun+0x2e>
        serialEvent1();
   c0f92:	f3af 8000 	nop.w
}
   c0f96:	bd08      	pop	{r3, pc}
	...

000c0fa0 <_post_loop>:
{
   c0fa0:	b508      	push	{r3, lr}
	serialEventRun();
   c0fa2:	f7ff ffe1 	bl	c0f68 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   c0fa6:	f7fd fdd3 	bl	beb50 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   c0faa:	4b01      	ldr	r3, [pc, #4]	; (c0fb0 <_post_loop+0x10>)
   c0fac:	6018      	str	r0, [r3, #0]
}
   c0fae:	bd08      	pop	{r3, pc}
   c0fb0:	2003dfc4 	.word	0x2003dfc4

000c0fb4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c0fb4:	4805      	ldr	r0, [pc, #20]	; (c0fcc <_Z33system_initialize_user_backup_ramv+0x18>)
   c0fb6:	4a06      	ldr	r2, [pc, #24]	; (c0fd0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   c0fb8:	4906      	ldr	r1, [pc, #24]	; (c0fd4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   c0fba:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c0fbc:	1a12      	subs	r2, r2, r0
   c0fbe:	f002 f8ff 	bl	c31c0 <memcpy>
    __backup_sram_signature = signature;
   c0fc2:	4b05      	ldr	r3, [pc, #20]	; (c0fd8 <_Z33system_initialize_user_backup_ramv+0x24>)
   c0fc4:	4a05      	ldr	r2, [pc, #20]	; (c0fdc <_Z33system_initialize_user_backup_ramv+0x28>)
   c0fc6:	601a      	str	r2, [r3, #0]
}
   c0fc8:	bd08      	pop	{r3, pc}
   c0fca:	bf00      	nop
   c0fcc:	2003f400 	.word	0x2003f400
   c0fd0:	2003f404 	.word	0x2003f404
   c0fd4:	000c98a4 	.word	0x000c98a4
   c0fd8:	2003f400 	.word	0x2003f400
   c0fdc:	9a271c1e 	.word	0x9a271c1e

000c0fe0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   c0fe0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c0fe2:	2300      	movs	r3, #0
   c0fe4:	9300      	str	r3, [sp, #0]
   c0fe6:	461a      	mov	r2, r3
   c0fe8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c0fec:	f7fd ff5a 	bl	beea4 <system_ctrl_set_result>
}
   c0ff0:	b003      	add	sp, #12
   c0ff2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c0ff8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   c0ff8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   c0ffa:	8843      	ldrh	r3, [r0, #2]
   c0ffc:	2b0a      	cmp	r3, #10
   c0ffe:	d008      	beq.n	c1012 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   c1000:	2b50      	cmp	r3, #80	; 0x50
   c1002:	d10b      	bne.n	c101c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   c1004:	4b09      	ldr	r3, [pc, #36]	; (c102c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   c1006:	681b      	ldr	r3, [r3, #0]
   c1008:	b14b      	cbz	r3, c101e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   c100a:	b003      	add	sp, #12
   c100c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   c1010:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   c1012:	f7ff ffe5 	bl	c0fe0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   c1016:	b003      	add	sp, #12
   c1018:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c101c:	2300      	movs	r3, #0
   c101e:	9300      	str	r3, [sp, #0]
   c1020:	461a      	mov	r2, r3
   c1022:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c1026:	f7fd ff3d 	bl	beea4 <system_ctrl_set_result>
}
   c102a:	e7f4      	b.n	c1016 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   c102c:	2003dfc0 	.word	0x2003dfc0

000c1030 <module_user_init_hook>:
{
   c1030:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   c1032:	4812      	ldr	r0, [pc, #72]	; (c107c <module_user_init_hook+0x4c>)
   c1034:	2100      	movs	r1, #0
   c1036:	f7fe f80b 	bl	bf050 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   c103a:	4b11      	ldr	r3, [pc, #68]	; (c1080 <module_user_init_hook+0x50>)
   c103c:	681a      	ldr	r2, [r3, #0]
   c103e:	4b11      	ldr	r3, [pc, #68]	; (c1084 <module_user_init_hook+0x54>)
   c1040:	429a      	cmp	r2, r3
   c1042:	4b11      	ldr	r3, [pc, #68]	; (c1088 <module_user_init_hook+0x58>)
   c1044:	bf0c      	ite	eq
   c1046:	2201      	moveq	r2, #1
   c1048:	2200      	movne	r2, #0
   c104a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   c104c:	d001      	beq.n	c1052 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   c104e:	f7ff ffb1 	bl	c0fb4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   c1052:	f7fd fd65 	bl	beb20 <HAL_RNG_GetRandomNumber>
   c1056:	4604      	mov	r4, r0
    srand(seed);
   c1058:	f002 f8f2 	bl	c3240 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   c105c:	4b0b      	ldr	r3, [pc, #44]	; (c108c <module_user_init_hook+0x5c>)
   c105e:	b113      	cbz	r3, c1066 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   c1060:	4620      	mov	r0, r4
   c1062:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   c1066:	2100      	movs	r1, #0
   c1068:	4808      	ldr	r0, [pc, #32]	; (c108c <module_user_init_hook+0x5c>)
   c106a:	f7fd ff39 	bl	beee0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   c106e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   c1072:	4807      	ldr	r0, [pc, #28]	; (c1090 <module_user_init_hook+0x60>)
   c1074:	2100      	movs	r1, #0
   c1076:	f7fd bf0b 	b.w	bee90 <system_ctrl_set_app_request_handler>
   c107a:	bf00      	nop
   c107c:	000c0f5d 	.word	0x000c0f5d
   c1080:	2003f400 	.word	0x2003f400
   c1084:	9a271c1e 	.word	0x9a271c1e
   c1088:	2003dfbc 	.word	0x2003dfbc
   c108c:	00000000 	.word	0x00000000
   c1090:	000c0ff9 	.word	0x000c0ff9

000c1094 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   c1094:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   c1096:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   c1098:	d902      	bls.n	c10a0 <pinAvailable+0xc>
    return false;
   c109a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   c109c:	b002      	add	sp, #8
   c109e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   c10a0:	f1a0 030b 	sub.w	r3, r0, #11
   c10a4:	2b02      	cmp	r3, #2
   c10a6:	d81a      	bhi.n	c10de <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   c10a8:	4c17      	ldr	r4, [pc, #92]	; (c1108 <pinAvailable+0x74>)
   c10aa:	7821      	ldrb	r1, [r4, #0]
   c10ac:	f3bf 8f5b 	dmb	ish
   c10b0:	f011 0101 	ands.w	r1, r1, #1
   c10b4:	d10b      	bne.n	c10ce <pinAvailable+0x3a>
   c10b6:	4620      	mov	r0, r4
   c10b8:	9101      	str	r1, [sp, #4]
   c10ba:	f7fd ffd1 	bl	bf060 <__cxa_guard_acquire>
   c10be:	9901      	ldr	r1, [sp, #4]
   c10c0:	b128      	cbz	r0, c10ce <pinAvailable+0x3a>
   c10c2:	4812      	ldr	r0, [pc, #72]	; (c110c <pinAvailable+0x78>)
   c10c4:	f7ff fc9a 	bl	c09fc <_ZN8SPIClassC1E19hal_spi_interface_t>
   c10c8:	4620      	mov	r0, r4
   c10ca:	f7fd ffd1 	bl	bf070 <__cxa_guard_release>
   c10ce:	4b0f      	ldr	r3, [pc, #60]	; (c110c <pinAvailable+0x78>)
   c10d0:	7818      	ldrb	r0, [r3, #0]
   c10d2:	f7fd fded 	bl	becb0 <hal_spi_is_enabled>
   c10d6:	2800      	cmp	r0, #0
   c10d8:	d1df      	bne.n	c109a <pinAvailable+0x6>
  return true; // 'pin' is available
   c10da:	2001      	movs	r0, #1
   c10dc:	e7de      	b.n	c109c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   c10de:	2801      	cmp	r0, #1
   c10e0:	d809      	bhi.n	c10f6 <pinAvailable+0x62>
   c10e2:	f000 f86d 	bl	c11c0 <_Z19__fetch_global_Wirev>
   c10e6:	2100      	movs	r1, #0
   c10e8:	7c00      	ldrb	r0, [r0, #16]
   c10ea:	f7fd fda1 	bl	bec30 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   c10ee:	f080 0001 	eor.w	r0, r0, #1
   c10f2:	b2c0      	uxtb	r0, r0
   c10f4:	e7d2      	b.n	c109c <pinAvailable+0x8>
   c10f6:	3809      	subs	r0, #9
   c10f8:	2801      	cmp	r0, #1
   c10fa:	d8ee      	bhi.n	c10da <pinAvailable+0x46>
   c10fc:	f000 f8a0 	bl	c1240 <_Z22__fetch_global_Serial1v>
   c1100:	7c00      	ldrb	r0, [r0, #16]
   c1102:	f7fd fe3d 	bl	bed80 <hal_usart_is_enabled>
   c1106:	e7f2      	b.n	c10ee <pinAvailable+0x5a>
   c1108:	2003ded0 	.word	0x2003ded0
   c110c:	2003ded4 	.word	0x2003ded4

000c1110 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c1110:	2825      	cmp	r0, #37	; 0x25
{
   c1112:	b538      	push	{r3, r4, r5, lr}
   c1114:	4604      	mov	r4, r0
   c1116:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c1118:	d80a      	bhi.n	c1130 <pinMode+0x20>
   c111a:	29ff      	cmp	r1, #255	; 0xff
   c111c:	d008      	beq.n	c1130 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   c111e:	f7ff ffb9 	bl	c1094 <pinAvailable>
   c1122:	b128      	cbz	r0, c1130 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   c1124:	4629      	mov	r1, r5
   c1126:	4620      	mov	r0, r4
}
   c1128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   c112c:	f7fd bd18 	b.w	beb60 <hal_gpio_mode>
}
   c1130:	bd38      	pop	{r3, r4, r5, pc}

000c1132 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   c1132:	b538      	push	{r3, r4, r5, lr}
   c1134:	4604      	mov	r4, r0
   c1136:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   c1138:	f7fd fd1a 	bl	beb70 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   c113c:	28ff      	cmp	r0, #255	; 0xff
   c113e:	d010      	beq.n	c1162 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   c1140:	2806      	cmp	r0, #6
   c1142:	d804      	bhi.n	c114e <digitalWrite+0x1c>
   c1144:	234d      	movs	r3, #77	; 0x4d
   c1146:	fa23 f000 	lsr.w	r0, r3, r0
   c114a:	07c3      	lsls	r3, r0, #31
   c114c:	d409      	bmi.n	c1162 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   c114e:	4620      	mov	r0, r4
   c1150:	f7ff ffa0 	bl	c1094 <pinAvailable>
   c1154:	b128      	cbz	r0, c1162 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   c1156:	4629      	mov	r1, r5
   c1158:	4620      	mov	r0, r4
}
   c115a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   c115e:	f7fd bd0f 	b.w	beb80 <hal_gpio_write>
}
   c1162:	bd38      	pop	{r3, r4, r5, pc}

000c1164 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   c1164:	b510      	push	{r4, lr}
   c1166:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   c1168:	f7fd fd02 	bl	beb70 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   c116c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   c116e:	b2db      	uxtb	r3, r3
   c1170:	2b01      	cmp	r3, #1
   c1172:	d908      	bls.n	c1186 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   c1174:	4620      	mov	r0, r4
   c1176:	f7ff ff8d 	bl	c1094 <pinAvailable>
   c117a:	b120      	cbz	r0, c1186 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   c117c:	4620      	mov	r0, r4
}
   c117e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   c1182:	f7fd bd05 	b.w	beb90 <hal_gpio_read>
}
   c1186:	2000      	movs	r0, #0
   c1188:	bd10      	pop	{r4, pc}

000c118a <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c118a:	4770      	bx	lr

000c118c <_Z17acquireWireBufferv>:
{
   c118c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c118e:	4b0a      	ldr	r3, [pc, #40]	; (c11b8 <_Z17acquireWireBufferv+0x2c>)
   c1190:	6003      	str	r3, [r0, #0]
   c1192:	2301      	movs	r3, #1
{
   c1194:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c1196:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c1198:	4908      	ldr	r1, [pc, #32]	; (c11bc <_Z17acquireWireBufferv+0x30>)
   c119a:	2020      	movs	r0, #32
   c119c:	f000 f876 	bl	c128c <_ZnajRKSt9nothrow_t>
	};
   c11a0:	2520      	movs	r5, #32
   c11a2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c11a4:	4905      	ldr	r1, [pc, #20]	; (c11bc <_Z17acquireWireBufferv+0x30>)
	};
   c11a6:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c11a8:	4628      	mov	r0, r5
   c11aa:	f000 f86f 	bl	c128c <_ZnajRKSt9nothrow_t>
	};
   c11ae:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   c11b2:	4620      	mov	r0, r4
   c11b4:	bd38      	pop	{r3, r4, r5, pc}
   c11b6:	bf00      	nop
   c11b8:	00010018 	.word	0x00010018
   c11bc:	000c8d18 	.word	0x000c8d18

000c11c0 <_Z19__fetch_global_Wirev>:
{
   c11c0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c11c2:	4d0e      	ldr	r5, [pc, #56]	; (c11fc <_Z19__fetch_global_Wirev+0x3c>)
   c11c4:	7829      	ldrb	r1, [r5, #0]
   c11c6:	f3bf 8f5b 	dmb	ish
   c11ca:	f011 0401 	ands.w	r4, r1, #1
{
   c11ce:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c11d0:	d111      	bne.n	c11f6 <_Z19__fetch_global_Wirev+0x36>
   c11d2:	4628      	mov	r0, r5
   c11d4:	f7fd ff44 	bl	bf060 <__cxa_guard_acquire>
   c11d8:	b168      	cbz	r0, c11f6 <_Z19__fetch_global_Wirev+0x36>
   c11da:	4668      	mov	r0, sp
   c11dc:	f7ff ffd6 	bl	c118c <_Z17acquireWireBufferv>
   c11e0:	466a      	mov	r2, sp
   c11e2:	4621      	mov	r1, r4
   c11e4:	4806      	ldr	r0, [pc, #24]	; (c1200 <_Z19__fetch_global_Wirev+0x40>)
   c11e6:	f7fe f851 	bl	bf28c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c11ea:	4628      	mov	r0, r5
   c11ec:	f7fd ff40 	bl	bf070 <__cxa_guard_release>
   c11f0:	4804      	ldr	r0, [pc, #16]	; (c1204 <_Z19__fetch_global_Wirev+0x44>)
   c11f2:	f001 ffcb 	bl	c318c <atexit>
	return wire;
}
   c11f6:	4802      	ldr	r0, [pc, #8]	; (c1200 <_Z19__fetch_global_Wirev+0x40>)
   c11f8:	b007      	add	sp, #28
   c11fa:	bd30      	pop	{r4, r5, pc}
   c11fc:	2003dfc8 	.word	0x2003dfc8
   c1200:	2003dfcc 	.word	0x2003dfcc
   c1204:	000c118b 	.word	0x000c118b

000c1208 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c1208:	4770      	bx	lr
	...

000c120c <_Z20acquireSerial1Bufferv>:
{
   c120c:	b538      	push	{r3, r4, r5, lr}
   c120e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c1210:	2514      	movs	r5, #20
   c1212:	462a      	mov	r2, r5
   c1214:	2100      	movs	r1, #0
   c1216:	f001 fffb 	bl	c3210 <memset>
   c121a:	8025      	strh	r5, [r4, #0]
   c121c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c121e:	4907      	ldr	r1, [pc, #28]	; (c123c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c1220:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c1222:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c1224:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c1226:	f000 f831 	bl	c128c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c122a:	4904      	ldr	r1, [pc, #16]	; (c123c <_Z20acquireSerial1Bufferv+0x30>)
    };
   c122c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c122e:	4628      	mov	r0, r5
   c1230:	f000 f82c 	bl	c128c <_ZnajRKSt9nothrow_t>
    };
   c1234:	60e0      	str	r0, [r4, #12]
}
   c1236:	4620      	mov	r0, r4
   c1238:	bd38      	pop	{r3, r4, r5, pc}
   c123a:	bf00      	nop
   c123c:	000c8d18 	.word	0x000c8d18

000c1240 <_Z22__fetch_global_Serial1v>:
{
   c1240:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c1242:	4d0e      	ldr	r5, [pc, #56]	; (c127c <_Z22__fetch_global_Serial1v+0x3c>)
   c1244:	7829      	ldrb	r1, [r5, #0]
   c1246:	f3bf 8f5b 	dmb	ish
   c124a:	f011 0401 	ands.w	r4, r1, #1
{
   c124e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c1250:	d111      	bne.n	c1276 <_Z22__fetch_global_Serial1v+0x36>
   c1252:	4628      	mov	r0, r5
   c1254:	f7fd ff04 	bl	bf060 <__cxa_guard_acquire>
   c1258:	b168      	cbz	r0, c1276 <_Z22__fetch_global_Serial1v+0x36>
   c125a:	a801      	add	r0, sp, #4
   c125c:	f7ff ffd6 	bl	c120c <_Z20acquireSerial1Bufferv>
   c1260:	aa01      	add	r2, sp, #4
   c1262:	4621      	mov	r1, r4
   c1264:	4806      	ldr	r0, [pc, #24]	; (c1280 <_Z22__fetch_global_Serial1v+0x40>)
   c1266:	f7ff fdd3 	bl	c0e10 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c126a:	4628      	mov	r0, r5
   c126c:	f7fd ff00 	bl	bf070 <__cxa_guard_release>
   c1270:	4804      	ldr	r0, [pc, #16]	; (c1284 <_Z22__fetch_global_Serial1v+0x44>)
   c1272:	f001 ff8b 	bl	c318c <atexit>
    return serial1;
}
   c1276:	4802      	ldr	r0, [pc, #8]	; (c1280 <_Z22__fetch_global_Serial1v+0x40>)
   c1278:	b007      	add	sp, #28
   c127a:	bd30      	pop	{r4, r5, pc}
   c127c:	2003dfe0 	.word	0x2003dfe0
   c1280:	2003dfe4 	.word	0x2003dfe4
   c1284:	000c1209 	.word	0x000c1209

000c1288 <_ZnwjRKSt9nothrow_t>:
   c1288:	f7f3 be0b 	b.w	b4ea2 <_Znwj>

000c128c <_ZnajRKSt9nothrow_t>:
   c128c:	f7f3 be0b 	b.w	b4ea6 <_Znaj>

000c1290 <_ZSt20__throw_length_errorPKc>:
   c1290:	b508      	push	{r3, lr}
   c1292:	f7fd febd 	bl	bf010 <abort>

000c1296 <_ZSt25__throw_bad_function_callv>:
   c1296:	b508      	push	{r3, lr}
   c1298:	f7fd feba 	bl	bf010 <abort>
   c129c:	0000      	movs	r0, r0
	...

000c12a0 <cos>:
   c12a0:	ec51 0b10 	vmov	r0, r1, d0
   c12a4:	4a20      	ldr	r2, [pc, #128]	; (c1328 <cos+0x88>)
   c12a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   c12aa:	4293      	cmp	r3, r2
   c12ac:	dd20      	ble.n	c12f0 <cos+0x50>
   c12ae:	b500      	push	{lr}
   c12b0:	4a1e      	ldr	r2, [pc, #120]	; (c132c <cos+0x8c>)
   c12b2:	4293      	cmp	r3, r2
   c12b4:	b085      	sub	sp, #20
   c12b6:	dd09      	ble.n	c12cc <cos+0x2c>
   c12b8:	ee10 2a10 	vmov	r2, s0
   c12bc:	460b      	mov	r3, r1
   c12be:	f7f2 feb3 	bl	b4028 <__aeabi_dsub>
   c12c2:	ec41 0b10 	vmov	d0, r0, r1
   c12c6:	b005      	add	sp, #20
   c12c8:	f85d fb04 	ldr.w	pc, [sp], #4
   c12cc:	4668      	mov	r0, sp
   c12ce:	f000 fb33 	bl	c1938 <__ieee754_rem_pio2>
   c12d2:	f000 0003 	and.w	r0, r0, #3
   c12d6:	2801      	cmp	r0, #1
   c12d8:	ed9d 1b02 	vldr	d1, [sp, #8]
   c12dc:	ed9d 0b00 	vldr	d0, [sp]
   c12e0:	d00a      	beq.n	c12f8 <cos+0x58>
   c12e2:	2802      	cmp	r0, #2
   c12e4:	d016      	beq.n	c1314 <cos+0x74>
   c12e6:	b190      	cbz	r0, c130e <cos+0x6e>
   c12e8:	2001      	movs	r0, #1
   c12ea:	f001 fc89 	bl	c2c00 <__kernel_sin>
   c12ee:	e7ea      	b.n	c12c6 <cos+0x26>
   c12f0:	ed9f 1b0b 	vldr	d1, [pc, #44]	; c1320 <cos+0x80>
   c12f4:	f000 bf18 	b.w	c2128 <__kernel_cos>
   c12f8:	f001 fc82 	bl	c2c00 <__kernel_sin>
   c12fc:	ec53 2b10 	vmov	r2, r3, d0
   c1300:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   c1304:	ee00 3a90 	vmov	s1, r3
   c1308:	b005      	add	sp, #20
   c130a:	f85d fb04 	ldr.w	pc, [sp], #4
   c130e:	f000 ff0b 	bl	c2128 <__kernel_cos>
   c1312:	e7d8      	b.n	c12c6 <cos+0x26>
   c1314:	f000 ff08 	bl	c2128 <__kernel_cos>
   c1318:	e7f0      	b.n	c12fc <cos+0x5c>
   c131a:	bf00      	nop
   c131c:	f3af 8000 	nop.w
	...
   c1328:	3fe921fb 	.word	0x3fe921fb
   c132c:	7fefffff 	.word	0x7fefffff

000c1330 <floor>:
   c1330:	ec51 0b10 	vmov	r0, r1, d0
   c1334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c1336:	f3c1 530a 	ubfx	r3, r1, #20, #11
   c133a:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   c133e:	2d13      	cmp	r5, #19
   c1340:	ee10 6a10 	vmov	r6, s0
   c1344:	460c      	mov	r4, r1
   c1346:	dc30      	bgt.n	c13aa <floor+0x7a>
   c1348:	2d00      	cmp	r5, #0
   c134a:	db1e      	blt.n	c138a <floor+0x5a>
   c134c:	4f38      	ldr	r7, [pc, #224]	; (c1430 <floor+0x100>)
   c134e:	412f      	asrs	r7, r5
   c1350:	ea01 0307 	and.w	r3, r1, r7
   c1354:	4303      	orrs	r3, r0
   c1356:	d02d      	beq.n	c13b4 <floor+0x84>
   c1358:	a333      	add	r3, pc, #204	; (adr r3, c1428 <floor+0xf8>)
   c135a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c135e:	f7f2 fe65 	bl	b402c <__adddf3>
   c1362:	2200      	movs	r2, #0
   c1364:	2300      	movs	r3, #0
   c1366:	f7f3 faa7 	bl	b48b8 <__aeabi_dcmpgt>
   c136a:	b148      	cbz	r0, c1380 <floor+0x50>
   c136c:	2c00      	cmp	r4, #0
   c136e:	da04      	bge.n	c137a <floor+0x4a>
   c1370:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   c1374:	fa43 f505 	asr.w	r5, r3, r5
   c1378:	442c      	add	r4, r5
   c137a:	ea24 0407 	bic.w	r4, r4, r7
   c137e:	2600      	movs	r6, #0
   c1380:	4623      	mov	r3, r4
   c1382:	4632      	mov	r2, r6
   c1384:	ec43 2b10 	vmov	d0, r2, r3
   c1388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c138a:	a327      	add	r3, pc, #156	; (adr r3, c1428 <floor+0xf8>)
   c138c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1390:	f7f2 fe4c 	bl	b402c <__adddf3>
   c1394:	2200      	movs	r2, #0
   c1396:	2300      	movs	r3, #0
   c1398:	f7f3 fa8e 	bl	b48b8 <__aeabi_dcmpgt>
   c139c:	2800      	cmp	r0, #0
   c139e:	d0ef      	beq.n	c1380 <floor+0x50>
   c13a0:	2c00      	cmp	r4, #0
   c13a2:	db29      	blt.n	c13f8 <floor+0xc8>
   c13a4:	2600      	movs	r6, #0
   c13a6:	4634      	mov	r4, r6
   c13a8:	e7ea      	b.n	c1380 <floor+0x50>
   c13aa:	2d33      	cmp	r5, #51	; 0x33
   c13ac:	dd05      	ble.n	c13ba <floor+0x8a>
   c13ae:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   c13b2:	d019      	beq.n	c13e8 <floor+0xb8>
   c13b4:	ec41 0b10 	vmov	d0, r0, r1
   c13b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c13ba:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   c13be:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   c13c2:	40df      	lsrs	r7, r3
   c13c4:	4207      	tst	r7, r0
   c13c6:	d0f5      	beq.n	c13b4 <floor+0x84>
   c13c8:	a317      	add	r3, pc, #92	; (adr r3, c1428 <floor+0xf8>)
   c13ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   c13ce:	f7f2 fe2d 	bl	b402c <__adddf3>
   c13d2:	2200      	movs	r2, #0
   c13d4:	2300      	movs	r3, #0
   c13d6:	f7f3 fa6f 	bl	b48b8 <__aeabi_dcmpgt>
   c13da:	2800      	cmp	r0, #0
   c13dc:	d0d0      	beq.n	c1380 <floor+0x50>
   c13de:	2c00      	cmp	r4, #0
   c13e0:	db13      	blt.n	c140a <floor+0xda>
   c13e2:	ea26 0607 	bic.w	r6, r6, r7
   c13e6:	e7cb      	b.n	c1380 <floor+0x50>
   c13e8:	ee10 2a10 	vmov	r2, s0
   c13ec:	460b      	mov	r3, r1
   c13ee:	f7f2 fe1d 	bl	b402c <__adddf3>
   c13f2:	ec41 0b10 	vmov	d0, r0, r1
   c13f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c13f8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   c13fc:	4a0d      	ldr	r2, [pc, #52]	; (c1434 <floor+0x104>)
   c13fe:	431e      	orrs	r6, r3
   c1400:	2e00      	cmp	r6, #0
   c1402:	bf18      	it	ne
   c1404:	4614      	movne	r4, r2
   c1406:	2600      	movs	r6, #0
   c1408:	e7ba      	b.n	c1380 <floor+0x50>
   c140a:	2d14      	cmp	r5, #20
   c140c:	d008      	beq.n	c1420 <floor+0xf0>
   c140e:	2301      	movs	r3, #1
   c1410:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   c1414:	fa03 f505 	lsl.w	r5, r3, r5
   c1418:	19ae      	adds	r6, r5, r6
   c141a:	bf28      	it	cs
   c141c:	18e4      	addcs	r4, r4, r3
   c141e:	e7e0      	b.n	c13e2 <floor+0xb2>
   c1420:	3401      	adds	r4, #1
   c1422:	e7de      	b.n	c13e2 <floor+0xb2>
   c1424:	f3af 8000 	nop.w
   c1428:	8800759c 	.word	0x8800759c
   c142c:	7e37e43c 	.word	0x7e37e43c
   c1430:	000fffff 	.word	0x000fffff
   c1434:	bff00000 	.word	0xbff00000

000c1438 <frexp>:
   c1438:	ec53 2b10 	vmov	r2, r3, d0
   c143c:	b570      	push	{r4, r5, r6, lr}
   c143e:	4e16      	ldr	r6, [pc, #88]	; (c1498 <frexp+0x60>)
   c1440:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   c1444:	2500      	movs	r5, #0
   c1446:	42b1      	cmp	r1, r6
   c1448:	4604      	mov	r4, r0
   c144a:	6005      	str	r5, [r0, #0]
   c144c:	dc21      	bgt.n	c1492 <frexp+0x5a>
   c144e:	ee10 6a10 	vmov	r6, s0
   c1452:	430e      	orrs	r6, r1
   c1454:	d01d      	beq.n	c1492 <frexp+0x5a>
   c1456:	4e11      	ldr	r6, [pc, #68]	; (c149c <frexp+0x64>)
   c1458:	401e      	ands	r6, r3
   c145a:	4618      	mov	r0, r3
   c145c:	b966      	cbnz	r6, c1478 <frexp+0x40>
   c145e:	4619      	mov	r1, r3
   c1460:	2200      	movs	r2, #0
   c1462:	ee10 0a10 	vmov	r0, s0
   c1466:	4b0e      	ldr	r3, [pc, #56]	; (c14a0 <frexp+0x68>)
   c1468:	f7f2 ff96 	bl	b4398 <__aeabi_dmul>
   c146c:	f06f 0535 	mvn.w	r5, #53	; 0x35
   c1470:	4602      	mov	r2, r0
   c1472:	4608      	mov	r0, r1
   c1474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c1478:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
   c147c:	1509      	asrs	r1, r1, #20
   c147e:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
   c1482:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
   c1486:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
   c148a:	4429      	add	r1, r5
   c148c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   c1490:	6021      	str	r1, [r4, #0]
   c1492:	ec43 2b10 	vmov	d0, r2, r3
   c1496:	bd70      	pop	{r4, r5, r6, pc}
   c1498:	7fefffff 	.word	0x7fefffff
   c149c:	7ff00000 	.word	0x7ff00000
   c14a0:	43500000 	.word	0x43500000

000c14a4 <round>:
   c14a4:	ec53 2b10 	vmov	r2, r3, d0
   c14a8:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   c14ac:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   c14b0:	2913      	cmp	r1, #19
   c14b2:	b510      	push	{r4, lr}
   c14b4:	ee10 0a10 	vmov	r0, s0
   c14b8:	469e      	mov	lr, r3
   c14ba:	dc22      	bgt.n	c1502 <round+0x5e>
   c14bc:	2900      	cmp	r1, #0
   c14be:	db09      	blt.n	c14d4 <round+0x30>
   c14c0:	4c1f      	ldr	r4, [pc, #124]	; (c1540 <round+0x9c>)
   c14c2:	fa44 fc01 	asr.w	ip, r4, r1
   c14c6:	ea03 040c 	and.w	r4, r3, ip
   c14ca:	4320      	orrs	r0, r4
   c14cc:	d110      	bne.n	c14f0 <round+0x4c>
   c14ce:	ec43 2b10 	vmov	d0, r2, r3
   c14d2:	bd10      	pop	{r4, pc}
   c14d4:	f003 4e00 	and.w	lr, r3, #2147483648	; 0x80000000
   c14d8:	3101      	adds	r1, #1
   c14da:	bf04      	itt	eq
   c14dc:	f04e 5e7f 	orreq.w	lr, lr, #1069547520	; 0x3fc00000
   c14e0:	f44e 1e40 	orreq.w	lr, lr, #3145728	; 0x300000
   c14e4:	2000      	movs	r0, #0
   c14e6:	4673      	mov	r3, lr
   c14e8:	4602      	mov	r2, r0
   c14ea:	ec43 2b10 	vmov	d0, r2, r3
   c14ee:	bd10      	pop	{r4, pc}
   c14f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   c14f4:	fa43 f101 	asr.w	r1, r3, r1
   c14f8:	448e      	add	lr, r1
   c14fa:	ea2e 0e0c 	bic.w	lr, lr, ip
   c14fe:	2000      	movs	r0, #0
   c1500:	e7f1      	b.n	c14e6 <round+0x42>
   c1502:	2933      	cmp	r1, #51	; 0x33
   c1504:	dd08      	ble.n	c1518 <round+0x74>
   c1506:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   c150a:	d1e0      	bne.n	c14ce <round+0x2a>
   c150c:	4619      	mov	r1, r3
   c150e:	f7f2 fd8d 	bl	b402c <__adddf3>
   c1512:	ec41 0b10 	vmov	d0, r0, r1
   c1516:	bd10      	pop	{r4, pc}
   c1518:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   c151c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   c1520:	fa24 fc0c 	lsr.w	ip, r4, ip
   c1524:	ea12 0f0c 	tst.w	r2, ip
   c1528:	d0d1      	beq.n	c14ce <round+0x2a>
   c152a:	2301      	movs	r3, #1
   c152c:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
   c1530:	fa03 f101 	lsl.w	r1, r3, r1
   c1534:	1840      	adds	r0, r0, r1
   c1536:	bf28      	it	cs
   c1538:	449e      	addcs	lr, r3
   c153a:	ea20 000c 	bic.w	r0, r0, ip
   c153e:	e7d2      	b.n	c14e6 <round+0x42>
   c1540:	000fffff 	.word	0x000fffff
   c1544:	00000000 	.word	0x00000000

000c1548 <scalbn>:
   c1548:	b538      	push	{r3, r4, r5, lr}
   c154a:	ec53 2b10 	vmov	r2, r3, d0
   c154e:	f3c3 510a 	ubfx	r1, r3, #20, #11
   c1552:	4604      	mov	r4, r0
   c1554:	469c      	mov	ip, r3
   c1556:	bb89      	cbnz	r1, c15bc <scalbn+0x74>
   c1558:	ee10 1a10 	vmov	r1, s0
   c155c:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   c1560:	ea5c 0101 	orrs.w	r1, ip, r1
   c1564:	d029      	beq.n	c15ba <scalbn+0x72>
   c1566:	4619      	mov	r1, r3
   c1568:	2200      	movs	r2, #0
   c156a:	4b3d      	ldr	r3, [pc, #244]	; (c1660 <scalbn+0x118>)
   c156c:	4d3d      	ldr	r5, [pc, #244]	; (c1664 <scalbn+0x11c>)
   c156e:	ee10 0a10 	vmov	r0, s0
   c1572:	f7f2 ff11 	bl	b4398 <__aeabi_dmul>
   c1576:	42ac      	cmp	r4, r5
   c1578:	4602      	mov	r2, r0
   c157a:	460b      	mov	r3, r1
   c157c:	db16      	blt.n	c15ac <scalbn+0x64>
   c157e:	468c      	mov	ip, r1
   c1580:	f3c1 510a 	ubfx	r1, r1, #20, #11
   c1584:	3936      	subs	r1, #54	; 0x36
   c1586:	4421      	add	r1, r4
   c1588:	f240 70fe 	movw	r0, #2046	; 0x7fe
   c158c:	4281      	cmp	r1, r0
   c158e:	dc21      	bgt.n	c15d4 <scalbn+0x8c>
   c1590:	2900      	cmp	r1, #0
   c1592:	dc47      	bgt.n	c1624 <scalbn+0xdc>
   c1594:	f111 0f35 	cmn.w	r1, #53	; 0x35
   c1598:	da34      	bge.n	c1604 <scalbn+0xbc>
   c159a:	f24c 3150 	movw	r1, #50000	; 0xc350
   c159e:	428c      	cmp	r4, r1
   c15a0:	dc18      	bgt.n	c15d4 <scalbn+0x8c>
   c15a2:	2b00      	cmp	r3, #0
   c15a4:	a126      	add	r1, pc, #152	; (adr r1, c1640 <scalbn+0xf8>)
   c15a6:	e9d1 0100 	ldrd	r0, r1, [r1]
   c15aa:	db44      	blt.n	c1636 <scalbn+0xee>
   c15ac:	a324      	add	r3, pc, #144	; (adr r3, c1640 <scalbn+0xf8>)
   c15ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   c15b2:	f7f2 fef1 	bl	b4398 <__aeabi_dmul>
   c15b6:	ec41 0b10 	vmov	d0, r0, r1
   c15ba:	bd38      	pop	{r3, r4, r5, pc}
   c15bc:	f240 70ff 	movw	r0, #2047	; 0x7ff
   c15c0:	4281      	cmp	r1, r0
   c15c2:	d1e0      	bne.n	c1586 <scalbn+0x3e>
   c15c4:	ee10 0a10 	vmov	r0, s0
   c15c8:	4619      	mov	r1, r3
   c15ca:	f7f2 fd2f 	bl	b402c <__adddf3>
   c15ce:	ec41 0b10 	vmov	d0, r0, r1
   c15d2:	bd38      	pop	{r3, r4, r5, pc}
   c15d4:	2b00      	cmp	r3, #0
   c15d6:	a11c      	add	r1, pc, #112	; (adr r1, c1648 <scalbn+0x100>)
   c15d8:	e9d1 0100 	ldrd	r0, r1, [r1]
   c15dc:	db07      	blt.n	c15ee <scalbn+0xa6>
   c15de:	a31a      	add	r3, pc, #104	; (adr r3, c1648 <scalbn+0x100>)
   c15e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c15e4:	f7f2 fed8 	bl	b4398 <__aeabi_dmul>
   c15e8:	ec41 0b10 	vmov	d0, r0, r1
   c15ec:	bd38      	pop	{r3, r4, r5, pc}
   c15ee:	a118      	add	r1, pc, #96	; (adr r1, c1650 <scalbn+0x108>)
   c15f0:	e9d1 0100 	ldrd	r0, r1, [r1]
   c15f4:	a314      	add	r3, pc, #80	; (adr r3, c1648 <scalbn+0x100>)
   c15f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c15fa:	f7f2 fecd 	bl	b4398 <__aeabi_dmul>
   c15fe:	ec41 0b10 	vmov	d0, r0, r1
   c1602:	e7f3      	b.n	c15ec <scalbn+0xa4>
   c1604:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   c1608:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   c160c:	3136      	adds	r1, #54	; 0x36
   c160e:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   c1612:	4610      	mov	r0, r2
   c1614:	4619      	mov	r1, r3
   c1616:	2200      	movs	r2, #0
   c1618:	4b13      	ldr	r3, [pc, #76]	; (c1668 <scalbn+0x120>)
   c161a:	f7f2 febd 	bl	b4398 <__aeabi_dmul>
   c161e:	ec41 0b10 	vmov	d0, r0, r1
   c1622:	bd38      	pop	{r3, r4, r5, pc}
   c1624:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   c1628:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   c162c:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   c1630:	ec43 2b10 	vmov	d0, r2, r3
   c1634:	bd38      	pop	{r3, r4, r5, pc}
   c1636:	a108      	add	r1, pc, #32	; (adr r1, c1658 <scalbn+0x110>)
   c1638:	e9d1 0100 	ldrd	r0, r1, [r1]
   c163c:	e7b6      	b.n	c15ac <scalbn+0x64>
   c163e:	bf00      	nop
   c1640:	c2f8f359 	.word	0xc2f8f359
   c1644:	01a56e1f 	.word	0x01a56e1f
   c1648:	8800759c 	.word	0x8800759c
   c164c:	7e37e43c 	.word	0x7e37e43c
   c1650:	8800759c 	.word	0x8800759c
   c1654:	fe37e43c 	.word	0xfe37e43c
   c1658:	c2f8f359 	.word	0xc2f8f359
   c165c:	81a56e1f 	.word	0x81a56e1f
   c1660:	43500000 	.word	0x43500000
   c1664:	ffff3cb0 	.word	0xffff3cb0
   c1668:	3c900000 	.word	0x3c900000
   c166c:	00000000 	.word	0x00000000

000c1670 <sin>:
   c1670:	ec51 0b10 	vmov	r0, r1, d0
   c1674:	4a20      	ldr	r2, [pc, #128]	; (c16f8 <sin+0x88>)
   c1676:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   c167a:	4293      	cmp	r3, r2
   c167c:	dd27      	ble.n	c16ce <sin+0x5e>
   c167e:	b500      	push	{lr}
   c1680:	4a1e      	ldr	r2, [pc, #120]	; (c16fc <sin+0x8c>)
   c1682:	4293      	cmp	r3, r2
   c1684:	b085      	sub	sp, #20
   c1686:	dd09      	ble.n	c169c <sin+0x2c>
   c1688:	ee10 2a10 	vmov	r2, s0
   c168c:	460b      	mov	r3, r1
   c168e:	f7f2 fccb 	bl	b4028 <__aeabi_dsub>
   c1692:	ec41 0b10 	vmov	d0, r0, r1
   c1696:	b005      	add	sp, #20
   c1698:	f85d fb04 	ldr.w	pc, [sp], #4
   c169c:	4668      	mov	r0, sp
   c169e:	f000 f94b 	bl	c1938 <__ieee754_rem_pio2>
   c16a2:	f000 0003 	and.w	r0, r0, #3
   c16a6:	2801      	cmp	r0, #1
   c16a8:	ed9d 1b02 	vldr	d1, [sp, #8]
   c16ac:	ed9d 0b00 	vldr	d0, [sp]
   c16b0:	d012      	beq.n	c16d8 <sin+0x68>
   c16b2:	2802      	cmp	r0, #2
   c16b4:	d017      	beq.n	c16e6 <sin+0x76>
   c16b6:	b190      	cbz	r0, c16de <sin+0x6e>
   c16b8:	f000 fd36 	bl	c2128 <__kernel_cos>
   c16bc:	ec53 2b10 	vmov	r2, r3, d0
   c16c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   c16c4:	ee00 3a90 	vmov	s1, r3
   c16c8:	b005      	add	sp, #20
   c16ca:	f85d fb04 	ldr.w	pc, [sp], #4
   c16ce:	ed9f 1b08 	vldr	d1, [pc, #32]	; c16f0 <sin+0x80>
   c16d2:	2000      	movs	r0, #0
   c16d4:	f001 ba94 	b.w	c2c00 <__kernel_sin>
   c16d8:	f000 fd26 	bl	c2128 <__kernel_cos>
   c16dc:	e7db      	b.n	c1696 <sin+0x26>
   c16de:	2001      	movs	r0, #1
   c16e0:	f001 fa8e 	bl	c2c00 <__kernel_sin>
   c16e4:	e7d7      	b.n	c1696 <sin+0x26>
   c16e6:	2001      	movs	r0, #1
   c16e8:	f001 fa8a 	bl	c2c00 <__kernel_sin>
   c16ec:	e7e6      	b.n	c16bc <sin+0x4c>
   c16ee:	bf00      	nop
	...
   c16f8:	3fe921fb 	.word	0x3fe921fb
   c16fc:	7fefffff 	.word	0x7fefffff

000c1700 <tan>:
   c1700:	ec51 0b10 	vmov	r0, r1, d0
   c1704:	4a16      	ldr	r2, [pc, #88]	; (c1760 <tan+0x60>)
   c1706:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   c170a:	4293      	cmp	r3, r2
   c170c:	dd1f      	ble.n	c174e <tan+0x4e>
   c170e:	b500      	push	{lr}
   c1710:	4a14      	ldr	r2, [pc, #80]	; (c1764 <tan+0x64>)
   c1712:	4293      	cmp	r3, r2
   c1714:	b085      	sub	sp, #20
   c1716:	dd09      	ble.n	c172c <tan+0x2c>
   c1718:	ee10 2a10 	vmov	r2, s0
   c171c:	460b      	mov	r3, r1
   c171e:	f7f2 fc83 	bl	b4028 <__aeabi_dsub>
   c1722:	ec41 0b10 	vmov	d0, r0, r1
   c1726:	b005      	add	sp, #20
   c1728:	f85d fb04 	ldr.w	pc, [sp], #4
   c172c:	4668      	mov	r0, sp
   c172e:	f000 f903 	bl	c1938 <__ieee754_rem_pio2>
   c1732:	0040      	lsls	r0, r0, #1
   c1734:	f000 0002 	and.w	r0, r0, #2
   c1738:	ed9d 1b02 	vldr	d1, [sp, #8]
   c173c:	ed9d 0b00 	vldr	d0, [sp]
   c1740:	f1c0 0001 	rsb	r0, r0, #1
   c1744:	f001 fb1c 	bl	c2d80 <__kernel_tan>
   c1748:	b005      	add	sp, #20
   c174a:	f85d fb04 	ldr.w	pc, [sp], #4
   c174e:	ed9f 1b02 	vldr	d1, [pc, #8]	; c1758 <tan+0x58>
   c1752:	2001      	movs	r0, #1
   c1754:	f001 bb14 	b.w	c2d80 <__kernel_tan>
	...
   c1760:	3fe921fb 	.word	0x3fe921fb
   c1764:	7fefffff 	.word	0x7fefffff

000c1768 <frexpf>:
   c1768:	ee10 2a10 	vmov	r2, s0
   c176c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   c1770:	b410      	push	{r4}
   c1772:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c1776:	f04f 0400 	mov.w	r4, #0
   c177a:	6004      	str	r4, [r0, #0]
   c177c:	da17      	bge.n	c17ae <frexpf+0x46>
   c177e:	b1b3      	cbz	r3, c17ae <frexpf+0x46>
   c1780:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
   c1784:	ee10 1a10 	vmov	r1, s0
   c1788:	d109      	bne.n	c179e <frexpf+0x36>
   c178a:	eddf 7a0b 	vldr	s15, [pc, #44]	; c17b8 <frexpf+0x50>
   c178e:	ee60 7a27 	vmul.f32	s15, s0, s15
   c1792:	f06f 0418 	mvn.w	r4, #24
   c1796:	ee17 1a90 	vmov	r1, s15
   c179a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   c179e:	15db      	asrs	r3, r3, #23
   c17a0:	3b7e      	subs	r3, #126	; 0x7e
   c17a2:	4423      	add	r3, r4
   c17a4:	f021 42ff 	bic.w	r2, r1, #2139095040	; 0x7f800000
   c17a8:	6003      	str	r3, [r0, #0]
   c17aa:	f042 527c 	orr.w	r2, r2, #1056964608	; 0x3f000000
   c17ae:	ee00 2a10 	vmov	s0, r2
   c17b2:	f85d 4b04 	ldr.w	r4, [sp], #4
   c17b6:	4770      	bx	lr
   c17b8:	4c000000 	.word	0x4c000000

000c17bc <roundf>:
   c17bc:	ee10 3a10 	vmov	r3, s0
   c17c0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   c17c4:	3a7f      	subs	r2, #127	; 0x7f
   c17c6:	2a16      	cmp	r2, #22
   c17c8:	ee10 1a10 	vmov	r1, s0
   c17cc:	dc15      	bgt.n	c17fa <roundf+0x3e>
   c17ce:	2a00      	cmp	r2, #0
   c17d0:	db0c      	blt.n	c17ec <roundf+0x30>
   c17d2:	480c      	ldr	r0, [pc, #48]	; (c1804 <roundf+0x48>)
   c17d4:	4110      	asrs	r0, r2
   c17d6:	4203      	tst	r3, r0
   c17d8:	d005      	beq.n	c17e6 <roundf+0x2a>
   c17da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   c17de:	4113      	asrs	r3, r2
   c17e0:	440b      	add	r3, r1
   c17e2:	ea23 0300 	bic.w	r3, r3, r0
   c17e6:	ee00 3a10 	vmov	s0, r3
   c17ea:	4770      	bx	lr
   c17ec:	3201      	adds	r2, #1
   c17ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   c17f2:	d1f8      	bne.n	c17e6 <roundf+0x2a>
   c17f4:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
   c17f8:	e7f5      	b.n	c17e6 <roundf+0x2a>
   c17fa:	2a80      	cmp	r2, #128	; 0x80
   c17fc:	d1f3      	bne.n	c17e6 <roundf+0x2a>
   c17fe:	ee30 0a00 	vadd.f32	s0, s0, s0
   c1802:	4770      	bx	lr
   c1804:	007fffff 	.word	0x007fffff

000c1808 <sqrt>:
   c1808:	b538      	push	{r3, r4, r5, lr}
   c180a:	ed2d 8b02 	vpush	{d8}
   c180e:	ec55 4b10 	vmov	r4, r5, d0
   c1812:	f000 fab7 	bl	c1d84 <__ieee754_sqrt>
   c1816:	4b18      	ldr	r3, [pc, #96]	; (c1878 <sqrt+0x70>)
   c1818:	eeb0 8a40 	vmov.f32	s16, s0
   c181c:	eef0 8a60 	vmov.f32	s17, s1
   c1820:	f993 3000 	ldrsb.w	r3, [r3]
   c1824:	3301      	adds	r3, #1
   c1826:	d00d      	beq.n	c1844 <sqrt+0x3c>
   c1828:	4622      	mov	r2, r4
   c182a:	462b      	mov	r3, r5
   c182c:	4620      	mov	r0, r4
   c182e:	4629      	mov	r1, r5
   c1830:	f7f3 f84c 	bl	b48cc <__aeabi_dcmpun>
   c1834:	b930      	cbnz	r0, c1844 <sqrt+0x3c>
   c1836:	2200      	movs	r2, #0
   c1838:	2300      	movs	r3, #0
   c183a:	4620      	mov	r0, r4
   c183c:	4629      	mov	r1, r5
   c183e:	f7f3 f81d 	bl	b487c <__aeabi_dcmplt>
   c1842:	b930      	cbnz	r0, c1852 <sqrt+0x4a>
   c1844:	eeb0 0a48 	vmov.f32	s0, s16
   c1848:	eef0 0a68 	vmov.f32	s1, s17
   c184c:	ecbd 8b02 	vpop	{d8}
   c1850:	bd38      	pop	{r3, r4, r5, pc}
   c1852:	f7fd fbed 	bl	bf030 <__errno>
   c1856:	2200      	movs	r2, #0
   c1858:	2300      	movs	r3, #0
   c185a:	2121      	movs	r1, #33	; 0x21
   c185c:	6001      	str	r1, [r0, #0]
   c185e:	4610      	mov	r0, r2
   c1860:	4619      	mov	r1, r3
   c1862:	f7f2 fec3 	bl	b45ec <__aeabi_ddiv>
   c1866:	ec41 0b18 	vmov	d8, r0, r1
   c186a:	eeb0 0a48 	vmov.f32	s0, s16
   c186e:	eef0 0a68 	vmov.f32	s1, s17
   c1872:	ecbd 8b02 	vpop	{d8}
   c1876:	bd38      	pop	{r3, r4, r5, pc}
   c1878:	2003d280 	.word	0x2003d280

000c187c <logf>:
   c187c:	b508      	push	{r3, lr}
   c187e:	ed2d 8b02 	vpush	{d8}
   c1882:	eeb0 8a40 	vmov.f32	s16, s0
   c1886:	f000 fb49 	bl	c1f1c <__ieee754_logf>
   c188a:	4b14      	ldr	r3, [pc, #80]	; (c18dc <logf+0x60>)
   c188c:	f993 3000 	ldrsb.w	r3, [r3]
   c1890:	3301      	adds	r3, #1
   c1892:	d014      	beq.n	c18be <logf+0x42>
   c1894:	eeb4 8a48 	vcmp.f32	s16, s16
   c1898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c189c:	d60f      	bvs.n	c18be <logf+0x42>
   c189e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   c18a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c18a6:	dc0a      	bgt.n	c18be <logf+0x42>
   c18a8:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c18ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c18b0:	d108      	bne.n	c18c4 <logf+0x48>
   c18b2:	f7fd fbbd 	bl	bf030 <__errno>
   c18b6:	2322      	movs	r3, #34	; 0x22
   c18b8:	ed9f 0a09 	vldr	s0, [pc, #36]	; c18e0 <logf+0x64>
   c18bc:	6003      	str	r3, [r0, #0]
   c18be:	ecbd 8b02 	vpop	{d8}
   c18c2:	bd08      	pop	{r3, pc}
   c18c4:	f7fd fbb4 	bl	bf030 <__errno>
   c18c8:	ecbd 8b02 	vpop	{d8}
   c18cc:	4603      	mov	r3, r0
   c18ce:	2221      	movs	r2, #33	; 0x21
   c18d0:	601a      	str	r2, [r3, #0]
   c18d2:	4804      	ldr	r0, [pc, #16]	; (c18e4 <logf+0x68>)
   c18d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   c18d8:	f001 bc52 	b.w	c3180 <nanf>
   c18dc:	2003d280 	.word	0x2003d280
   c18e0:	ff800000 	.word	0xff800000
   c18e4:	000c8d1c 	.word	0x000c8d1c

000c18e8 <sqrtf>:
   c18e8:	b508      	push	{r3, lr}
   c18ea:	ed2d 8b02 	vpush	{d8}
   c18ee:	eeb0 8a40 	vmov.f32	s16, s0
   c18f2:	f000 fc13 	bl	c211c <__ieee754_sqrtf>
   c18f6:	4b0e      	ldr	r3, [pc, #56]	; (c1930 <sqrtf+0x48>)
   c18f8:	f993 3000 	ldrsb.w	r3, [r3]
   c18fc:	3301      	adds	r3, #1
   c18fe:	d00b      	beq.n	c1918 <sqrtf+0x30>
   c1900:	eeb4 8a48 	vcmp.f32	s16, s16
   c1904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c1908:	d606      	bvs.n	c1918 <sqrtf+0x30>
   c190a:	eddf 8a0a 	vldr	s17, [pc, #40]	; c1934 <sqrtf+0x4c>
   c190e:	eeb4 8ae8 	vcmpe.f32	s16, s17
   c1912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c1916:	d402      	bmi.n	c191e <sqrtf+0x36>
   c1918:	ecbd 8b02 	vpop	{d8}
   c191c:	bd08      	pop	{r3, pc}
   c191e:	f7fd fb87 	bl	bf030 <__errno>
   c1922:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   c1926:	ecbd 8b02 	vpop	{d8}
   c192a:	2321      	movs	r3, #33	; 0x21
   c192c:	6003      	str	r3, [r0, #0]
   c192e:	bd08      	pop	{r3, pc}
   c1930:	2003d280 	.word	0x2003d280
   c1934:	00000000 	.word	0x00000000

000c1938 <__ieee754_rem_pio2>:
   c1938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c193c:	ec53 2b10 	vmov	r2, r3, d0
   c1940:	ed2d 8b04 	vpush	{d8-d9}
   c1944:	4990      	ldr	r1, [pc, #576]	; (c1b88 <__ieee754_rem_pio2+0x250>)
   c1946:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   c194a:	428d      	cmp	r5, r1
   c194c:	b08b      	sub	sp, #44	; 0x2c
   c194e:	4604      	mov	r4, r0
   c1950:	f340 808c 	ble.w	c1a6c <__ieee754_rem_pio2+0x134>
   c1954:	498d      	ldr	r1, [pc, #564]	; (c1b8c <__ieee754_rem_pio2+0x254>)
   c1956:	428d      	cmp	r5, r1
   c1958:	461f      	mov	r7, r3
   c195a:	dc2b      	bgt.n	c19b4 <__ieee754_rem_pio2+0x7c>
   c195c:	2f00      	cmp	r7, #0
   c195e:	4619      	mov	r1, r3
   c1960:	ee10 0a10 	vmov	r0, s0
   c1964:	a37e      	add	r3, pc, #504	; (adr r3, c1b60 <__ieee754_rem_pio2+0x228>)
   c1966:	e9d3 2300 	ldrd	r2, r3, [r3]
   c196a:	f340 81b6 	ble.w	c1cda <__ieee754_rem_pio2+0x3a2>
   c196e:	f7f2 fb5b 	bl	b4028 <__aeabi_dsub>
   c1972:	4b87      	ldr	r3, [pc, #540]	; (c1b90 <__ieee754_rem_pio2+0x258>)
   c1974:	429d      	cmp	r5, r3
   c1976:	4680      	mov	r8, r0
   c1978:	4689      	mov	r9, r1
   c197a:	f000 808f 	beq.w	c1a9c <__ieee754_rem_pio2+0x164>
   c197e:	a37a      	add	r3, pc, #488	; (adr r3, c1b68 <__ieee754_rem_pio2+0x230>)
   c1980:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1984:	f7f2 fb50 	bl	b4028 <__aeabi_dsub>
   c1988:	4602      	mov	r2, r0
   c198a:	460b      	mov	r3, r1
   c198c:	e9c4 2300 	strd	r2, r3, [r4]
   c1990:	4640      	mov	r0, r8
   c1992:	4649      	mov	r1, r9
   c1994:	f7f2 fb48 	bl	b4028 <__aeabi_dsub>
   c1998:	a373      	add	r3, pc, #460	; (adr r3, c1b68 <__ieee754_rem_pio2+0x230>)
   c199a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c199e:	f7f2 fb43 	bl	b4028 <__aeabi_dsub>
   c19a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
   c19a6:	2601      	movs	r6, #1
   c19a8:	4630      	mov	r0, r6
   c19aa:	b00b      	add	sp, #44	; 0x2c
   c19ac:	ecbd 8b04 	vpop	{d8-d9}
   c19b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c19b4:	4977      	ldr	r1, [pc, #476]	; (c1b94 <__ieee754_rem_pio2+0x25c>)
   c19b6:	428d      	cmp	r5, r1
   c19b8:	f340 8092 	ble.w	c1ae0 <__ieee754_rem_pio2+0x1a8>
   c19bc:	4976      	ldr	r1, [pc, #472]	; (c1b98 <__ieee754_rem_pio2+0x260>)
   c19be:	428d      	cmp	r5, r1
   c19c0:	dc61      	bgt.n	c1a86 <__ieee754_rem_pio2+0x14e>
   c19c2:	152e      	asrs	r6, r5, #20
   c19c4:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
   c19c8:	ee10 0a10 	vmov	r0, s0
   c19cc:	eba5 5106 	sub.w	r1, r5, r6, lsl #20
   c19d0:	4690      	mov	r8, r2
   c19d2:	4689      	mov	r9, r1
   c19d4:	f7f2 ff90 	bl	b48f8 <__aeabi_d2iz>
   c19d8:	f7f2 fc74 	bl	b42c4 <__aeabi_i2d>
   c19dc:	4602      	mov	r2, r0
   c19de:	460b      	mov	r3, r1
   c19e0:	4640      	mov	r0, r8
   c19e2:	4649      	mov	r1, r9
   c19e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   c19e8:	f7f2 fb1e 	bl	b4028 <__aeabi_dsub>
   c19ec:	4b6b      	ldr	r3, [pc, #428]	; (c1b9c <__ieee754_rem_pio2+0x264>)
   c19ee:	2200      	movs	r2, #0
   c19f0:	f7f2 fcd2 	bl	b4398 <__aeabi_dmul>
   c19f4:	4689      	mov	r9, r1
   c19f6:	4680      	mov	r8, r0
   c19f8:	f7f2 ff7e 	bl	b48f8 <__aeabi_d2iz>
   c19fc:	4605      	mov	r5, r0
   c19fe:	f7f2 fc61 	bl	b42c4 <__aeabi_i2d>
   c1a02:	4602      	mov	r2, r0
   c1a04:	460b      	mov	r3, r1
   c1a06:	4640      	mov	r0, r8
   c1a08:	4649      	mov	r1, r9
   c1a0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   c1a0e:	f7f2 fb0b 	bl	b4028 <__aeabi_dsub>
   c1a12:	4b62      	ldr	r3, [pc, #392]	; (c1b9c <__ieee754_rem_pio2+0x264>)
   c1a14:	2200      	movs	r2, #0
   c1a16:	f7f2 fcbf 	bl	b4398 <__aeabi_dmul>
   c1a1a:	4602      	mov	r2, r0
   c1a1c:	460b      	mov	r3, r1
   c1a1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c1a22:	2200      	movs	r2, #0
   c1a24:	2300      	movs	r3, #0
   c1a26:	f7f2 ff1f 	bl	b4868 <__aeabi_dcmpeq>
   c1a2a:	2800      	cmp	r0, #0
   c1a2c:	f000 8153 	beq.w	c1cd6 <__ieee754_rem_pio2+0x39e>
   c1a30:	2d00      	cmp	r5, #0
   c1a32:	bf0c      	ite	eq
   c1a34:	2301      	moveq	r3, #1
   c1a36:	2302      	movne	r3, #2
   c1a38:	4a59      	ldr	r2, [pc, #356]	; (c1ba0 <__ieee754_rem_pio2+0x268>)
   c1a3a:	9201      	str	r2, [sp, #4]
   c1a3c:	2202      	movs	r2, #2
   c1a3e:	9200      	str	r2, [sp, #0]
   c1a40:	4621      	mov	r1, r4
   c1a42:	4632      	mov	r2, r6
   c1a44:	a804      	add	r0, sp, #16
   c1a46:	f000 fcaf 	bl	c23a8 <__kernel_rem_pio2>
   c1a4a:	2f00      	cmp	r7, #0
   c1a4c:	4606      	mov	r6, r0
   c1a4e:	daab      	bge.n	c19a8 <__ieee754_rem_pio2+0x70>
   c1a50:	6861      	ldr	r1, [r4, #4]
   c1a52:	6822      	ldr	r2, [r4, #0]
   c1a54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c1a58:	68e1      	ldr	r1, [r4, #12]
   c1a5a:	e9c4 2300 	strd	r2, r3, [r4]
   c1a5e:	68a2      	ldr	r2, [r4, #8]
   c1a60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c1a64:	e9c4 2302 	strd	r2, r3, [r4, #8]
   c1a68:	4246      	negs	r6, r0
   c1a6a:	e79d      	b.n	c19a8 <__ieee754_rem_pio2+0x70>
   c1a6c:	2000      	movs	r0, #0
   c1a6e:	2100      	movs	r1, #0
   c1a70:	2600      	movs	r6, #0
   c1a72:	e9c4 0102 	strd	r0, r1, [r4, #8]
   c1a76:	4630      	mov	r0, r6
   c1a78:	ed84 0b00 	vstr	d0, [r4]
   c1a7c:	b00b      	add	sp, #44	; 0x2c
   c1a7e:	ecbd 8b04 	vpop	{d8-d9}
   c1a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c1a86:	ee10 0a10 	vmov	r0, s0
   c1a8a:	4619      	mov	r1, r3
   c1a8c:	f7f2 facc 	bl	b4028 <__aeabi_dsub>
   c1a90:	2600      	movs	r6, #0
   c1a92:	e9c4 0102 	strd	r0, r1, [r4, #8]
   c1a96:	e9c4 0100 	strd	r0, r1, [r4]
   c1a9a:	e785      	b.n	c19a8 <__ieee754_rem_pio2+0x70>
   c1a9c:	a334      	add	r3, pc, #208	; (adr r3, c1b70 <__ieee754_rem_pio2+0x238>)
   c1a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1aa2:	f7f2 fac1 	bl	b4028 <__aeabi_dsub>
   c1aa6:	a334      	add	r3, pc, #208	; (adr r3, c1b78 <__ieee754_rem_pio2+0x240>)
   c1aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1aac:	4680      	mov	r8, r0
   c1aae:	4689      	mov	r9, r1
   c1ab0:	f7f2 faba 	bl	b4028 <__aeabi_dsub>
   c1ab4:	4602      	mov	r2, r0
   c1ab6:	460b      	mov	r3, r1
   c1ab8:	e9c4 2300 	strd	r2, r3, [r4]
   c1abc:	4640      	mov	r0, r8
   c1abe:	4649      	mov	r1, r9
   c1ac0:	f7f2 fab2 	bl	b4028 <__aeabi_dsub>
   c1ac4:	a32c      	add	r3, pc, #176	; (adr r3, c1b78 <__ieee754_rem_pio2+0x240>)
   c1ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1aca:	f7f2 faad 	bl	b4028 <__aeabi_dsub>
   c1ace:	2601      	movs	r6, #1
   c1ad0:	e9c4 0102 	strd	r0, r1, [r4, #8]
   c1ad4:	4630      	mov	r0, r6
   c1ad6:	b00b      	add	sp, #44	; 0x2c
   c1ad8:	ecbd 8b04 	vpop	{d8-d9}
   c1adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c1ae0:	f001 fb3c 	bl	c315c <fabs>
   c1ae4:	ec59 8b10 	vmov	r8, r9, d0
   c1ae8:	ee10 0a10 	vmov	r0, s0
   c1aec:	a324      	add	r3, pc, #144	; (adr r3, c1b80 <__ieee754_rem_pio2+0x248>)
   c1aee:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1af2:	4649      	mov	r1, r9
   c1af4:	f7f2 fc50 	bl	b4398 <__aeabi_dmul>
   c1af8:	4b2a      	ldr	r3, [pc, #168]	; (c1ba4 <__ieee754_rem_pio2+0x26c>)
   c1afa:	2200      	movs	r2, #0
   c1afc:	f7f2 fa96 	bl	b402c <__adddf3>
   c1b00:	f7f2 fefa 	bl	b48f8 <__aeabi_d2iz>
   c1b04:	4606      	mov	r6, r0
   c1b06:	f7f2 fbdd 	bl	b42c4 <__aeabi_i2d>
   c1b0a:	4602      	mov	r2, r0
   c1b0c:	460b      	mov	r3, r1
   c1b0e:	ec43 2b18 	vmov	d8, r2, r3
   c1b12:	a313      	add	r3, pc, #76	; (adr r3, c1b60 <__ieee754_rem_pio2+0x228>)
   c1b14:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1b18:	eeb0 9a48 	vmov.f32	s18, s16
   c1b1c:	eef0 9a68 	vmov.f32	s19, s17
   c1b20:	f7f2 fc3a 	bl	b4398 <__aeabi_dmul>
   c1b24:	4602      	mov	r2, r0
   c1b26:	460b      	mov	r3, r1
   c1b28:	4640      	mov	r0, r8
   c1b2a:	4649      	mov	r1, r9
   c1b2c:	f7f2 fa7c 	bl	b4028 <__aeabi_dsub>
   c1b30:	a30d      	add	r3, pc, #52	; (adr r3, c1b68 <__ieee754_rem_pio2+0x230>)
   c1b32:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1b36:	4682      	mov	sl, r0
   c1b38:	468b      	mov	fp, r1
   c1b3a:	ec51 0b18 	vmov	r0, r1, d8
   c1b3e:	f7f2 fc2b 	bl	b4398 <__aeabi_dmul>
   c1b42:	2e1f      	cmp	r6, #31
   c1b44:	ec41 0b18 	vmov	d8, r0, r1
   c1b48:	dc30      	bgt.n	c1bac <__ieee754_rem_pio2+0x274>
   c1b4a:	4b17      	ldr	r3, [pc, #92]	; (c1ba8 <__ieee754_rem_pio2+0x270>)
   c1b4c:	1e72      	subs	r2, r6, #1
   c1b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   c1b52:	42ab      	cmp	r3, r5
   c1b54:	d02a      	beq.n	c1bac <__ieee754_rem_pio2+0x274>
   c1b56:	4602      	mov	r2, r0
   c1b58:	460b      	mov	r3, r1
   c1b5a:	e09b      	b.n	c1c94 <__ieee754_rem_pio2+0x35c>
   c1b5c:	f3af 8000 	nop.w
   c1b60:	54400000 	.word	0x54400000
   c1b64:	3ff921fb 	.word	0x3ff921fb
   c1b68:	1a626331 	.word	0x1a626331
   c1b6c:	3dd0b461 	.word	0x3dd0b461
   c1b70:	1a600000 	.word	0x1a600000
   c1b74:	3dd0b461 	.word	0x3dd0b461
   c1b78:	2e037073 	.word	0x2e037073
   c1b7c:	3ba3198a 	.word	0x3ba3198a
   c1b80:	6dc9c883 	.word	0x6dc9c883
   c1b84:	3fe45f30 	.word	0x3fe45f30
   c1b88:	3fe921fb 	.word	0x3fe921fb
   c1b8c:	4002d97b 	.word	0x4002d97b
   c1b90:	3ff921fb 	.word	0x3ff921fb
   c1b94:	413921fb 	.word	0x413921fb
   c1b98:	7fefffff 	.word	0x7fefffff
   c1b9c:	41700000 	.word	0x41700000
   c1ba0:	000c8da0 	.word	0x000c8da0
   c1ba4:	3fe00000 	.word	0x3fe00000
   c1ba8:	000c8d20 	.word	0x000c8d20
   c1bac:	152b      	asrs	r3, r5, #20
   c1bae:	9303      	str	r3, [sp, #12]
   c1bb0:	4650      	mov	r0, sl
   c1bb2:	ec53 2b18 	vmov	r2, r3, d8
   c1bb6:	4659      	mov	r1, fp
   c1bb8:	f7f2 fa36 	bl	b4028 <__aeabi_dsub>
   c1bbc:	f3c1 530a 	ubfx	r3, r1, #20, #11
   c1bc0:	ebc3 5515 	rsb	r5, r3, r5, lsr #20
   c1bc4:	2d10      	cmp	r5, #16
   c1bc6:	4680      	mov	r8, r0
   c1bc8:	4689      	mov	r9, r1
   c1bca:	dd69      	ble.n	c1ca0 <__ieee754_rem_pio2+0x368>
   c1bcc:	a364      	add	r3, pc, #400	; (adr r3, c1d60 <__ieee754_rem_pio2+0x428>)
   c1bce:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1bd2:	ec51 0b19 	vmov	r0, r1, d9
   c1bd6:	f7f2 fbdf 	bl	b4398 <__aeabi_dmul>
   c1bda:	4680      	mov	r8, r0
   c1bdc:	4689      	mov	r9, r1
   c1bde:	4642      	mov	r2, r8
   c1be0:	464b      	mov	r3, r9
   c1be2:	4650      	mov	r0, sl
   c1be4:	4659      	mov	r1, fp
   c1be6:	f7f2 fa1f 	bl	b4028 <__aeabi_dsub>
   c1bea:	4602      	mov	r2, r0
   c1bec:	460b      	mov	r3, r1
   c1bee:	4650      	mov	r0, sl
   c1bf0:	4659      	mov	r1, fp
   c1bf2:	4692      	mov	sl, r2
   c1bf4:	469b      	mov	fp, r3
   c1bf6:	f7f2 fa17 	bl	b4028 <__aeabi_dsub>
   c1bfa:	4642      	mov	r2, r8
   c1bfc:	464b      	mov	r3, r9
   c1bfe:	f7f2 fa13 	bl	b4028 <__aeabi_dsub>
   c1c02:	a359      	add	r3, pc, #356	; (adr r3, c1d68 <__ieee754_rem_pio2+0x430>)
   c1c04:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1c08:	4680      	mov	r8, r0
   c1c0a:	4689      	mov	r9, r1
   c1c0c:	ec51 0b19 	vmov	r0, r1, d9
   c1c10:	f7f2 fbc2 	bl	b4398 <__aeabi_dmul>
   c1c14:	4642      	mov	r2, r8
   c1c16:	464b      	mov	r3, r9
   c1c18:	f7f2 fa06 	bl	b4028 <__aeabi_dsub>
   c1c1c:	4602      	mov	r2, r0
   c1c1e:	460b      	mov	r3, r1
   c1c20:	4650      	mov	r0, sl
   c1c22:	4659      	mov	r1, fp
   c1c24:	ec43 2b18 	vmov	d8, r2, r3
   c1c28:	f7f2 f9fe 	bl	b4028 <__aeabi_dsub>
   c1c2c:	9a03      	ldr	r2, [sp, #12]
   c1c2e:	f3c1 530a 	ubfx	r3, r1, #20, #11
   c1c32:	1ad3      	subs	r3, r2, r3
   c1c34:	2b31      	cmp	r3, #49	; 0x31
   c1c36:	4680      	mov	r8, r0
   c1c38:	4689      	mov	r9, r1
   c1c3a:	dd31      	ble.n	c1ca0 <__ieee754_rem_pio2+0x368>
   c1c3c:	a34d      	add	r3, pc, #308	; (adr r3, c1d74 <__ieee754_rem_pio2+0x43c>)
   c1c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1c42:	ec51 0b19 	vmov	r0, r1, d9
   c1c46:	f7f2 fba7 	bl	b4398 <__aeabi_dmul>
   c1c4a:	4680      	mov	r8, r0
   c1c4c:	4689      	mov	r9, r1
   c1c4e:	4642      	mov	r2, r8
   c1c50:	464b      	mov	r3, r9
   c1c52:	4650      	mov	r0, sl
   c1c54:	4659      	mov	r1, fp
   c1c56:	f7f2 f9e7 	bl	b4028 <__aeabi_dsub>
   c1c5a:	4602      	mov	r2, r0
   c1c5c:	460b      	mov	r3, r1
   c1c5e:	4650      	mov	r0, sl
   c1c60:	4659      	mov	r1, fp
   c1c62:	4692      	mov	sl, r2
   c1c64:	469b      	mov	fp, r3
   c1c66:	f7f2 f9df 	bl	b4028 <__aeabi_dsub>
   c1c6a:	4642      	mov	r2, r8
   c1c6c:	464b      	mov	r3, r9
   c1c6e:	f7f2 f9db 	bl	b4028 <__aeabi_dsub>
   c1c72:	a342      	add	r3, pc, #264	; (adr r3, c1d7c <__ieee754_rem_pio2+0x444>)
   c1c74:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1c78:	4680      	mov	r8, r0
   c1c7a:	4689      	mov	r9, r1
   c1c7c:	ec51 0b19 	vmov	r0, r1, d9
   c1c80:	f7f2 fb8a 	bl	b4398 <__aeabi_dmul>
   c1c84:	4642      	mov	r2, r8
   c1c86:	464b      	mov	r3, r9
   c1c88:	f7f2 f9ce 	bl	b4028 <__aeabi_dsub>
   c1c8c:	4602      	mov	r2, r0
   c1c8e:	460b      	mov	r3, r1
   c1c90:	ec43 2b18 	vmov	d8, r2, r3
   c1c94:	4650      	mov	r0, sl
   c1c96:	4659      	mov	r1, fp
   c1c98:	f7f2 f9c6 	bl	b4028 <__aeabi_dsub>
   c1c9c:	4680      	mov	r8, r0
   c1c9e:	4689      	mov	r9, r1
   c1ca0:	4642      	mov	r2, r8
   c1ca2:	464b      	mov	r3, r9
   c1ca4:	e9c4 8900 	strd	r8, r9, [r4]
   c1ca8:	4650      	mov	r0, sl
   c1caa:	4659      	mov	r1, fp
   c1cac:	f7f2 f9bc 	bl	b4028 <__aeabi_dsub>
   c1cb0:	ec53 2b18 	vmov	r2, r3, d8
   c1cb4:	f7f2 f9b8 	bl	b4028 <__aeabi_dsub>
   c1cb8:	2f00      	cmp	r7, #0
   c1cba:	e9c4 0102 	strd	r0, r1, [r4, #8]
   c1cbe:	f6bf ae73 	bge.w	c19a8 <__ieee754_rem_pio2+0x70>
   c1cc2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   c1cc6:	e9c4 8300 	strd	r8, r3, [r4]
   c1cca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c1cce:	e9c4 0302 	strd	r0, r3, [r4, #8]
   c1cd2:	4276      	negs	r6, r6
   c1cd4:	e668      	b.n	c19a8 <__ieee754_rem_pio2+0x70>
   c1cd6:	2303      	movs	r3, #3
   c1cd8:	e6ae      	b.n	c1a38 <__ieee754_rem_pio2+0x100>
   c1cda:	f7f2 f9a7 	bl	b402c <__adddf3>
   c1cde:	4b24      	ldr	r3, [pc, #144]	; (c1d70 <__ieee754_rem_pio2+0x438>)
   c1ce0:	429d      	cmp	r5, r3
   c1ce2:	4680      	mov	r8, r0
   c1ce4:	4689      	mov	r9, r1
   c1ce6:	d016      	beq.n	c1d16 <__ieee754_rem_pio2+0x3de>
   c1ce8:	a31b      	add	r3, pc, #108	; (adr r3, c1d58 <__ieee754_rem_pio2+0x420>)
   c1cea:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1cee:	f7f2 f99d 	bl	b402c <__adddf3>
   c1cf2:	4602      	mov	r2, r0
   c1cf4:	460b      	mov	r3, r1
   c1cf6:	e9c4 2300 	strd	r2, r3, [r4]
   c1cfa:	4640      	mov	r0, r8
   c1cfc:	4649      	mov	r1, r9
   c1cfe:	f7f2 f993 	bl	b4028 <__aeabi_dsub>
   c1d02:	a315      	add	r3, pc, #84	; (adr r3, c1d58 <__ieee754_rem_pio2+0x420>)
   c1d04:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1d08:	f7f2 f990 	bl	b402c <__adddf3>
   c1d0c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   c1d10:	e9c4 0102 	strd	r0, r1, [r4, #8]
   c1d14:	e648      	b.n	c19a8 <__ieee754_rem_pio2+0x70>
   c1d16:	a312      	add	r3, pc, #72	; (adr r3, c1d60 <__ieee754_rem_pio2+0x428>)
   c1d18:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1d1c:	f7f2 f986 	bl	b402c <__adddf3>
   c1d20:	a311      	add	r3, pc, #68	; (adr r3, c1d68 <__ieee754_rem_pio2+0x430>)
   c1d22:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1d26:	4680      	mov	r8, r0
   c1d28:	4689      	mov	r9, r1
   c1d2a:	f7f2 f97f 	bl	b402c <__adddf3>
   c1d2e:	4602      	mov	r2, r0
   c1d30:	460b      	mov	r3, r1
   c1d32:	e9c4 2300 	strd	r2, r3, [r4]
   c1d36:	4640      	mov	r0, r8
   c1d38:	4649      	mov	r1, r9
   c1d3a:	f7f2 f975 	bl	b4028 <__aeabi_dsub>
   c1d3e:	a30a      	add	r3, pc, #40	; (adr r3, c1d68 <__ieee754_rem_pio2+0x430>)
   c1d40:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1d44:	f7f2 f972 	bl	b402c <__adddf3>
   c1d48:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   c1d4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
   c1d50:	e62a      	b.n	c19a8 <__ieee754_rem_pio2+0x70>
   c1d52:	bf00      	nop
   c1d54:	f3af 8000 	nop.w
   c1d58:	1a626331 	.word	0x1a626331
   c1d5c:	3dd0b461 	.word	0x3dd0b461
   c1d60:	1a600000 	.word	0x1a600000
   c1d64:	3dd0b461 	.word	0x3dd0b461
   c1d68:	2e037073 	.word	0x2e037073
   c1d6c:	3ba3198a 	.word	0x3ba3198a
   c1d70:	3ff921fb 	.word	0x3ff921fb
   c1d74:	2e000000 	.word	0x2e000000
   c1d78:	3ba3198a 	.word	0x3ba3198a
   c1d7c:	252049c1 	.word	0x252049c1
   c1d80:	397b839a 	.word	0x397b839a

000c1d84 <__ieee754_sqrt>:
   c1d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1d88:	4a63      	ldr	r2, [pc, #396]	; (c1f18 <__ieee754_sqrt+0x194>)
   c1d8a:	ec55 4b10 	vmov	r4, r5, d0
   c1d8e:	43aa      	bics	r2, r5
   c1d90:	f000 809f 	beq.w	c1ed2 <__ieee754_sqrt+0x14e>
   c1d94:	2d00      	cmp	r5, #0
   c1d96:	ee10 ca10 	vmov	ip, s0
   c1d9a:	462b      	mov	r3, r5
   c1d9c:	dd54      	ble.n	c1e48 <__ieee754_sqrt+0xc4>
   c1d9e:	1529      	asrs	r1, r5, #20
   c1da0:	d063      	beq.n	c1e6a <__ieee754_sqrt+0xe6>
   c1da2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   c1da6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   c1daa:	07c9      	lsls	r1, r1, #31
   c1dac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c1db0:	d404      	bmi.n	c1dbc <__ieee754_sqrt+0x38>
   c1db2:	005b      	lsls	r3, r3, #1
   c1db4:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c1db8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c1dbc:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   c1dc0:	2600      	movs	r6, #0
   c1dc2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   c1dc6:	107f      	asrs	r7, r7, #1
   c1dc8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c1dcc:	f04f 0e16 	mov.w	lr, #22
   c1dd0:	4634      	mov	r4, r6
   c1dd2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   c1dd6:	18a1      	adds	r1, r4, r2
   c1dd8:	4299      	cmp	r1, r3
   c1dda:	dc02      	bgt.n	c1de2 <__ieee754_sqrt+0x5e>
   c1ddc:	1a5b      	subs	r3, r3, r1
   c1dde:	188c      	adds	r4, r1, r2
   c1de0:	4416      	add	r6, r2
   c1de2:	005b      	lsls	r3, r3, #1
   c1de4:	f1be 0e01 	subs.w	lr, lr, #1
   c1de8:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c1dec:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c1df0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c1df4:	d1ef      	bne.n	c1dd6 <__ieee754_sqrt+0x52>
   c1df6:	4675      	mov	r5, lr
   c1df8:	2020      	movs	r0, #32
   c1dfa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   c1dfe:	e00a      	b.n	c1e16 <__ieee754_sqrt+0x92>
   c1e00:	d044      	beq.n	c1e8c <__ieee754_sqrt+0x108>
   c1e02:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   c1e06:	3801      	subs	r0, #1
   c1e08:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   c1e0c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c1e10:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c1e14:	d043      	beq.n	c1e9e <__ieee754_sqrt+0x11a>
   c1e16:	42a3      	cmp	r3, r4
   c1e18:	eb02 010e 	add.w	r1, r2, lr
   c1e1c:	ddf0      	ble.n	c1e00 <__ieee754_sqrt+0x7c>
   c1e1e:	2900      	cmp	r1, #0
   c1e20:	eb01 0e02 	add.w	lr, r1, r2
   c1e24:	db0a      	blt.n	c1e3c <__ieee754_sqrt+0xb8>
   c1e26:	46a0      	mov	r8, r4
   c1e28:	1b1b      	subs	r3, r3, r4
   c1e2a:	4561      	cmp	r1, ip
   c1e2c:	bf88      	it	hi
   c1e2e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   c1e32:	ebac 0c01 	sub.w	ip, ip, r1
   c1e36:	4415      	add	r5, r2
   c1e38:	4644      	mov	r4, r8
   c1e3a:	e7e2      	b.n	c1e02 <__ieee754_sqrt+0x7e>
   c1e3c:	f1be 0f00 	cmp.w	lr, #0
   c1e40:	dbf1      	blt.n	c1e26 <__ieee754_sqrt+0xa2>
   c1e42:	f104 0801 	add.w	r8, r4, #1
   c1e46:	e7ef      	b.n	c1e28 <__ieee754_sqrt+0xa4>
   c1e48:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   c1e4c:	4322      	orrs	r2, r4
   c1e4e:	d038      	beq.n	c1ec2 <__ieee754_sqrt+0x13e>
   c1e50:	2d00      	cmp	r5, #0
   c1e52:	d14e      	bne.n	c1ef2 <__ieee754_sqrt+0x16e>
   c1e54:	4629      	mov	r1, r5
   c1e56:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   c1e5a:	3915      	subs	r1, #21
   c1e5c:	4613      	mov	r3, r2
   c1e5e:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   c1e62:	2a00      	cmp	r2, #0
   c1e64:	d0f7      	beq.n	c1e56 <__ieee754_sqrt+0xd2>
   c1e66:	02d6      	lsls	r6, r2, #11
   c1e68:	d450      	bmi.n	c1f0c <__ieee754_sqrt+0x188>
   c1e6a:	2000      	movs	r0, #0
   c1e6c:	005b      	lsls	r3, r3, #1
   c1e6e:	02dd      	lsls	r5, r3, #11
   c1e70:	4604      	mov	r4, r0
   c1e72:	f100 0001 	add.w	r0, r0, #1
   c1e76:	d5f9      	bpl.n	c1e6c <__ieee754_sqrt+0xe8>
   c1e78:	461a      	mov	r2, r3
   c1e7a:	4663      	mov	r3, ip
   c1e7c:	fa0c fc00 	lsl.w	ip, ip, r0
   c1e80:	f1c0 0020 	rsb	r0, r0, #32
   c1e84:	40c3      	lsrs	r3, r0
   c1e86:	1b09      	subs	r1, r1, r4
   c1e88:	4313      	orrs	r3, r2
   c1e8a:	e78a      	b.n	c1da2 <__ieee754_sqrt+0x1e>
   c1e8c:	4561      	cmp	r1, ip
   c1e8e:	d8b8      	bhi.n	c1e02 <__ieee754_sqrt+0x7e>
   c1e90:	2900      	cmp	r1, #0
   c1e92:	eb01 0e02 	add.w	lr, r1, r2
   c1e96:	dbd1      	blt.n	c1e3c <__ieee754_sqrt+0xb8>
   c1e98:	4698      	mov	r8, r3
   c1e9a:	2300      	movs	r3, #0
   c1e9c:	e7c9      	b.n	c1e32 <__ieee754_sqrt+0xae>
   c1e9e:	ea53 030c 	orrs.w	r3, r3, ip
   c1ea2:	d110      	bne.n	c1ec6 <__ieee754_sqrt+0x142>
   c1ea4:	0868      	lsrs	r0, r5, #1
   c1ea6:	1071      	asrs	r1, r6, #1
   c1ea8:	07f3      	lsls	r3, r6, #31
   c1eaa:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   c1eae:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   c1eb2:	bf48      	it	mi
   c1eb4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   c1eb8:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   c1ebc:	4602      	mov	r2, r0
   c1ebe:	ec43 2b10 	vmov	d0, r2, r3
   c1ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c1ec6:	1c6a      	adds	r2, r5, #1
   c1ec8:	bf16      	itet	ne
   c1eca:	1c68      	addne	r0, r5, #1
   c1ecc:	3601      	addeq	r6, #1
   c1ece:	0840      	lsrne	r0, r0, #1
   c1ed0:	e7e9      	b.n	c1ea6 <__ieee754_sqrt+0x122>
   c1ed2:	ee10 2a10 	vmov	r2, s0
   c1ed6:	ee10 0a10 	vmov	r0, s0
   c1eda:	462b      	mov	r3, r5
   c1edc:	4629      	mov	r1, r5
   c1ede:	f7f2 fa5b 	bl	b4398 <__aeabi_dmul>
   c1ee2:	4622      	mov	r2, r4
   c1ee4:	462b      	mov	r3, r5
   c1ee6:	f7f2 f8a1 	bl	b402c <__adddf3>
   c1eea:	ec41 0b10 	vmov	d0, r0, r1
   c1eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c1ef2:	ee10 2a10 	vmov	r2, s0
   c1ef6:	4620      	mov	r0, r4
   c1ef8:	4629      	mov	r1, r5
   c1efa:	f7f2 f895 	bl	b4028 <__aeabi_dsub>
   c1efe:	4602      	mov	r2, r0
   c1f00:	460b      	mov	r3, r1
   c1f02:	f7f2 fb73 	bl	b45ec <__aeabi_ddiv>
   c1f06:	ec41 0b10 	vmov	d0, r0, r1
   c1f0a:	e7da      	b.n	c1ec2 <__ieee754_sqrt+0x13e>
   c1f0c:	4663      	mov	r3, ip
   c1f0e:	2020      	movs	r0, #32
   c1f10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   c1f14:	e7b6      	b.n	c1e84 <__ieee754_sqrt+0x100>
   c1f16:	bf00      	nop
   c1f18:	7ff00000 	.word	0x7ff00000

000c1f1c <__ieee754_logf>:
   c1f1c:	ee10 3a10 	vmov	r3, s0
   c1f20:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   c1f24:	d02e      	beq.n	c1f84 <__ieee754_logf+0x68>
   c1f26:	2b00      	cmp	r3, #0
   c1f28:	db33      	blt.n	c1f92 <__ieee754_logf+0x76>
   c1f2a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c1f2e:	da40      	bge.n	c1fb2 <__ieee754_logf+0x96>
   c1f30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   c1f34:	db34      	blt.n	c1fa0 <__ieee754_logf+0x84>
   c1f36:	f04f 0c00 	mov.w	ip, #0
   c1f3a:	4868      	ldr	r0, [pc, #416]	; (c20dc <__ieee754_logf+0x1c0>)
   c1f3c:	f3c3 0116 	ubfx	r1, r3, #0, #23
   c1f40:	4408      	add	r0, r1
   c1f42:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   c1f46:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   c1f4a:	430a      	orrs	r2, r1
   c1f4c:	15db      	asrs	r3, r3, #23
   c1f4e:	ee00 2a10 	vmov	s0, r2
   c1f52:	3b7f      	subs	r3, #127	; 0x7f
   c1f54:	4a62      	ldr	r2, [pc, #392]	; (c20e0 <__ieee754_logf+0x1c4>)
   c1f56:	4463      	add	r3, ip
   c1f58:	f101 0c0f 	add.w	ip, r1, #15
   c1f5c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c1f60:	ea0c 0202 	and.w	r2, ip, r2
   c1f64:	ee30 0a67 	vsub.f32	s0, s0, s15
   c1f68:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   c1f6c:	bb22      	cbnz	r2, c1fb8 <__ieee754_logf+0x9c>
   c1f6e:	eeb5 0a40 	vcmp.f32	s0, #0.0
   c1f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c1f76:	d160      	bne.n	c203a <__ieee754_logf+0x11e>
   c1f78:	2b00      	cmp	r3, #0
   c1f7a:	f040 8092 	bne.w	c20a2 <__ieee754_logf+0x186>
   c1f7e:	ed9f 0a59 	vldr	s0, [pc, #356]	; c20e4 <__ieee754_logf+0x1c8>
   c1f82:	4770      	bx	lr
   c1f84:	ed9f 7a58 	vldr	s14, [pc, #352]	; c20e8 <__ieee754_logf+0x1cc>
   c1f88:	eddf 7a56 	vldr	s15, [pc, #344]	; c20e4 <__ieee754_logf+0x1c8>
   c1f8c:	ee87 0a27 	vdiv.f32	s0, s14, s15
   c1f90:	4770      	bx	lr
   c1f92:	ee70 7a40 	vsub.f32	s15, s0, s0
   c1f96:	ed9f 7a53 	vldr	s14, [pc, #332]	; c20e4 <__ieee754_logf+0x1c8>
   c1f9a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   c1f9e:	4770      	bx	lr
   c1fa0:	eddf 7a52 	vldr	s15, [pc, #328]	; c20ec <__ieee754_logf+0x1d0>
   c1fa4:	ee60 7a27 	vmul.f32	s15, s0, s15
   c1fa8:	f06f 0c18 	mvn.w	ip, #24
   c1fac:	ee17 3a90 	vmov	r3, s15
   c1fb0:	e7c3      	b.n	c1f3a <__ieee754_logf+0x1e>
   c1fb2:	ee30 0a00 	vadd.f32	s0, s0, s0
   c1fb6:	4770      	bx	lr
   c1fb8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   c1fbc:	ee70 7a27 	vadd.f32	s15, s0, s15
   c1fc0:	ee07 3a10 	vmov	s14, r3
   c1fc4:	ee80 4a27 	vdiv.f32	s8, s0, s15
   c1fc8:	4849      	ldr	r0, [pc, #292]	; (c20f0 <__ieee754_logf+0x1d4>)
   c1fca:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   c1fce:	4408      	add	r0, r1
   c1fd0:	f502 7222 	add.w	r2, r2, #648	; 0x288
   c1fd4:	4302      	orrs	r2, r0
   c1fd6:	2a00      	cmp	r2, #0
   c1fd8:	ed9f 3a46 	vldr	s6, [pc, #280]	; c20f4 <__ieee754_logf+0x1d8>
   c1fdc:	eddf 4a46 	vldr	s9, [pc, #280]	; c20f8 <__ieee754_logf+0x1dc>
   c1fe0:	eddf 5a46 	vldr	s11, [pc, #280]	; c20fc <__ieee754_logf+0x1e0>
   c1fe4:	eddf 3a46 	vldr	s7, [pc, #280]	; c2100 <__ieee754_logf+0x1e4>
   c1fe8:	ed9f 5a46 	vldr	s10, [pc, #280]	; c2104 <__ieee754_logf+0x1e8>
   c1fec:	eddf 7a46 	vldr	s15, [pc, #280]	; c2108 <__ieee754_logf+0x1ec>
   c1ff0:	eddf 6a46 	vldr	s13, [pc, #280]	; c210c <__ieee754_logf+0x1f0>
   c1ff4:	ee24 6a04 	vmul.f32	s12, s8, s8
   c1ff8:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   c1ffc:	ee26 7a06 	vmul.f32	s14, s12, s12
   c2000:	eee7 4a03 	vfma.f32	s9, s14, s6
   c2004:	eea7 5a23 	vfma.f32	s10, s14, s7
   c2008:	eee4 5a87 	vfma.f32	s11, s9, s14
   c200c:	eee5 6a07 	vfma.f32	s13, s10, s14
   c2010:	eee5 7a87 	vfma.f32	s15, s11, s14
   c2014:	ee67 7a86 	vmul.f32	s15, s15, s12
   c2018:	eee6 7a87 	vfma.f32	s15, s13, s14
   c201c:	dd2a      	ble.n	c2074 <__ieee754_logf+0x158>
   c201e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   c2022:	ee20 7a07 	vmul.f32	s14, s0, s14
   c2026:	ee27 7a00 	vmul.f32	s14, s14, s0
   c202a:	bb4b      	cbnz	r3, c2080 <__ieee754_logf+0x164>
   c202c:	ee77 7a87 	vadd.f32	s15, s15, s14
   c2030:	eea7 7ac4 	vfms.f32	s14, s15, s8
   c2034:	ee30 0a47 	vsub.f32	s0, s0, s14
   c2038:	4770      	bx	lr
   c203a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   c203e:	eddf 6a34 	vldr	s13, [pc, #208]	; c2110 <__ieee754_logf+0x1f4>
   c2042:	eef0 7a47 	vmov.f32	s15, s14
   c2046:	eee0 7a66 	vfms.f32	s15, s0, s13
   c204a:	ee20 7a00 	vmul.f32	s14, s0, s0
   c204e:	ee27 7a27 	vmul.f32	s14, s14, s15
   c2052:	2b00      	cmp	r3, #0
   c2054:	d0ee      	beq.n	c2034 <__ieee754_logf+0x118>
   c2056:	ee07 3a90 	vmov	s15, r3
   c205a:	ed9f 6a2e 	vldr	s12, [pc, #184]	; c2114 <__ieee754_logf+0x1f8>
   c205e:	eddf 6a2e 	vldr	s13, [pc, #184]	; c2118 <__ieee754_logf+0x1fc>
   c2062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2066:	eea7 7ac6 	vfms.f32	s14, s15, s12
   c206a:	ee37 0a40 	vsub.f32	s0, s14, s0
   c206e:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   c2072:	4770      	bx	lr
   c2074:	bb13      	cbnz	r3, c20bc <__ieee754_logf+0x1a0>
   c2076:	ee70 7a67 	vsub.f32	s15, s0, s15
   c207a:	eea7 0ac4 	vfms.f32	s0, s15, s8
   c207e:	4770      	bx	lr
   c2080:	eddf 6a24 	vldr	s13, [pc, #144]	; c2114 <__ieee754_logf+0x1f8>
   c2084:	ed9f 6a24 	vldr	s12, [pc, #144]	; c2118 <__ieee754_logf+0x1fc>
   c2088:	ee77 7a87 	vadd.f32	s15, s15, s14
   c208c:	ee62 6aa6 	vmul.f32	s13, s5, s13
   c2090:	eee7 6a84 	vfma.f32	s13, s15, s8
   c2094:	ee37 7a66 	vsub.f32	s14, s14, s13
   c2098:	ee37 0a40 	vsub.f32	s0, s14, s0
   c209c:	ee92 0a86 	vfnms.f32	s0, s5, s12
   c20a0:	4770      	bx	lr
   c20a2:	ee07 3a90 	vmov	s15, r3
   c20a6:	ed9f 0a1b 	vldr	s0, [pc, #108]	; c2114 <__ieee754_logf+0x1f8>
   c20aa:	ed9f 7a1b 	vldr	s14, [pc, #108]	; c2118 <__ieee754_logf+0x1fc>
   c20ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c20b2:	ee27 0a80 	vmul.f32	s0, s15, s0
   c20b6:	eea7 0a87 	vfma.f32	s0, s15, s14
   c20ba:	4770      	bx	lr
   c20bc:	ed9f 7a15 	vldr	s14, [pc, #84]	; c2114 <__ieee754_logf+0x1f8>
   c20c0:	eddf 6a15 	vldr	s13, [pc, #84]	; c2118 <__ieee754_logf+0x1fc>
   c20c4:	ee70 7a67 	vsub.f32	s15, s0, s15
   c20c8:	ee27 7a62 	vnmul.f32	s14, s14, s5
   c20cc:	eea7 7a84 	vfma.f32	s14, s15, s8
   c20d0:	ee37 0a40 	vsub.f32	s0, s14, s0
   c20d4:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   c20d8:	4770      	bx	lr
   c20da:	bf00      	nop
   c20dc:	004afb20 	.word	0x004afb20
   c20e0:	007ffff0 	.word	0x007ffff0
   c20e4:	00000000 	.word	0x00000000
   c20e8:	cc000000 	.word	0xcc000000
   c20ec:	4c000000 	.word	0x4c000000
   c20f0:	ffcf5c30 	.word	0xffcf5c30
   c20f4:	3e178897 	.word	0x3e178897
   c20f8:	3e3a3325 	.word	0x3e3a3325
   c20fc:	3e924925 	.word	0x3e924925
   c2100:	3e1cd04f 	.word	0x3e1cd04f
   c2104:	3e638e29 	.word	0x3e638e29
   c2108:	3f2aaaab 	.word	0x3f2aaaab
   c210c:	3ecccccd 	.word	0x3ecccccd
   c2110:	3eaaaaab 	.word	0x3eaaaaab
   c2114:	3717f7d1 	.word	0x3717f7d1
   c2118:	3f317180 	.word	0x3f317180

000c211c <__ieee754_sqrtf>:
   c211c:	eeb1 0ac0 	vsqrt.f32	s0, s0
   c2120:	4770      	bx	lr
   c2122:	bf00      	nop
   c2124:	0000      	movs	r0, r0
	...

000c2128 <__kernel_cos>:
   c2128:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c212c:	ec57 6b10 	vmov	r6, r7, d0
   c2130:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   c2134:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   c2138:	ed2d 8b04 	vpush	{d8-d9}
   c213c:	ec5b ab11 	vmov	sl, fp, d1
   c2140:	da71      	bge.n	c2226 <__kernel_cos+0xfe>
   c2142:	ee10 0a10 	vmov	r0, s0
   c2146:	4639      	mov	r1, r7
   c2148:	f7f2 fbd6 	bl	b48f8 <__aeabi_d2iz>
   c214c:	2800      	cmp	r0, #0
   c214e:	f000 80f6 	beq.w	c233e <__kernel_cos+0x216>
   c2152:	4632      	mov	r2, r6
   c2154:	463b      	mov	r3, r7
   c2156:	4630      	mov	r0, r6
   c2158:	4639      	mov	r1, r7
   c215a:	f7f2 f91d 	bl	b4398 <__aeabi_dmul>
   c215e:	a37c      	add	r3, pc, #496	; (adr r3, c2350 <__kernel_cos+0x228>)
   c2160:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2164:	4604      	mov	r4, r0
   c2166:	460d      	mov	r5, r1
   c2168:	f7f2 f916 	bl	b4398 <__aeabi_dmul>
   c216c:	a37a      	add	r3, pc, #488	; (adr r3, c2358 <__kernel_cos+0x230>)
   c216e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2172:	f7f1 ff5b 	bl	b402c <__adddf3>
   c2176:	4622      	mov	r2, r4
   c2178:	462b      	mov	r3, r5
   c217a:	f7f2 f90d 	bl	b4398 <__aeabi_dmul>
   c217e:	a378      	add	r3, pc, #480	; (adr r3, c2360 <__kernel_cos+0x238>)
   c2180:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2184:	f7f1 ff50 	bl	b4028 <__aeabi_dsub>
   c2188:	4622      	mov	r2, r4
   c218a:	462b      	mov	r3, r5
   c218c:	f7f2 f904 	bl	b4398 <__aeabi_dmul>
   c2190:	a375      	add	r3, pc, #468	; (adr r3, c2368 <__kernel_cos+0x240>)
   c2192:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2196:	f7f1 ff49 	bl	b402c <__adddf3>
   c219a:	4622      	mov	r2, r4
   c219c:	462b      	mov	r3, r5
   c219e:	f7f2 f8fb 	bl	b4398 <__aeabi_dmul>
   c21a2:	a373      	add	r3, pc, #460	; (adr r3, c2370 <__kernel_cos+0x248>)
   c21a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c21a8:	f7f1 ff3e 	bl	b4028 <__aeabi_dsub>
   c21ac:	4622      	mov	r2, r4
   c21ae:	462b      	mov	r3, r5
   c21b0:	f7f2 f8f2 	bl	b4398 <__aeabi_dmul>
   c21b4:	a370      	add	r3, pc, #448	; (adr r3, c2378 <__kernel_cos+0x250>)
   c21b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c21ba:	f7f1 ff37 	bl	b402c <__adddf3>
   c21be:	4622      	mov	r2, r4
   c21c0:	462b      	mov	r3, r5
   c21c2:	f7f2 f8e9 	bl	b4398 <__aeabi_dmul>
   c21c6:	ec41 0b18 	vmov	d8, r0, r1
   c21ca:	4b71      	ldr	r3, [pc, #452]	; (c2390 <__kernel_cos+0x268>)
   c21cc:	2200      	movs	r2, #0
   c21ce:	4620      	mov	r0, r4
   c21d0:	4629      	mov	r1, r5
   c21d2:	f7f2 f8e1 	bl	b4398 <__aeabi_dmul>
   c21d6:	ec53 2b18 	vmov	r2, r3, d8
   c21da:	4680      	mov	r8, r0
   c21dc:	4689      	mov	r9, r1
   c21de:	4620      	mov	r0, r4
   c21e0:	4629      	mov	r1, r5
   c21e2:	f7f2 f8d9 	bl	b4398 <__aeabi_dmul>
   c21e6:	4652      	mov	r2, sl
   c21e8:	465b      	mov	r3, fp
   c21ea:	4604      	mov	r4, r0
   c21ec:	460d      	mov	r5, r1
   c21ee:	4630      	mov	r0, r6
   c21f0:	4639      	mov	r1, r7
   c21f2:	f7f2 f8d1 	bl	b4398 <__aeabi_dmul>
   c21f6:	4602      	mov	r2, r0
   c21f8:	460b      	mov	r3, r1
   c21fa:	4620      	mov	r0, r4
   c21fc:	4629      	mov	r1, r5
   c21fe:	f7f1 ff13 	bl	b4028 <__aeabi_dsub>
   c2202:	4602      	mov	r2, r0
   c2204:	460b      	mov	r3, r1
   c2206:	4640      	mov	r0, r8
   c2208:	4649      	mov	r1, r9
   c220a:	f7f1 ff0d 	bl	b4028 <__aeabi_dsub>
   c220e:	4602      	mov	r2, r0
   c2210:	460b      	mov	r3, r1
   c2212:	2000      	movs	r0, #0
   c2214:	495f      	ldr	r1, [pc, #380]	; (c2394 <__kernel_cos+0x26c>)
   c2216:	f7f1 ff07 	bl	b4028 <__aeabi_dsub>
   c221a:	ecbd 8b04 	vpop	{d8-d9}
   c221e:	ec41 0b10 	vmov	d0, r0, r1
   c2222:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2226:	ee10 2a10 	vmov	r2, s0
   c222a:	ee10 0a10 	vmov	r0, s0
   c222e:	463b      	mov	r3, r7
   c2230:	4639      	mov	r1, r7
   c2232:	f7f2 f8b1 	bl	b4398 <__aeabi_dmul>
   c2236:	a346      	add	r3, pc, #280	; (adr r3, c2350 <__kernel_cos+0x228>)
   c2238:	e9d3 2300 	ldrd	r2, r3, [r3]
   c223c:	4604      	mov	r4, r0
   c223e:	460d      	mov	r5, r1
   c2240:	f7f2 f8aa 	bl	b4398 <__aeabi_dmul>
   c2244:	a344      	add	r3, pc, #272	; (adr r3, c2358 <__kernel_cos+0x230>)
   c2246:	e9d3 2300 	ldrd	r2, r3, [r3]
   c224a:	f7f1 feef 	bl	b402c <__adddf3>
   c224e:	4622      	mov	r2, r4
   c2250:	462b      	mov	r3, r5
   c2252:	f7f2 f8a1 	bl	b4398 <__aeabi_dmul>
   c2256:	a342      	add	r3, pc, #264	; (adr r3, c2360 <__kernel_cos+0x238>)
   c2258:	e9d3 2300 	ldrd	r2, r3, [r3]
   c225c:	f7f1 fee4 	bl	b4028 <__aeabi_dsub>
   c2260:	4622      	mov	r2, r4
   c2262:	462b      	mov	r3, r5
   c2264:	f7f2 f898 	bl	b4398 <__aeabi_dmul>
   c2268:	a33f      	add	r3, pc, #252	; (adr r3, c2368 <__kernel_cos+0x240>)
   c226a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c226e:	f7f1 fedd 	bl	b402c <__adddf3>
   c2272:	4622      	mov	r2, r4
   c2274:	462b      	mov	r3, r5
   c2276:	f7f2 f88f 	bl	b4398 <__aeabi_dmul>
   c227a:	a33d      	add	r3, pc, #244	; (adr r3, c2370 <__kernel_cos+0x248>)
   c227c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2280:	f7f1 fed2 	bl	b4028 <__aeabi_dsub>
   c2284:	4622      	mov	r2, r4
   c2286:	462b      	mov	r3, r5
   c2288:	f7f2 f886 	bl	b4398 <__aeabi_dmul>
   c228c:	a33a      	add	r3, pc, #232	; (adr r3, c2378 <__kernel_cos+0x250>)
   c228e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2292:	f7f1 fecb 	bl	b402c <__adddf3>
   c2296:	462b      	mov	r3, r5
   c2298:	4622      	mov	r2, r4
   c229a:	f7f2 f87d 	bl	b4398 <__aeabi_dmul>
   c229e:	4b3e      	ldr	r3, [pc, #248]	; (c2398 <__kernel_cos+0x270>)
   c22a0:	4599      	cmp	r9, r3
   c22a2:	ec41 0b18 	vmov	d8, r0, r1
   c22a6:	dd90      	ble.n	c21ca <__kernel_cos+0xa2>
   c22a8:	4b3c      	ldr	r3, [pc, #240]	; (c239c <__kernel_cos+0x274>)
   c22aa:	4599      	cmp	r9, r3
   c22ac:	dc3c      	bgt.n	c2328 <__kernel_cos+0x200>
   c22ae:	2200      	movs	r2, #0
   c22b0:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   c22b4:	4937      	ldr	r1, [pc, #220]	; (c2394 <__kernel_cos+0x26c>)
   c22b6:	2000      	movs	r0, #0
   c22b8:	4690      	mov	r8, r2
   c22ba:	4699      	mov	r9, r3
   c22bc:	f7f1 feb4 	bl	b4028 <__aeabi_dsub>
   c22c0:	ec41 0b19 	vmov	d9, r0, r1
   c22c4:	4b32      	ldr	r3, [pc, #200]	; (c2390 <__kernel_cos+0x268>)
   c22c6:	2200      	movs	r2, #0
   c22c8:	4620      	mov	r0, r4
   c22ca:	4629      	mov	r1, r5
   c22cc:	f7f2 f864 	bl	b4398 <__aeabi_dmul>
   c22d0:	4642      	mov	r2, r8
   c22d2:	464b      	mov	r3, r9
   c22d4:	f7f1 fea8 	bl	b4028 <__aeabi_dsub>
   c22d8:	ec53 2b18 	vmov	r2, r3, d8
   c22dc:	4680      	mov	r8, r0
   c22de:	4689      	mov	r9, r1
   c22e0:	4620      	mov	r0, r4
   c22e2:	4629      	mov	r1, r5
   c22e4:	f7f2 f858 	bl	b4398 <__aeabi_dmul>
   c22e8:	4652      	mov	r2, sl
   c22ea:	465b      	mov	r3, fp
   c22ec:	4604      	mov	r4, r0
   c22ee:	460d      	mov	r5, r1
   c22f0:	4630      	mov	r0, r6
   c22f2:	4639      	mov	r1, r7
   c22f4:	f7f2 f850 	bl	b4398 <__aeabi_dmul>
   c22f8:	4602      	mov	r2, r0
   c22fa:	460b      	mov	r3, r1
   c22fc:	4620      	mov	r0, r4
   c22fe:	4629      	mov	r1, r5
   c2300:	f7f1 fe92 	bl	b4028 <__aeabi_dsub>
   c2304:	4602      	mov	r2, r0
   c2306:	460b      	mov	r3, r1
   c2308:	4640      	mov	r0, r8
   c230a:	4649      	mov	r1, r9
   c230c:	f7f1 fe8c 	bl	b4028 <__aeabi_dsub>
   c2310:	4602      	mov	r2, r0
   c2312:	460b      	mov	r3, r1
   c2314:	ec51 0b19 	vmov	r0, r1, d9
   c2318:	f7f1 fe86 	bl	b4028 <__aeabi_dsub>
   c231c:	ecbd 8b04 	vpop	{d8-d9}
   c2320:	ec41 0b10 	vmov	d0, r0, r1
   c2324:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2328:	ed9f 7b15 	vldr	d7, [pc, #84]	; c2380 <__kernel_cos+0x258>
   c232c:	f8df 9070 	ldr.w	r9, [pc, #112]	; c23a0 <__kernel_cos+0x278>
   c2330:	eeb0 9a47 	vmov.f32	s18, s14
   c2334:	eef0 9a67 	vmov.f32	s19, s15
   c2338:	f04f 0800 	mov.w	r8, #0
   c233c:	e7c2      	b.n	c22c4 <__kernel_cos+0x19c>
   c233e:	ecbd 8b04 	vpop	{d8-d9}
   c2342:	ed9f 0b11 	vldr	d0, [pc, #68]	; c2388 <__kernel_cos+0x260>
   c2346:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c234a:	bf00      	nop
   c234c:	f3af 8000 	nop.w
   c2350:	be8838d4 	.word	0xbe8838d4
   c2354:	bda8fae9 	.word	0xbda8fae9
   c2358:	bdb4b1c4 	.word	0xbdb4b1c4
   c235c:	3e21ee9e 	.word	0x3e21ee9e
   c2360:	809c52ad 	.word	0x809c52ad
   c2364:	3e927e4f 	.word	0x3e927e4f
   c2368:	19cb1590 	.word	0x19cb1590
   c236c:	3efa01a0 	.word	0x3efa01a0
   c2370:	16c15177 	.word	0x16c15177
   c2374:	3f56c16c 	.word	0x3f56c16c
   c2378:	5555554c 	.word	0x5555554c
   c237c:	3fa55555 	.word	0x3fa55555
   c2380:	00000000 	.word	0x00000000
   c2384:	3fe70000 	.word	0x3fe70000
   c2388:	00000000 	.word	0x00000000
   c238c:	3ff00000 	.word	0x3ff00000
   c2390:	3fe00000 	.word	0x3fe00000
   c2394:	3ff00000 	.word	0x3ff00000
   c2398:	3fd33332 	.word	0x3fd33332
   c239c:	3fe90000 	.word	0x3fe90000
   c23a0:	3fd20000 	.word	0x3fd20000
   c23a4:	00000000 	.word	0x00000000

000c23a8 <__kernel_rem_pio2>:
   c23a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c23ac:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
   c23b0:	461c      	mov	r4, r3
   c23b2:	9308      	str	r3, [sp, #32]
   c23b4:	910b      	str	r1, [sp, #44]	; 0x2c
   c23b6:	4bbb      	ldr	r3, [pc, #748]	; (c26a4 <__kernel_rem_pio2+0x2fc>)
   c23b8:	99a2      	ldr	r1, [sp, #648]	; 0x288
   c23ba:	9004      	str	r0, [sp, #16]
   c23bc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
   c23c0:	9105      	str	r1, [sp, #20]
   c23c2:	1e63      	subs	r3, r4, #1
   c23c4:	f112 0f14 	cmn.w	r2, #20
   c23c8:	9303      	str	r3, [sp, #12]
   c23ca:	f2c0 834b 	blt.w	c2a64 <__kernel_rem_pio2+0x6bc>
   c23ce:	49b6      	ldr	r1, [pc, #728]	; (c26a8 <__kernel_rem_pio2+0x300>)
   c23d0:	1ed3      	subs	r3, r2, #3
   c23d2:	fb81 0103 	smull	r0, r1, r1, r3
   c23d6:	17db      	asrs	r3, r3, #31
   c23d8:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   c23dc:	9307      	str	r3, [sp, #28]
   c23de:	3301      	adds	r3, #1
   c23e0:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   c23e4:	00db      	lsls	r3, r3, #3
   c23e6:	18d3      	adds	r3, r2, r3
   c23e8:	9306      	str	r3, [sp, #24]
   c23ea:	9a07      	ldr	r2, [sp, #28]
   c23ec:	9b03      	ldr	r3, [sp, #12]
   c23ee:	1ad4      	subs	r4, r2, r3
   c23f0:	9a05      	ldr	r2, [sp, #20]
   c23f2:	18d6      	adds	r6, r2, r3
   c23f4:	d41a      	bmi.n	c242c <__kernel_rem_pio2+0x84>
   c23f6:	3601      	adds	r6, #1
   c23f8:	9fa3      	ldr	r7, [sp, #652]	; 0x28c
   c23fa:	4426      	add	r6, r4
   c23fc:	ad20      	add	r5, sp, #128	; 0x80
   c23fe:	f04f 0800 	mov.w	r8, #0
   c2402:	f04f 0900 	mov.w	r9, #0
   c2406:	e008      	b.n	c241a <__kernel_rem_pio2+0x72>
   c2408:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   c240c:	f7f1 ff5a 	bl	b42c4 <__aeabi_i2d>
   c2410:	3401      	adds	r4, #1
   c2412:	42b4      	cmp	r4, r6
   c2414:	e8e5 0102 	strd	r0, r1, [r5], #8
   c2418:	d008      	beq.n	c242c <__kernel_rem_pio2+0x84>
   c241a:	2c00      	cmp	r4, #0
   c241c:	daf4      	bge.n	c2408 <__kernel_rem_pio2+0x60>
   c241e:	3401      	adds	r4, #1
   c2420:	4640      	mov	r0, r8
   c2422:	4649      	mov	r1, r9
   c2424:	42b4      	cmp	r4, r6
   c2426:	e8e5 0102 	strd	r0, r1, [r5], #8
   c242a:	d1f6      	bne.n	c241a <__kernel_rem_pio2+0x72>
   c242c:	9b05      	ldr	r3, [sp, #20]
   c242e:	2b00      	cmp	r3, #0
   c2430:	f2c0 83c8 	blt.w	c2bc4 <__kernel_rem_pio2+0x81c>
   c2434:	9b08      	ldr	r3, [sp, #32]
   c2436:	f8dd 900c 	ldr.w	r9, [sp, #12]
   c243a:	00da      	lsls	r2, r3, #3
   c243c:	9202      	str	r2, [sp, #8]
   c243e:	9a05      	ldr	r2, [sp, #20]
   c2440:	441a      	add	r2, r3
   c2442:	9201      	str	r2, [sp, #4]
   c2444:	9a04      	ldr	r2, [sp, #16]
   c2446:	a920      	add	r1, sp, #128	; 0x80
   c2448:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
   c244c:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
   c2450:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
   c2454:	9b03      	ldr	r3, [sp, #12]
   c2456:	2b00      	cmp	r3, #0
   c2458:	f2c0 81a9 	blt.w	c27ae <__kernel_rem_pio2+0x406>
   c245c:	9e04      	ldr	r6, [sp, #16]
   c245e:	4657      	mov	r7, sl
   c2460:	2400      	movs	r4, #0
   c2462:	2500      	movs	r5, #0
   c2464:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
   c2468:	e8f6 0102 	ldrd	r0, r1, [r6], #8
   c246c:	f7f1 ff94 	bl	b4398 <__aeabi_dmul>
   c2470:	4602      	mov	r2, r0
   c2472:	460b      	mov	r3, r1
   c2474:	4620      	mov	r0, r4
   c2476:	4629      	mov	r1, r5
   c2478:	f7f1 fdd8 	bl	b402c <__adddf3>
   c247c:	4546      	cmp	r6, r8
   c247e:	4604      	mov	r4, r0
   c2480:	460d      	mov	r5, r1
   c2482:	d1ef      	bne.n	c2464 <__kernel_rem_pio2+0xbc>
   c2484:	9b01      	ldr	r3, [sp, #4]
   c2486:	f109 0901 	add.w	r9, r9, #1
   c248a:	4599      	cmp	r9, r3
   c248c:	e8eb 4502 	strd	r4, r5, [fp], #8
   c2490:	f10a 0a08 	add.w	sl, sl, #8
   c2494:	d1de      	bne.n	c2454 <__kernel_rem_pio2+0xac>
   c2496:	9a04      	ldr	r2, [sp, #16]
   c2498:	9b02      	ldr	r3, [sp, #8]
   c249a:	4413      	add	r3, r2
   c249c:	469b      	mov	fp, r3
   c249e:	9b05      	ldr	r3, [sp, #20]
   c24a0:	a90b      	add	r1, sp, #44	; 0x2c
   c24a2:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   c24a6:	a90c      	add	r1, sp, #48	; 0x30
   c24a8:	920a      	str	r2, [sp, #40]	; 0x28
   c24aa:	461a      	mov	r2, r3
   c24ac:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   c24b0:	3b08      	subs	r3, #8
   c24b2:	9309      	str	r3, [sp, #36]	; 0x24
   c24b4:	9201      	str	r2, [sp, #4]
   c24b6:	9a01      	ldr	r2, [sp, #4]
   c24b8:	a998      	add	r1, sp, #608	; 0x260
   c24ba:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   c24be:	2a00      	cmp	r2, #0
   c24c0:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   c24c4:	dd29      	ble.n	c251a <__kernel_rem_pio2+0x172>
   c24c6:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
   c24ca:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   c24ce:	f10d 0930 	add.w	r9, sp, #48	; 0x30
   c24d2:	4b76      	ldr	r3, [pc, #472]	; (c26ac <__kernel_rem_pio2+0x304>)
   c24d4:	2200      	movs	r2, #0
   c24d6:	4620      	mov	r0, r4
   c24d8:	4629      	mov	r1, r5
   c24da:	f7f1 ff5d 	bl	b4398 <__aeabi_dmul>
   c24de:	f7f2 fa0b 	bl	b48f8 <__aeabi_d2iz>
   c24e2:	f7f1 feef 	bl	b42c4 <__aeabi_i2d>
   c24e6:	4b72      	ldr	r3, [pc, #456]	; (c26b0 <__kernel_rem_pio2+0x308>)
   c24e8:	2200      	movs	r2, #0
   c24ea:	4606      	mov	r6, r0
   c24ec:	460f      	mov	r7, r1
   c24ee:	f7f1 ff53 	bl	b4398 <__aeabi_dmul>
   c24f2:	4602      	mov	r2, r0
   c24f4:	460b      	mov	r3, r1
   c24f6:	4620      	mov	r0, r4
   c24f8:	4629      	mov	r1, r5
   c24fa:	f7f1 fd95 	bl	b4028 <__aeabi_dsub>
   c24fe:	f7f2 f9fb 	bl	b48f8 <__aeabi_d2iz>
   c2502:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   c2506:	f849 0b04 	str.w	r0, [r9], #4
   c250a:	4639      	mov	r1, r7
   c250c:	4630      	mov	r0, r6
   c250e:	f7f1 fd8d 	bl	b402c <__adddf3>
   c2512:	45d0      	cmp	r8, sl
   c2514:	4604      	mov	r4, r0
   c2516:	460d      	mov	r5, r1
   c2518:	d1db      	bne.n	c24d2 <__kernel_rem_pio2+0x12a>
   c251a:	f8dd 9018 	ldr.w	r9, [sp, #24]
   c251e:	ec45 4b10 	vmov	d0, r4, r5
   c2522:	4648      	mov	r0, r9
   c2524:	f7ff f810 	bl	c1548 <scalbn>
   c2528:	ec55 4b10 	vmov	r4, r5, d0
   c252c:	2200      	movs	r2, #0
   c252e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   c2532:	ee10 0a10 	vmov	r0, s0
   c2536:	4629      	mov	r1, r5
   c2538:	f7f1 ff2e 	bl	b4398 <__aeabi_dmul>
   c253c:	ec41 0b10 	vmov	d0, r0, r1
   c2540:	f7fe fef6 	bl	c1330 <floor>
   c2544:	4b5b      	ldr	r3, [pc, #364]	; (c26b4 <__kernel_rem_pio2+0x30c>)
   c2546:	ec51 0b10 	vmov	r0, r1, d0
   c254a:	2200      	movs	r2, #0
   c254c:	f7f1 ff24 	bl	b4398 <__aeabi_dmul>
   c2550:	4602      	mov	r2, r0
   c2552:	460b      	mov	r3, r1
   c2554:	4620      	mov	r0, r4
   c2556:	4629      	mov	r1, r5
   c2558:	f7f1 fd66 	bl	b4028 <__aeabi_dsub>
   c255c:	460d      	mov	r5, r1
   c255e:	4604      	mov	r4, r0
   c2560:	f7f2 f9ca 	bl	b48f8 <__aeabi_d2iz>
   c2564:	4680      	mov	r8, r0
   c2566:	f7f1 fead 	bl	b42c4 <__aeabi_i2d>
   c256a:	460b      	mov	r3, r1
   c256c:	4602      	mov	r2, r0
   c256e:	4629      	mov	r1, r5
   c2570:	4620      	mov	r0, r4
   c2572:	f7f1 fd59 	bl	b4028 <__aeabi_dsub>
   c2576:	464b      	mov	r3, r9
   c2578:	2b00      	cmp	r3, #0
   c257a:	4606      	mov	r6, r0
   c257c:	460f      	mov	r7, r1
   c257e:	f340 809b 	ble.w	c26b8 <__kernel_rem_pio2+0x310>
   c2582:	9a01      	ldr	r2, [sp, #4]
   c2584:	1e51      	subs	r1, r2, #1
   c2586:	aa0c      	add	r2, sp, #48	; 0x30
   c2588:	f1c9 0318 	rsb	r3, r9, #24
   c258c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   c2590:	fa42 f003 	asr.w	r0, r2, r3
   c2594:	fa00 f303 	lsl.w	r3, r0, r3
   c2598:	1ad3      	subs	r3, r2, r3
   c259a:	f1c9 0517 	rsb	r5, r9, #23
   c259e:	aa0c      	add	r2, sp, #48	; 0x30
   c25a0:	fa43 f505 	asr.w	r5, r3, r5
   c25a4:	2d00      	cmp	r5, #0
   c25a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   c25aa:	4480      	add	r8, r0
   c25ac:	f300 808e 	bgt.w	c26cc <__kernel_rem_pio2+0x324>
   c25b0:	2200      	movs	r2, #0
   c25b2:	2300      	movs	r3, #0
   c25b4:	4630      	mov	r0, r6
   c25b6:	4639      	mov	r1, r7
   c25b8:	f7f2 f956 	bl	b4868 <__aeabi_dcmpeq>
   c25bc:	2800      	cmp	r0, #0
   c25be:	f000 8258 	beq.w	c2a72 <__kernel_rem_pio2+0x6ca>
   c25c2:	9b01      	ldr	r3, [sp, #4]
   c25c4:	9a05      	ldr	r2, [sp, #20]
   c25c6:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
   c25ca:	4552      	cmp	r2, sl
   c25cc:	dc10      	bgt.n	c25f0 <__kernel_rem_pio2+0x248>
   c25ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   c25d2:	aa0c      	add	r2, sp, #48	; 0x30
   c25d4:	3b01      	subs	r3, #1
   c25d6:	980a      	ldr	r0, [sp, #40]	; 0x28
   c25d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c25dc:	2200      	movs	r2, #0
   c25de:	f853 1904 	ldr.w	r1, [r3], #-4
   c25e2:	4283      	cmp	r3, r0
   c25e4:	ea42 0201 	orr.w	r2, r2, r1
   c25e8:	d1f9      	bne.n	c25de <__kernel_rem_pio2+0x236>
   c25ea:	2a00      	cmp	r2, #0
   c25ec:	f040 80e2 	bne.w	c27b4 <__kernel_rem_pio2+0x40c>
   c25f0:	9b05      	ldr	r3, [sp, #20]
   c25f2:	aa0c      	add	r2, sp, #48	; 0x30
   c25f4:	3b01      	subs	r3, #1
   c25f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   c25fa:	2b00      	cmp	r3, #0
   c25fc:	f040 80d2 	bne.w	c27a4 <__kernel_rem_pio2+0x3fc>
   c2600:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c2602:	2301      	movs	r3, #1
   c2604:	f852 1904 	ldr.w	r1, [r2], #-4
   c2608:	3301      	adds	r3, #1
   c260a:	2900      	cmp	r1, #0
   c260c:	d0fa      	beq.n	c2604 <__kernel_rem_pio2+0x25c>
   c260e:	9a01      	ldr	r2, [sp, #4]
   c2610:	18d3      	adds	r3, r2, r3
   c2612:	9302      	str	r3, [sp, #8]
   c2614:	1c53      	adds	r3, r2, #1
   c2616:	4699      	mov	r9, r3
   c2618:	9a01      	ldr	r2, [sp, #4]
   c261a:	9908      	ldr	r1, [sp, #32]
   c261c:	440a      	add	r2, r1
   c261e:	4690      	mov	r8, r2
   c2620:	9a07      	ldr	r2, [sp, #28]
   c2622:	eb02 0a03 	add.w	sl, r2, r3
   c2626:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
   c262a:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
   c262c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   c2630:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
   c2634:	aa20      	add	r2, sp, #128	; 0x80
   c2636:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   c263a:	aa70      	add	r2, sp, #448	; 0x1c0
   c263c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   c2640:	9301      	str	r3, [sp, #4]
   c2642:	f85a 0f04 	ldr.w	r0, [sl, #4]!
   c2646:	f7f1 fe3d 	bl	b42c4 <__aeabi_i2d>
   c264a:	460b      	mov	r3, r1
   c264c:	9903      	ldr	r1, [sp, #12]
   c264e:	4602      	mov	r2, r0
   c2650:	2900      	cmp	r1, #0
   c2652:	e9c8 2300 	strd	r2, r3, [r8]
   c2656:	4647      	mov	r7, r8
   c2658:	f108 0808 	add.w	r8, r8, #8
   c265c:	db1e      	blt.n	c269c <__kernel_rem_pio2+0x2f4>
   c265e:	9e04      	ldr	r6, [sp, #16]
   c2660:	2400      	movs	r4, #0
   c2662:	2500      	movs	r5, #0
   c2664:	e001      	b.n	c266a <__kernel_rem_pio2+0x2c2>
   c2666:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
   c266a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
   c266e:	f7f1 fe93 	bl	b4398 <__aeabi_dmul>
   c2672:	4602      	mov	r2, r0
   c2674:	460b      	mov	r3, r1
   c2676:	4620      	mov	r0, r4
   c2678:	4629      	mov	r1, r5
   c267a:	f7f1 fcd7 	bl	b402c <__adddf3>
   c267e:	455e      	cmp	r6, fp
   c2680:	4604      	mov	r4, r0
   c2682:	460d      	mov	r5, r1
   c2684:	d1ef      	bne.n	c2666 <__kernel_rem_pio2+0x2be>
   c2686:	9b01      	ldr	r3, [sp, #4]
   c2688:	e8e3 4502 	strd	r4, r5, [r3], #8
   c268c:	9301      	str	r3, [sp, #4]
   c268e:	9b02      	ldr	r3, [sp, #8]
   c2690:	f109 0901 	add.w	r9, r9, #1
   c2694:	4599      	cmp	r9, r3
   c2696:	ddd4      	ble.n	c2642 <__kernel_rem_pio2+0x29a>
   c2698:	9301      	str	r3, [sp, #4]
   c269a:	e70c      	b.n	c24b6 <__kernel_rem_pio2+0x10e>
   c269c:	2400      	movs	r4, #0
   c269e:	2500      	movs	r5, #0
   c26a0:	e7f1      	b.n	c2686 <__kernel_rem_pio2+0x2de>
   c26a2:	bf00      	nop
   c26a4:	000c8ee8 	.word	0x000c8ee8
   c26a8:	2aaaaaab 	.word	0x2aaaaaab
   c26ac:	3e700000 	.word	0x3e700000
   c26b0:	41700000 	.word	0x41700000
   c26b4:	40200000 	.word	0x40200000
   c26b8:	d16b      	bne.n	c2792 <__kernel_rem_pio2+0x3ea>
   c26ba:	9b01      	ldr	r3, [sp, #4]
   c26bc:	aa0c      	add	r2, sp, #48	; 0x30
   c26be:	3b01      	subs	r3, #1
   c26c0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   c26c4:	15ed      	asrs	r5, r5, #23
   c26c6:	2d00      	cmp	r5, #0
   c26c8:	f77f af72 	ble.w	c25b0 <__kernel_rem_pio2+0x208>
   c26cc:	9b01      	ldr	r3, [sp, #4]
   c26ce:	2b00      	cmp	r3, #0
   c26d0:	f108 0801 	add.w	r8, r8, #1
   c26d4:	f340 81cb 	ble.w	c2a6e <__kernel_rem_pio2+0x6c6>
   c26d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   c26da:	2c00      	cmp	r4, #0
   c26dc:	d151      	bne.n	c2782 <__kernel_rem_pio2+0x3da>
   c26de:	9b01      	ldr	r3, [sp, #4]
   c26e0:	2b01      	cmp	r3, #1
   c26e2:	d020      	beq.n	c2726 <__kernel_rem_pio2+0x37e>
   c26e4:	ab0c      	add	r3, sp, #48	; 0x30
   c26e6:	2201      	movs	r2, #1
   c26e8:	f853 4f04 	ldr.w	r4, [r3, #4]!
   c26ec:	2c00      	cmp	r4, #0
   c26ee:	d04b      	beq.n	c2788 <__kernel_rem_pio2+0x3e0>
   c26f0:	1c53      	adds	r3, r2, #1
   c26f2:	a90c      	add	r1, sp, #48	; 0x30
   c26f4:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
   c26f8:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
   c26fc:	9901      	ldr	r1, [sp, #4]
   c26fe:	4299      	cmp	r1, r3
   c2700:	dd10      	ble.n	c2724 <__kernel_rem_pio2+0x37c>
   c2702:	aa0c      	add	r2, sp, #48	; 0x30
   c2704:	a80c      	add	r0, sp, #48	; 0x30
   c2706:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   c270a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   c270e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   c2712:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   c2716:	e000      	b.n	c271a <__kernel_rem_pio2+0x372>
   c2718:	681a      	ldr	r2, [r3, #0]
   c271a:	1a8a      	subs	r2, r1, r2
   c271c:	f843 2b04 	str.w	r2, [r3], #4
   c2720:	4283      	cmp	r3, r0
   c2722:	d1f9      	bne.n	c2718 <__kernel_rem_pio2+0x370>
   c2724:	2401      	movs	r4, #1
   c2726:	9b06      	ldr	r3, [sp, #24]
   c2728:	2b00      	cmp	r3, #0
   c272a:	dd0e      	ble.n	c274a <__kernel_rem_pio2+0x3a2>
   c272c:	2b01      	cmp	r3, #1
   c272e:	f000 816c 	beq.w	c2a0a <__kernel_rem_pio2+0x662>
   c2732:	2b02      	cmp	r3, #2
   c2734:	d109      	bne.n	c274a <__kernel_rem_pio2+0x3a2>
   c2736:	9b01      	ldr	r3, [sp, #4]
   c2738:	1e5a      	subs	r2, r3, #1
   c273a:	ab0c      	add	r3, sp, #48	; 0x30
   c273c:	a90c      	add	r1, sp, #48	; 0x30
   c273e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   c2742:	f3c3 0315 	ubfx	r3, r3, #0, #22
   c2746:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   c274a:	2d02      	cmp	r5, #2
   c274c:	f47f af30 	bne.w	c25b0 <__kernel_rem_pio2+0x208>
   c2750:	4632      	mov	r2, r6
   c2752:	463b      	mov	r3, r7
   c2754:	49b6      	ldr	r1, [pc, #728]	; (c2a30 <__kernel_rem_pio2+0x688>)
   c2756:	2000      	movs	r0, #0
   c2758:	f7f1 fc66 	bl	b4028 <__aeabi_dsub>
   c275c:	4606      	mov	r6, r0
   c275e:	460f      	mov	r7, r1
   c2760:	2c00      	cmp	r4, #0
   c2762:	f43f af25 	beq.w	c25b0 <__kernel_rem_pio2+0x208>
   c2766:	9806      	ldr	r0, [sp, #24]
   c2768:	ed9f 0bad 	vldr	d0, [pc, #692]	; c2a20 <__kernel_rem_pio2+0x678>
   c276c:	f7fe feec 	bl	c1548 <scalbn>
   c2770:	4630      	mov	r0, r6
   c2772:	4639      	mov	r1, r7
   c2774:	ec53 2b10 	vmov	r2, r3, d0
   c2778:	f7f1 fc56 	bl	b4028 <__aeabi_dsub>
   c277c:	4606      	mov	r6, r0
   c277e:	460f      	mov	r7, r1
   c2780:	e716      	b.n	c25b0 <__kernel_rem_pio2+0x208>
   c2782:	2301      	movs	r3, #1
   c2784:	2200      	movs	r2, #0
   c2786:	e7b4      	b.n	c26f2 <__kernel_rem_pio2+0x34a>
   c2788:	9901      	ldr	r1, [sp, #4]
   c278a:	3201      	adds	r2, #1
   c278c:	428a      	cmp	r2, r1
   c278e:	d1ab      	bne.n	c26e8 <__kernel_rem_pio2+0x340>
   c2790:	e7c9      	b.n	c2726 <__kernel_rem_pio2+0x37e>
   c2792:	4ba8      	ldr	r3, [pc, #672]	; (c2a34 <__kernel_rem_pio2+0x68c>)
   c2794:	2200      	movs	r2, #0
   c2796:	f7f2 f885 	bl	b48a4 <__aeabi_dcmpge>
   c279a:	2800      	cmp	r0, #0
   c279c:	f040 8150 	bne.w	c2a40 <__kernel_rem_pio2+0x698>
   c27a0:	4605      	mov	r5, r0
   c27a2:	e705      	b.n	c25b0 <__kernel_rem_pio2+0x208>
   c27a4:	9b01      	ldr	r3, [sp, #4]
   c27a6:	3301      	adds	r3, #1
   c27a8:	4699      	mov	r9, r3
   c27aa:	9302      	str	r3, [sp, #8]
   c27ac:	e734      	b.n	c2618 <__kernel_rem_pio2+0x270>
   c27ae:	2400      	movs	r4, #0
   c27b0:	2500      	movs	r5, #0
   c27b2:	e667      	b.n	c2484 <__kernel_rem_pio2+0xdc>
   c27b4:	9b06      	ldr	r3, [sp, #24]
   c27b6:	9503      	str	r5, [sp, #12]
   c27b8:	f1a3 0218 	sub.w	r2, r3, #24
   c27bc:	ab0c      	add	r3, sp, #48	; 0x30
   c27be:	f8cd 801c 	str.w	r8, [sp, #28]
   c27c2:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
   c27c6:	9206      	str	r2, [sp, #24]
   c27c8:	b973      	cbnz	r3, c27e8 <__kernel_rem_pio2+0x440>
   c27ca:	9b01      	ldr	r3, [sp, #4]
   c27cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   c27d0:	3b02      	subs	r3, #2
   c27d2:	a90c      	add	r1, sp, #48	; 0x30
   c27d4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   c27d8:	f853 1904 	ldr.w	r1, [r3], #-4
   c27dc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   c27e0:	3a18      	subs	r2, #24
   c27e2:	2900      	cmp	r1, #0
   c27e4:	d0f8      	beq.n	c27d8 <__kernel_rem_pio2+0x430>
   c27e6:	9206      	str	r2, [sp, #24]
   c27e8:	ed9f 0b8d 	vldr	d0, [pc, #564]	; c2a20 <__kernel_rem_pio2+0x678>
   c27ec:	9806      	ldr	r0, [sp, #24]
   c27ee:	f7fe feab 	bl	c1548 <scalbn>
   c27f2:	f1ba 0f00 	cmp.w	sl, #0
   c27f6:	ec55 4b10 	vmov	r4, r5, d0
   c27fa:	f2c0 81d9 	blt.w	c2bb0 <__kernel_rem_pio2+0x808>
   c27fe:	ab70      	add	r3, sp, #448	; 0x1c0
   c2800:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
   c2804:	aa0c      	add	r2, sp, #48	; 0x30
   c2806:	f10a 0301 	add.w	r3, sl, #1
   c280a:	9306      	str	r3, [sp, #24]
   c280c:	eb02 0683 	add.w	r6, r2, r3, lsl #2
   c2810:	f8df 9224 	ldr.w	r9, [pc, #548]	; c2a38 <__kernel_rem_pio2+0x690>
   c2814:	ea4f 03ca 	mov.w	r3, sl, lsl #3
   c2818:	9304      	str	r3, [sp, #16]
   c281a:	f10b 0708 	add.w	r7, fp, #8
   c281e:	f04f 0800 	mov.w	r8, #0
   c2822:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   c2826:	f7f1 fd4d 	bl	b42c4 <__aeabi_i2d>
   c282a:	4622      	mov	r2, r4
   c282c:	462b      	mov	r3, r5
   c282e:	f7f1 fdb3 	bl	b4398 <__aeabi_dmul>
   c2832:	464b      	mov	r3, r9
   c2834:	e967 0102 	strd	r0, r1, [r7, #-8]!
   c2838:	4642      	mov	r2, r8
   c283a:	4620      	mov	r0, r4
   c283c:	4629      	mov	r1, r5
   c283e:	f7f1 fdab 	bl	b4398 <__aeabi_dmul>
   c2842:	ab0c      	add	r3, sp, #48	; 0x30
   c2844:	429e      	cmp	r6, r3
   c2846:	4604      	mov	r4, r0
   c2848:	460d      	mov	r5, r1
   c284a:	d1ea      	bne.n	c2822 <__kernel_rem_pio2+0x47a>
   c284c:	ab48      	add	r3, sp, #288	; 0x120
   c284e:	e9cd 3a01 	strd	r3, sl, [sp, #4]
   c2852:	f8dd a014 	ldr.w	sl, [sp, #20]
   c2856:	f1ba 0f00 	cmp.w	sl, #0
   c285a:	f04f 0900 	mov.w	r9, #0
   c285e:	db2c      	blt.n	c28ba <__kernel_rem_pio2+0x512>
   c2860:	a371      	add	r3, pc, #452	; (adr r3, c2a28 <__kernel_rem_pio2+0x680>)
   c2862:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2866:	f8df 81d4 	ldr.w	r8, [pc, #468]	; c2a3c <__kernel_rem_pio2+0x694>
   c286a:	465f      	mov	r7, fp
   c286c:	2600      	movs	r6, #0
   c286e:	2400      	movs	r4, #0
   c2870:	2500      	movs	r5, #0
   c2872:	e003      	b.n	c287c <__kernel_rem_pio2+0x4d4>
   c2874:	45b1      	cmp	r9, r6
   c2876:	db10      	blt.n	c289a <__kernel_rem_pio2+0x4f2>
   c2878:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   c287c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
   c2880:	f7f1 fd8a 	bl	b4398 <__aeabi_dmul>
   c2884:	4602      	mov	r2, r0
   c2886:	460b      	mov	r3, r1
   c2888:	4620      	mov	r0, r4
   c288a:	4629      	mov	r1, r5
   c288c:	f7f1 fbce 	bl	b402c <__adddf3>
   c2890:	3601      	adds	r6, #1
   c2892:	45b2      	cmp	sl, r6
   c2894:	4604      	mov	r4, r0
   c2896:	460d      	mov	r5, r1
   c2898:	daec      	bge.n	c2874 <__kernel_rem_pio2+0x4cc>
   c289a:	9b01      	ldr	r3, [sp, #4]
   c289c:	9a02      	ldr	r2, [sp, #8]
   c289e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   c28a2:	454a      	cmp	r2, r9
   c28a4:	e9c3 4500 	strd	r4, r5, [r3]
   c28a8:	f1ab 0b08 	sub.w	fp, fp, #8
   c28ac:	f109 0301 	add.w	r3, r9, #1
   c28b0:	d006      	beq.n	c28c0 <__kernel_rem_pio2+0x518>
   c28b2:	f1ba 0f00 	cmp.w	sl, #0
   c28b6:	4699      	mov	r9, r3
   c28b8:	dad2      	bge.n	c2860 <__kernel_rem_pio2+0x4b8>
   c28ba:	2400      	movs	r4, #0
   c28bc:	2500      	movs	r5, #0
   c28be:	e7ec      	b.n	c289a <__kernel_rem_pio2+0x4f2>
   c28c0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   c28c2:	f8dd a008 	ldr.w	sl, [sp, #8]
   c28c6:	2b02      	cmp	r3, #2
   c28c8:	dc1e      	bgt.n	c2908 <__kernel_rem_pio2+0x560>
   c28ca:	2b00      	cmp	r3, #0
   c28cc:	f300 8107 	bgt.w	c2ade <__kernel_rem_pio2+0x736>
   c28d0:	d113      	bne.n	c28fa <__kernel_rem_pio2+0x552>
   c28d2:	9c04      	ldr	r4, [sp, #16]
   c28d4:	9d01      	ldr	r5, [sp, #4]
   c28d6:	3408      	adds	r4, #8
   c28d8:	442c      	add	r4, r5
   c28da:	2000      	movs	r0, #0
   c28dc:	2100      	movs	r1, #0
   c28de:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   c28e2:	f7f1 fba3 	bl	b402c <__adddf3>
   c28e6:	42a5      	cmp	r5, r4
   c28e8:	d1f9      	bne.n	c28de <__kernel_rem_pio2+0x536>
   c28ea:	9b03      	ldr	r3, [sp, #12]
   c28ec:	b113      	cbz	r3, c28f4 <__kernel_rem_pio2+0x54c>
   c28ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c28f2:	4619      	mov	r1, r3
   c28f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c28f6:	e9c3 0100 	strd	r0, r1, [r3]
   c28fa:	9b07      	ldr	r3, [sp, #28]
   c28fc:	f003 0007 	and.w	r0, r3, #7
   c2900:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   c2904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2908:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   c290a:	2b03      	cmp	r3, #3
   c290c:	d1f5      	bne.n	c28fa <__kernel_rem_pio2+0x552>
   c290e:	f1ba 0f00 	cmp.w	sl, #0
   c2912:	f000 8169 	beq.w	c2be8 <__kernel_rem_pio2+0x840>
   c2916:	9a01      	ldr	r2, [sp, #4]
   c2918:	9b04      	ldr	r3, [sp, #16]
   c291a:	18d3      	adds	r3, r2, r3
   c291c:	e9d3 4500 	ldrd	r4, r5, [r3]
   c2920:	eb02 0bca 	add.w	fp, r2, sl, lsl #3
   c2924:	e97b 6702 	ldrd	r6, r7, [fp, #-8]!
   c2928:	4620      	mov	r0, r4
   c292a:	4629      	mov	r1, r5
   c292c:	4632      	mov	r2, r6
   c292e:	463b      	mov	r3, r7
   c2930:	f7f1 fb7c 	bl	b402c <__adddf3>
   c2934:	46a0      	mov	r8, r4
   c2936:	46a9      	mov	r9, r5
   c2938:	4604      	mov	r4, r0
   c293a:	460d      	mov	r5, r1
   c293c:	4622      	mov	r2, r4
   c293e:	462b      	mov	r3, r5
   c2940:	4630      	mov	r0, r6
   c2942:	4639      	mov	r1, r7
   c2944:	f7f1 fb70 	bl	b4028 <__aeabi_dsub>
   c2948:	464b      	mov	r3, r9
   c294a:	4642      	mov	r2, r8
   c294c:	f7f1 fb6e 	bl	b402c <__adddf3>
   c2950:	9b01      	ldr	r3, [sp, #4]
   c2952:	455b      	cmp	r3, fp
   c2954:	e9cb 0102 	strd	r0, r1, [fp, #8]
   c2958:	e9cb 4500 	strd	r4, r5, [fp]
   c295c:	d1e2      	bne.n	c2924 <__kernel_rem_pio2+0x57c>
   c295e:	f1ba 0f01 	cmp.w	sl, #1
   c2962:	f340 8141 	ble.w	c2be8 <__kernel_rem_pio2+0x840>
   c2966:	9a01      	ldr	r2, [sp, #4]
   c2968:	9b04      	ldr	r3, [sp, #16]
   c296a:	f10a 5a00 	add.w	sl, sl, #536870912	; 0x20000000
   c296e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   c2972:	4413      	add	r3, r2
   c2974:	ea4f 01ca 	mov.w	r1, sl, lsl #3
   c2978:	e9d3 4500 	ldrd	r4, r5, [r3]
   c297c:	f101 0a08 	add.w	sl, r1, #8
   c2980:	9102      	str	r1, [sp, #8]
   c2982:	4492      	add	sl, r2
   c2984:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
   c2988:	e97a 6702 	ldrd	r6, r7, [sl, #-8]!
   c298c:	4620      	mov	r0, r4
   c298e:	4629      	mov	r1, r5
   c2990:	4632      	mov	r2, r6
   c2992:	463b      	mov	r3, r7
   c2994:	f7f1 fb4a 	bl	b402c <__adddf3>
   c2998:	46a0      	mov	r8, r4
   c299a:	46a9      	mov	r9, r5
   c299c:	4604      	mov	r4, r0
   c299e:	460d      	mov	r5, r1
   c29a0:	4622      	mov	r2, r4
   c29a2:	462b      	mov	r3, r5
   c29a4:	4630      	mov	r0, r6
   c29a6:	4639      	mov	r1, r7
   c29a8:	f7f1 fb3e 	bl	b4028 <__aeabi_dsub>
   c29ac:	4642      	mov	r2, r8
   c29ae:	464b      	mov	r3, r9
   c29b0:	f7f1 fb3c 	bl	b402c <__adddf3>
   c29b4:	45d3      	cmp	fp, sl
   c29b6:	e9ca 0102 	strd	r0, r1, [sl, #8]
   c29ba:	e9ca 4500 	strd	r4, r5, [sl]
   c29be:	d1e3      	bne.n	c2988 <__kernel_rem_pio2+0x5e0>
   c29c0:	9c02      	ldr	r4, [sp, #8]
   c29c2:	9b01      	ldr	r3, [sp, #4]
   c29c4:	3410      	adds	r4, #16
   c29c6:	441c      	add	r4, r3
   c29c8:	f103 0510 	add.w	r5, r3, #16
   c29cc:	2000      	movs	r0, #0
   c29ce:	2100      	movs	r1, #0
   c29d0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   c29d4:	f7f1 fb2a 	bl	b402c <__adddf3>
   c29d8:	42a5      	cmp	r5, r4
   c29da:	d1f9      	bne.n	c29d0 <__kernel_rem_pio2+0x628>
   c29dc:	9b03      	ldr	r3, [sp, #12]
   c29de:	2b00      	cmp	r3, #0
   c29e0:	f040 80bb 	bne.w	c2b5a <__kernel_rem_pio2+0x7b2>
   c29e4:	9d01      	ldr	r5, [sp, #4]
   c29e6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   c29e8:	e9d5 2300 	ldrd	r2, r3, [r5]
   c29ec:	e9c4 2300 	strd	r2, r3, [r4]
   c29f0:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   c29f4:	e9c4 2302 	strd	r2, r3, [r4, #8]
   c29f8:	9b07      	ldr	r3, [sp, #28]
   c29fa:	e9c4 0104 	strd	r0, r1, [r4, #16]
   c29fe:	f003 0007 	and.w	r0, r3, #7
   c2a02:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   c2a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2a0a:	9b01      	ldr	r3, [sp, #4]
   c2a0c:	1e5a      	subs	r2, r3, #1
   c2a0e:	ab0c      	add	r3, sp, #48	; 0x30
   c2a10:	a90c      	add	r1, sp, #48	; 0x30
   c2a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   c2a16:	f3c3 0316 	ubfx	r3, r3, #0, #23
   c2a1a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   c2a1e:	e694      	b.n	c274a <__kernel_rem_pio2+0x3a2>
   c2a20:	00000000 	.word	0x00000000
   c2a24:	3ff00000 	.word	0x3ff00000
   c2a28:	40000000 	.word	0x40000000
   c2a2c:	3ff921fb 	.word	0x3ff921fb
   c2a30:	3ff00000 	.word	0x3ff00000
   c2a34:	3fe00000 	.word	0x3fe00000
   c2a38:	3e700000 	.word	0x3e700000
   c2a3c:	000c8eb0 	.word	0x000c8eb0
   c2a40:	9b01      	ldr	r3, [sp, #4]
   c2a42:	2b00      	cmp	r3, #0
   c2a44:	f108 0801 	add.w	r8, r8, #1
   c2a48:	bfc8      	it	gt
   c2a4a:	2502      	movgt	r5, #2
   c2a4c:	f73f ae44 	bgt.w	c26d8 <__kernel_rem_pio2+0x330>
   c2a50:	4632      	mov	r2, r6
   c2a52:	463b      	mov	r3, r7
   c2a54:	4966      	ldr	r1, [pc, #408]	; (c2bf0 <__kernel_rem_pio2+0x848>)
   c2a56:	2000      	movs	r0, #0
   c2a58:	f7f1 fae6 	bl	b4028 <__aeabi_dsub>
   c2a5c:	2502      	movs	r5, #2
   c2a5e:	4606      	mov	r6, r0
   c2a60:	460f      	mov	r7, r1
   c2a62:	e5a5      	b.n	c25b0 <__kernel_rem_pio2+0x208>
   c2a64:	2100      	movs	r1, #0
   c2a66:	f06f 0317 	mvn.w	r3, #23
   c2a6a:	9107      	str	r1, [sp, #28]
   c2a6c:	e4bb      	b.n	c23e6 <__kernel_rem_pio2+0x3e>
   c2a6e:	2400      	movs	r4, #0
   c2a70:	e659      	b.n	c2726 <__kernel_rem_pio2+0x37e>
   c2a72:	ec47 6b10 	vmov	d0, r6, r7
   c2a76:	9e06      	ldr	r6, [sp, #24]
   c2a78:	9503      	str	r5, [sp, #12]
   c2a7a:	4270      	negs	r0, r6
   c2a7c:	f8cd 801c 	str.w	r8, [sp, #28]
   c2a80:	f7fe fd62 	bl	c1548 <scalbn>
   c2a84:	ec55 4b10 	vmov	r4, r5, d0
   c2a88:	4b5a      	ldr	r3, [pc, #360]	; (c2bf4 <__kernel_rem_pio2+0x84c>)
   c2a8a:	ee10 0a10 	vmov	r0, s0
   c2a8e:	2200      	movs	r2, #0
   c2a90:	4629      	mov	r1, r5
   c2a92:	f7f1 ff07 	bl	b48a4 <__aeabi_dcmpge>
   c2a96:	2800      	cmp	r0, #0
   c2a98:	d055      	beq.n	c2b46 <__kernel_rem_pio2+0x79e>
   c2a9a:	4b57      	ldr	r3, [pc, #348]	; (c2bf8 <__kernel_rem_pio2+0x850>)
   c2a9c:	9f01      	ldr	r7, [sp, #4]
   c2a9e:	2200      	movs	r2, #0
   c2aa0:	3618      	adds	r6, #24
   c2aa2:	4620      	mov	r0, r4
   c2aa4:	4629      	mov	r1, r5
   c2aa6:	9606      	str	r6, [sp, #24]
   c2aa8:	f7f1 fc76 	bl	b4398 <__aeabi_dmul>
   c2aac:	f7f1 ff24 	bl	b48f8 <__aeabi_d2iz>
   c2ab0:	4606      	mov	r6, r0
   c2ab2:	f7f1 fc07 	bl	b42c4 <__aeabi_i2d>
   c2ab6:	4b4f      	ldr	r3, [pc, #316]	; (c2bf4 <__kernel_rem_pio2+0x84c>)
   c2ab8:	2200      	movs	r2, #0
   c2aba:	f7f1 fc6d 	bl	b4398 <__aeabi_dmul>
   c2abe:	460b      	mov	r3, r1
   c2ac0:	4602      	mov	r2, r0
   c2ac2:	4629      	mov	r1, r5
   c2ac4:	4620      	mov	r0, r4
   c2ac6:	f7f1 faaf 	bl	b4028 <__aeabi_dsub>
   c2aca:	f7f1 ff15 	bl	b48f8 <__aeabi_d2iz>
   c2ace:	f107 0a01 	add.w	sl, r7, #1
   c2ad2:	ab0c      	add	r3, sp, #48	; 0x30
   c2ad4:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
   c2ad8:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
   c2adc:	e684      	b.n	c27e8 <__kernel_rem_pio2+0x440>
   c2ade:	9d01      	ldr	r5, [sp, #4]
   c2ae0:	9a06      	ldr	r2, [sp, #24]
   c2ae2:	2000      	movs	r0, #0
   c2ae4:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
   c2ae8:	2100      	movs	r1, #0
   c2aea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   c2aee:	f7f1 fa9d 	bl	b402c <__adddf3>
   c2af2:	42a5      	cmp	r5, r4
   c2af4:	d1f9      	bne.n	c2aea <__kernel_rem_pio2+0x742>
   c2af6:	9b03      	ldr	r3, [sp, #12]
   c2af8:	2b00      	cmp	r3, #0
   c2afa:	d149      	bne.n	c2b90 <__kernel_rem_pio2+0x7e8>
   c2afc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c2afe:	e9c3 0100 	strd	r0, r1, [r3]
   c2b02:	460b      	mov	r3, r1
   c2b04:	9901      	ldr	r1, [sp, #4]
   c2b06:	4602      	mov	r2, r0
   c2b08:	e9d1 0100 	ldrd	r0, r1, [r1]
   c2b0c:	f7f1 fa8c 	bl	b4028 <__aeabi_dsub>
   c2b10:	f1ba 0f00 	cmp.w	sl, #0
   c2b14:	dd0d      	ble.n	c2b32 <__kernel_rem_pio2+0x78a>
   c2b16:	ad4a      	add	r5, sp, #296	; 0x128
   c2b18:	2401      	movs	r4, #1
   c2b1a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   c2b1e:	3401      	adds	r4, #1
   c2b20:	f7f1 fa84 	bl	b402c <__adddf3>
   c2b24:	45a2      	cmp	sl, r4
   c2b26:	daf8      	bge.n	c2b1a <__kernel_rem_pio2+0x772>
   c2b28:	9b03      	ldr	r3, [sp, #12]
   c2b2a:	b113      	cbz	r3, c2b32 <__kernel_rem_pio2+0x78a>
   c2b2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c2b30:	4619      	mov	r1, r3
   c2b32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c2b34:	e9c3 0102 	strd	r0, r1, [r3, #8]
   c2b38:	9b07      	ldr	r3, [sp, #28]
   c2b3a:	f003 0007 	and.w	r0, r3, #7
   c2b3e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   c2b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2b46:	4620      	mov	r0, r4
   c2b48:	4629      	mov	r1, r5
   c2b4a:	f7f1 fed5 	bl	b48f8 <__aeabi_d2iz>
   c2b4e:	9b01      	ldr	r3, [sp, #4]
   c2b50:	aa0c      	add	r2, sp, #48	; 0x30
   c2b52:	469a      	mov	sl, r3
   c2b54:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   c2b58:	e646      	b.n	c27e8 <__kernel_rem_pio2+0x440>
   c2b5a:	9b01      	ldr	r3, [sp, #4]
   c2b5c:	461e      	mov	r6, r3
   c2b5e:	685c      	ldr	r4, [r3, #4]
   c2b60:	68dd      	ldr	r5, [r3, #12]
   c2b62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c2b66:	990b      	ldr	r1, [sp, #44]	; 0x2c
   c2b68:	4602      	mov	r2, r0
   c2b6a:	e9c1 2304 	strd	r2, r3, [r1, #16]
   c2b6e:	6832      	ldr	r2, [r6, #0]
   c2b70:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   c2b74:	e9c1 2300 	strd	r2, r3, [r1]
   c2b78:	68b2      	ldr	r2, [r6, #8]
   c2b7a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   c2b7e:	e9c1 2302 	strd	r2, r3, [r1, #8]
   c2b82:	9b07      	ldr	r3, [sp, #28]
   c2b84:	f003 0007 	and.w	r0, r3, #7
   c2b88:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   c2b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2b90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c2b92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c2b96:	6053      	str	r3, [r2, #4]
   c2b98:	460b      	mov	r3, r1
   c2b9a:	9901      	ldr	r1, [sp, #4]
   c2b9c:	6010      	str	r0, [r2, #0]
   c2b9e:	4602      	mov	r2, r0
   c2ba0:	e9d1 0100 	ldrd	r0, r1, [r1]
   c2ba4:	f7f1 fa40 	bl	b4028 <__aeabi_dsub>
   c2ba8:	f1ba 0f00 	cmp.w	sl, #0
   c2bac:	dcb3      	bgt.n	c2b16 <__kernel_rem_pio2+0x76e>
   c2bae:	e7bd      	b.n	c2b2c <__kernel_rem_pio2+0x784>
   c2bb0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   c2bb2:	2b02      	cmp	r3, #2
   c2bb4:	dc0a      	bgt.n	c2bcc <__kernel_rem_pio2+0x824>
   c2bb6:	2b00      	cmp	r3, #0
   c2bb8:	dc11      	bgt.n	c2bde <__kernel_rem_pio2+0x836>
   c2bba:	f47f ae9e 	bne.w	c28fa <__kernel_rem_pio2+0x552>
   c2bbe:	2000      	movs	r0, #0
   c2bc0:	2100      	movs	r1, #0
   c2bc2:	e692      	b.n	c28ea <__kernel_rem_pio2+0x542>
   c2bc4:	9b08      	ldr	r3, [sp, #32]
   c2bc6:	00db      	lsls	r3, r3, #3
   c2bc8:	9302      	str	r3, [sp, #8]
   c2bca:	e464      	b.n	c2496 <__kernel_rem_pio2+0xee>
   c2bcc:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   c2bce:	2b03      	cmp	r3, #3
   c2bd0:	f47f ae93 	bne.w	c28fa <__kernel_rem_pio2+0x552>
   c2bd4:	ab48      	add	r3, sp, #288	; 0x120
   c2bd6:	2000      	movs	r0, #0
   c2bd8:	2100      	movs	r1, #0
   c2bda:	9301      	str	r3, [sp, #4]
   c2bdc:	e6fe      	b.n	c29dc <__kernel_rem_pio2+0x634>
   c2bde:	ab48      	add	r3, sp, #288	; 0x120
   c2be0:	2000      	movs	r0, #0
   c2be2:	2100      	movs	r1, #0
   c2be4:	9301      	str	r3, [sp, #4]
   c2be6:	e786      	b.n	c2af6 <__kernel_rem_pio2+0x74e>
   c2be8:	2000      	movs	r0, #0
   c2bea:	2100      	movs	r1, #0
   c2bec:	e6f6      	b.n	c29dc <__kernel_rem_pio2+0x634>
   c2bee:	bf00      	nop
   c2bf0:	3ff00000 	.word	0x3ff00000
   c2bf4:	41700000 	.word	0x41700000
   c2bf8:	3e700000 	.word	0x3e700000
   c2bfc:	00000000 	.word	0x00000000

000c2c00 <__kernel_sin>:
   c2c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2c04:	ec55 4b10 	vmov	r4, r5, d0
   c2c08:	b085      	sub	sp, #20
   c2c0a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   c2c0e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   c2c12:	ed8d 1b00 	vstr	d1, [sp]
   c2c16:	9003      	str	r0, [sp, #12]
   c2c18:	da07      	bge.n	c2c2a <__kernel_sin+0x2a>
   c2c1a:	ee10 0a10 	vmov	r0, s0
   c2c1e:	4629      	mov	r1, r5
   c2c20:	f7f1 fe6a 	bl	b48f8 <__aeabi_d2iz>
   c2c24:	2800      	cmp	r0, #0
   c2c26:	f000 8089 	beq.w	c2d3c <__kernel_sin+0x13c>
   c2c2a:	4622      	mov	r2, r4
   c2c2c:	462b      	mov	r3, r5
   c2c2e:	4620      	mov	r0, r4
   c2c30:	4629      	mov	r1, r5
   c2c32:	f7f1 fbb1 	bl	b4398 <__aeabi_dmul>
   c2c36:	4606      	mov	r6, r0
   c2c38:	460f      	mov	r7, r1
   c2c3a:	4632      	mov	r2, r6
   c2c3c:	463b      	mov	r3, r7
   c2c3e:	4620      	mov	r0, r4
   c2c40:	4629      	mov	r1, r5
   c2c42:	f7f1 fba9 	bl	b4398 <__aeabi_dmul>
   c2c46:	a343      	add	r3, pc, #268	; (adr r3, c2d54 <__kernel_sin+0x154>)
   c2c48:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2c4c:	4682      	mov	sl, r0
   c2c4e:	468b      	mov	fp, r1
   c2c50:	4630      	mov	r0, r6
   c2c52:	4639      	mov	r1, r7
   c2c54:	f7f1 fba0 	bl	b4398 <__aeabi_dmul>
   c2c58:	a340      	add	r3, pc, #256	; (adr r3, c2d5c <__kernel_sin+0x15c>)
   c2c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2c5e:	f7f1 f9e3 	bl	b4028 <__aeabi_dsub>
   c2c62:	4632      	mov	r2, r6
   c2c64:	463b      	mov	r3, r7
   c2c66:	f7f1 fb97 	bl	b4398 <__aeabi_dmul>
   c2c6a:	a33e      	add	r3, pc, #248	; (adr r3, c2d64 <__kernel_sin+0x164>)
   c2c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2c70:	f7f1 f9dc 	bl	b402c <__adddf3>
   c2c74:	4632      	mov	r2, r6
   c2c76:	463b      	mov	r3, r7
   c2c78:	f7f1 fb8e 	bl	b4398 <__aeabi_dmul>
   c2c7c:	a33b      	add	r3, pc, #236	; (adr r3, c2d6c <__kernel_sin+0x16c>)
   c2c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2c82:	f7f1 f9d1 	bl	b4028 <__aeabi_dsub>
   c2c86:	4632      	mov	r2, r6
   c2c88:	463b      	mov	r3, r7
   c2c8a:	f7f1 fb85 	bl	b4398 <__aeabi_dmul>
   c2c8e:	a339      	add	r3, pc, #228	; (adr r3, c2d74 <__kernel_sin+0x174>)
   c2c90:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2c94:	f7f1 f9ca 	bl	b402c <__adddf3>
   c2c98:	9b03      	ldr	r3, [sp, #12]
   c2c9a:	4680      	mov	r8, r0
   c2c9c:	4689      	mov	r9, r1
   c2c9e:	b3ab      	cbz	r3, c2d0c <__kernel_sin+0x10c>
   c2ca0:	e9dd 0100 	ldrd	r0, r1, [sp]
   c2ca4:	4b2a      	ldr	r3, [pc, #168]	; (c2d50 <__kernel_sin+0x150>)
   c2ca6:	2200      	movs	r2, #0
   c2ca8:	f7f1 fb76 	bl	b4398 <__aeabi_dmul>
   c2cac:	4642      	mov	r2, r8
   c2cae:	464b      	mov	r3, r9
   c2cb0:	4680      	mov	r8, r0
   c2cb2:	4689      	mov	r9, r1
   c2cb4:	4650      	mov	r0, sl
   c2cb6:	4659      	mov	r1, fp
   c2cb8:	f7f1 fb6e 	bl	b4398 <__aeabi_dmul>
   c2cbc:	4602      	mov	r2, r0
   c2cbe:	460b      	mov	r3, r1
   c2cc0:	4640      	mov	r0, r8
   c2cc2:	4649      	mov	r1, r9
   c2cc4:	f7f1 f9b0 	bl	b4028 <__aeabi_dsub>
   c2cc8:	4632      	mov	r2, r6
   c2cca:	463b      	mov	r3, r7
   c2ccc:	f7f1 fb64 	bl	b4398 <__aeabi_dmul>
   c2cd0:	e9dd 2300 	ldrd	r2, r3, [sp]
   c2cd4:	f7f1 f9a8 	bl	b4028 <__aeabi_dsub>
   c2cd8:	a31b      	add	r3, pc, #108	; (adr r3, c2d48 <__kernel_sin+0x148>)
   c2cda:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2cde:	4606      	mov	r6, r0
   c2ce0:	460f      	mov	r7, r1
   c2ce2:	4650      	mov	r0, sl
   c2ce4:	4659      	mov	r1, fp
   c2ce6:	f7f1 fb57 	bl	b4398 <__aeabi_dmul>
   c2cea:	4602      	mov	r2, r0
   c2cec:	460b      	mov	r3, r1
   c2cee:	4630      	mov	r0, r6
   c2cf0:	4639      	mov	r1, r7
   c2cf2:	f7f1 f99b 	bl	b402c <__adddf3>
   c2cf6:	4602      	mov	r2, r0
   c2cf8:	460b      	mov	r3, r1
   c2cfa:	4620      	mov	r0, r4
   c2cfc:	4629      	mov	r1, r5
   c2cfe:	f7f1 f993 	bl	b4028 <__aeabi_dsub>
   c2d02:	ec41 0b10 	vmov	d0, r0, r1
   c2d06:	b005      	add	sp, #20
   c2d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2d0c:	4602      	mov	r2, r0
   c2d0e:	460b      	mov	r3, r1
   c2d10:	4630      	mov	r0, r6
   c2d12:	4639      	mov	r1, r7
   c2d14:	f7f1 fb40 	bl	b4398 <__aeabi_dmul>
   c2d18:	a30b      	add	r3, pc, #44	; (adr r3, c2d48 <__kernel_sin+0x148>)
   c2d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2d1e:	f7f1 f983 	bl	b4028 <__aeabi_dsub>
   c2d22:	4652      	mov	r2, sl
   c2d24:	465b      	mov	r3, fp
   c2d26:	f7f1 fb37 	bl	b4398 <__aeabi_dmul>
   c2d2a:	4622      	mov	r2, r4
   c2d2c:	462b      	mov	r3, r5
   c2d2e:	f7f1 f97d 	bl	b402c <__adddf3>
   c2d32:	ec41 0b10 	vmov	d0, r0, r1
   c2d36:	b005      	add	sp, #20
   c2d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2d3c:	ec45 4b10 	vmov	d0, r4, r5
   c2d40:	b005      	add	sp, #20
   c2d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2d46:	bf00      	nop
   c2d48:	55555549 	.word	0x55555549
   c2d4c:	3fc55555 	.word	0x3fc55555
   c2d50:	3fe00000 	.word	0x3fe00000
   c2d54:	5acfd57c 	.word	0x5acfd57c
   c2d58:	3de5d93a 	.word	0x3de5d93a
   c2d5c:	8a2b9ceb 	.word	0x8a2b9ceb
   c2d60:	3e5ae5e6 	.word	0x3e5ae5e6
   c2d64:	57b1fe7d 	.word	0x57b1fe7d
   c2d68:	3ec71de3 	.word	0x3ec71de3
   c2d6c:	19c161d5 	.word	0x19c161d5
   c2d70:	3f2a01a0 	.word	0x3f2a01a0
   c2d74:	1110f8a6 	.word	0x1110f8a6
   c2d78:	3f811111 	.word	0x3f811111
   c2d7c:	00000000 	.word	0x00000000

000c2d80 <__kernel_tan>:
   c2d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2d84:	ed2d 8b04 	vpush	{d8-d9}
   c2d88:	ec59 8b10 	vmov	r8, r9, d0
   c2d8c:	4bc2      	ldr	r3, [pc, #776]	; (c3098 <__kernel_tan+0x318>)
   c2d8e:	b085      	sub	sp, #20
   c2d90:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
   c2d94:	429e      	cmp	r6, r3
   c2d96:	ed8d 1b00 	vstr	d1, [sp]
   c2d9a:	4607      	mov	r7, r0
   c2d9c:	f8cd 900c 	str.w	r9, [sp, #12]
   c2da0:	dc1d      	bgt.n	c2dde <__kernel_tan+0x5e>
   c2da2:	ee10 0a10 	vmov	r0, s0
   c2da6:	4649      	mov	r1, r9
   c2da8:	f7f1 fda6 	bl	b48f8 <__aeabi_d2iz>
   c2dac:	2800      	cmp	r0, #0
   c2dae:	d142      	bne.n	c2e36 <__kernel_tan+0xb6>
   c2db0:	1c7b      	adds	r3, r7, #1
   c2db2:	4642      	mov	r2, r8
   c2db4:	4313      	orrs	r3, r2
   c2db6:	4333      	orrs	r3, r6
   c2db8:	f000 81be 	beq.w	c3138 <__kernel_tan+0x3b8>
   c2dbc:	2f01      	cmp	r7, #1
   c2dbe:	f000 81c8 	beq.w	c3152 <__kernel_tan+0x3d2>
   c2dc2:	464b      	mov	r3, r9
   c2dc4:	49b5      	ldr	r1, [pc, #724]	; (c309c <__kernel_tan+0x31c>)
   c2dc6:	2000      	movs	r0, #0
   c2dc8:	f7f1 fc10 	bl	b45ec <__aeabi_ddiv>
   c2dcc:	4604      	mov	r4, r0
   c2dce:	460d      	mov	r5, r1
   c2dd0:	ec45 4b10 	vmov	d0, r4, r5
   c2dd4:	b005      	add	sp, #20
   c2dd6:	ecbd 8b04 	vpop	{d8-d9}
   c2dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2dde:	4bb0      	ldr	r3, [pc, #704]	; (c30a0 <__kernel_tan+0x320>)
   c2de0:	429e      	cmp	r6, r3
   c2de2:	dd28      	ble.n	c2e36 <__kernel_tan+0xb6>
   c2de4:	9b03      	ldr	r3, [sp, #12]
   c2de6:	2b00      	cmp	r3, #0
   c2de8:	da0b      	bge.n	c2e02 <__kernel_tan+0x82>
   c2dea:	e9dd 0100 	ldrd	r0, r1, [sp]
   c2dee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   c2df2:	4699      	mov	r9, r3
   c2df4:	4602      	mov	r2, r0
   c2df6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c2dfa:	e9cd 2300 	strd	r2, r3, [sp]
   c2dfe:	ee10 8a10 	vmov	r8, s0
   c2e02:	4642      	mov	r2, r8
   c2e04:	464b      	mov	r3, r9
   c2e06:	a184      	add	r1, pc, #528	; (adr r1, c3018 <__kernel_tan+0x298>)
   c2e08:	e9d1 0100 	ldrd	r0, r1, [r1]
   c2e0c:	f7f1 f90c 	bl	b4028 <__aeabi_dsub>
   c2e10:	e9dd 2300 	ldrd	r2, r3, [sp]
   c2e14:	4604      	mov	r4, r0
   c2e16:	460d      	mov	r5, r1
   c2e18:	a181      	add	r1, pc, #516	; (adr r1, c3020 <__kernel_tan+0x2a0>)
   c2e1a:	e9d1 0100 	ldrd	r0, r1, [r1]
   c2e1e:	f7f1 f903 	bl	b4028 <__aeabi_dsub>
   c2e22:	4622      	mov	r2, r4
   c2e24:	462b      	mov	r3, r5
   c2e26:	f7f1 f901 	bl	b402c <__adddf3>
   c2e2a:	ed9f 7b7f 	vldr	d7, [pc, #508]	; c3028 <__kernel_tan+0x2a8>
   c2e2e:	ed8d 7b00 	vstr	d7, [sp]
   c2e32:	4680      	mov	r8, r0
   c2e34:	4689      	mov	r9, r1
   c2e36:	4642      	mov	r2, r8
   c2e38:	464b      	mov	r3, r9
   c2e3a:	4640      	mov	r0, r8
   c2e3c:	4649      	mov	r1, r9
   c2e3e:	f7f1 faab 	bl	b4398 <__aeabi_dmul>
   c2e42:	4602      	mov	r2, r0
   c2e44:	460b      	mov	r3, r1
   c2e46:	4682      	mov	sl, r0
   c2e48:	468b      	mov	fp, r1
   c2e4a:	f7f1 faa5 	bl	b4398 <__aeabi_dmul>
   c2e4e:	4652      	mov	r2, sl
   c2e50:	4604      	mov	r4, r0
   c2e52:	460d      	mov	r5, r1
   c2e54:	465b      	mov	r3, fp
   c2e56:	4640      	mov	r0, r8
   c2e58:	4649      	mov	r1, r9
   c2e5a:	f7f1 fa9d 	bl	b4398 <__aeabi_dmul>
   c2e5e:	a374      	add	r3, pc, #464	; (adr r3, c3030 <__kernel_tan+0x2b0>)
   c2e60:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2e64:	ec41 0b18 	vmov	d8, r0, r1
   c2e68:	4620      	mov	r0, r4
   c2e6a:	4629      	mov	r1, r5
   c2e6c:	f7f1 fa94 	bl	b4398 <__aeabi_dmul>
   c2e70:	a371      	add	r3, pc, #452	; (adr r3, c3038 <__kernel_tan+0x2b8>)
   c2e72:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2e76:	f7f1 f8d9 	bl	b402c <__adddf3>
   c2e7a:	4622      	mov	r2, r4
   c2e7c:	462b      	mov	r3, r5
   c2e7e:	f7f1 fa8b 	bl	b4398 <__aeabi_dmul>
   c2e82:	a36f      	add	r3, pc, #444	; (adr r3, c3040 <__kernel_tan+0x2c0>)
   c2e84:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2e88:	f7f1 f8d0 	bl	b402c <__adddf3>
   c2e8c:	4622      	mov	r2, r4
   c2e8e:	462b      	mov	r3, r5
   c2e90:	f7f1 fa82 	bl	b4398 <__aeabi_dmul>
   c2e94:	a36c      	add	r3, pc, #432	; (adr r3, c3048 <__kernel_tan+0x2c8>)
   c2e96:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2e9a:	f7f1 f8c7 	bl	b402c <__adddf3>
   c2e9e:	4622      	mov	r2, r4
   c2ea0:	462b      	mov	r3, r5
   c2ea2:	f7f1 fa79 	bl	b4398 <__aeabi_dmul>
   c2ea6:	a36a      	add	r3, pc, #424	; (adr r3, c3050 <__kernel_tan+0x2d0>)
   c2ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2eac:	f7f1 f8be 	bl	b402c <__adddf3>
   c2eb0:	4622      	mov	r2, r4
   c2eb2:	462b      	mov	r3, r5
   c2eb4:	f7f1 fa70 	bl	b4398 <__aeabi_dmul>
   c2eb8:	a367      	add	r3, pc, #412	; (adr r3, c3058 <__kernel_tan+0x2d8>)
   c2eba:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2ebe:	f7f1 f8b5 	bl	b402c <__adddf3>
   c2ec2:	4652      	mov	r2, sl
   c2ec4:	465b      	mov	r3, fp
   c2ec6:	f7f1 fa67 	bl	b4398 <__aeabi_dmul>
   c2eca:	a365      	add	r3, pc, #404	; (adr r3, c3060 <__kernel_tan+0x2e0>)
   c2ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2ed0:	ec41 0b19 	vmov	d9, r0, r1
   c2ed4:	4620      	mov	r0, r4
   c2ed6:	4629      	mov	r1, r5
   c2ed8:	f7f1 fa5e 	bl	b4398 <__aeabi_dmul>
   c2edc:	a362      	add	r3, pc, #392	; (adr r3, c3068 <__kernel_tan+0x2e8>)
   c2ede:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2ee2:	f7f1 f8a3 	bl	b402c <__adddf3>
   c2ee6:	4622      	mov	r2, r4
   c2ee8:	462b      	mov	r3, r5
   c2eea:	f7f1 fa55 	bl	b4398 <__aeabi_dmul>
   c2eee:	a360      	add	r3, pc, #384	; (adr r3, c3070 <__kernel_tan+0x2f0>)
   c2ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2ef4:	f7f1 f89a 	bl	b402c <__adddf3>
   c2ef8:	4622      	mov	r2, r4
   c2efa:	462b      	mov	r3, r5
   c2efc:	f7f1 fa4c 	bl	b4398 <__aeabi_dmul>
   c2f00:	a35d      	add	r3, pc, #372	; (adr r3, c3078 <__kernel_tan+0x2f8>)
   c2f02:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2f06:	f7f1 f891 	bl	b402c <__adddf3>
   c2f0a:	4622      	mov	r2, r4
   c2f0c:	462b      	mov	r3, r5
   c2f0e:	f7f1 fa43 	bl	b4398 <__aeabi_dmul>
   c2f12:	a35b      	add	r3, pc, #364	; (adr r3, c3080 <__kernel_tan+0x300>)
   c2f14:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2f18:	f7f1 f888 	bl	b402c <__adddf3>
   c2f1c:	4622      	mov	r2, r4
   c2f1e:	462b      	mov	r3, r5
   c2f20:	f7f1 fa3a 	bl	b4398 <__aeabi_dmul>
   c2f24:	a358      	add	r3, pc, #352	; (adr r3, c3088 <__kernel_tan+0x308>)
   c2f26:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2f2a:	f7f1 f87f 	bl	b402c <__adddf3>
   c2f2e:	4602      	mov	r2, r0
   c2f30:	460b      	mov	r3, r1
   c2f32:	ec51 0b19 	vmov	r0, r1, d9
   c2f36:	f7f1 f879 	bl	b402c <__adddf3>
   c2f3a:	ec53 2b18 	vmov	r2, r3, d8
   c2f3e:	f7f1 fa2b 	bl	b4398 <__aeabi_dmul>
   c2f42:	e9dd 4500 	ldrd	r4, r5, [sp]
   c2f46:	4622      	mov	r2, r4
   c2f48:	462b      	mov	r3, r5
   c2f4a:	f7f1 f86f 	bl	b402c <__adddf3>
   c2f4e:	4652      	mov	r2, sl
   c2f50:	465b      	mov	r3, fp
   c2f52:	f7f1 fa21 	bl	b4398 <__aeabi_dmul>
   c2f56:	4622      	mov	r2, r4
   c2f58:	462b      	mov	r3, r5
   c2f5a:	f7f1 f867 	bl	b402c <__adddf3>
   c2f5e:	a34c      	add	r3, pc, #304	; (adr r3, c3090 <__kernel_tan+0x310>)
   c2f60:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2f64:	4604      	mov	r4, r0
   c2f66:	460d      	mov	r5, r1
   c2f68:	ec51 0b18 	vmov	r0, r1, d8
   c2f6c:	f7f1 fa14 	bl	b4398 <__aeabi_dmul>
   c2f70:	4622      	mov	r2, r4
   c2f72:	462b      	mov	r3, r5
   c2f74:	f7f1 f85a 	bl	b402c <__adddf3>
   c2f78:	4682      	mov	sl, r0
   c2f7a:	468b      	mov	fp, r1
   c2f7c:	465b      	mov	r3, fp
   c2f7e:	4640      	mov	r0, r8
   c2f80:	4649      	mov	r1, r9
   c2f82:	4652      	mov	r2, sl
   c2f84:	f7f1 f852 	bl	b402c <__adddf3>
   c2f88:	4b45      	ldr	r3, [pc, #276]	; (c30a0 <__kernel_tan+0x320>)
   c2f8a:	429e      	cmp	r6, r3
   c2f8c:	4604      	mov	r4, r0
   c2f8e:	460d      	mov	r5, r1
   c2f90:	f300 808a 	bgt.w	c30a8 <__kernel_tan+0x328>
   c2f94:	2f01      	cmp	r7, #1
   c2f96:	d036      	beq.n	c3006 <__kernel_tan+0x286>
   c2f98:	4602      	mov	r2, r0
   c2f9a:	460b      	mov	r3, r1
   c2f9c:	2000      	movs	r0, #0
   c2f9e:	493f      	ldr	r1, [pc, #252]	; (c309c <__kernel_tan+0x31c>)
   c2fa0:	f7f1 fb24 	bl	b45ec <__aeabi_ddiv>
   c2fa4:	2400      	movs	r4, #0
   c2fa6:	460f      	mov	r7, r1
   c2fa8:	4642      	mov	r2, r8
   c2faa:	464b      	mov	r3, r9
   c2fac:	4606      	mov	r6, r0
   c2fae:	4629      	mov	r1, r5
   c2fb0:	4620      	mov	r0, r4
   c2fb2:	f7f1 f839 	bl	b4028 <__aeabi_dsub>
   c2fb6:	4602      	mov	r2, r0
   c2fb8:	460b      	mov	r3, r1
   c2fba:	4650      	mov	r0, sl
   c2fbc:	4659      	mov	r1, fp
   c2fbe:	f7f1 f833 	bl	b4028 <__aeabi_dsub>
   c2fc2:	4622      	mov	r2, r4
   c2fc4:	463b      	mov	r3, r7
   c2fc6:	f7f1 f9e7 	bl	b4398 <__aeabi_dmul>
   c2fca:	4602      	mov	r2, r0
   c2fcc:	460b      	mov	r3, r1
   c2fce:	4620      	mov	r0, r4
   c2fd0:	4629      	mov	r1, r5
   c2fd2:	4690      	mov	r8, r2
   c2fd4:	4699      	mov	r9, r3
   c2fd6:	4622      	mov	r2, r4
   c2fd8:	463b      	mov	r3, r7
   c2fda:	f7f1 f9dd 	bl	b4398 <__aeabi_dmul>
   c2fde:	4b31      	ldr	r3, [pc, #196]	; (c30a4 <__kernel_tan+0x324>)
   c2fe0:	2200      	movs	r2, #0
   c2fe2:	f7f1 f823 	bl	b402c <__adddf3>
   c2fe6:	4602      	mov	r2, r0
   c2fe8:	460b      	mov	r3, r1
   c2fea:	4640      	mov	r0, r8
   c2fec:	4649      	mov	r1, r9
   c2fee:	f7f1 f81d 	bl	b402c <__adddf3>
   c2ff2:	4632      	mov	r2, r6
   c2ff4:	463b      	mov	r3, r7
   c2ff6:	f7f1 f9cf 	bl	b4398 <__aeabi_dmul>
   c2ffa:	4622      	mov	r2, r4
   c2ffc:	463b      	mov	r3, r7
   c2ffe:	f7f1 f815 	bl	b402c <__adddf3>
   c3002:	4604      	mov	r4, r0
   c3004:	460d      	mov	r5, r1
   c3006:	ec45 4b10 	vmov	d0, r4, r5
   c300a:	b005      	add	sp, #20
   c300c:	ecbd 8b04 	vpop	{d8-d9}
   c3010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3014:	f3af 8000 	nop.w
   c3018:	54442d18 	.word	0x54442d18
   c301c:	3fe921fb 	.word	0x3fe921fb
   c3020:	33145c07 	.word	0x33145c07
   c3024:	3c81a626 	.word	0x3c81a626
	...
   c3030:	74bf7ad4 	.word	0x74bf7ad4
   c3034:	3efb2a70 	.word	0x3efb2a70
   c3038:	32f0a7e9 	.word	0x32f0a7e9
   c303c:	3f12b80f 	.word	0x3f12b80f
   c3040:	1a8d1068 	.word	0x1a8d1068
   c3044:	3f3026f7 	.word	0x3f3026f7
   c3048:	fee08315 	.word	0xfee08315
   c304c:	3f57dbc8 	.word	0x3f57dbc8
   c3050:	e96e8493 	.word	0xe96e8493
   c3054:	3f8226e3 	.word	0x3f8226e3
   c3058:	1bb341fe 	.word	0x1bb341fe
   c305c:	3faba1ba 	.word	0x3faba1ba
   c3060:	db605373 	.word	0xdb605373
   c3064:	bef375cb 	.word	0xbef375cb
   c3068:	a03792a6 	.word	0xa03792a6
   c306c:	3f147e88 	.word	0x3f147e88
   c3070:	f2f26501 	.word	0xf2f26501
   c3074:	3f4344d8 	.word	0x3f4344d8
   c3078:	c9560328 	.word	0xc9560328
   c307c:	3f6d6d22 	.word	0x3f6d6d22
   c3080:	8406d637 	.word	0x8406d637
   c3084:	3f9664f4 	.word	0x3f9664f4
   c3088:	1110fe7a 	.word	0x1110fe7a
   c308c:	3fc11111 	.word	0x3fc11111
   c3090:	55555563 	.word	0x55555563
   c3094:	3fd55555 	.word	0x3fd55555
   c3098:	3e2fffff 	.word	0x3e2fffff
   c309c:	bff00000 	.word	0xbff00000
   c30a0:	3fe59427 	.word	0x3fe59427
   c30a4:	3ff00000 	.word	0x3ff00000
   c30a8:	4638      	mov	r0, r7
   c30aa:	f7f1 f90b 	bl	b42c4 <__aeabi_i2d>
   c30ae:	4622      	mov	r2, r4
   c30b0:	4606      	mov	r6, r0
   c30b2:	460f      	mov	r7, r1
   c30b4:	462b      	mov	r3, r5
   c30b6:	4620      	mov	r0, r4
   c30b8:	4629      	mov	r1, r5
   c30ba:	f7f1 f96d 	bl	b4398 <__aeabi_dmul>
   c30be:	4602      	mov	r2, r0
   c30c0:	460b      	mov	r3, r1
   c30c2:	4620      	mov	r0, r4
   c30c4:	4629      	mov	r1, r5
   c30c6:	4614      	mov	r4, r2
   c30c8:	461d      	mov	r5, r3
   c30ca:	4632      	mov	r2, r6
   c30cc:	463b      	mov	r3, r7
   c30ce:	f7f0 ffad 	bl	b402c <__adddf3>
   c30d2:	4602      	mov	r2, r0
   c30d4:	460b      	mov	r3, r1
   c30d6:	4620      	mov	r0, r4
   c30d8:	4629      	mov	r1, r5
   c30da:	f7f1 fa87 	bl	b45ec <__aeabi_ddiv>
   c30de:	4652      	mov	r2, sl
   c30e0:	465b      	mov	r3, fp
   c30e2:	f7f0 ffa1 	bl	b4028 <__aeabi_dsub>
   c30e6:	4602      	mov	r2, r0
   c30e8:	460b      	mov	r3, r1
   c30ea:	4640      	mov	r0, r8
   c30ec:	4649      	mov	r1, r9
   c30ee:	f7f0 ff9b 	bl	b4028 <__aeabi_dsub>
   c30f2:	4602      	mov	r2, r0
   c30f4:	460b      	mov	r3, r1
   c30f6:	f7f0 ff99 	bl	b402c <__adddf3>
   c30fa:	4602      	mov	r2, r0
   c30fc:	460b      	mov	r3, r1
   c30fe:	4630      	mov	r0, r6
   c3100:	4639      	mov	r1, r7
   c3102:	f7f0 ff91 	bl	b4028 <__aeabi_dsub>
   c3106:	9b03      	ldr	r3, [sp, #12]
   c3108:	179b      	asrs	r3, r3, #30
   c310a:	f003 0302 	and.w	r3, r3, #2
   c310e:	4604      	mov	r4, r0
   c3110:	f1c3 0001 	rsb	r0, r3, #1
   c3114:	460d      	mov	r5, r1
   c3116:	f7f1 f8d5 	bl	b42c4 <__aeabi_i2d>
   c311a:	4602      	mov	r2, r0
   c311c:	460b      	mov	r3, r1
   c311e:	4620      	mov	r0, r4
   c3120:	4629      	mov	r1, r5
   c3122:	f7f1 f939 	bl	b4398 <__aeabi_dmul>
   c3126:	4604      	mov	r4, r0
   c3128:	460d      	mov	r5, r1
   c312a:	ec45 4b10 	vmov	d0, r4, r5
   c312e:	b005      	add	sp, #20
   c3130:	ecbd 8b04 	vpop	{d8-d9}
   c3134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3138:	ec49 8b10 	vmov	d0, r8, r9
   c313c:	f000 f80e 	bl	c315c <fabs>
   c3140:	4905      	ldr	r1, [pc, #20]	; (c3158 <__kernel_tan+0x3d8>)
   c3142:	ec53 2b10 	vmov	r2, r3, d0
   c3146:	2000      	movs	r0, #0
   c3148:	f7f1 fa50 	bl	b45ec <__aeabi_ddiv>
   c314c:	4604      	mov	r4, r0
   c314e:	460d      	mov	r5, r1
   c3150:	e759      	b.n	c3006 <__kernel_tan+0x286>
   c3152:	4644      	mov	r4, r8
   c3154:	464d      	mov	r5, r9
   c3156:	e756      	b.n	c3006 <__kernel_tan+0x286>
   c3158:	3ff00000 	.word	0x3ff00000

000c315c <fabs>:
   c315c:	ec51 0b10 	vmov	r0, r1, d0
   c3160:	ee10 2a10 	vmov	r2, s0
   c3164:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   c3168:	ec43 2b10 	vmov	d0, r2, r3
   c316c:	4770      	bx	lr
   c316e:	bf00      	nop

000c3170 <nan>:
   c3170:	ed9f 0b01 	vldr	d0, [pc, #4]	; c3178 <nan+0x8>
   c3174:	4770      	bx	lr
   c3176:	bf00      	nop
   c3178:	00000000 	.word	0x00000000
   c317c:	7ff80000 	.word	0x7ff80000

000c3180 <nanf>:
   c3180:	ed9f 0a01 	vldr	s0, [pc, #4]	; c3188 <nanf+0x8>
   c3184:	4770      	bx	lr
   c3186:	bf00      	nop
   c3188:	7fc00000 	.word	0x7fc00000

000c318c <atexit>:
   c318c:	2300      	movs	r3, #0
   c318e:	4601      	mov	r1, r0
   c3190:	461a      	mov	r2, r3
   c3192:	4618      	mov	r0, r3
   c3194:	f7f1 be9c 	b.w	b4ed0 <__register_exitproc>

000c3198 <atof>:
   c3198:	2100      	movs	r1, #0
   c319a:	f000 beeb 	b.w	c3f74 <strtod>
	...

000c31a0 <calloc>:
   c31a0:	4b02      	ldr	r3, [pc, #8]	; (c31ac <calloc+0xc>)
   c31a2:	460a      	mov	r2, r1
   c31a4:	4601      	mov	r1, r0
   c31a6:	6818      	ldr	r0, [r3, #0]
   c31a8:	f000 b83a 	b.w	c3220 <_calloc_r>
   c31ac:	2003d284 	.word	0x2003d284

000c31b0 <isprint>:
   c31b0:	4b02      	ldr	r3, [pc, #8]	; (c31bc <isprint+0xc>)
   c31b2:	4418      	add	r0, r3
   c31b4:	7840      	ldrb	r0, [r0, #1]
   c31b6:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c31ba:	4770      	bx	lr
   c31bc:	000c8fc0 	.word	0x000c8fc0

000c31c0 <memcpy>:
   c31c0:	440a      	add	r2, r1
   c31c2:	4291      	cmp	r1, r2
   c31c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   c31c8:	d100      	bne.n	c31cc <memcpy+0xc>
   c31ca:	4770      	bx	lr
   c31cc:	b510      	push	{r4, lr}
   c31ce:	f811 4b01 	ldrb.w	r4, [r1], #1
   c31d2:	f803 4f01 	strb.w	r4, [r3, #1]!
   c31d6:	4291      	cmp	r1, r2
   c31d8:	d1f9      	bne.n	c31ce <memcpy+0xe>
   c31da:	bd10      	pop	{r4, pc}

000c31dc <memmove>:
   c31dc:	4288      	cmp	r0, r1
   c31de:	b510      	push	{r4, lr}
   c31e0:	eb01 0402 	add.w	r4, r1, r2
   c31e4:	d902      	bls.n	c31ec <memmove+0x10>
   c31e6:	4284      	cmp	r4, r0
   c31e8:	4623      	mov	r3, r4
   c31ea:	d807      	bhi.n	c31fc <memmove+0x20>
   c31ec:	1e43      	subs	r3, r0, #1
   c31ee:	42a1      	cmp	r1, r4
   c31f0:	d008      	beq.n	c3204 <memmove+0x28>
   c31f2:	f811 2b01 	ldrb.w	r2, [r1], #1
   c31f6:	f803 2f01 	strb.w	r2, [r3, #1]!
   c31fa:	e7f8      	b.n	c31ee <memmove+0x12>
   c31fc:	4402      	add	r2, r0
   c31fe:	4601      	mov	r1, r0
   c3200:	428a      	cmp	r2, r1
   c3202:	d100      	bne.n	c3206 <memmove+0x2a>
   c3204:	bd10      	pop	{r4, pc}
   c3206:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c320a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c320e:	e7f7      	b.n	c3200 <memmove+0x24>

000c3210 <memset>:
   c3210:	4402      	add	r2, r0
   c3212:	4603      	mov	r3, r0
   c3214:	4293      	cmp	r3, r2
   c3216:	d100      	bne.n	c321a <memset+0xa>
   c3218:	4770      	bx	lr
   c321a:	f803 1b01 	strb.w	r1, [r3], #1
   c321e:	e7f9      	b.n	c3214 <memset+0x4>

000c3220 <_calloc_r>:
   c3220:	b513      	push	{r0, r1, r4, lr}
   c3222:	434a      	muls	r2, r1
   c3224:	4611      	mov	r1, r2
   c3226:	9201      	str	r2, [sp, #4]
   c3228:	f7fb fefa 	bl	bf020 <_malloc_r>
   c322c:	4604      	mov	r4, r0
   c322e:	b118      	cbz	r0, c3238 <_calloc_r+0x18>
   c3230:	9a01      	ldr	r2, [sp, #4]
   c3232:	2100      	movs	r1, #0
   c3234:	f7ff ffec 	bl	c3210 <memset>
   c3238:	4620      	mov	r0, r4
   c323a:	b002      	add	sp, #8
   c323c:	bd10      	pop	{r4, pc}
	...

000c3240 <srand>:
   c3240:	b538      	push	{r3, r4, r5, lr}
   c3242:	4b10      	ldr	r3, [pc, #64]	; (c3284 <srand+0x44>)
   c3244:	681d      	ldr	r5, [r3, #0]
   c3246:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c3248:	4604      	mov	r4, r0
   c324a:	b9b3      	cbnz	r3, c327a <srand+0x3a>
   c324c:	2018      	movs	r0, #24
   c324e:	f7fb febf 	bl	befd0 <malloc>
   c3252:	4602      	mov	r2, r0
   c3254:	63a8      	str	r0, [r5, #56]	; 0x38
   c3256:	b920      	cbnz	r0, c3262 <srand+0x22>
   c3258:	4b0b      	ldr	r3, [pc, #44]	; (c3288 <srand+0x48>)
   c325a:	480c      	ldr	r0, [pc, #48]	; (c328c <srand+0x4c>)
   c325c:	2142      	movs	r1, #66	; 0x42
   c325e:	f7fb feef 	bl	bf040 <__assert_func>
   c3262:	490b      	ldr	r1, [pc, #44]	; (c3290 <srand+0x50>)
   c3264:	4b0b      	ldr	r3, [pc, #44]	; (c3294 <srand+0x54>)
   c3266:	e9c0 1300 	strd	r1, r3, [r0]
   c326a:	4b0b      	ldr	r3, [pc, #44]	; (c3298 <srand+0x58>)
   c326c:	6083      	str	r3, [r0, #8]
   c326e:	230b      	movs	r3, #11
   c3270:	8183      	strh	r3, [r0, #12]
   c3272:	2100      	movs	r1, #0
   c3274:	2001      	movs	r0, #1
   c3276:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c327a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c327c:	2200      	movs	r2, #0
   c327e:	611c      	str	r4, [r3, #16]
   c3280:	615a      	str	r2, [r3, #20]
   c3282:	bd38      	pop	{r3, r4, r5, pc}
   c3284:	2003d284 	.word	0x2003d284
   c3288:	000c8ef8 	.word	0x000c8ef8
   c328c:	000c8f0f 	.word	0x000c8f0f
   c3290:	abcd330e 	.word	0xabcd330e
   c3294:	e66d1234 	.word	0xe66d1234
   c3298:	0005deec 	.word	0x0005deec

000c329c <strchr>:
   c329c:	b2c9      	uxtb	r1, r1
   c329e:	4603      	mov	r3, r0
   c32a0:	f810 2b01 	ldrb.w	r2, [r0], #1
   c32a4:	b11a      	cbz	r2, c32ae <strchr+0x12>
   c32a6:	428a      	cmp	r2, r1
   c32a8:	d1f9      	bne.n	c329e <strchr+0x2>
   c32aa:	4618      	mov	r0, r3
   c32ac:	4770      	bx	lr
   c32ae:	2900      	cmp	r1, #0
   c32b0:	bf18      	it	ne
   c32b2:	2300      	movne	r3, #0
   c32b4:	e7f9      	b.n	c32aa <strchr+0xe>

000c32b6 <strchrnul>:
   c32b6:	b510      	push	{r4, lr}
   c32b8:	4604      	mov	r4, r0
   c32ba:	f7ff ffef 	bl	c329c <strchr>
   c32be:	b918      	cbnz	r0, c32c8 <strchrnul+0x12>
   c32c0:	4620      	mov	r0, r4
   c32c2:	f7f1 fdab 	bl	b4e1c <strlen>
   c32c6:	4420      	add	r0, r4
   c32c8:	bd10      	pop	{r4, pc}

000c32ca <strcpy>:
   c32ca:	4603      	mov	r3, r0
   c32cc:	f811 2b01 	ldrb.w	r2, [r1], #1
   c32d0:	f803 2b01 	strb.w	r2, [r3], #1
   c32d4:	2a00      	cmp	r2, #0
   c32d6:	d1f9      	bne.n	c32cc <strcpy+0x2>
   c32d8:	4770      	bx	lr

000c32da <strncmp>:
   c32da:	b510      	push	{r4, lr}
   c32dc:	b17a      	cbz	r2, c32fe <strncmp+0x24>
   c32de:	4603      	mov	r3, r0
   c32e0:	3901      	subs	r1, #1
   c32e2:	1884      	adds	r4, r0, r2
   c32e4:	f813 0b01 	ldrb.w	r0, [r3], #1
   c32e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c32ec:	4290      	cmp	r0, r2
   c32ee:	d101      	bne.n	c32f4 <strncmp+0x1a>
   c32f0:	42a3      	cmp	r3, r4
   c32f2:	d101      	bne.n	c32f8 <strncmp+0x1e>
   c32f4:	1a80      	subs	r0, r0, r2
   c32f6:	bd10      	pop	{r4, pc}
   c32f8:	2800      	cmp	r0, #0
   c32fa:	d1f3      	bne.n	c32e4 <strncmp+0xa>
   c32fc:	e7fa      	b.n	c32f4 <strncmp+0x1a>
   c32fe:	4610      	mov	r0, r2
   c3300:	e7f9      	b.n	c32f6 <strncmp+0x1c>

000c3302 <strrchr>:
   c3302:	b538      	push	{r3, r4, r5, lr}
   c3304:	4603      	mov	r3, r0
   c3306:	460c      	mov	r4, r1
   c3308:	b969      	cbnz	r1, c3326 <strrchr+0x24>
   c330a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c330e:	f7ff bfc5 	b.w	c329c <strchr>
   c3312:	1c43      	adds	r3, r0, #1
   c3314:	4605      	mov	r5, r0
   c3316:	4621      	mov	r1, r4
   c3318:	4618      	mov	r0, r3
   c331a:	f7ff ffbf 	bl	c329c <strchr>
   c331e:	2800      	cmp	r0, #0
   c3320:	d1f7      	bne.n	c3312 <strrchr+0x10>
   c3322:	4628      	mov	r0, r5
   c3324:	bd38      	pop	{r3, r4, r5, pc}
   c3326:	2500      	movs	r5, #0
   c3328:	e7f5      	b.n	c3316 <strrchr+0x14>

000c332a <sulp>:
   c332a:	b570      	push	{r4, r5, r6, lr}
   c332c:	4604      	mov	r4, r0
   c332e:	460d      	mov	r5, r1
   c3330:	ec45 4b10 	vmov	d0, r4, r5
   c3334:	4616      	mov	r6, r2
   c3336:	f001 fda9 	bl	c4e8c <__ulp>
   c333a:	ec51 0b10 	vmov	r0, r1, d0
   c333e:	b17e      	cbz	r6, c3360 <sulp+0x36>
   c3340:	f3c5 530a 	ubfx	r3, r5, #20, #11
   c3344:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c3348:	2b00      	cmp	r3, #0
   c334a:	dd09      	ble.n	c3360 <sulp+0x36>
   c334c:	051b      	lsls	r3, r3, #20
   c334e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   c3352:	2400      	movs	r4, #0
   c3354:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   c3358:	4622      	mov	r2, r4
   c335a:	462b      	mov	r3, r5
   c335c:	f7f1 f81c 	bl	b4398 <__aeabi_dmul>
   c3360:	bd70      	pop	{r4, r5, r6, pc}
   c3362:	0000      	movs	r0, r0
   c3364:	0000      	movs	r0, r0
	...

000c3368 <_strtod_l>:
   c3368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c336c:	ed2d 8b02 	vpush	{d8}
   c3370:	b09d      	sub	sp, #116	; 0x74
   c3372:	461f      	mov	r7, r3
   c3374:	2300      	movs	r3, #0
   c3376:	9318      	str	r3, [sp, #96]	; 0x60
   c3378:	4ba2      	ldr	r3, [pc, #648]	; (c3604 <_strtod_l+0x29c>)
   c337a:	9213      	str	r2, [sp, #76]	; 0x4c
   c337c:	681b      	ldr	r3, [r3, #0]
   c337e:	9305      	str	r3, [sp, #20]
   c3380:	4604      	mov	r4, r0
   c3382:	4618      	mov	r0, r3
   c3384:	4688      	mov	r8, r1
   c3386:	f7f1 fd49 	bl	b4e1c <strlen>
   c338a:	f04f 0a00 	mov.w	sl, #0
   c338e:	4605      	mov	r5, r0
   c3390:	f04f 0b00 	mov.w	fp, #0
   c3394:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c3398:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c339a:	781a      	ldrb	r2, [r3, #0]
   c339c:	2a2b      	cmp	r2, #43	; 0x2b
   c339e:	d04e      	beq.n	c343e <_strtod_l+0xd6>
   c33a0:	d83b      	bhi.n	c341a <_strtod_l+0xb2>
   c33a2:	2a0d      	cmp	r2, #13
   c33a4:	d834      	bhi.n	c3410 <_strtod_l+0xa8>
   c33a6:	2a08      	cmp	r2, #8
   c33a8:	d834      	bhi.n	c3414 <_strtod_l+0xac>
   c33aa:	2a00      	cmp	r2, #0
   c33ac:	d03e      	beq.n	c342c <_strtod_l+0xc4>
   c33ae:	2300      	movs	r3, #0
   c33b0:	930a      	str	r3, [sp, #40]	; 0x28
   c33b2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   c33b4:	7833      	ldrb	r3, [r6, #0]
   c33b6:	2b30      	cmp	r3, #48	; 0x30
   c33b8:	f040 80b0 	bne.w	c351c <_strtod_l+0x1b4>
   c33bc:	7873      	ldrb	r3, [r6, #1]
   c33be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c33c2:	2b58      	cmp	r3, #88	; 0x58
   c33c4:	d168      	bne.n	c3498 <_strtod_l+0x130>
   c33c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c33c8:	9301      	str	r3, [sp, #4]
   c33ca:	ab18      	add	r3, sp, #96	; 0x60
   c33cc:	9702      	str	r7, [sp, #8]
   c33ce:	9300      	str	r3, [sp, #0]
   c33d0:	4a8d      	ldr	r2, [pc, #564]	; (c3608 <_strtod_l+0x2a0>)
   c33d2:	ab19      	add	r3, sp, #100	; 0x64
   c33d4:	a917      	add	r1, sp, #92	; 0x5c
   c33d6:	4620      	mov	r0, r4
   c33d8:	f000 fecc 	bl	c4174 <__gethex>
   c33dc:	f010 0707 	ands.w	r7, r0, #7
   c33e0:	4605      	mov	r5, r0
   c33e2:	d005      	beq.n	c33f0 <_strtod_l+0x88>
   c33e4:	2f06      	cmp	r7, #6
   c33e6:	d12c      	bne.n	c3442 <_strtod_l+0xda>
   c33e8:	3601      	adds	r6, #1
   c33ea:	2300      	movs	r3, #0
   c33ec:	9617      	str	r6, [sp, #92]	; 0x5c
   c33ee:	930a      	str	r3, [sp, #40]	; 0x28
   c33f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c33f2:	2b00      	cmp	r3, #0
   c33f4:	f040 8590 	bne.w	c3f18 <_strtod_l+0xbb0>
   c33f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c33fa:	b1eb      	cbz	r3, c3438 <_strtod_l+0xd0>
   c33fc:	4652      	mov	r2, sl
   c33fe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   c3402:	ec43 2b10 	vmov	d0, r2, r3
   c3406:	b01d      	add	sp, #116	; 0x74
   c3408:	ecbd 8b02 	vpop	{d8}
   c340c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3410:	2a20      	cmp	r2, #32
   c3412:	d1cc      	bne.n	c33ae <_strtod_l+0x46>
   c3414:	3301      	adds	r3, #1
   c3416:	9317      	str	r3, [sp, #92]	; 0x5c
   c3418:	e7be      	b.n	c3398 <_strtod_l+0x30>
   c341a:	2a2d      	cmp	r2, #45	; 0x2d
   c341c:	d1c7      	bne.n	c33ae <_strtod_l+0x46>
   c341e:	2201      	movs	r2, #1
   c3420:	920a      	str	r2, [sp, #40]	; 0x28
   c3422:	1c5a      	adds	r2, r3, #1
   c3424:	9217      	str	r2, [sp, #92]	; 0x5c
   c3426:	785b      	ldrb	r3, [r3, #1]
   c3428:	2b00      	cmp	r3, #0
   c342a:	d1c2      	bne.n	c33b2 <_strtod_l+0x4a>
   c342c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c342e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c3432:	2b00      	cmp	r3, #0
   c3434:	f040 856e 	bne.w	c3f14 <_strtod_l+0xbac>
   c3438:	4652      	mov	r2, sl
   c343a:	465b      	mov	r3, fp
   c343c:	e7e1      	b.n	c3402 <_strtod_l+0x9a>
   c343e:	2200      	movs	r2, #0
   c3440:	e7ee      	b.n	c3420 <_strtod_l+0xb8>
   c3442:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c3444:	b13a      	cbz	r2, c3456 <_strtod_l+0xee>
   c3446:	2135      	movs	r1, #53	; 0x35
   c3448:	a81a      	add	r0, sp, #104	; 0x68
   c344a:	f001 fe2a 	bl	c50a2 <__copybits>
   c344e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c3450:	4620      	mov	r0, r4
   c3452:	f001 f9e9 	bl	c4828 <_Bfree>
   c3456:	3f01      	subs	r7, #1
   c3458:	2f04      	cmp	r7, #4
   c345a:	d806      	bhi.n	c346a <_strtod_l+0x102>
   c345c:	e8df f007 	tbb	[pc, r7]
   c3460:	1714030a 	.word	0x1714030a
   c3464:	0a          	.byte	0x0a
   c3465:	00          	.byte	0x00
   c3466:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   c346a:	0728      	lsls	r0, r5, #28
   c346c:	d5c0      	bpl.n	c33f0 <_strtod_l+0x88>
   c346e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   c3472:	e7bd      	b.n	c33f0 <_strtod_l+0x88>
   c3474:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   c3478:	9a19      	ldr	r2, [sp, #100]	; 0x64
   c347a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   c347e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   c3482:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   c3486:	e7f0      	b.n	c346a <_strtod_l+0x102>
   c3488:	f8df b180 	ldr.w	fp, [pc, #384]	; c360c <_strtod_l+0x2a4>
   c348c:	e7ed      	b.n	c346a <_strtod_l+0x102>
   c348e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   c3492:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c3496:	e7e8      	b.n	c346a <_strtod_l+0x102>
   c3498:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c349a:	1c5a      	adds	r2, r3, #1
   c349c:	9217      	str	r2, [sp, #92]	; 0x5c
   c349e:	785b      	ldrb	r3, [r3, #1]
   c34a0:	2b30      	cmp	r3, #48	; 0x30
   c34a2:	d0f9      	beq.n	c3498 <_strtod_l+0x130>
   c34a4:	2b00      	cmp	r3, #0
   c34a6:	d0a3      	beq.n	c33f0 <_strtod_l+0x88>
   c34a8:	2301      	movs	r3, #1
   c34aa:	f04f 0900 	mov.w	r9, #0
   c34ae:	9304      	str	r3, [sp, #16]
   c34b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c34b2:	9308      	str	r3, [sp, #32]
   c34b4:	f8cd 901c 	str.w	r9, [sp, #28]
   c34b8:	464f      	mov	r7, r9
   c34ba:	220a      	movs	r2, #10
   c34bc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   c34be:	7806      	ldrb	r6, [r0, #0]
   c34c0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   c34c4:	b2d9      	uxtb	r1, r3
   c34c6:	2909      	cmp	r1, #9
   c34c8:	d92a      	bls.n	c3520 <_strtod_l+0x1b8>
   c34ca:	9905      	ldr	r1, [sp, #20]
   c34cc:	462a      	mov	r2, r5
   c34ce:	f7ff ff04 	bl	c32da <strncmp>
   c34d2:	b398      	cbz	r0, c353c <_strtod_l+0x1d4>
   c34d4:	2000      	movs	r0, #0
   c34d6:	4632      	mov	r2, r6
   c34d8:	463d      	mov	r5, r7
   c34da:	9005      	str	r0, [sp, #20]
   c34dc:	4603      	mov	r3, r0
   c34de:	2a65      	cmp	r2, #101	; 0x65
   c34e0:	d001      	beq.n	c34e6 <_strtod_l+0x17e>
   c34e2:	2a45      	cmp	r2, #69	; 0x45
   c34e4:	d118      	bne.n	c3518 <_strtod_l+0x1b0>
   c34e6:	b91d      	cbnz	r5, c34f0 <_strtod_l+0x188>
   c34e8:	9a04      	ldr	r2, [sp, #16]
   c34ea:	4302      	orrs	r2, r0
   c34ec:	d09e      	beq.n	c342c <_strtod_l+0xc4>
   c34ee:	2500      	movs	r5, #0
   c34f0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   c34f4:	f108 0201 	add.w	r2, r8, #1
   c34f8:	9217      	str	r2, [sp, #92]	; 0x5c
   c34fa:	f898 2001 	ldrb.w	r2, [r8, #1]
   c34fe:	2a2b      	cmp	r2, #43	; 0x2b
   c3500:	d075      	beq.n	c35ee <_strtod_l+0x286>
   c3502:	2a2d      	cmp	r2, #45	; 0x2d
   c3504:	d07b      	beq.n	c35fe <_strtod_l+0x296>
   c3506:	f04f 0c00 	mov.w	ip, #0
   c350a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c350e:	2909      	cmp	r1, #9
   c3510:	f240 8082 	bls.w	c3618 <_strtod_l+0x2b0>
   c3514:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c3518:	2600      	movs	r6, #0
   c351a:	e09d      	b.n	c3658 <_strtod_l+0x2f0>
   c351c:	2300      	movs	r3, #0
   c351e:	e7c4      	b.n	c34aa <_strtod_l+0x142>
   c3520:	2f08      	cmp	r7, #8
   c3522:	bfd8      	it	le
   c3524:	9907      	ldrle	r1, [sp, #28]
   c3526:	f100 0001 	add.w	r0, r0, #1
   c352a:	bfda      	itte	le
   c352c:	fb02 3301 	mlale	r3, r2, r1, r3
   c3530:	9307      	strle	r3, [sp, #28]
   c3532:	fb02 3909 	mlagt	r9, r2, r9, r3
   c3536:	3701      	adds	r7, #1
   c3538:	9017      	str	r0, [sp, #92]	; 0x5c
   c353a:	e7bf      	b.n	c34bc <_strtod_l+0x154>
   c353c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c353e:	195a      	adds	r2, r3, r5
   c3540:	9217      	str	r2, [sp, #92]	; 0x5c
   c3542:	5d5a      	ldrb	r2, [r3, r5]
   c3544:	2f00      	cmp	r7, #0
   c3546:	d037      	beq.n	c35b8 <_strtod_l+0x250>
   c3548:	9005      	str	r0, [sp, #20]
   c354a:	463d      	mov	r5, r7
   c354c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   c3550:	2b09      	cmp	r3, #9
   c3552:	d912      	bls.n	c357a <_strtod_l+0x212>
   c3554:	2301      	movs	r3, #1
   c3556:	e7c2      	b.n	c34de <_strtod_l+0x176>
   c3558:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c355a:	1c5a      	adds	r2, r3, #1
   c355c:	9217      	str	r2, [sp, #92]	; 0x5c
   c355e:	785a      	ldrb	r2, [r3, #1]
   c3560:	3001      	adds	r0, #1
   c3562:	2a30      	cmp	r2, #48	; 0x30
   c3564:	d0f8      	beq.n	c3558 <_strtod_l+0x1f0>
   c3566:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   c356a:	2b08      	cmp	r3, #8
   c356c:	f200 84d9 	bhi.w	c3f22 <_strtod_l+0xbba>
   c3570:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c3572:	9005      	str	r0, [sp, #20]
   c3574:	2000      	movs	r0, #0
   c3576:	9308      	str	r3, [sp, #32]
   c3578:	4605      	mov	r5, r0
   c357a:	3a30      	subs	r2, #48	; 0x30
   c357c:	f100 0301 	add.w	r3, r0, #1
   c3580:	d014      	beq.n	c35ac <_strtod_l+0x244>
   c3582:	9905      	ldr	r1, [sp, #20]
   c3584:	4419      	add	r1, r3
   c3586:	9105      	str	r1, [sp, #20]
   c3588:	462b      	mov	r3, r5
   c358a:	eb00 0e05 	add.w	lr, r0, r5
   c358e:	210a      	movs	r1, #10
   c3590:	4573      	cmp	r3, lr
   c3592:	d113      	bne.n	c35bc <_strtod_l+0x254>
   c3594:	182b      	adds	r3, r5, r0
   c3596:	2b08      	cmp	r3, #8
   c3598:	f105 0501 	add.w	r5, r5, #1
   c359c:	4405      	add	r5, r0
   c359e:	dc1c      	bgt.n	c35da <_strtod_l+0x272>
   c35a0:	9907      	ldr	r1, [sp, #28]
   c35a2:	230a      	movs	r3, #10
   c35a4:	fb03 2301 	mla	r3, r3, r1, r2
   c35a8:	9307      	str	r3, [sp, #28]
   c35aa:	2300      	movs	r3, #0
   c35ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c35ae:	1c51      	adds	r1, r2, #1
   c35b0:	9117      	str	r1, [sp, #92]	; 0x5c
   c35b2:	7852      	ldrb	r2, [r2, #1]
   c35b4:	4618      	mov	r0, r3
   c35b6:	e7c9      	b.n	c354c <_strtod_l+0x1e4>
   c35b8:	4638      	mov	r0, r7
   c35ba:	e7d2      	b.n	c3562 <_strtod_l+0x1fa>
   c35bc:	2b08      	cmp	r3, #8
   c35be:	dc04      	bgt.n	c35ca <_strtod_l+0x262>
   c35c0:	9e07      	ldr	r6, [sp, #28]
   c35c2:	434e      	muls	r6, r1
   c35c4:	9607      	str	r6, [sp, #28]
   c35c6:	3301      	adds	r3, #1
   c35c8:	e7e2      	b.n	c3590 <_strtod_l+0x228>
   c35ca:	f103 0c01 	add.w	ip, r3, #1
   c35ce:	f1bc 0f10 	cmp.w	ip, #16
   c35d2:	bfd8      	it	le
   c35d4:	fb01 f909 	mulle.w	r9, r1, r9
   c35d8:	e7f5      	b.n	c35c6 <_strtod_l+0x25e>
   c35da:	2d10      	cmp	r5, #16
   c35dc:	bfdc      	itt	le
   c35de:	230a      	movle	r3, #10
   c35e0:	fb03 2909 	mlale	r9, r3, r9, r2
   c35e4:	e7e1      	b.n	c35aa <_strtod_l+0x242>
   c35e6:	2300      	movs	r3, #0
   c35e8:	9305      	str	r3, [sp, #20]
   c35ea:	2301      	movs	r3, #1
   c35ec:	e77c      	b.n	c34e8 <_strtod_l+0x180>
   c35ee:	f04f 0c00 	mov.w	ip, #0
   c35f2:	f108 0202 	add.w	r2, r8, #2
   c35f6:	9217      	str	r2, [sp, #92]	; 0x5c
   c35f8:	f898 2002 	ldrb.w	r2, [r8, #2]
   c35fc:	e785      	b.n	c350a <_strtod_l+0x1a2>
   c35fe:	f04f 0c01 	mov.w	ip, #1
   c3602:	e7f6      	b.n	c35f2 <_strtod_l+0x28a>
   c3604:	000c9134 	.word	0x000c9134
   c3608:	000c8f70 	.word	0x000c8f70
   c360c:	7ff00000 	.word	0x7ff00000
   c3610:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c3612:	1c51      	adds	r1, r2, #1
   c3614:	9117      	str	r1, [sp, #92]	; 0x5c
   c3616:	7852      	ldrb	r2, [r2, #1]
   c3618:	2a30      	cmp	r2, #48	; 0x30
   c361a:	d0f9      	beq.n	c3610 <_strtod_l+0x2a8>
   c361c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   c3620:	2908      	cmp	r1, #8
   c3622:	f63f af79 	bhi.w	c3518 <_strtod_l+0x1b0>
   c3626:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   c362a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c362c:	9206      	str	r2, [sp, #24]
   c362e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c3630:	1c51      	adds	r1, r2, #1
   c3632:	9117      	str	r1, [sp, #92]	; 0x5c
   c3634:	7852      	ldrb	r2, [r2, #1]
   c3636:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   c363a:	2e09      	cmp	r6, #9
   c363c:	d937      	bls.n	c36ae <_strtod_l+0x346>
   c363e:	9e06      	ldr	r6, [sp, #24]
   c3640:	1b89      	subs	r1, r1, r6
   c3642:	2908      	cmp	r1, #8
   c3644:	f644 661f 	movw	r6, #19999	; 0x4e1f
   c3648:	dc02      	bgt.n	c3650 <_strtod_l+0x2e8>
   c364a:	4576      	cmp	r6, lr
   c364c:	bfa8      	it	ge
   c364e:	4676      	movge	r6, lr
   c3650:	f1bc 0f00 	cmp.w	ip, #0
   c3654:	d000      	beq.n	c3658 <_strtod_l+0x2f0>
   c3656:	4276      	negs	r6, r6
   c3658:	2d00      	cmp	r5, #0
   c365a:	d14d      	bne.n	c36f8 <_strtod_l+0x390>
   c365c:	9904      	ldr	r1, [sp, #16]
   c365e:	4301      	orrs	r1, r0
   c3660:	f47f aec6 	bne.w	c33f0 <_strtod_l+0x88>
   c3664:	2b00      	cmp	r3, #0
   c3666:	f47f aee1 	bne.w	c342c <_strtod_l+0xc4>
   c366a:	2a69      	cmp	r2, #105	; 0x69
   c366c:	d027      	beq.n	c36be <_strtod_l+0x356>
   c366e:	dc24      	bgt.n	c36ba <_strtod_l+0x352>
   c3670:	2a49      	cmp	r2, #73	; 0x49
   c3672:	d024      	beq.n	c36be <_strtod_l+0x356>
   c3674:	2a4e      	cmp	r2, #78	; 0x4e
   c3676:	f47f aed9 	bne.w	c342c <_strtod_l+0xc4>
   c367a:	499f      	ldr	r1, [pc, #636]	; (c38f8 <_strtod_l+0x590>)
   c367c:	a817      	add	r0, sp, #92	; 0x5c
   c367e:	f000 ffd1 	bl	c4624 <__match>
   c3682:	2800      	cmp	r0, #0
   c3684:	f43f aed2 	beq.w	c342c <_strtod_l+0xc4>
   c3688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c368a:	781b      	ldrb	r3, [r3, #0]
   c368c:	2b28      	cmp	r3, #40	; 0x28
   c368e:	d12d      	bne.n	c36ec <_strtod_l+0x384>
   c3690:	499a      	ldr	r1, [pc, #616]	; (c38fc <_strtod_l+0x594>)
   c3692:	aa1a      	add	r2, sp, #104	; 0x68
   c3694:	a817      	add	r0, sp, #92	; 0x5c
   c3696:	f000 ffd9 	bl	c464c <__hexnan>
   c369a:	2805      	cmp	r0, #5
   c369c:	d126      	bne.n	c36ec <_strtod_l+0x384>
   c369e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   c36a0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   c36a4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   c36a8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   c36ac:	e6a0      	b.n	c33f0 <_strtod_l+0x88>
   c36ae:	210a      	movs	r1, #10
   c36b0:	fb01 2e0e 	mla	lr, r1, lr, r2
   c36b4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   c36b8:	e7b9      	b.n	c362e <_strtod_l+0x2c6>
   c36ba:	2a6e      	cmp	r2, #110	; 0x6e
   c36bc:	e7db      	b.n	c3676 <_strtod_l+0x30e>
   c36be:	4990      	ldr	r1, [pc, #576]	; (c3900 <_strtod_l+0x598>)
   c36c0:	a817      	add	r0, sp, #92	; 0x5c
   c36c2:	f000 ffaf 	bl	c4624 <__match>
   c36c6:	2800      	cmp	r0, #0
   c36c8:	f43f aeb0 	beq.w	c342c <_strtod_l+0xc4>
   c36cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c36ce:	498d      	ldr	r1, [pc, #564]	; (c3904 <_strtod_l+0x59c>)
   c36d0:	3b01      	subs	r3, #1
   c36d2:	a817      	add	r0, sp, #92	; 0x5c
   c36d4:	9317      	str	r3, [sp, #92]	; 0x5c
   c36d6:	f000 ffa5 	bl	c4624 <__match>
   c36da:	b910      	cbnz	r0, c36e2 <_strtod_l+0x37a>
   c36dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c36de:	3301      	adds	r3, #1
   c36e0:	9317      	str	r3, [sp, #92]	; 0x5c
   c36e2:	f8df b230 	ldr.w	fp, [pc, #560]	; c3914 <_strtod_l+0x5ac>
   c36e6:	f04f 0a00 	mov.w	sl, #0
   c36ea:	e681      	b.n	c33f0 <_strtod_l+0x88>
   c36ec:	4886      	ldr	r0, [pc, #536]	; (c3908 <_strtod_l+0x5a0>)
   c36ee:	f7ff fd3f 	bl	c3170 <nan>
   c36f2:	ec5b ab10 	vmov	sl, fp, d0
   c36f6:	e67b      	b.n	c33f0 <_strtod_l+0x88>
   c36f8:	9b05      	ldr	r3, [sp, #20]
   c36fa:	9807      	ldr	r0, [sp, #28]
   c36fc:	1af3      	subs	r3, r6, r3
   c36fe:	2f00      	cmp	r7, #0
   c3700:	bf08      	it	eq
   c3702:	462f      	moveq	r7, r5
   c3704:	2d10      	cmp	r5, #16
   c3706:	9306      	str	r3, [sp, #24]
   c3708:	46a8      	mov	r8, r5
   c370a:	bfa8      	it	ge
   c370c:	f04f 0810 	movge.w	r8, #16
   c3710:	f7f0 fdc8 	bl	b42a4 <__aeabi_ui2d>
   c3714:	2d09      	cmp	r5, #9
   c3716:	4682      	mov	sl, r0
   c3718:	468b      	mov	fp, r1
   c371a:	dd13      	ble.n	c3744 <_strtod_l+0x3dc>
   c371c:	4b7b      	ldr	r3, [pc, #492]	; (c390c <_strtod_l+0x5a4>)
   c371e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   c3722:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   c3726:	f7f0 fe37 	bl	b4398 <__aeabi_dmul>
   c372a:	4682      	mov	sl, r0
   c372c:	4648      	mov	r0, r9
   c372e:	468b      	mov	fp, r1
   c3730:	f7f0 fdb8 	bl	b42a4 <__aeabi_ui2d>
   c3734:	4602      	mov	r2, r0
   c3736:	460b      	mov	r3, r1
   c3738:	4650      	mov	r0, sl
   c373a:	4659      	mov	r1, fp
   c373c:	f7f0 fc76 	bl	b402c <__adddf3>
   c3740:	4682      	mov	sl, r0
   c3742:	468b      	mov	fp, r1
   c3744:	2d0f      	cmp	r5, #15
   c3746:	dc38      	bgt.n	c37ba <_strtod_l+0x452>
   c3748:	9b06      	ldr	r3, [sp, #24]
   c374a:	2b00      	cmp	r3, #0
   c374c:	f43f ae50 	beq.w	c33f0 <_strtod_l+0x88>
   c3750:	dd24      	ble.n	c379c <_strtod_l+0x434>
   c3752:	2b16      	cmp	r3, #22
   c3754:	dc0b      	bgt.n	c376e <_strtod_l+0x406>
   c3756:	496d      	ldr	r1, [pc, #436]	; (c390c <_strtod_l+0x5a4>)
   c3758:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c375c:	e9d1 0100 	ldrd	r0, r1, [r1]
   c3760:	4652      	mov	r2, sl
   c3762:	465b      	mov	r3, fp
   c3764:	f7f0 fe18 	bl	b4398 <__aeabi_dmul>
   c3768:	4682      	mov	sl, r0
   c376a:	468b      	mov	fp, r1
   c376c:	e640      	b.n	c33f0 <_strtod_l+0x88>
   c376e:	9a06      	ldr	r2, [sp, #24]
   c3770:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   c3774:	4293      	cmp	r3, r2
   c3776:	db20      	blt.n	c37ba <_strtod_l+0x452>
   c3778:	4c64      	ldr	r4, [pc, #400]	; (c390c <_strtod_l+0x5a4>)
   c377a:	f1c5 050f 	rsb	r5, r5, #15
   c377e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   c3782:	4652      	mov	r2, sl
   c3784:	465b      	mov	r3, fp
   c3786:	e9d1 0100 	ldrd	r0, r1, [r1]
   c378a:	f7f0 fe05 	bl	b4398 <__aeabi_dmul>
   c378e:	9b06      	ldr	r3, [sp, #24]
   c3790:	1b5d      	subs	r5, r3, r5
   c3792:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   c3796:	e9d4 2300 	ldrd	r2, r3, [r4]
   c379a:	e7e3      	b.n	c3764 <_strtod_l+0x3fc>
   c379c:	9b06      	ldr	r3, [sp, #24]
   c379e:	3316      	adds	r3, #22
   c37a0:	db0b      	blt.n	c37ba <_strtod_l+0x452>
   c37a2:	9b05      	ldr	r3, [sp, #20]
   c37a4:	1b9e      	subs	r6, r3, r6
   c37a6:	4b59      	ldr	r3, [pc, #356]	; (c390c <_strtod_l+0x5a4>)
   c37a8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   c37ac:	e9d6 2300 	ldrd	r2, r3, [r6]
   c37b0:	4650      	mov	r0, sl
   c37b2:	4659      	mov	r1, fp
   c37b4:	f7f0 ff1a 	bl	b45ec <__aeabi_ddiv>
   c37b8:	e7d6      	b.n	c3768 <_strtod_l+0x400>
   c37ba:	9b06      	ldr	r3, [sp, #24]
   c37bc:	eba5 0808 	sub.w	r8, r5, r8
   c37c0:	4498      	add	r8, r3
   c37c2:	f1b8 0f00 	cmp.w	r8, #0
   c37c6:	dd74      	ble.n	c38b2 <_strtod_l+0x54a>
   c37c8:	f018 030f 	ands.w	r3, r8, #15
   c37cc:	d00a      	beq.n	c37e4 <_strtod_l+0x47c>
   c37ce:	494f      	ldr	r1, [pc, #316]	; (c390c <_strtod_l+0x5a4>)
   c37d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c37d4:	4652      	mov	r2, sl
   c37d6:	465b      	mov	r3, fp
   c37d8:	e9d1 0100 	ldrd	r0, r1, [r1]
   c37dc:	f7f0 fddc 	bl	b4398 <__aeabi_dmul>
   c37e0:	4682      	mov	sl, r0
   c37e2:	468b      	mov	fp, r1
   c37e4:	f038 080f 	bics.w	r8, r8, #15
   c37e8:	d04f      	beq.n	c388a <_strtod_l+0x522>
   c37ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   c37ee:	dd22      	ble.n	c3836 <_strtod_l+0x4ce>
   c37f0:	2500      	movs	r5, #0
   c37f2:	462e      	mov	r6, r5
   c37f4:	9507      	str	r5, [sp, #28]
   c37f6:	9505      	str	r5, [sp, #20]
   c37f8:	2322      	movs	r3, #34	; 0x22
   c37fa:	f8df b118 	ldr.w	fp, [pc, #280]	; c3914 <_strtod_l+0x5ac>
   c37fe:	6023      	str	r3, [r4, #0]
   c3800:	f04f 0a00 	mov.w	sl, #0
   c3804:	9b07      	ldr	r3, [sp, #28]
   c3806:	2b00      	cmp	r3, #0
   c3808:	f43f adf2 	beq.w	c33f0 <_strtod_l+0x88>
   c380c:	9918      	ldr	r1, [sp, #96]	; 0x60
   c380e:	4620      	mov	r0, r4
   c3810:	f001 f80a 	bl	c4828 <_Bfree>
   c3814:	9905      	ldr	r1, [sp, #20]
   c3816:	4620      	mov	r0, r4
   c3818:	f001 f806 	bl	c4828 <_Bfree>
   c381c:	4631      	mov	r1, r6
   c381e:	4620      	mov	r0, r4
   c3820:	f001 f802 	bl	c4828 <_Bfree>
   c3824:	9907      	ldr	r1, [sp, #28]
   c3826:	4620      	mov	r0, r4
   c3828:	f000 fffe 	bl	c4828 <_Bfree>
   c382c:	4629      	mov	r1, r5
   c382e:	4620      	mov	r0, r4
   c3830:	f000 fffa 	bl	c4828 <_Bfree>
   c3834:	e5dc      	b.n	c33f0 <_strtod_l+0x88>
   c3836:	4b36      	ldr	r3, [pc, #216]	; (c3910 <_strtod_l+0x5a8>)
   c3838:	9304      	str	r3, [sp, #16]
   c383a:	2300      	movs	r3, #0
   c383c:	ea4f 1828 	mov.w	r8, r8, asr #4
   c3840:	4650      	mov	r0, sl
   c3842:	4659      	mov	r1, fp
   c3844:	4699      	mov	r9, r3
   c3846:	f1b8 0f01 	cmp.w	r8, #1
   c384a:	dc21      	bgt.n	c3890 <_strtod_l+0x528>
   c384c:	b10b      	cbz	r3, c3852 <_strtod_l+0x4ea>
   c384e:	4682      	mov	sl, r0
   c3850:	468b      	mov	fp, r1
   c3852:	4b2f      	ldr	r3, [pc, #188]	; (c3910 <_strtod_l+0x5a8>)
   c3854:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   c3858:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   c385c:	4652      	mov	r2, sl
   c385e:	465b      	mov	r3, fp
   c3860:	e9d9 0100 	ldrd	r0, r1, [r9]
   c3864:	f7f0 fd98 	bl	b4398 <__aeabi_dmul>
   c3868:	4b2a      	ldr	r3, [pc, #168]	; (c3914 <_strtod_l+0x5ac>)
   c386a:	460a      	mov	r2, r1
   c386c:	400b      	ands	r3, r1
   c386e:	492a      	ldr	r1, [pc, #168]	; (c3918 <_strtod_l+0x5b0>)
   c3870:	428b      	cmp	r3, r1
   c3872:	4682      	mov	sl, r0
   c3874:	d8bc      	bhi.n	c37f0 <_strtod_l+0x488>
   c3876:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   c387a:	428b      	cmp	r3, r1
   c387c:	bf86      	itte	hi
   c387e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; c391c <_strtod_l+0x5b4>
   c3882:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   c3886:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   c388a:	2300      	movs	r3, #0
   c388c:	9304      	str	r3, [sp, #16]
   c388e:	e084      	b.n	c399a <_strtod_l+0x632>
   c3890:	f018 0f01 	tst.w	r8, #1
   c3894:	d005      	beq.n	c38a2 <_strtod_l+0x53a>
   c3896:	9b04      	ldr	r3, [sp, #16]
   c3898:	e9d3 2300 	ldrd	r2, r3, [r3]
   c389c:	f7f0 fd7c 	bl	b4398 <__aeabi_dmul>
   c38a0:	2301      	movs	r3, #1
   c38a2:	9a04      	ldr	r2, [sp, #16]
   c38a4:	3208      	adds	r2, #8
   c38a6:	f109 0901 	add.w	r9, r9, #1
   c38aa:	ea4f 0868 	mov.w	r8, r8, asr #1
   c38ae:	9204      	str	r2, [sp, #16]
   c38b0:	e7c9      	b.n	c3846 <_strtod_l+0x4de>
   c38b2:	d0ea      	beq.n	c388a <_strtod_l+0x522>
   c38b4:	f1c8 0800 	rsb	r8, r8, #0
   c38b8:	f018 020f 	ands.w	r2, r8, #15
   c38bc:	d00a      	beq.n	c38d4 <_strtod_l+0x56c>
   c38be:	4b13      	ldr	r3, [pc, #76]	; (c390c <_strtod_l+0x5a4>)
   c38c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   c38c4:	4650      	mov	r0, sl
   c38c6:	4659      	mov	r1, fp
   c38c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c38cc:	f7f0 fe8e 	bl	b45ec <__aeabi_ddiv>
   c38d0:	4682      	mov	sl, r0
   c38d2:	468b      	mov	fp, r1
   c38d4:	ea5f 1828 	movs.w	r8, r8, asr #4
   c38d8:	d0d7      	beq.n	c388a <_strtod_l+0x522>
   c38da:	f1b8 0f1f 	cmp.w	r8, #31
   c38de:	dd1f      	ble.n	c3920 <_strtod_l+0x5b8>
   c38e0:	2500      	movs	r5, #0
   c38e2:	462e      	mov	r6, r5
   c38e4:	9507      	str	r5, [sp, #28]
   c38e6:	9505      	str	r5, [sp, #20]
   c38e8:	2322      	movs	r3, #34	; 0x22
   c38ea:	f04f 0a00 	mov.w	sl, #0
   c38ee:	f04f 0b00 	mov.w	fp, #0
   c38f2:	6023      	str	r3, [r4, #0]
   c38f4:	e786      	b.n	c3804 <_strtod_l+0x49c>
   c38f6:	bf00      	nop
   c38f8:	000c52ac 	.word	0x000c52ac
   c38fc:	000c8f84 	.word	0x000c8f84
   c3900:	000c52b0 	.word	0x000c52b0
   c3904:	000c8f68 	.word	0x000c8f68
   c3908:	000c5650 	.word	0x000c5650
   c390c:	000c91d0 	.word	0x000c91d0
   c3910:	000c91a8 	.word	0x000c91a8
   c3914:	7ff00000 	.word	0x7ff00000
   c3918:	7ca00000 	.word	0x7ca00000
   c391c:	7fefffff 	.word	0x7fefffff
   c3920:	f018 0310 	ands.w	r3, r8, #16
   c3924:	bf18      	it	ne
   c3926:	236a      	movne	r3, #106	; 0x6a
   c3928:	f8df 93ac 	ldr.w	r9, [pc, #940]	; c3cd8 <_strtod_l+0x970>
   c392c:	9304      	str	r3, [sp, #16]
   c392e:	4650      	mov	r0, sl
   c3930:	4659      	mov	r1, fp
   c3932:	2300      	movs	r3, #0
   c3934:	f018 0f01 	tst.w	r8, #1
   c3938:	d004      	beq.n	c3944 <_strtod_l+0x5dc>
   c393a:	e9d9 2300 	ldrd	r2, r3, [r9]
   c393e:	f7f0 fd2b 	bl	b4398 <__aeabi_dmul>
   c3942:	2301      	movs	r3, #1
   c3944:	ea5f 0868 	movs.w	r8, r8, asr #1
   c3948:	f109 0908 	add.w	r9, r9, #8
   c394c:	d1f2      	bne.n	c3934 <_strtod_l+0x5cc>
   c394e:	b10b      	cbz	r3, c3954 <_strtod_l+0x5ec>
   c3950:	4682      	mov	sl, r0
   c3952:	468b      	mov	fp, r1
   c3954:	9b04      	ldr	r3, [sp, #16]
   c3956:	b1c3      	cbz	r3, c398a <_strtod_l+0x622>
   c3958:	f3cb 520a 	ubfx	r2, fp, #20, #11
   c395c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   c3960:	2b00      	cmp	r3, #0
   c3962:	4659      	mov	r1, fp
   c3964:	dd11      	ble.n	c398a <_strtod_l+0x622>
   c3966:	2b1f      	cmp	r3, #31
   c3968:	f340 8124 	ble.w	c3bb4 <_strtod_l+0x84c>
   c396c:	2b34      	cmp	r3, #52	; 0x34
   c396e:	bfde      	ittt	le
   c3970:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   c3974:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   c3978:	fa03 f202 	lslle.w	r2, r3, r2
   c397c:	f04f 0a00 	mov.w	sl, #0
   c3980:	bfcc      	ite	gt
   c3982:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   c3986:	ea02 0b01 	andle.w	fp, r2, r1
   c398a:	2200      	movs	r2, #0
   c398c:	2300      	movs	r3, #0
   c398e:	4650      	mov	r0, sl
   c3990:	4659      	mov	r1, fp
   c3992:	f7f0 ff69 	bl	b4868 <__aeabi_dcmpeq>
   c3996:	2800      	cmp	r0, #0
   c3998:	d1a2      	bne.n	c38e0 <_strtod_l+0x578>
   c399a:	9b07      	ldr	r3, [sp, #28]
   c399c:	9300      	str	r3, [sp, #0]
   c399e:	9908      	ldr	r1, [sp, #32]
   c39a0:	462b      	mov	r3, r5
   c39a2:	463a      	mov	r2, r7
   c39a4:	4620      	mov	r0, r4
   c39a6:	f000 ffa7 	bl	c48f8 <__s2b>
   c39aa:	9007      	str	r0, [sp, #28]
   c39ac:	2800      	cmp	r0, #0
   c39ae:	f43f af1f 	beq.w	c37f0 <_strtod_l+0x488>
   c39b2:	9b05      	ldr	r3, [sp, #20]
   c39b4:	1b9e      	subs	r6, r3, r6
   c39b6:	9b06      	ldr	r3, [sp, #24]
   c39b8:	2b00      	cmp	r3, #0
   c39ba:	bfb4      	ite	lt
   c39bc:	4633      	movlt	r3, r6
   c39be:	2300      	movge	r3, #0
   c39c0:	930c      	str	r3, [sp, #48]	; 0x30
   c39c2:	9b06      	ldr	r3, [sp, #24]
   c39c4:	2500      	movs	r5, #0
   c39c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c39ca:	9312      	str	r3, [sp, #72]	; 0x48
   c39cc:	462e      	mov	r6, r5
   c39ce:	9b07      	ldr	r3, [sp, #28]
   c39d0:	4620      	mov	r0, r4
   c39d2:	6859      	ldr	r1, [r3, #4]
   c39d4:	f000 fee8 	bl	c47a8 <_Balloc>
   c39d8:	9005      	str	r0, [sp, #20]
   c39da:	2800      	cmp	r0, #0
   c39dc:	f43f af0c 	beq.w	c37f8 <_strtod_l+0x490>
   c39e0:	9b07      	ldr	r3, [sp, #28]
   c39e2:	691a      	ldr	r2, [r3, #16]
   c39e4:	3202      	adds	r2, #2
   c39e6:	f103 010c 	add.w	r1, r3, #12
   c39ea:	0092      	lsls	r2, r2, #2
   c39ec:	300c      	adds	r0, #12
   c39ee:	f7ff fbe7 	bl	c31c0 <memcpy>
   c39f2:	ec4b ab10 	vmov	d0, sl, fp
   c39f6:	aa1a      	add	r2, sp, #104	; 0x68
   c39f8:	a919      	add	r1, sp, #100	; 0x64
   c39fa:	4620      	mov	r0, r4
   c39fc:	f001 fac2 	bl	c4f84 <__d2b>
   c3a00:	ec4b ab18 	vmov	d8, sl, fp
   c3a04:	9018      	str	r0, [sp, #96]	; 0x60
   c3a06:	2800      	cmp	r0, #0
   c3a08:	f43f aef6 	beq.w	c37f8 <_strtod_l+0x490>
   c3a0c:	2101      	movs	r1, #1
   c3a0e:	4620      	mov	r0, r4
   c3a10:	f001 f80c 	bl	c4a2c <__i2b>
   c3a14:	4606      	mov	r6, r0
   c3a16:	2800      	cmp	r0, #0
   c3a18:	f43f aeee 	beq.w	c37f8 <_strtod_l+0x490>
   c3a1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c3a1e:	9904      	ldr	r1, [sp, #16]
   c3a20:	2b00      	cmp	r3, #0
   c3a22:	bfab      	itete	ge
   c3a24:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   c3a26:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   c3a28:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   c3a2a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   c3a2e:	bfac      	ite	ge
   c3a30:	eb03 0902 	addge.w	r9, r3, r2
   c3a34:	1ad7      	sublt	r7, r2, r3
   c3a36:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c3a38:	eba3 0801 	sub.w	r8, r3, r1
   c3a3c:	4490      	add	r8, r2
   c3a3e:	4ba1      	ldr	r3, [pc, #644]	; (c3cc4 <_strtod_l+0x95c>)
   c3a40:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c3a44:	4598      	cmp	r8, r3
   c3a46:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   c3a4a:	f280 80c7 	bge.w	c3bdc <_strtod_l+0x874>
   c3a4e:	eba3 0308 	sub.w	r3, r3, r8
   c3a52:	2b1f      	cmp	r3, #31
   c3a54:	eba2 0203 	sub.w	r2, r2, r3
   c3a58:	f04f 0101 	mov.w	r1, #1
   c3a5c:	f300 80b1 	bgt.w	c3bc2 <_strtod_l+0x85a>
   c3a60:	fa01 f303 	lsl.w	r3, r1, r3
   c3a64:	930d      	str	r3, [sp, #52]	; 0x34
   c3a66:	2300      	movs	r3, #0
   c3a68:	9308      	str	r3, [sp, #32]
   c3a6a:	eb09 0802 	add.w	r8, r9, r2
   c3a6e:	9b04      	ldr	r3, [sp, #16]
   c3a70:	45c1      	cmp	r9, r8
   c3a72:	4417      	add	r7, r2
   c3a74:	441f      	add	r7, r3
   c3a76:	464b      	mov	r3, r9
   c3a78:	bfa8      	it	ge
   c3a7a:	4643      	movge	r3, r8
   c3a7c:	42bb      	cmp	r3, r7
   c3a7e:	bfa8      	it	ge
   c3a80:	463b      	movge	r3, r7
   c3a82:	2b00      	cmp	r3, #0
   c3a84:	bfc2      	ittt	gt
   c3a86:	eba8 0803 	subgt.w	r8, r8, r3
   c3a8a:	1aff      	subgt	r7, r7, r3
   c3a8c:	eba9 0903 	subgt.w	r9, r9, r3
   c3a90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c3a92:	2b00      	cmp	r3, #0
   c3a94:	dd17      	ble.n	c3ac6 <_strtod_l+0x75e>
   c3a96:	4631      	mov	r1, r6
   c3a98:	461a      	mov	r2, r3
   c3a9a:	4620      	mov	r0, r4
   c3a9c:	f001 f886 	bl	c4bac <__pow5mult>
   c3aa0:	4606      	mov	r6, r0
   c3aa2:	2800      	cmp	r0, #0
   c3aa4:	f43f aea8 	beq.w	c37f8 <_strtod_l+0x490>
   c3aa8:	4601      	mov	r1, r0
   c3aaa:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c3aac:	4620      	mov	r0, r4
   c3aae:	f000 ffd3 	bl	c4a58 <__multiply>
   c3ab2:	900b      	str	r0, [sp, #44]	; 0x2c
   c3ab4:	2800      	cmp	r0, #0
   c3ab6:	f43f ae9f 	beq.w	c37f8 <_strtod_l+0x490>
   c3aba:	9918      	ldr	r1, [sp, #96]	; 0x60
   c3abc:	4620      	mov	r0, r4
   c3abe:	f000 feb3 	bl	c4828 <_Bfree>
   c3ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c3ac4:	9318      	str	r3, [sp, #96]	; 0x60
   c3ac6:	f1b8 0f00 	cmp.w	r8, #0
   c3aca:	f300 808c 	bgt.w	c3be6 <_strtod_l+0x87e>
   c3ace:	9b06      	ldr	r3, [sp, #24]
   c3ad0:	2b00      	cmp	r3, #0
   c3ad2:	dd08      	ble.n	c3ae6 <_strtod_l+0x77e>
   c3ad4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   c3ad6:	9905      	ldr	r1, [sp, #20]
   c3ad8:	4620      	mov	r0, r4
   c3ada:	f001 f867 	bl	c4bac <__pow5mult>
   c3ade:	9005      	str	r0, [sp, #20]
   c3ae0:	2800      	cmp	r0, #0
   c3ae2:	f43f ae89 	beq.w	c37f8 <_strtod_l+0x490>
   c3ae6:	2f00      	cmp	r7, #0
   c3ae8:	dd08      	ble.n	c3afc <_strtod_l+0x794>
   c3aea:	9905      	ldr	r1, [sp, #20]
   c3aec:	463a      	mov	r2, r7
   c3aee:	4620      	mov	r0, r4
   c3af0:	f001 f8b6 	bl	c4c60 <__lshift>
   c3af4:	9005      	str	r0, [sp, #20]
   c3af6:	2800      	cmp	r0, #0
   c3af8:	f43f ae7e 	beq.w	c37f8 <_strtod_l+0x490>
   c3afc:	f1b9 0f00 	cmp.w	r9, #0
   c3b00:	dd08      	ble.n	c3b14 <_strtod_l+0x7ac>
   c3b02:	4631      	mov	r1, r6
   c3b04:	464a      	mov	r2, r9
   c3b06:	4620      	mov	r0, r4
   c3b08:	f001 f8aa 	bl	c4c60 <__lshift>
   c3b0c:	4606      	mov	r6, r0
   c3b0e:	2800      	cmp	r0, #0
   c3b10:	f43f ae72 	beq.w	c37f8 <_strtod_l+0x490>
   c3b14:	9a05      	ldr	r2, [sp, #20]
   c3b16:	9918      	ldr	r1, [sp, #96]	; 0x60
   c3b18:	4620      	mov	r0, r4
   c3b1a:	f001 f92d 	bl	c4d78 <__mdiff>
   c3b1e:	4605      	mov	r5, r0
   c3b20:	2800      	cmp	r0, #0
   c3b22:	f43f ae69 	beq.w	c37f8 <_strtod_l+0x490>
   c3b26:	68c3      	ldr	r3, [r0, #12]
   c3b28:	930b      	str	r3, [sp, #44]	; 0x2c
   c3b2a:	2300      	movs	r3, #0
   c3b2c:	60c3      	str	r3, [r0, #12]
   c3b2e:	4631      	mov	r1, r6
   c3b30:	f001 f906 	bl	c4d40 <__mcmp>
   c3b34:	2800      	cmp	r0, #0
   c3b36:	da60      	bge.n	c3bfa <_strtod_l+0x892>
   c3b38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c3b3a:	ea53 030a 	orrs.w	r3, r3, sl
   c3b3e:	f040 8082 	bne.w	c3c46 <_strtod_l+0x8de>
   c3b42:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c3b46:	2b00      	cmp	r3, #0
   c3b48:	d17d      	bne.n	c3c46 <_strtod_l+0x8de>
   c3b4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c3b4e:	0d1b      	lsrs	r3, r3, #20
   c3b50:	051b      	lsls	r3, r3, #20
   c3b52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   c3b56:	d976      	bls.n	c3c46 <_strtod_l+0x8de>
   c3b58:	696b      	ldr	r3, [r5, #20]
   c3b5a:	b913      	cbnz	r3, c3b62 <_strtod_l+0x7fa>
   c3b5c:	692b      	ldr	r3, [r5, #16]
   c3b5e:	2b01      	cmp	r3, #1
   c3b60:	dd71      	ble.n	c3c46 <_strtod_l+0x8de>
   c3b62:	4629      	mov	r1, r5
   c3b64:	2201      	movs	r2, #1
   c3b66:	4620      	mov	r0, r4
   c3b68:	f001 f87a 	bl	c4c60 <__lshift>
   c3b6c:	4631      	mov	r1, r6
   c3b6e:	4605      	mov	r5, r0
   c3b70:	f001 f8e6 	bl	c4d40 <__mcmp>
   c3b74:	2800      	cmp	r0, #0
   c3b76:	dd66      	ble.n	c3c46 <_strtod_l+0x8de>
   c3b78:	9904      	ldr	r1, [sp, #16]
   c3b7a:	4a53      	ldr	r2, [pc, #332]	; (c3cc8 <_strtod_l+0x960>)
   c3b7c:	465b      	mov	r3, fp
   c3b7e:	2900      	cmp	r1, #0
   c3b80:	f000 8081 	beq.w	c3c86 <_strtod_l+0x91e>
   c3b84:	ea02 010b 	and.w	r1, r2, fp
   c3b88:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   c3b8c:	dc7b      	bgt.n	c3c86 <_strtod_l+0x91e>
   c3b8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   c3b92:	f77f aea9 	ble.w	c38e8 <_strtod_l+0x580>
   c3b96:	4b4d      	ldr	r3, [pc, #308]	; (c3ccc <_strtod_l+0x964>)
   c3b98:	4650      	mov	r0, sl
   c3b9a:	4659      	mov	r1, fp
   c3b9c:	2200      	movs	r2, #0
   c3b9e:	f7f0 fbfb 	bl	b4398 <__aeabi_dmul>
   c3ba2:	460b      	mov	r3, r1
   c3ba4:	4303      	orrs	r3, r0
   c3ba6:	bf08      	it	eq
   c3ba8:	2322      	moveq	r3, #34	; 0x22
   c3baa:	4682      	mov	sl, r0
   c3bac:	468b      	mov	fp, r1
   c3bae:	bf08      	it	eq
   c3bb0:	6023      	streq	r3, [r4, #0]
   c3bb2:	e62b      	b.n	c380c <_strtod_l+0x4a4>
   c3bb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c3bb8:	fa02 f303 	lsl.w	r3, r2, r3
   c3bbc:	ea03 0a0a 	and.w	sl, r3, sl
   c3bc0:	e6e3      	b.n	c398a <_strtod_l+0x622>
   c3bc2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   c3bc6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   c3bca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   c3bce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   c3bd2:	fa01 f308 	lsl.w	r3, r1, r8
   c3bd6:	9308      	str	r3, [sp, #32]
   c3bd8:	910d      	str	r1, [sp, #52]	; 0x34
   c3bda:	e746      	b.n	c3a6a <_strtod_l+0x702>
   c3bdc:	2300      	movs	r3, #0
   c3bde:	9308      	str	r3, [sp, #32]
   c3be0:	2301      	movs	r3, #1
   c3be2:	930d      	str	r3, [sp, #52]	; 0x34
   c3be4:	e741      	b.n	c3a6a <_strtod_l+0x702>
   c3be6:	9918      	ldr	r1, [sp, #96]	; 0x60
   c3be8:	4642      	mov	r2, r8
   c3bea:	4620      	mov	r0, r4
   c3bec:	f001 f838 	bl	c4c60 <__lshift>
   c3bf0:	9018      	str	r0, [sp, #96]	; 0x60
   c3bf2:	2800      	cmp	r0, #0
   c3bf4:	f47f af6b 	bne.w	c3ace <_strtod_l+0x766>
   c3bf8:	e5fe      	b.n	c37f8 <_strtod_l+0x490>
   c3bfa:	465f      	mov	r7, fp
   c3bfc:	d16e      	bne.n	c3cdc <_strtod_l+0x974>
   c3bfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c3c00:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c3c04:	b342      	cbz	r2, c3c58 <_strtod_l+0x8f0>
   c3c06:	4a32      	ldr	r2, [pc, #200]	; (c3cd0 <_strtod_l+0x968>)
   c3c08:	4293      	cmp	r3, r2
   c3c0a:	d128      	bne.n	c3c5e <_strtod_l+0x8f6>
   c3c0c:	9b04      	ldr	r3, [sp, #16]
   c3c0e:	4651      	mov	r1, sl
   c3c10:	b1eb      	cbz	r3, c3c4e <_strtod_l+0x8e6>
   c3c12:	4b2d      	ldr	r3, [pc, #180]	; (c3cc8 <_strtod_l+0x960>)
   c3c14:	403b      	ands	r3, r7
   c3c16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c3c1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c3c1e:	d819      	bhi.n	c3c54 <_strtod_l+0x8ec>
   c3c20:	0d1b      	lsrs	r3, r3, #20
   c3c22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c3c26:	fa02 f303 	lsl.w	r3, r2, r3
   c3c2a:	4299      	cmp	r1, r3
   c3c2c:	d117      	bne.n	c3c5e <_strtod_l+0x8f6>
   c3c2e:	4b29      	ldr	r3, [pc, #164]	; (c3cd4 <_strtod_l+0x96c>)
   c3c30:	429f      	cmp	r7, r3
   c3c32:	d102      	bne.n	c3c3a <_strtod_l+0x8d2>
   c3c34:	3101      	adds	r1, #1
   c3c36:	f43f addf 	beq.w	c37f8 <_strtod_l+0x490>
   c3c3a:	4b23      	ldr	r3, [pc, #140]	; (c3cc8 <_strtod_l+0x960>)
   c3c3c:	403b      	ands	r3, r7
   c3c3e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   c3c42:	f04f 0a00 	mov.w	sl, #0
   c3c46:	9b04      	ldr	r3, [sp, #16]
   c3c48:	2b00      	cmp	r3, #0
   c3c4a:	d1a4      	bne.n	c3b96 <_strtod_l+0x82e>
   c3c4c:	e5de      	b.n	c380c <_strtod_l+0x4a4>
   c3c4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c3c52:	e7ea      	b.n	c3c2a <_strtod_l+0x8c2>
   c3c54:	4613      	mov	r3, r2
   c3c56:	e7e8      	b.n	c3c2a <_strtod_l+0x8c2>
   c3c58:	ea53 030a 	orrs.w	r3, r3, sl
   c3c5c:	d08c      	beq.n	c3b78 <_strtod_l+0x810>
   c3c5e:	9b08      	ldr	r3, [sp, #32]
   c3c60:	b1db      	cbz	r3, c3c9a <_strtod_l+0x932>
   c3c62:	423b      	tst	r3, r7
   c3c64:	d0ef      	beq.n	c3c46 <_strtod_l+0x8de>
   c3c66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c3c68:	9a04      	ldr	r2, [sp, #16]
   c3c6a:	4650      	mov	r0, sl
   c3c6c:	4659      	mov	r1, fp
   c3c6e:	b1c3      	cbz	r3, c3ca2 <_strtod_l+0x93a>
   c3c70:	f7ff fb5b 	bl	c332a <sulp>
   c3c74:	4602      	mov	r2, r0
   c3c76:	460b      	mov	r3, r1
   c3c78:	ec51 0b18 	vmov	r0, r1, d8
   c3c7c:	f7f0 f9d6 	bl	b402c <__adddf3>
   c3c80:	4682      	mov	sl, r0
   c3c82:	468b      	mov	fp, r1
   c3c84:	e7df      	b.n	c3c46 <_strtod_l+0x8de>
   c3c86:	4013      	ands	r3, r2
   c3c88:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   c3c8c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   c3c90:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   c3c94:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c3c98:	e7d5      	b.n	c3c46 <_strtod_l+0x8de>
   c3c9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c3c9c:	ea13 0f0a 	tst.w	r3, sl
   c3ca0:	e7e0      	b.n	c3c64 <_strtod_l+0x8fc>
   c3ca2:	f7ff fb42 	bl	c332a <sulp>
   c3ca6:	4602      	mov	r2, r0
   c3ca8:	460b      	mov	r3, r1
   c3caa:	ec51 0b18 	vmov	r0, r1, d8
   c3cae:	f7f0 f9bb 	bl	b4028 <__aeabi_dsub>
   c3cb2:	2200      	movs	r2, #0
   c3cb4:	2300      	movs	r3, #0
   c3cb6:	4682      	mov	sl, r0
   c3cb8:	468b      	mov	fp, r1
   c3cba:	f7f0 fdd5 	bl	b4868 <__aeabi_dcmpeq>
   c3cbe:	2800      	cmp	r0, #0
   c3cc0:	d0c1      	beq.n	c3c46 <_strtod_l+0x8de>
   c3cc2:	e611      	b.n	c38e8 <_strtod_l+0x580>
   c3cc4:	fffffc02 	.word	0xfffffc02
   c3cc8:	7ff00000 	.word	0x7ff00000
   c3ccc:	39500000 	.word	0x39500000
   c3cd0:	000fffff 	.word	0x000fffff
   c3cd4:	7fefffff 	.word	0x7fefffff
   c3cd8:	000c8f98 	.word	0x000c8f98
   c3cdc:	4631      	mov	r1, r6
   c3cde:	4628      	mov	r0, r5
   c3ce0:	f001 f9ac 	bl	c503c <__ratio>
   c3ce4:	ec59 8b10 	vmov	r8, r9, d0
   c3ce8:	ee10 0a10 	vmov	r0, s0
   c3cec:	2200      	movs	r2, #0
   c3cee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c3cf2:	4649      	mov	r1, r9
   c3cf4:	f7f0 fdcc 	bl	b4890 <__aeabi_dcmple>
   c3cf8:	2800      	cmp	r0, #0
   c3cfa:	d07a      	beq.n	c3df2 <_strtod_l+0xa8a>
   c3cfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c3cfe:	2b00      	cmp	r3, #0
   c3d00:	d04a      	beq.n	c3d98 <_strtod_l+0xa30>
   c3d02:	4b95      	ldr	r3, [pc, #596]	; (c3f58 <_strtod_l+0xbf0>)
   c3d04:	2200      	movs	r2, #0
   c3d06:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c3d0a:	f8df 924c 	ldr.w	r9, [pc, #588]	; c3f58 <_strtod_l+0xbf0>
   c3d0e:	f04f 0800 	mov.w	r8, #0
   c3d12:	4b92      	ldr	r3, [pc, #584]	; (c3f5c <_strtod_l+0xbf4>)
   c3d14:	403b      	ands	r3, r7
   c3d16:	930d      	str	r3, [sp, #52]	; 0x34
   c3d18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c3d1a:	4b91      	ldr	r3, [pc, #580]	; (c3f60 <_strtod_l+0xbf8>)
   c3d1c:	429a      	cmp	r2, r3
   c3d1e:	f040 80b0 	bne.w	c3e82 <_strtod_l+0xb1a>
   c3d22:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c3d26:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   c3d2a:	ec4b ab10 	vmov	d0, sl, fp
   c3d2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c3d32:	f001 f8ab 	bl	c4e8c <__ulp>
   c3d36:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c3d3a:	ec53 2b10 	vmov	r2, r3, d0
   c3d3e:	f7f0 fb2b 	bl	b4398 <__aeabi_dmul>
   c3d42:	4652      	mov	r2, sl
   c3d44:	465b      	mov	r3, fp
   c3d46:	f7f0 f971 	bl	b402c <__adddf3>
   c3d4a:	460b      	mov	r3, r1
   c3d4c:	4983      	ldr	r1, [pc, #524]	; (c3f5c <_strtod_l+0xbf4>)
   c3d4e:	4a85      	ldr	r2, [pc, #532]	; (c3f64 <_strtod_l+0xbfc>)
   c3d50:	4019      	ands	r1, r3
   c3d52:	4291      	cmp	r1, r2
   c3d54:	4682      	mov	sl, r0
   c3d56:	d960      	bls.n	c3e1a <_strtod_l+0xab2>
   c3d58:	ee18 3a90 	vmov	r3, s17
   c3d5c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   c3d60:	4293      	cmp	r3, r2
   c3d62:	d104      	bne.n	c3d6e <_strtod_l+0xa06>
   c3d64:	ee18 3a10 	vmov	r3, s16
   c3d68:	3301      	adds	r3, #1
   c3d6a:	f43f ad45 	beq.w	c37f8 <_strtod_l+0x490>
   c3d6e:	f8df b200 	ldr.w	fp, [pc, #512]	; c3f70 <_strtod_l+0xc08>
   c3d72:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c3d76:	9918      	ldr	r1, [sp, #96]	; 0x60
   c3d78:	4620      	mov	r0, r4
   c3d7a:	f000 fd55 	bl	c4828 <_Bfree>
   c3d7e:	9905      	ldr	r1, [sp, #20]
   c3d80:	4620      	mov	r0, r4
   c3d82:	f000 fd51 	bl	c4828 <_Bfree>
   c3d86:	4631      	mov	r1, r6
   c3d88:	4620      	mov	r0, r4
   c3d8a:	f000 fd4d 	bl	c4828 <_Bfree>
   c3d8e:	4629      	mov	r1, r5
   c3d90:	4620      	mov	r0, r4
   c3d92:	f000 fd49 	bl	c4828 <_Bfree>
   c3d96:	e61a      	b.n	c39ce <_strtod_l+0x666>
   c3d98:	f1ba 0f00 	cmp.w	sl, #0
   c3d9c:	d11b      	bne.n	c3dd6 <_strtod_l+0xa6e>
   c3d9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c3da2:	b9f3      	cbnz	r3, c3de2 <_strtod_l+0xa7a>
   c3da4:	4b6c      	ldr	r3, [pc, #432]	; (c3f58 <_strtod_l+0xbf0>)
   c3da6:	2200      	movs	r2, #0
   c3da8:	4640      	mov	r0, r8
   c3daa:	4649      	mov	r1, r9
   c3dac:	f7f0 fd66 	bl	b487c <__aeabi_dcmplt>
   c3db0:	b9d0      	cbnz	r0, c3de8 <_strtod_l+0xa80>
   c3db2:	4640      	mov	r0, r8
   c3db4:	4649      	mov	r1, r9
   c3db6:	4b6c      	ldr	r3, [pc, #432]	; (c3f68 <_strtod_l+0xc00>)
   c3db8:	2200      	movs	r2, #0
   c3dba:	f7f0 faed 	bl	b4398 <__aeabi_dmul>
   c3dbe:	4680      	mov	r8, r0
   c3dc0:	4689      	mov	r9, r1
   c3dc2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   c3dc6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   c3dca:	9315      	str	r3, [sp, #84]	; 0x54
   c3dcc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   c3dd0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c3dd4:	e79d      	b.n	c3d12 <_strtod_l+0x9aa>
   c3dd6:	f1ba 0f01 	cmp.w	sl, #1
   c3dda:	d102      	bne.n	c3de2 <_strtod_l+0xa7a>
   c3ddc:	2f00      	cmp	r7, #0
   c3dde:	f43f ad83 	beq.w	c38e8 <_strtod_l+0x580>
   c3de2:	4b62      	ldr	r3, [pc, #392]	; (c3f6c <_strtod_l+0xc04>)
   c3de4:	2200      	movs	r2, #0
   c3de6:	e78e      	b.n	c3d06 <_strtod_l+0x99e>
   c3de8:	f8df 917c 	ldr.w	r9, [pc, #380]	; c3f68 <_strtod_l+0xc00>
   c3dec:	f04f 0800 	mov.w	r8, #0
   c3df0:	e7e7      	b.n	c3dc2 <_strtod_l+0xa5a>
   c3df2:	4b5d      	ldr	r3, [pc, #372]	; (c3f68 <_strtod_l+0xc00>)
   c3df4:	4640      	mov	r0, r8
   c3df6:	4649      	mov	r1, r9
   c3df8:	2200      	movs	r2, #0
   c3dfa:	f7f0 facd 	bl	b4398 <__aeabi_dmul>
   c3dfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c3e00:	4680      	mov	r8, r0
   c3e02:	4689      	mov	r9, r1
   c3e04:	b933      	cbnz	r3, c3e14 <_strtod_l+0xaac>
   c3e06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c3e0a:	900e      	str	r0, [sp, #56]	; 0x38
   c3e0c:	930f      	str	r3, [sp, #60]	; 0x3c
   c3e0e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   c3e12:	e7dd      	b.n	c3dd0 <_strtod_l+0xa68>
   c3e14:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   c3e18:	e7f9      	b.n	c3e0e <_strtod_l+0xaa6>
   c3e1a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   c3e1e:	9b04      	ldr	r3, [sp, #16]
   c3e20:	2b00      	cmp	r3, #0
   c3e22:	d1a8      	bne.n	c3d76 <_strtod_l+0xa0e>
   c3e24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c3e28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c3e2a:	0d1b      	lsrs	r3, r3, #20
   c3e2c:	051b      	lsls	r3, r3, #20
   c3e2e:	429a      	cmp	r2, r3
   c3e30:	d1a1      	bne.n	c3d76 <_strtod_l+0xa0e>
   c3e32:	4640      	mov	r0, r8
   c3e34:	4649      	mov	r1, r9
   c3e36:	f7f0 fe47 	bl	b4ac8 <__aeabi_d2lz>
   c3e3a:	f7f0 fa7f 	bl	b433c <__aeabi_l2d>
   c3e3e:	4602      	mov	r2, r0
   c3e40:	460b      	mov	r3, r1
   c3e42:	4640      	mov	r0, r8
   c3e44:	4649      	mov	r1, r9
   c3e46:	f7f0 f8ef 	bl	b4028 <__aeabi_dsub>
   c3e4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c3e4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c3e50:	ea43 030a 	orr.w	r3, r3, sl
   c3e54:	4313      	orrs	r3, r2
   c3e56:	4680      	mov	r8, r0
   c3e58:	4689      	mov	r9, r1
   c3e5a:	d055      	beq.n	c3f08 <_strtod_l+0xba0>
   c3e5c:	a336      	add	r3, pc, #216	; (adr r3, c3f38 <_strtod_l+0xbd0>)
   c3e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3e62:	f7f0 fd0b 	bl	b487c <__aeabi_dcmplt>
   c3e66:	2800      	cmp	r0, #0
   c3e68:	f47f acd0 	bne.w	c380c <_strtod_l+0x4a4>
   c3e6c:	a334      	add	r3, pc, #208	; (adr r3, c3f40 <_strtod_l+0xbd8>)
   c3e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3e72:	4640      	mov	r0, r8
   c3e74:	4649      	mov	r1, r9
   c3e76:	f7f0 fd1f 	bl	b48b8 <__aeabi_dcmpgt>
   c3e7a:	2800      	cmp	r0, #0
   c3e7c:	f43f af7b 	beq.w	c3d76 <_strtod_l+0xa0e>
   c3e80:	e4c4      	b.n	c380c <_strtod_l+0x4a4>
   c3e82:	9b04      	ldr	r3, [sp, #16]
   c3e84:	b333      	cbz	r3, c3ed4 <_strtod_l+0xb6c>
   c3e86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c3e88:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c3e8c:	d822      	bhi.n	c3ed4 <_strtod_l+0xb6c>
   c3e8e:	a32e      	add	r3, pc, #184	; (adr r3, c3f48 <_strtod_l+0xbe0>)
   c3e90:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3e94:	4640      	mov	r0, r8
   c3e96:	4649      	mov	r1, r9
   c3e98:	f7f0 fcfa 	bl	b4890 <__aeabi_dcmple>
   c3e9c:	b1a0      	cbz	r0, c3ec8 <_strtod_l+0xb60>
   c3e9e:	4649      	mov	r1, r9
   c3ea0:	4640      	mov	r0, r8
   c3ea2:	f7f0 fd51 	bl	b4948 <__aeabi_d2uiz>
   c3ea6:	2801      	cmp	r0, #1
   c3ea8:	bf38      	it	cc
   c3eaa:	2001      	movcc	r0, #1
   c3eac:	f7f0 f9fa 	bl	b42a4 <__aeabi_ui2d>
   c3eb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c3eb2:	4680      	mov	r8, r0
   c3eb4:	4689      	mov	r9, r1
   c3eb6:	bb23      	cbnz	r3, c3f02 <_strtod_l+0xb9a>
   c3eb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c3ebc:	9010      	str	r0, [sp, #64]	; 0x40
   c3ebe:	9311      	str	r3, [sp, #68]	; 0x44
   c3ec0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   c3ec4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c3ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c3eca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c3ecc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   c3ed0:	1a9b      	subs	r3, r3, r2
   c3ed2:	9309      	str	r3, [sp, #36]	; 0x24
   c3ed4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c3ed8:	eeb0 0a48 	vmov.f32	s0, s16
   c3edc:	eef0 0a68 	vmov.f32	s1, s17
   c3ee0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c3ee4:	f000 ffd2 	bl	c4e8c <__ulp>
   c3ee8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c3eec:	ec53 2b10 	vmov	r2, r3, d0
   c3ef0:	f7f0 fa52 	bl	b4398 <__aeabi_dmul>
   c3ef4:	ec53 2b18 	vmov	r2, r3, d8
   c3ef8:	f7f0 f898 	bl	b402c <__adddf3>
   c3efc:	4682      	mov	sl, r0
   c3efe:	468b      	mov	fp, r1
   c3f00:	e78d      	b.n	c3e1e <_strtod_l+0xab6>
   c3f02:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   c3f06:	e7db      	b.n	c3ec0 <_strtod_l+0xb58>
   c3f08:	a311      	add	r3, pc, #68	; (adr r3, c3f50 <_strtod_l+0xbe8>)
   c3f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3f0e:	f7f0 fcb5 	bl	b487c <__aeabi_dcmplt>
   c3f12:	e7b2      	b.n	c3e7a <_strtod_l+0xb12>
   c3f14:	2300      	movs	r3, #0
   c3f16:	930a      	str	r3, [sp, #40]	; 0x28
   c3f18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c3f1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c3f1c:	6013      	str	r3, [r2, #0]
   c3f1e:	f7ff ba6b 	b.w	c33f8 <_strtod_l+0x90>
   c3f22:	2a65      	cmp	r2, #101	; 0x65
   c3f24:	f43f ab5f 	beq.w	c35e6 <_strtod_l+0x27e>
   c3f28:	2a45      	cmp	r2, #69	; 0x45
   c3f2a:	f43f ab5c 	beq.w	c35e6 <_strtod_l+0x27e>
   c3f2e:	2301      	movs	r3, #1
   c3f30:	f7ff bb94 	b.w	c365c <_strtod_l+0x2f4>
   c3f34:	f3af 8000 	nop.w
   c3f38:	94a03595 	.word	0x94a03595
   c3f3c:	3fdfffff 	.word	0x3fdfffff
   c3f40:	35afe535 	.word	0x35afe535
   c3f44:	3fe00000 	.word	0x3fe00000
   c3f48:	ffc00000 	.word	0xffc00000
   c3f4c:	41dfffff 	.word	0x41dfffff
   c3f50:	94a03595 	.word	0x94a03595
   c3f54:	3fcfffff 	.word	0x3fcfffff
   c3f58:	3ff00000 	.word	0x3ff00000
   c3f5c:	7ff00000 	.word	0x7ff00000
   c3f60:	7fe00000 	.word	0x7fe00000
   c3f64:	7c9fffff 	.word	0x7c9fffff
   c3f68:	3fe00000 	.word	0x3fe00000
   c3f6c:	bff00000 	.word	0xbff00000
   c3f70:	7fefffff 	.word	0x7fefffff

000c3f74 <strtod>:
   c3f74:	460a      	mov	r2, r1
   c3f76:	4601      	mov	r1, r0
   c3f78:	4802      	ldr	r0, [pc, #8]	; (c3f84 <strtod+0x10>)
   c3f7a:	4b03      	ldr	r3, [pc, #12]	; (c3f88 <strtod+0x14>)
   c3f7c:	6800      	ldr	r0, [r0, #0]
   c3f7e:	f7ff b9f3 	b.w	c3368 <_strtod_l>
   c3f82:	bf00      	nop
   c3f84:	2003d284 	.word	0x2003d284
   c3f88:	2003d2ec 	.word	0x2003d2ec

000c3f8c <_strtol_l.constprop.0>:
   c3f8c:	2b01      	cmp	r3, #1
   c3f8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c3f92:	d001      	beq.n	c3f98 <_strtol_l.constprop.0+0xc>
   c3f94:	2b24      	cmp	r3, #36	; 0x24
   c3f96:	d906      	bls.n	c3fa6 <_strtol_l.constprop.0+0x1a>
   c3f98:	f7fb f84a 	bl	bf030 <__errno>
   c3f9c:	2316      	movs	r3, #22
   c3f9e:	6003      	str	r3, [r0, #0]
   c3fa0:	2000      	movs	r0, #0
   c3fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c3fa6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c408c <_strtol_l.constprop.0+0x100>
   c3faa:	460d      	mov	r5, r1
   c3fac:	462e      	mov	r6, r5
   c3fae:	f815 4b01 	ldrb.w	r4, [r5], #1
   c3fb2:	f814 700c 	ldrb.w	r7, [r4, ip]
   c3fb6:	f017 0708 	ands.w	r7, r7, #8
   c3fba:	d1f7      	bne.n	c3fac <_strtol_l.constprop.0+0x20>
   c3fbc:	2c2d      	cmp	r4, #45	; 0x2d
   c3fbe:	d132      	bne.n	c4026 <_strtol_l.constprop.0+0x9a>
   c3fc0:	782c      	ldrb	r4, [r5, #0]
   c3fc2:	2701      	movs	r7, #1
   c3fc4:	1cb5      	adds	r5, r6, #2
   c3fc6:	2b00      	cmp	r3, #0
   c3fc8:	d05b      	beq.n	c4082 <_strtol_l.constprop.0+0xf6>
   c3fca:	2b10      	cmp	r3, #16
   c3fcc:	d109      	bne.n	c3fe2 <_strtol_l.constprop.0+0x56>
   c3fce:	2c30      	cmp	r4, #48	; 0x30
   c3fd0:	d107      	bne.n	c3fe2 <_strtol_l.constprop.0+0x56>
   c3fd2:	782c      	ldrb	r4, [r5, #0]
   c3fd4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c3fd8:	2c58      	cmp	r4, #88	; 0x58
   c3fda:	d14d      	bne.n	c4078 <_strtol_l.constprop.0+0xec>
   c3fdc:	786c      	ldrb	r4, [r5, #1]
   c3fde:	2310      	movs	r3, #16
   c3fe0:	3502      	adds	r5, #2
   c3fe2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c3fe6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c3fea:	f04f 0c00 	mov.w	ip, #0
   c3fee:	fbb8 f9f3 	udiv	r9, r8, r3
   c3ff2:	4666      	mov	r6, ip
   c3ff4:	fb03 8a19 	mls	sl, r3, r9, r8
   c3ff8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c3ffc:	f1be 0f09 	cmp.w	lr, #9
   c4000:	d816      	bhi.n	c4030 <_strtol_l.constprop.0+0xa4>
   c4002:	4674      	mov	r4, lr
   c4004:	42a3      	cmp	r3, r4
   c4006:	dd24      	ble.n	c4052 <_strtol_l.constprop.0+0xc6>
   c4008:	f1bc 0f00 	cmp.w	ip, #0
   c400c:	db1e      	blt.n	c404c <_strtol_l.constprop.0+0xc0>
   c400e:	45b1      	cmp	r9, r6
   c4010:	d31c      	bcc.n	c404c <_strtol_l.constprop.0+0xc0>
   c4012:	d101      	bne.n	c4018 <_strtol_l.constprop.0+0x8c>
   c4014:	45a2      	cmp	sl, r4
   c4016:	db19      	blt.n	c404c <_strtol_l.constprop.0+0xc0>
   c4018:	fb06 4603 	mla	r6, r6, r3, r4
   c401c:	f04f 0c01 	mov.w	ip, #1
   c4020:	f815 4b01 	ldrb.w	r4, [r5], #1
   c4024:	e7e8      	b.n	c3ff8 <_strtol_l.constprop.0+0x6c>
   c4026:	2c2b      	cmp	r4, #43	; 0x2b
   c4028:	bf04      	itt	eq
   c402a:	782c      	ldrbeq	r4, [r5, #0]
   c402c:	1cb5      	addeq	r5, r6, #2
   c402e:	e7ca      	b.n	c3fc6 <_strtol_l.constprop.0+0x3a>
   c4030:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c4034:	f1be 0f19 	cmp.w	lr, #25
   c4038:	d801      	bhi.n	c403e <_strtol_l.constprop.0+0xb2>
   c403a:	3c37      	subs	r4, #55	; 0x37
   c403c:	e7e2      	b.n	c4004 <_strtol_l.constprop.0+0x78>
   c403e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c4042:	f1be 0f19 	cmp.w	lr, #25
   c4046:	d804      	bhi.n	c4052 <_strtol_l.constprop.0+0xc6>
   c4048:	3c57      	subs	r4, #87	; 0x57
   c404a:	e7db      	b.n	c4004 <_strtol_l.constprop.0+0x78>
   c404c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c4050:	e7e6      	b.n	c4020 <_strtol_l.constprop.0+0x94>
   c4052:	f1bc 0f00 	cmp.w	ip, #0
   c4056:	da05      	bge.n	c4064 <_strtol_l.constprop.0+0xd8>
   c4058:	2322      	movs	r3, #34	; 0x22
   c405a:	6003      	str	r3, [r0, #0]
   c405c:	4646      	mov	r6, r8
   c405e:	b942      	cbnz	r2, c4072 <_strtol_l.constprop.0+0xe6>
   c4060:	4630      	mov	r0, r6
   c4062:	e79e      	b.n	c3fa2 <_strtol_l.constprop.0+0x16>
   c4064:	b107      	cbz	r7, c4068 <_strtol_l.constprop.0+0xdc>
   c4066:	4276      	negs	r6, r6
   c4068:	2a00      	cmp	r2, #0
   c406a:	d0f9      	beq.n	c4060 <_strtol_l.constprop.0+0xd4>
   c406c:	f1bc 0f00 	cmp.w	ip, #0
   c4070:	d000      	beq.n	c4074 <_strtol_l.constprop.0+0xe8>
   c4072:	1e69      	subs	r1, r5, #1
   c4074:	6011      	str	r1, [r2, #0]
   c4076:	e7f3      	b.n	c4060 <_strtol_l.constprop.0+0xd4>
   c4078:	2430      	movs	r4, #48	; 0x30
   c407a:	2b00      	cmp	r3, #0
   c407c:	d1b1      	bne.n	c3fe2 <_strtol_l.constprop.0+0x56>
   c407e:	2308      	movs	r3, #8
   c4080:	e7af      	b.n	c3fe2 <_strtol_l.constprop.0+0x56>
   c4082:	2c30      	cmp	r4, #48	; 0x30
   c4084:	d0a5      	beq.n	c3fd2 <_strtol_l.constprop.0+0x46>
   c4086:	230a      	movs	r3, #10
   c4088:	e7ab      	b.n	c3fe2 <_strtol_l.constprop.0+0x56>
   c408a:	bf00      	nop
   c408c:	000c8fc1 	.word	0x000c8fc1

000c4090 <strtol>:
   c4090:	4613      	mov	r3, r2
   c4092:	460a      	mov	r2, r1
   c4094:	4601      	mov	r1, r0
   c4096:	4802      	ldr	r0, [pc, #8]	; (c40a0 <strtol+0x10>)
   c4098:	6800      	ldr	r0, [r0, #0]
   c409a:	f7ff bf77 	b.w	c3f8c <_strtol_l.constprop.0>
   c409e:	bf00      	nop
   c40a0:	2003d284 	.word	0x2003d284

000c40a4 <rshift>:
   c40a4:	6903      	ldr	r3, [r0, #16]
   c40a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   c40aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c40ae:	ea4f 1261 	mov.w	r2, r1, asr #5
   c40b2:	f100 0414 	add.w	r4, r0, #20
   c40b6:	dd45      	ble.n	c4144 <rshift+0xa0>
   c40b8:	f011 011f 	ands.w	r1, r1, #31
   c40bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   c40c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   c40c4:	d10c      	bne.n	c40e0 <rshift+0x3c>
   c40c6:	f100 0710 	add.w	r7, r0, #16
   c40ca:	4629      	mov	r1, r5
   c40cc:	42b1      	cmp	r1, r6
   c40ce:	d334      	bcc.n	c413a <rshift+0x96>
   c40d0:	1a9b      	subs	r3, r3, r2
   c40d2:	009b      	lsls	r3, r3, #2
   c40d4:	1eea      	subs	r2, r5, #3
   c40d6:	4296      	cmp	r6, r2
   c40d8:	bf38      	it	cc
   c40da:	2300      	movcc	r3, #0
   c40dc:	4423      	add	r3, r4
   c40de:	e015      	b.n	c410c <rshift+0x68>
   c40e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   c40e4:	f1c1 0820 	rsb	r8, r1, #32
   c40e8:	40cf      	lsrs	r7, r1
   c40ea:	f105 0e04 	add.w	lr, r5, #4
   c40ee:	46a1      	mov	r9, r4
   c40f0:	4576      	cmp	r6, lr
   c40f2:	46f4      	mov	ip, lr
   c40f4:	d815      	bhi.n	c4122 <rshift+0x7e>
   c40f6:	1a9a      	subs	r2, r3, r2
   c40f8:	0092      	lsls	r2, r2, #2
   c40fa:	3a04      	subs	r2, #4
   c40fc:	3501      	adds	r5, #1
   c40fe:	42ae      	cmp	r6, r5
   c4100:	bf38      	it	cc
   c4102:	2200      	movcc	r2, #0
   c4104:	18a3      	adds	r3, r4, r2
   c4106:	50a7      	str	r7, [r4, r2]
   c4108:	b107      	cbz	r7, c410c <rshift+0x68>
   c410a:	3304      	adds	r3, #4
   c410c:	1b1a      	subs	r2, r3, r4
   c410e:	42a3      	cmp	r3, r4
   c4110:	ea4f 02a2 	mov.w	r2, r2, asr #2
   c4114:	bf08      	it	eq
   c4116:	2300      	moveq	r3, #0
   c4118:	6102      	str	r2, [r0, #16]
   c411a:	bf08      	it	eq
   c411c:	6143      	streq	r3, [r0, #20]
   c411e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c4122:	f8dc c000 	ldr.w	ip, [ip]
   c4126:	fa0c fc08 	lsl.w	ip, ip, r8
   c412a:	ea4c 0707 	orr.w	r7, ip, r7
   c412e:	f849 7b04 	str.w	r7, [r9], #4
   c4132:	f85e 7b04 	ldr.w	r7, [lr], #4
   c4136:	40cf      	lsrs	r7, r1
   c4138:	e7da      	b.n	c40f0 <rshift+0x4c>
   c413a:	f851 cb04 	ldr.w	ip, [r1], #4
   c413e:	f847 cf04 	str.w	ip, [r7, #4]!
   c4142:	e7c3      	b.n	c40cc <rshift+0x28>
   c4144:	4623      	mov	r3, r4
   c4146:	e7e1      	b.n	c410c <rshift+0x68>

000c4148 <__hexdig_fun>:
   c4148:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c414c:	2b09      	cmp	r3, #9
   c414e:	d802      	bhi.n	c4156 <__hexdig_fun+0xe>
   c4150:	3820      	subs	r0, #32
   c4152:	b2c0      	uxtb	r0, r0
   c4154:	4770      	bx	lr
   c4156:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   c415a:	2b05      	cmp	r3, #5
   c415c:	d801      	bhi.n	c4162 <__hexdig_fun+0x1a>
   c415e:	3847      	subs	r0, #71	; 0x47
   c4160:	e7f7      	b.n	c4152 <__hexdig_fun+0xa>
   c4162:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   c4166:	2b05      	cmp	r3, #5
   c4168:	d801      	bhi.n	c416e <__hexdig_fun+0x26>
   c416a:	3827      	subs	r0, #39	; 0x27
   c416c:	e7f1      	b.n	c4152 <__hexdig_fun+0xa>
   c416e:	2000      	movs	r0, #0
   c4170:	4770      	bx	lr
	...

000c4174 <__gethex>:
   c4174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c4178:	ed2d 8b02 	vpush	{d8}
   c417c:	b089      	sub	sp, #36	; 0x24
   c417e:	ee08 0a10 	vmov	s16, r0
   c4182:	9304      	str	r3, [sp, #16]
   c4184:	4bb4      	ldr	r3, [pc, #720]	; (c4458 <__gethex+0x2e4>)
   c4186:	681b      	ldr	r3, [r3, #0]
   c4188:	9301      	str	r3, [sp, #4]
   c418a:	4618      	mov	r0, r3
   c418c:	468b      	mov	fp, r1
   c418e:	4690      	mov	r8, r2
   c4190:	f7f0 fe44 	bl	b4e1c <strlen>
   c4194:	9b01      	ldr	r3, [sp, #4]
   c4196:	f8db 2000 	ldr.w	r2, [fp]
   c419a:	4403      	add	r3, r0
   c419c:	4682      	mov	sl, r0
   c419e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   c41a2:	9305      	str	r3, [sp, #20]
   c41a4:	1c93      	adds	r3, r2, #2
   c41a6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   c41aa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   c41ae:	32fe      	adds	r2, #254	; 0xfe
   c41b0:	18d1      	adds	r1, r2, r3
   c41b2:	461f      	mov	r7, r3
   c41b4:	f813 0b01 	ldrb.w	r0, [r3], #1
   c41b8:	9100      	str	r1, [sp, #0]
   c41ba:	2830      	cmp	r0, #48	; 0x30
   c41bc:	d0f8      	beq.n	c41b0 <__gethex+0x3c>
   c41be:	f7ff ffc3 	bl	c4148 <__hexdig_fun>
   c41c2:	4604      	mov	r4, r0
   c41c4:	2800      	cmp	r0, #0
   c41c6:	d13a      	bne.n	c423e <__gethex+0xca>
   c41c8:	9901      	ldr	r1, [sp, #4]
   c41ca:	4652      	mov	r2, sl
   c41cc:	4638      	mov	r0, r7
   c41ce:	f7ff f884 	bl	c32da <strncmp>
   c41d2:	4605      	mov	r5, r0
   c41d4:	2800      	cmp	r0, #0
   c41d6:	d168      	bne.n	c42aa <__gethex+0x136>
   c41d8:	f817 000a 	ldrb.w	r0, [r7, sl]
   c41dc:	eb07 060a 	add.w	r6, r7, sl
   c41e0:	f7ff ffb2 	bl	c4148 <__hexdig_fun>
   c41e4:	2800      	cmp	r0, #0
   c41e6:	d062      	beq.n	c42ae <__gethex+0x13a>
   c41e8:	4633      	mov	r3, r6
   c41ea:	7818      	ldrb	r0, [r3, #0]
   c41ec:	2830      	cmp	r0, #48	; 0x30
   c41ee:	461f      	mov	r7, r3
   c41f0:	f103 0301 	add.w	r3, r3, #1
   c41f4:	d0f9      	beq.n	c41ea <__gethex+0x76>
   c41f6:	f7ff ffa7 	bl	c4148 <__hexdig_fun>
   c41fa:	2301      	movs	r3, #1
   c41fc:	fab0 f480 	clz	r4, r0
   c4200:	0964      	lsrs	r4, r4, #5
   c4202:	4635      	mov	r5, r6
   c4204:	9300      	str	r3, [sp, #0]
   c4206:	463a      	mov	r2, r7
   c4208:	4616      	mov	r6, r2
   c420a:	3201      	adds	r2, #1
   c420c:	7830      	ldrb	r0, [r6, #0]
   c420e:	f7ff ff9b 	bl	c4148 <__hexdig_fun>
   c4212:	2800      	cmp	r0, #0
   c4214:	d1f8      	bne.n	c4208 <__gethex+0x94>
   c4216:	9901      	ldr	r1, [sp, #4]
   c4218:	4652      	mov	r2, sl
   c421a:	4630      	mov	r0, r6
   c421c:	f7ff f85d 	bl	c32da <strncmp>
   c4220:	b980      	cbnz	r0, c4244 <__gethex+0xd0>
   c4222:	b94d      	cbnz	r5, c4238 <__gethex+0xc4>
   c4224:	eb06 050a 	add.w	r5, r6, sl
   c4228:	462a      	mov	r2, r5
   c422a:	4616      	mov	r6, r2
   c422c:	3201      	adds	r2, #1
   c422e:	7830      	ldrb	r0, [r6, #0]
   c4230:	f7ff ff8a 	bl	c4148 <__hexdig_fun>
   c4234:	2800      	cmp	r0, #0
   c4236:	d1f8      	bne.n	c422a <__gethex+0xb6>
   c4238:	1bad      	subs	r5, r5, r6
   c423a:	00ad      	lsls	r5, r5, #2
   c423c:	e004      	b.n	c4248 <__gethex+0xd4>
   c423e:	2400      	movs	r4, #0
   c4240:	4625      	mov	r5, r4
   c4242:	e7e0      	b.n	c4206 <__gethex+0x92>
   c4244:	2d00      	cmp	r5, #0
   c4246:	d1f7      	bne.n	c4238 <__gethex+0xc4>
   c4248:	7833      	ldrb	r3, [r6, #0]
   c424a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c424e:	2b50      	cmp	r3, #80	; 0x50
   c4250:	d13b      	bne.n	c42ca <__gethex+0x156>
   c4252:	7873      	ldrb	r3, [r6, #1]
   c4254:	2b2b      	cmp	r3, #43	; 0x2b
   c4256:	d02c      	beq.n	c42b2 <__gethex+0x13e>
   c4258:	2b2d      	cmp	r3, #45	; 0x2d
   c425a:	d02e      	beq.n	c42ba <__gethex+0x146>
   c425c:	1c71      	adds	r1, r6, #1
   c425e:	f04f 0900 	mov.w	r9, #0
   c4262:	7808      	ldrb	r0, [r1, #0]
   c4264:	f7ff ff70 	bl	c4148 <__hexdig_fun>
   c4268:	1e43      	subs	r3, r0, #1
   c426a:	b2db      	uxtb	r3, r3
   c426c:	2b18      	cmp	r3, #24
   c426e:	d82c      	bhi.n	c42ca <__gethex+0x156>
   c4270:	f1a0 0210 	sub.w	r2, r0, #16
   c4274:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   c4278:	f7ff ff66 	bl	c4148 <__hexdig_fun>
   c427c:	1e43      	subs	r3, r0, #1
   c427e:	b2db      	uxtb	r3, r3
   c4280:	2b18      	cmp	r3, #24
   c4282:	d91d      	bls.n	c42c0 <__gethex+0x14c>
   c4284:	f1b9 0f00 	cmp.w	r9, #0
   c4288:	d000      	beq.n	c428c <__gethex+0x118>
   c428a:	4252      	negs	r2, r2
   c428c:	4415      	add	r5, r2
   c428e:	f8cb 1000 	str.w	r1, [fp]
   c4292:	b1e4      	cbz	r4, c42ce <__gethex+0x15a>
   c4294:	9b00      	ldr	r3, [sp, #0]
   c4296:	2b00      	cmp	r3, #0
   c4298:	bf14      	ite	ne
   c429a:	2700      	movne	r7, #0
   c429c:	2706      	moveq	r7, #6
   c429e:	4638      	mov	r0, r7
   c42a0:	b009      	add	sp, #36	; 0x24
   c42a2:	ecbd 8b02 	vpop	{d8}
   c42a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c42aa:	463e      	mov	r6, r7
   c42ac:	4625      	mov	r5, r4
   c42ae:	2401      	movs	r4, #1
   c42b0:	e7ca      	b.n	c4248 <__gethex+0xd4>
   c42b2:	f04f 0900 	mov.w	r9, #0
   c42b6:	1cb1      	adds	r1, r6, #2
   c42b8:	e7d3      	b.n	c4262 <__gethex+0xee>
   c42ba:	f04f 0901 	mov.w	r9, #1
   c42be:	e7fa      	b.n	c42b6 <__gethex+0x142>
   c42c0:	230a      	movs	r3, #10
   c42c2:	fb03 0202 	mla	r2, r3, r2, r0
   c42c6:	3a10      	subs	r2, #16
   c42c8:	e7d4      	b.n	c4274 <__gethex+0x100>
   c42ca:	4631      	mov	r1, r6
   c42cc:	e7df      	b.n	c428e <__gethex+0x11a>
   c42ce:	1bf3      	subs	r3, r6, r7
   c42d0:	3b01      	subs	r3, #1
   c42d2:	4621      	mov	r1, r4
   c42d4:	2b07      	cmp	r3, #7
   c42d6:	dc0b      	bgt.n	c42f0 <__gethex+0x17c>
   c42d8:	ee18 0a10 	vmov	r0, s16
   c42dc:	f000 fa64 	bl	c47a8 <_Balloc>
   c42e0:	4604      	mov	r4, r0
   c42e2:	b940      	cbnz	r0, c42f6 <__gethex+0x182>
   c42e4:	4b5d      	ldr	r3, [pc, #372]	; (c445c <__gethex+0x2e8>)
   c42e6:	4602      	mov	r2, r0
   c42e8:	21de      	movs	r1, #222	; 0xde
   c42ea:	485d      	ldr	r0, [pc, #372]	; (c4460 <__gethex+0x2ec>)
   c42ec:	f7fa fea8 	bl	bf040 <__assert_func>
   c42f0:	3101      	adds	r1, #1
   c42f2:	105b      	asrs	r3, r3, #1
   c42f4:	e7ee      	b.n	c42d4 <__gethex+0x160>
   c42f6:	f100 0914 	add.w	r9, r0, #20
   c42fa:	f04f 0b00 	mov.w	fp, #0
   c42fe:	f1ca 0301 	rsb	r3, sl, #1
   c4302:	f8cd 9008 	str.w	r9, [sp, #8]
   c4306:	f8cd b000 	str.w	fp, [sp]
   c430a:	9306      	str	r3, [sp, #24]
   c430c:	42b7      	cmp	r7, r6
   c430e:	d340      	bcc.n	c4392 <__gethex+0x21e>
   c4310:	9802      	ldr	r0, [sp, #8]
   c4312:	9b00      	ldr	r3, [sp, #0]
   c4314:	f840 3b04 	str.w	r3, [r0], #4
   c4318:	eba0 0009 	sub.w	r0, r0, r9
   c431c:	1080      	asrs	r0, r0, #2
   c431e:	0146      	lsls	r6, r0, #5
   c4320:	6120      	str	r0, [r4, #16]
   c4322:	4618      	mov	r0, r3
   c4324:	f000 fb32 	bl	c498c <__hi0bits>
   c4328:	1a30      	subs	r0, r6, r0
   c432a:	f8d8 6000 	ldr.w	r6, [r8]
   c432e:	42b0      	cmp	r0, r6
   c4330:	dd63      	ble.n	c43fa <__gethex+0x286>
   c4332:	1b87      	subs	r7, r0, r6
   c4334:	4639      	mov	r1, r7
   c4336:	4620      	mov	r0, r4
   c4338:	f000 fed6 	bl	c50e8 <__any_on>
   c433c:	4682      	mov	sl, r0
   c433e:	b1a8      	cbz	r0, c436c <__gethex+0x1f8>
   c4340:	1e7b      	subs	r3, r7, #1
   c4342:	1159      	asrs	r1, r3, #5
   c4344:	f003 021f 	and.w	r2, r3, #31
   c4348:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   c434c:	f04f 0a01 	mov.w	sl, #1
   c4350:	fa0a f202 	lsl.w	r2, sl, r2
   c4354:	420a      	tst	r2, r1
   c4356:	d009      	beq.n	c436c <__gethex+0x1f8>
   c4358:	4553      	cmp	r3, sl
   c435a:	dd05      	ble.n	c4368 <__gethex+0x1f4>
   c435c:	1eb9      	subs	r1, r7, #2
   c435e:	4620      	mov	r0, r4
   c4360:	f000 fec2 	bl	c50e8 <__any_on>
   c4364:	2800      	cmp	r0, #0
   c4366:	d145      	bne.n	c43f4 <__gethex+0x280>
   c4368:	f04f 0a02 	mov.w	sl, #2
   c436c:	4639      	mov	r1, r7
   c436e:	4620      	mov	r0, r4
   c4370:	f7ff fe98 	bl	c40a4 <rshift>
   c4374:	443d      	add	r5, r7
   c4376:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c437a:	42ab      	cmp	r3, r5
   c437c:	da4c      	bge.n	c4418 <__gethex+0x2a4>
   c437e:	ee18 0a10 	vmov	r0, s16
   c4382:	4621      	mov	r1, r4
   c4384:	f000 fa50 	bl	c4828 <_Bfree>
   c4388:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c438a:	2300      	movs	r3, #0
   c438c:	6013      	str	r3, [r2, #0]
   c438e:	27a3      	movs	r7, #163	; 0xa3
   c4390:	e785      	b.n	c429e <__gethex+0x12a>
   c4392:	1e73      	subs	r3, r6, #1
   c4394:	9a05      	ldr	r2, [sp, #20]
   c4396:	9303      	str	r3, [sp, #12]
   c4398:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   c439c:	4293      	cmp	r3, r2
   c439e:	d019      	beq.n	c43d4 <__gethex+0x260>
   c43a0:	f1bb 0f20 	cmp.w	fp, #32
   c43a4:	d107      	bne.n	c43b6 <__gethex+0x242>
   c43a6:	9b02      	ldr	r3, [sp, #8]
   c43a8:	9a00      	ldr	r2, [sp, #0]
   c43aa:	f843 2b04 	str.w	r2, [r3], #4
   c43ae:	9302      	str	r3, [sp, #8]
   c43b0:	2300      	movs	r3, #0
   c43b2:	9300      	str	r3, [sp, #0]
   c43b4:	469b      	mov	fp, r3
   c43b6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   c43ba:	f7ff fec5 	bl	c4148 <__hexdig_fun>
   c43be:	9b00      	ldr	r3, [sp, #0]
   c43c0:	f000 000f 	and.w	r0, r0, #15
   c43c4:	fa00 f00b 	lsl.w	r0, r0, fp
   c43c8:	4303      	orrs	r3, r0
   c43ca:	9300      	str	r3, [sp, #0]
   c43cc:	f10b 0b04 	add.w	fp, fp, #4
   c43d0:	9b03      	ldr	r3, [sp, #12]
   c43d2:	e00d      	b.n	c43f0 <__gethex+0x27c>
   c43d4:	9b03      	ldr	r3, [sp, #12]
   c43d6:	9a06      	ldr	r2, [sp, #24]
   c43d8:	4413      	add	r3, r2
   c43da:	42bb      	cmp	r3, r7
   c43dc:	d3e0      	bcc.n	c43a0 <__gethex+0x22c>
   c43de:	4618      	mov	r0, r3
   c43e0:	9901      	ldr	r1, [sp, #4]
   c43e2:	9307      	str	r3, [sp, #28]
   c43e4:	4652      	mov	r2, sl
   c43e6:	f7fe ff78 	bl	c32da <strncmp>
   c43ea:	9b07      	ldr	r3, [sp, #28]
   c43ec:	2800      	cmp	r0, #0
   c43ee:	d1d7      	bne.n	c43a0 <__gethex+0x22c>
   c43f0:	461e      	mov	r6, r3
   c43f2:	e78b      	b.n	c430c <__gethex+0x198>
   c43f4:	f04f 0a03 	mov.w	sl, #3
   c43f8:	e7b8      	b.n	c436c <__gethex+0x1f8>
   c43fa:	da0a      	bge.n	c4412 <__gethex+0x29e>
   c43fc:	1a37      	subs	r7, r6, r0
   c43fe:	4621      	mov	r1, r4
   c4400:	ee18 0a10 	vmov	r0, s16
   c4404:	463a      	mov	r2, r7
   c4406:	f000 fc2b 	bl	c4c60 <__lshift>
   c440a:	1bed      	subs	r5, r5, r7
   c440c:	4604      	mov	r4, r0
   c440e:	f100 0914 	add.w	r9, r0, #20
   c4412:	f04f 0a00 	mov.w	sl, #0
   c4416:	e7ae      	b.n	c4376 <__gethex+0x202>
   c4418:	f8d8 0004 	ldr.w	r0, [r8, #4]
   c441c:	42a8      	cmp	r0, r5
   c441e:	dd72      	ble.n	c4506 <__gethex+0x392>
   c4420:	1b45      	subs	r5, r0, r5
   c4422:	42ae      	cmp	r6, r5
   c4424:	dc36      	bgt.n	c4494 <__gethex+0x320>
   c4426:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c442a:	2b02      	cmp	r3, #2
   c442c:	d02a      	beq.n	c4484 <__gethex+0x310>
   c442e:	2b03      	cmp	r3, #3
   c4430:	d02c      	beq.n	c448c <__gethex+0x318>
   c4432:	2b01      	cmp	r3, #1
   c4434:	d11c      	bne.n	c4470 <__gethex+0x2fc>
   c4436:	42ae      	cmp	r6, r5
   c4438:	d11a      	bne.n	c4470 <__gethex+0x2fc>
   c443a:	2e01      	cmp	r6, #1
   c443c:	d112      	bne.n	c4464 <__gethex+0x2f0>
   c443e:	9a04      	ldr	r2, [sp, #16]
   c4440:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c4444:	6013      	str	r3, [r2, #0]
   c4446:	2301      	movs	r3, #1
   c4448:	6123      	str	r3, [r4, #16]
   c444a:	f8c9 3000 	str.w	r3, [r9]
   c444e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c4450:	2762      	movs	r7, #98	; 0x62
   c4452:	601c      	str	r4, [r3, #0]
   c4454:	e723      	b.n	c429e <__gethex+0x12a>
   c4456:	bf00      	nop
   c4458:	000c9134 	.word	0x000c9134
   c445c:	000c90c1 	.word	0x000c90c1
   c4460:	000c90d2 	.word	0x000c90d2
   c4464:	1e71      	subs	r1, r6, #1
   c4466:	4620      	mov	r0, r4
   c4468:	f000 fe3e 	bl	c50e8 <__any_on>
   c446c:	2800      	cmp	r0, #0
   c446e:	d1e6      	bne.n	c443e <__gethex+0x2ca>
   c4470:	ee18 0a10 	vmov	r0, s16
   c4474:	4621      	mov	r1, r4
   c4476:	f000 f9d7 	bl	c4828 <_Bfree>
   c447a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c447c:	2300      	movs	r3, #0
   c447e:	6013      	str	r3, [r2, #0]
   c4480:	2750      	movs	r7, #80	; 0x50
   c4482:	e70c      	b.n	c429e <__gethex+0x12a>
   c4484:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c4486:	2b00      	cmp	r3, #0
   c4488:	d1f2      	bne.n	c4470 <__gethex+0x2fc>
   c448a:	e7d8      	b.n	c443e <__gethex+0x2ca>
   c448c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c448e:	2b00      	cmp	r3, #0
   c4490:	d1d5      	bne.n	c443e <__gethex+0x2ca>
   c4492:	e7ed      	b.n	c4470 <__gethex+0x2fc>
   c4494:	1e6f      	subs	r7, r5, #1
   c4496:	f1ba 0f00 	cmp.w	sl, #0
   c449a:	d131      	bne.n	c4500 <__gethex+0x38c>
   c449c:	b127      	cbz	r7, c44a8 <__gethex+0x334>
   c449e:	4639      	mov	r1, r7
   c44a0:	4620      	mov	r0, r4
   c44a2:	f000 fe21 	bl	c50e8 <__any_on>
   c44a6:	4682      	mov	sl, r0
   c44a8:	117b      	asrs	r3, r7, #5
   c44aa:	2101      	movs	r1, #1
   c44ac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   c44b0:	f007 071f 	and.w	r7, r7, #31
   c44b4:	fa01 f707 	lsl.w	r7, r1, r7
   c44b8:	421f      	tst	r7, r3
   c44ba:	4629      	mov	r1, r5
   c44bc:	4620      	mov	r0, r4
   c44be:	bf18      	it	ne
   c44c0:	f04a 0a02 	orrne.w	sl, sl, #2
   c44c4:	1b76      	subs	r6, r6, r5
   c44c6:	f7ff fded 	bl	c40a4 <rshift>
   c44ca:	f8d8 5004 	ldr.w	r5, [r8, #4]
   c44ce:	2702      	movs	r7, #2
   c44d0:	f1ba 0f00 	cmp.w	sl, #0
   c44d4:	d048      	beq.n	c4568 <__gethex+0x3f4>
   c44d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c44da:	2b02      	cmp	r3, #2
   c44dc:	d015      	beq.n	c450a <__gethex+0x396>
   c44de:	2b03      	cmp	r3, #3
   c44e0:	d017      	beq.n	c4512 <__gethex+0x39e>
   c44e2:	2b01      	cmp	r3, #1
   c44e4:	d109      	bne.n	c44fa <__gethex+0x386>
   c44e6:	f01a 0f02 	tst.w	sl, #2
   c44ea:	d006      	beq.n	c44fa <__gethex+0x386>
   c44ec:	f8d9 0000 	ldr.w	r0, [r9]
   c44f0:	ea4a 0a00 	orr.w	sl, sl, r0
   c44f4:	f01a 0f01 	tst.w	sl, #1
   c44f8:	d10e      	bne.n	c4518 <__gethex+0x3a4>
   c44fa:	f047 0710 	orr.w	r7, r7, #16
   c44fe:	e033      	b.n	c4568 <__gethex+0x3f4>
   c4500:	f04f 0a01 	mov.w	sl, #1
   c4504:	e7d0      	b.n	c44a8 <__gethex+0x334>
   c4506:	2701      	movs	r7, #1
   c4508:	e7e2      	b.n	c44d0 <__gethex+0x35c>
   c450a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c450c:	f1c3 0301 	rsb	r3, r3, #1
   c4510:	9315      	str	r3, [sp, #84]	; 0x54
   c4512:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c4514:	2b00      	cmp	r3, #0
   c4516:	d0f0      	beq.n	c44fa <__gethex+0x386>
   c4518:	f8d4 b010 	ldr.w	fp, [r4, #16]
   c451c:	f104 0314 	add.w	r3, r4, #20
   c4520:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   c4524:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   c4528:	f04f 0c00 	mov.w	ip, #0
   c452c:	4618      	mov	r0, r3
   c452e:	f853 2b04 	ldr.w	r2, [r3], #4
   c4532:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   c4536:	d01c      	beq.n	c4572 <__gethex+0x3fe>
   c4538:	3201      	adds	r2, #1
   c453a:	6002      	str	r2, [r0, #0]
   c453c:	2f02      	cmp	r7, #2
   c453e:	f104 0314 	add.w	r3, r4, #20
   c4542:	d13f      	bne.n	c45c4 <__gethex+0x450>
   c4544:	f8d8 2000 	ldr.w	r2, [r8]
   c4548:	3a01      	subs	r2, #1
   c454a:	42b2      	cmp	r2, r6
   c454c:	d10a      	bne.n	c4564 <__gethex+0x3f0>
   c454e:	1171      	asrs	r1, r6, #5
   c4550:	2201      	movs	r2, #1
   c4552:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   c4556:	f006 061f 	and.w	r6, r6, #31
   c455a:	fa02 f606 	lsl.w	r6, r2, r6
   c455e:	421e      	tst	r6, r3
   c4560:	bf18      	it	ne
   c4562:	4617      	movne	r7, r2
   c4564:	f047 0720 	orr.w	r7, r7, #32
   c4568:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c456a:	601c      	str	r4, [r3, #0]
   c456c:	9b04      	ldr	r3, [sp, #16]
   c456e:	601d      	str	r5, [r3, #0]
   c4570:	e695      	b.n	c429e <__gethex+0x12a>
   c4572:	4299      	cmp	r1, r3
   c4574:	f843 cc04 	str.w	ip, [r3, #-4]
   c4578:	d8d8      	bhi.n	c452c <__gethex+0x3b8>
   c457a:	68a3      	ldr	r3, [r4, #8]
   c457c:	459b      	cmp	fp, r3
   c457e:	db19      	blt.n	c45b4 <__gethex+0x440>
   c4580:	6861      	ldr	r1, [r4, #4]
   c4582:	ee18 0a10 	vmov	r0, s16
   c4586:	3101      	adds	r1, #1
   c4588:	f000 f90e 	bl	c47a8 <_Balloc>
   c458c:	4681      	mov	r9, r0
   c458e:	b918      	cbnz	r0, c4598 <__gethex+0x424>
   c4590:	4b1a      	ldr	r3, [pc, #104]	; (c45fc <__gethex+0x488>)
   c4592:	4602      	mov	r2, r0
   c4594:	2184      	movs	r1, #132	; 0x84
   c4596:	e6a8      	b.n	c42ea <__gethex+0x176>
   c4598:	6922      	ldr	r2, [r4, #16]
   c459a:	3202      	adds	r2, #2
   c459c:	f104 010c 	add.w	r1, r4, #12
   c45a0:	0092      	lsls	r2, r2, #2
   c45a2:	300c      	adds	r0, #12
   c45a4:	f7fe fe0c 	bl	c31c0 <memcpy>
   c45a8:	4621      	mov	r1, r4
   c45aa:	ee18 0a10 	vmov	r0, s16
   c45ae:	f000 f93b 	bl	c4828 <_Bfree>
   c45b2:	464c      	mov	r4, r9
   c45b4:	6923      	ldr	r3, [r4, #16]
   c45b6:	1c5a      	adds	r2, r3, #1
   c45b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   c45bc:	6122      	str	r2, [r4, #16]
   c45be:	2201      	movs	r2, #1
   c45c0:	615a      	str	r2, [r3, #20]
   c45c2:	e7bb      	b.n	c453c <__gethex+0x3c8>
   c45c4:	6922      	ldr	r2, [r4, #16]
   c45c6:	455a      	cmp	r2, fp
   c45c8:	dd0b      	ble.n	c45e2 <__gethex+0x46e>
   c45ca:	2101      	movs	r1, #1
   c45cc:	4620      	mov	r0, r4
   c45ce:	f7ff fd69 	bl	c40a4 <rshift>
   c45d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c45d6:	3501      	adds	r5, #1
   c45d8:	42ab      	cmp	r3, r5
   c45da:	f6ff aed0 	blt.w	c437e <__gethex+0x20a>
   c45de:	2701      	movs	r7, #1
   c45e0:	e7c0      	b.n	c4564 <__gethex+0x3f0>
   c45e2:	f016 061f 	ands.w	r6, r6, #31
   c45e6:	d0fa      	beq.n	c45de <__gethex+0x46a>
   c45e8:	4453      	add	r3, sl
   c45ea:	f1c6 0620 	rsb	r6, r6, #32
   c45ee:	f853 0c04 	ldr.w	r0, [r3, #-4]
   c45f2:	f000 f9cb 	bl	c498c <__hi0bits>
   c45f6:	42b0      	cmp	r0, r6
   c45f8:	dbe7      	blt.n	c45ca <__gethex+0x456>
   c45fa:	e7f0      	b.n	c45de <__gethex+0x46a>
   c45fc:	000c90c1 	.word	0x000c90c1

000c4600 <L_shift>:
   c4600:	f1c2 0208 	rsb	r2, r2, #8
   c4604:	0092      	lsls	r2, r2, #2
   c4606:	b570      	push	{r4, r5, r6, lr}
   c4608:	f1c2 0620 	rsb	r6, r2, #32
   c460c:	6843      	ldr	r3, [r0, #4]
   c460e:	6804      	ldr	r4, [r0, #0]
   c4610:	fa03 f506 	lsl.w	r5, r3, r6
   c4614:	432c      	orrs	r4, r5
   c4616:	40d3      	lsrs	r3, r2
   c4618:	6004      	str	r4, [r0, #0]
   c461a:	f840 3f04 	str.w	r3, [r0, #4]!
   c461e:	4288      	cmp	r0, r1
   c4620:	d3f4      	bcc.n	c460c <L_shift+0xc>
   c4622:	bd70      	pop	{r4, r5, r6, pc}

000c4624 <__match>:
   c4624:	b530      	push	{r4, r5, lr}
   c4626:	6803      	ldr	r3, [r0, #0]
   c4628:	3301      	adds	r3, #1
   c462a:	f811 4b01 	ldrb.w	r4, [r1], #1
   c462e:	b914      	cbnz	r4, c4636 <__match+0x12>
   c4630:	6003      	str	r3, [r0, #0]
   c4632:	2001      	movs	r0, #1
   c4634:	bd30      	pop	{r4, r5, pc}
   c4636:	f813 2b01 	ldrb.w	r2, [r3], #1
   c463a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   c463e:	2d19      	cmp	r5, #25
   c4640:	bf98      	it	ls
   c4642:	3220      	addls	r2, #32
   c4644:	42a2      	cmp	r2, r4
   c4646:	d0f0      	beq.n	c462a <__match+0x6>
   c4648:	2000      	movs	r0, #0
   c464a:	e7f3      	b.n	c4634 <__match+0x10>

000c464c <__hexnan>:
   c464c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c4650:	680b      	ldr	r3, [r1, #0]
   c4652:	115e      	asrs	r6, r3, #5
   c4654:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   c4658:	f013 031f 	ands.w	r3, r3, #31
   c465c:	b087      	sub	sp, #28
   c465e:	bf18      	it	ne
   c4660:	3604      	addne	r6, #4
   c4662:	2500      	movs	r5, #0
   c4664:	1f37      	subs	r7, r6, #4
   c4666:	4690      	mov	r8, r2
   c4668:	6802      	ldr	r2, [r0, #0]
   c466a:	9301      	str	r3, [sp, #4]
   c466c:	4682      	mov	sl, r0
   c466e:	f846 5c04 	str.w	r5, [r6, #-4]
   c4672:	46b9      	mov	r9, r7
   c4674:	463c      	mov	r4, r7
   c4676:	9502      	str	r5, [sp, #8]
   c4678:	46ab      	mov	fp, r5
   c467a:	7851      	ldrb	r1, [r2, #1]
   c467c:	1c53      	adds	r3, r2, #1
   c467e:	9303      	str	r3, [sp, #12]
   c4680:	b341      	cbz	r1, c46d4 <__hexnan+0x88>
   c4682:	4608      	mov	r0, r1
   c4684:	9205      	str	r2, [sp, #20]
   c4686:	9104      	str	r1, [sp, #16]
   c4688:	f7ff fd5e 	bl	c4148 <__hexdig_fun>
   c468c:	2800      	cmp	r0, #0
   c468e:	d14f      	bne.n	c4730 <__hexnan+0xe4>
   c4690:	9904      	ldr	r1, [sp, #16]
   c4692:	9a05      	ldr	r2, [sp, #20]
   c4694:	2920      	cmp	r1, #32
   c4696:	d818      	bhi.n	c46ca <__hexnan+0x7e>
   c4698:	9b02      	ldr	r3, [sp, #8]
   c469a:	459b      	cmp	fp, r3
   c469c:	dd13      	ble.n	c46c6 <__hexnan+0x7a>
   c469e:	454c      	cmp	r4, r9
   c46a0:	d206      	bcs.n	c46b0 <__hexnan+0x64>
   c46a2:	2d07      	cmp	r5, #7
   c46a4:	dc04      	bgt.n	c46b0 <__hexnan+0x64>
   c46a6:	462a      	mov	r2, r5
   c46a8:	4649      	mov	r1, r9
   c46aa:	4620      	mov	r0, r4
   c46ac:	f7ff ffa8 	bl	c4600 <L_shift>
   c46b0:	4544      	cmp	r4, r8
   c46b2:	d950      	bls.n	c4756 <__hexnan+0x10a>
   c46b4:	2300      	movs	r3, #0
   c46b6:	f1a4 0904 	sub.w	r9, r4, #4
   c46ba:	f844 3c04 	str.w	r3, [r4, #-4]
   c46be:	f8cd b008 	str.w	fp, [sp, #8]
   c46c2:	464c      	mov	r4, r9
   c46c4:	461d      	mov	r5, r3
   c46c6:	9a03      	ldr	r2, [sp, #12]
   c46c8:	e7d7      	b.n	c467a <__hexnan+0x2e>
   c46ca:	2929      	cmp	r1, #41	; 0x29
   c46cc:	d156      	bne.n	c477c <__hexnan+0x130>
   c46ce:	3202      	adds	r2, #2
   c46d0:	f8ca 2000 	str.w	r2, [sl]
   c46d4:	f1bb 0f00 	cmp.w	fp, #0
   c46d8:	d050      	beq.n	c477c <__hexnan+0x130>
   c46da:	454c      	cmp	r4, r9
   c46dc:	d206      	bcs.n	c46ec <__hexnan+0xa0>
   c46de:	2d07      	cmp	r5, #7
   c46e0:	dc04      	bgt.n	c46ec <__hexnan+0xa0>
   c46e2:	462a      	mov	r2, r5
   c46e4:	4649      	mov	r1, r9
   c46e6:	4620      	mov	r0, r4
   c46e8:	f7ff ff8a 	bl	c4600 <L_shift>
   c46ec:	4544      	cmp	r4, r8
   c46ee:	d934      	bls.n	c475a <__hexnan+0x10e>
   c46f0:	f1a8 0204 	sub.w	r2, r8, #4
   c46f4:	4623      	mov	r3, r4
   c46f6:	f853 1b04 	ldr.w	r1, [r3], #4
   c46fa:	f842 1f04 	str.w	r1, [r2, #4]!
   c46fe:	429f      	cmp	r7, r3
   c4700:	d2f9      	bcs.n	c46f6 <__hexnan+0xaa>
   c4702:	1b3b      	subs	r3, r7, r4
   c4704:	f023 0303 	bic.w	r3, r3, #3
   c4708:	3304      	adds	r3, #4
   c470a:	3401      	adds	r4, #1
   c470c:	3e03      	subs	r6, #3
   c470e:	42b4      	cmp	r4, r6
   c4710:	bf88      	it	hi
   c4712:	2304      	movhi	r3, #4
   c4714:	4443      	add	r3, r8
   c4716:	2200      	movs	r2, #0
   c4718:	f843 2b04 	str.w	r2, [r3], #4
   c471c:	429f      	cmp	r7, r3
   c471e:	d2fb      	bcs.n	c4718 <__hexnan+0xcc>
   c4720:	683b      	ldr	r3, [r7, #0]
   c4722:	b91b      	cbnz	r3, c472c <__hexnan+0xe0>
   c4724:	4547      	cmp	r7, r8
   c4726:	d127      	bne.n	c4778 <__hexnan+0x12c>
   c4728:	2301      	movs	r3, #1
   c472a:	603b      	str	r3, [r7, #0]
   c472c:	2005      	movs	r0, #5
   c472e:	e026      	b.n	c477e <__hexnan+0x132>
   c4730:	3501      	adds	r5, #1
   c4732:	2d08      	cmp	r5, #8
   c4734:	f10b 0b01 	add.w	fp, fp, #1
   c4738:	dd06      	ble.n	c4748 <__hexnan+0xfc>
   c473a:	4544      	cmp	r4, r8
   c473c:	d9c3      	bls.n	c46c6 <__hexnan+0x7a>
   c473e:	2300      	movs	r3, #0
   c4740:	f844 3c04 	str.w	r3, [r4, #-4]
   c4744:	2501      	movs	r5, #1
   c4746:	3c04      	subs	r4, #4
   c4748:	6822      	ldr	r2, [r4, #0]
   c474a:	f000 000f 	and.w	r0, r0, #15
   c474e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c4752:	6022      	str	r2, [r4, #0]
   c4754:	e7b7      	b.n	c46c6 <__hexnan+0x7a>
   c4756:	2508      	movs	r5, #8
   c4758:	e7b5      	b.n	c46c6 <__hexnan+0x7a>
   c475a:	9b01      	ldr	r3, [sp, #4]
   c475c:	2b00      	cmp	r3, #0
   c475e:	d0df      	beq.n	c4720 <__hexnan+0xd4>
   c4760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c4764:	f1c3 0320 	rsb	r3, r3, #32
   c4768:	fa22 f303 	lsr.w	r3, r2, r3
   c476c:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c4770:	401a      	ands	r2, r3
   c4772:	f846 2c04 	str.w	r2, [r6, #-4]
   c4776:	e7d3      	b.n	c4720 <__hexnan+0xd4>
   c4778:	3f04      	subs	r7, #4
   c477a:	e7d1      	b.n	c4720 <__hexnan+0xd4>
   c477c:	2004      	movs	r0, #4
   c477e:	b007      	add	sp, #28
   c4780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c4784 <__ascii_mbtowc>:
   c4784:	b082      	sub	sp, #8
   c4786:	b901      	cbnz	r1, c478a <__ascii_mbtowc+0x6>
   c4788:	a901      	add	r1, sp, #4
   c478a:	b142      	cbz	r2, c479e <__ascii_mbtowc+0x1a>
   c478c:	b14b      	cbz	r3, c47a2 <__ascii_mbtowc+0x1e>
   c478e:	7813      	ldrb	r3, [r2, #0]
   c4790:	600b      	str	r3, [r1, #0]
   c4792:	7812      	ldrb	r2, [r2, #0]
   c4794:	1e10      	subs	r0, r2, #0
   c4796:	bf18      	it	ne
   c4798:	2001      	movne	r0, #1
   c479a:	b002      	add	sp, #8
   c479c:	4770      	bx	lr
   c479e:	4610      	mov	r0, r2
   c47a0:	e7fb      	b.n	c479a <__ascii_mbtowc+0x16>
   c47a2:	f06f 0001 	mvn.w	r0, #1
   c47a6:	e7f8      	b.n	c479a <__ascii_mbtowc+0x16>

000c47a8 <_Balloc>:
   c47a8:	b570      	push	{r4, r5, r6, lr}
   c47aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c47ac:	4604      	mov	r4, r0
   c47ae:	460d      	mov	r5, r1
   c47b0:	b976      	cbnz	r6, c47d0 <_Balloc+0x28>
   c47b2:	2010      	movs	r0, #16
   c47b4:	f7fa fc0c 	bl	befd0 <malloc>
   c47b8:	4602      	mov	r2, r0
   c47ba:	6260      	str	r0, [r4, #36]	; 0x24
   c47bc:	b920      	cbnz	r0, c47c8 <_Balloc+0x20>
   c47be:	4b18      	ldr	r3, [pc, #96]	; (c4820 <_Balloc+0x78>)
   c47c0:	4818      	ldr	r0, [pc, #96]	; (c4824 <_Balloc+0x7c>)
   c47c2:	2166      	movs	r1, #102	; 0x66
   c47c4:	f7fa fc3c 	bl	bf040 <__assert_func>
   c47c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c47cc:	6006      	str	r6, [r0, #0]
   c47ce:	60c6      	str	r6, [r0, #12]
   c47d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c47d2:	68f3      	ldr	r3, [r6, #12]
   c47d4:	b183      	cbz	r3, c47f8 <_Balloc+0x50>
   c47d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c47d8:	68db      	ldr	r3, [r3, #12]
   c47da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c47de:	b9b8      	cbnz	r0, c4810 <_Balloc+0x68>
   c47e0:	2101      	movs	r1, #1
   c47e2:	fa01 f605 	lsl.w	r6, r1, r5
   c47e6:	1d72      	adds	r2, r6, #5
   c47e8:	0092      	lsls	r2, r2, #2
   c47ea:	4620      	mov	r0, r4
   c47ec:	f7fe fd18 	bl	c3220 <_calloc_r>
   c47f0:	b160      	cbz	r0, c480c <_Balloc+0x64>
   c47f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c47f6:	e00e      	b.n	c4816 <_Balloc+0x6e>
   c47f8:	2221      	movs	r2, #33	; 0x21
   c47fa:	2104      	movs	r1, #4
   c47fc:	4620      	mov	r0, r4
   c47fe:	f7fe fd0f 	bl	c3220 <_calloc_r>
   c4802:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c4804:	60f0      	str	r0, [r6, #12]
   c4806:	68db      	ldr	r3, [r3, #12]
   c4808:	2b00      	cmp	r3, #0
   c480a:	d1e4      	bne.n	c47d6 <_Balloc+0x2e>
   c480c:	2000      	movs	r0, #0
   c480e:	bd70      	pop	{r4, r5, r6, pc}
   c4810:	6802      	ldr	r2, [r0, #0]
   c4812:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c4816:	2300      	movs	r3, #0
   c4818:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c481c:	e7f7      	b.n	c480e <_Balloc+0x66>
   c481e:	bf00      	nop
   c4820:	000c8ef8 	.word	0x000c8ef8
   c4824:	000c9148 	.word	0x000c9148

000c4828 <_Bfree>:
   c4828:	b570      	push	{r4, r5, r6, lr}
   c482a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c482c:	4605      	mov	r5, r0
   c482e:	460c      	mov	r4, r1
   c4830:	b976      	cbnz	r6, c4850 <_Bfree+0x28>
   c4832:	2010      	movs	r0, #16
   c4834:	f7fa fbcc 	bl	befd0 <malloc>
   c4838:	4602      	mov	r2, r0
   c483a:	6268      	str	r0, [r5, #36]	; 0x24
   c483c:	b920      	cbnz	r0, c4848 <_Bfree+0x20>
   c483e:	4b09      	ldr	r3, [pc, #36]	; (c4864 <_Bfree+0x3c>)
   c4840:	4809      	ldr	r0, [pc, #36]	; (c4868 <_Bfree+0x40>)
   c4842:	218a      	movs	r1, #138	; 0x8a
   c4844:	f7fa fbfc 	bl	bf040 <__assert_func>
   c4848:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c484c:	6006      	str	r6, [r0, #0]
   c484e:	60c6      	str	r6, [r0, #12]
   c4850:	b13c      	cbz	r4, c4862 <_Bfree+0x3a>
   c4852:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c4854:	6862      	ldr	r2, [r4, #4]
   c4856:	68db      	ldr	r3, [r3, #12]
   c4858:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c485c:	6021      	str	r1, [r4, #0]
   c485e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c4862:	bd70      	pop	{r4, r5, r6, pc}
   c4864:	000c8ef8 	.word	0x000c8ef8
   c4868:	000c9148 	.word	0x000c9148

000c486c <__multadd>:
   c486c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c4870:	690d      	ldr	r5, [r1, #16]
   c4872:	4607      	mov	r7, r0
   c4874:	460c      	mov	r4, r1
   c4876:	461e      	mov	r6, r3
   c4878:	f101 0c14 	add.w	ip, r1, #20
   c487c:	2000      	movs	r0, #0
   c487e:	f8dc 3000 	ldr.w	r3, [ip]
   c4882:	b299      	uxth	r1, r3
   c4884:	fb02 6101 	mla	r1, r2, r1, r6
   c4888:	0c1e      	lsrs	r6, r3, #16
   c488a:	0c0b      	lsrs	r3, r1, #16
   c488c:	fb02 3306 	mla	r3, r2, r6, r3
   c4890:	b289      	uxth	r1, r1
   c4892:	3001      	adds	r0, #1
   c4894:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c4898:	4285      	cmp	r5, r0
   c489a:	f84c 1b04 	str.w	r1, [ip], #4
   c489e:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c48a2:	dcec      	bgt.n	c487e <__multadd+0x12>
   c48a4:	b30e      	cbz	r6, c48ea <__multadd+0x7e>
   c48a6:	68a3      	ldr	r3, [r4, #8]
   c48a8:	42ab      	cmp	r3, r5
   c48aa:	dc19      	bgt.n	c48e0 <__multadd+0x74>
   c48ac:	6861      	ldr	r1, [r4, #4]
   c48ae:	4638      	mov	r0, r7
   c48b0:	3101      	adds	r1, #1
   c48b2:	f7ff ff79 	bl	c47a8 <_Balloc>
   c48b6:	4680      	mov	r8, r0
   c48b8:	b928      	cbnz	r0, c48c6 <__multadd+0x5a>
   c48ba:	4602      	mov	r2, r0
   c48bc:	4b0c      	ldr	r3, [pc, #48]	; (c48f0 <__multadd+0x84>)
   c48be:	480d      	ldr	r0, [pc, #52]	; (c48f4 <__multadd+0x88>)
   c48c0:	21b5      	movs	r1, #181	; 0xb5
   c48c2:	f7fa fbbd 	bl	bf040 <__assert_func>
   c48c6:	6922      	ldr	r2, [r4, #16]
   c48c8:	3202      	adds	r2, #2
   c48ca:	f104 010c 	add.w	r1, r4, #12
   c48ce:	0092      	lsls	r2, r2, #2
   c48d0:	300c      	adds	r0, #12
   c48d2:	f7fe fc75 	bl	c31c0 <memcpy>
   c48d6:	4621      	mov	r1, r4
   c48d8:	4638      	mov	r0, r7
   c48da:	f7ff ffa5 	bl	c4828 <_Bfree>
   c48de:	4644      	mov	r4, r8
   c48e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c48e4:	3501      	adds	r5, #1
   c48e6:	615e      	str	r6, [r3, #20]
   c48e8:	6125      	str	r5, [r4, #16]
   c48ea:	4620      	mov	r0, r4
   c48ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c48f0:	000c90c1 	.word	0x000c90c1
   c48f4:	000c9148 	.word	0x000c9148

000c48f8 <__s2b>:
   c48f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c48fc:	460c      	mov	r4, r1
   c48fe:	4615      	mov	r5, r2
   c4900:	461f      	mov	r7, r3
   c4902:	2209      	movs	r2, #9
   c4904:	3308      	adds	r3, #8
   c4906:	4606      	mov	r6, r0
   c4908:	fb93 f3f2 	sdiv	r3, r3, r2
   c490c:	2100      	movs	r1, #0
   c490e:	2201      	movs	r2, #1
   c4910:	429a      	cmp	r2, r3
   c4912:	db09      	blt.n	c4928 <__s2b+0x30>
   c4914:	4630      	mov	r0, r6
   c4916:	f7ff ff47 	bl	c47a8 <_Balloc>
   c491a:	b940      	cbnz	r0, c492e <__s2b+0x36>
   c491c:	4602      	mov	r2, r0
   c491e:	4b19      	ldr	r3, [pc, #100]	; (c4984 <__s2b+0x8c>)
   c4920:	4819      	ldr	r0, [pc, #100]	; (c4988 <__s2b+0x90>)
   c4922:	21ce      	movs	r1, #206	; 0xce
   c4924:	f7fa fb8c 	bl	bf040 <__assert_func>
   c4928:	0052      	lsls	r2, r2, #1
   c492a:	3101      	adds	r1, #1
   c492c:	e7f0      	b.n	c4910 <__s2b+0x18>
   c492e:	9b08      	ldr	r3, [sp, #32]
   c4930:	6143      	str	r3, [r0, #20]
   c4932:	2d09      	cmp	r5, #9
   c4934:	f04f 0301 	mov.w	r3, #1
   c4938:	6103      	str	r3, [r0, #16]
   c493a:	dd16      	ble.n	c496a <__s2b+0x72>
   c493c:	f104 0909 	add.w	r9, r4, #9
   c4940:	46c8      	mov	r8, r9
   c4942:	442c      	add	r4, r5
   c4944:	f818 3b01 	ldrb.w	r3, [r8], #1
   c4948:	4601      	mov	r1, r0
   c494a:	3b30      	subs	r3, #48	; 0x30
   c494c:	220a      	movs	r2, #10
   c494e:	4630      	mov	r0, r6
   c4950:	f7ff ff8c 	bl	c486c <__multadd>
   c4954:	45a0      	cmp	r8, r4
   c4956:	d1f5      	bne.n	c4944 <__s2b+0x4c>
   c4958:	f1a5 0408 	sub.w	r4, r5, #8
   c495c:	444c      	add	r4, r9
   c495e:	1b2d      	subs	r5, r5, r4
   c4960:	1963      	adds	r3, r4, r5
   c4962:	42bb      	cmp	r3, r7
   c4964:	db04      	blt.n	c4970 <__s2b+0x78>
   c4966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c496a:	340a      	adds	r4, #10
   c496c:	2509      	movs	r5, #9
   c496e:	e7f6      	b.n	c495e <__s2b+0x66>
   c4970:	f814 3b01 	ldrb.w	r3, [r4], #1
   c4974:	4601      	mov	r1, r0
   c4976:	3b30      	subs	r3, #48	; 0x30
   c4978:	220a      	movs	r2, #10
   c497a:	4630      	mov	r0, r6
   c497c:	f7ff ff76 	bl	c486c <__multadd>
   c4980:	e7ee      	b.n	c4960 <__s2b+0x68>
   c4982:	bf00      	nop
   c4984:	000c90c1 	.word	0x000c90c1
   c4988:	000c9148 	.word	0x000c9148

000c498c <__hi0bits>:
   c498c:	0c03      	lsrs	r3, r0, #16
   c498e:	041b      	lsls	r3, r3, #16
   c4990:	b9d3      	cbnz	r3, c49c8 <__hi0bits+0x3c>
   c4992:	0400      	lsls	r0, r0, #16
   c4994:	2310      	movs	r3, #16
   c4996:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c499a:	bf04      	itt	eq
   c499c:	0200      	lsleq	r0, r0, #8
   c499e:	3308      	addeq	r3, #8
   c49a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c49a4:	bf04      	itt	eq
   c49a6:	0100      	lsleq	r0, r0, #4
   c49a8:	3304      	addeq	r3, #4
   c49aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c49ae:	bf04      	itt	eq
   c49b0:	0080      	lsleq	r0, r0, #2
   c49b2:	3302      	addeq	r3, #2
   c49b4:	2800      	cmp	r0, #0
   c49b6:	db05      	blt.n	c49c4 <__hi0bits+0x38>
   c49b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c49bc:	f103 0301 	add.w	r3, r3, #1
   c49c0:	bf08      	it	eq
   c49c2:	2320      	moveq	r3, #32
   c49c4:	4618      	mov	r0, r3
   c49c6:	4770      	bx	lr
   c49c8:	2300      	movs	r3, #0
   c49ca:	e7e4      	b.n	c4996 <__hi0bits+0xa>

000c49cc <__lo0bits>:
   c49cc:	6803      	ldr	r3, [r0, #0]
   c49ce:	f013 0207 	ands.w	r2, r3, #7
   c49d2:	4601      	mov	r1, r0
   c49d4:	d00b      	beq.n	c49ee <__lo0bits+0x22>
   c49d6:	07da      	lsls	r2, r3, #31
   c49d8:	d423      	bmi.n	c4a22 <__lo0bits+0x56>
   c49da:	0798      	lsls	r0, r3, #30
   c49dc:	bf49      	itett	mi
   c49de:	085b      	lsrmi	r3, r3, #1
   c49e0:	089b      	lsrpl	r3, r3, #2
   c49e2:	2001      	movmi	r0, #1
   c49e4:	600b      	strmi	r3, [r1, #0]
   c49e6:	bf5c      	itt	pl
   c49e8:	600b      	strpl	r3, [r1, #0]
   c49ea:	2002      	movpl	r0, #2
   c49ec:	4770      	bx	lr
   c49ee:	b298      	uxth	r0, r3
   c49f0:	b9a8      	cbnz	r0, c4a1e <__lo0bits+0x52>
   c49f2:	0c1b      	lsrs	r3, r3, #16
   c49f4:	2010      	movs	r0, #16
   c49f6:	b2da      	uxtb	r2, r3
   c49f8:	b90a      	cbnz	r2, c49fe <__lo0bits+0x32>
   c49fa:	3008      	adds	r0, #8
   c49fc:	0a1b      	lsrs	r3, r3, #8
   c49fe:	071a      	lsls	r2, r3, #28
   c4a00:	bf04      	itt	eq
   c4a02:	091b      	lsreq	r3, r3, #4
   c4a04:	3004      	addeq	r0, #4
   c4a06:	079a      	lsls	r2, r3, #30
   c4a08:	bf04      	itt	eq
   c4a0a:	089b      	lsreq	r3, r3, #2
   c4a0c:	3002      	addeq	r0, #2
   c4a0e:	07da      	lsls	r2, r3, #31
   c4a10:	d403      	bmi.n	c4a1a <__lo0bits+0x4e>
   c4a12:	085b      	lsrs	r3, r3, #1
   c4a14:	f100 0001 	add.w	r0, r0, #1
   c4a18:	d005      	beq.n	c4a26 <__lo0bits+0x5a>
   c4a1a:	600b      	str	r3, [r1, #0]
   c4a1c:	4770      	bx	lr
   c4a1e:	4610      	mov	r0, r2
   c4a20:	e7e9      	b.n	c49f6 <__lo0bits+0x2a>
   c4a22:	2000      	movs	r0, #0
   c4a24:	4770      	bx	lr
   c4a26:	2020      	movs	r0, #32
   c4a28:	4770      	bx	lr
	...

000c4a2c <__i2b>:
   c4a2c:	b510      	push	{r4, lr}
   c4a2e:	460c      	mov	r4, r1
   c4a30:	2101      	movs	r1, #1
   c4a32:	f7ff feb9 	bl	c47a8 <_Balloc>
   c4a36:	4602      	mov	r2, r0
   c4a38:	b928      	cbnz	r0, c4a46 <__i2b+0x1a>
   c4a3a:	4b05      	ldr	r3, [pc, #20]	; (c4a50 <__i2b+0x24>)
   c4a3c:	4805      	ldr	r0, [pc, #20]	; (c4a54 <__i2b+0x28>)
   c4a3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c4a42:	f7fa fafd 	bl	bf040 <__assert_func>
   c4a46:	2301      	movs	r3, #1
   c4a48:	6144      	str	r4, [r0, #20]
   c4a4a:	6103      	str	r3, [r0, #16]
   c4a4c:	bd10      	pop	{r4, pc}
   c4a4e:	bf00      	nop
   c4a50:	000c90c1 	.word	0x000c90c1
   c4a54:	000c9148 	.word	0x000c9148

000c4a58 <__multiply>:
   c4a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c4a5c:	4691      	mov	r9, r2
   c4a5e:	690a      	ldr	r2, [r1, #16]
   c4a60:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c4a64:	429a      	cmp	r2, r3
   c4a66:	bfb8      	it	lt
   c4a68:	460b      	movlt	r3, r1
   c4a6a:	460c      	mov	r4, r1
   c4a6c:	bfbc      	itt	lt
   c4a6e:	464c      	movlt	r4, r9
   c4a70:	4699      	movlt	r9, r3
   c4a72:	6927      	ldr	r7, [r4, #16]
   c4a74:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c4a78:	68a3      	ldr	r3, [r4, #8]
   c4a7a:	6861      	ldr	r1, [r4, #4]
   c4a7c:	eb07 060a 	add.w	r6, r7, sl
   c4a80:	42b3      	cmp	r3, r6
   c4a82:	b085      	sub	sp, #20
   c4a84:	bfb8      	it	lt
   c4a86:	3101      	addlt	r1, #1
   c4a88:	f7ff fe8e 	bl	c47a8 <_Balloc>
   c4a8c:	b930      	cbnz	r0, c4a9c <__multiply+0x44>
   c4a8e:	4602      	mov	r2, r0
   c4a90:	4b44      	ldr	r3, [pc, #272]	; (c4ba4 <__multiply+0x14c>)
   c4a92:	4845      	ldr	r0, [pc, #276]	; (c4ba8 <__multiply+0x150>)
   c4a94:	f240 115d 	movw	r1, #349	; 0x15d
   c4a98:	f7fa fad2 	bl	bf040 <__assert_func>
   c4a9c:	f100 0514 	add.w	r5, r0, #20
   c4aa0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c4aa4:	462b      	mov	r3, r5
   c4aa6:	2200      	movs	r2, #0
   c4aa8:	4543      	cmp	r3, r8
   c4aaa:	d321      	bcc.n	c4af0 <__multiply+0x98>
   c4aac:	f104 0314 	add.w	r3, r4, #20
   c4ab0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c4ab4:	f109 0314 	add.w	r3, r9, #20
   c4ab8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c4abc:	9202      	str	r2, [sp, #8]
   c4abe:	1b3a      	subs	r2, r7, r4
   c4ac0:	3a15      	subs	r2, #21
   c4ac2:	f022 0203 	bic.w	r2, r2, #3
   c4ac6:	3204      	adds	r2, #4
   c4ac8:	f104 0115 	add.w	r1, r4, #21
   c4acc:	428f      	cmp	r7, r1
   c4ace:	bf38      	it	cc
   c4ad0:	2204      	movcc	r2, #4
   c4ad2:	9201      	str	r2, [sp, #4]
   c4ad4:	9a02      	ldr	r2, [sp, #8]
   c4ad6:	9303      	str	r3, [sp, #12]
   c4ad8:	429a      	cmp	r2, r3
   c4ada:	d80c      	bhi.n	c4af6 <__multiply+0x9e>
   c4adc:	2e00      	cmp	r6, #0
   c4ade:	dd03      	ble.n	c4ae8 <__multiply+0x90>
   c4ae0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c4ae4:	2b00      	cmp	r3, #0
   c4ae6:	d05a      	beq.n	c4b9e <__multiply+0x146>
   c4ae8:	6106      	str	r6, [r0, #16]
   c4aea:	b005      	add	sp, #20
   c4aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c4af0:	f843 2b04 	str.w	r2, [r3], #4
   c4af4:	e7d8      	b.n	c4aa8 <__multiply+0x50>
   c4af6:	f8b3 a000 	ldrh.w	sl, [r3]
   c4afa:	f1ba 0f00 	cmp.w	sl, #0
   c4afe:	d024      	beq.n	c4b4a <__multiply+0xf2>
   c4b00:	f104 0e14 	add.w	lr, r4, #20
   c4b04:	46a9      	mov	r9, r5
   c4b06:	f04f 0c00 	mov.w	ip, #0
   c4b0a:	f85e 2b04 	ldr.w	r2, [lr], #4
   c4b0e:	f8d9 1000 	ldr.w	r1, [r9]
   c4b12:	fa1f fb82 	uxth.w	fp, r2
   c4b16:	b289      	uxth	r1, r1
   c4b18:	fb0a 110b 	mla	r1, sl, fp, r1
   c4b1c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c4b20:	f8d9 2000 	ldr.w	r2, [r9]
   c4b24:	4461      	add	r1, ip
   c4b26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c4b2a:	fb0a c20b 	mla	r2, sl, fp, ip
   c4b2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c4b32:	b289      	uxth	r1, r1
   c4b34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c4b38:	4577      	cmp	r7, lr
   c4b3a:	f849 1b04 	str.w	r1, [r9], #4
   c4b3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c4b42:	d8e2      	bhi.n	c4b0a <__multiply+0xb2>
   c4b44:	9a01      	ldr	r2, [sp, #4]
   c4b46:	f845 c002 	str.w	ip, [r5, r2]
   c4b4a:	9a03      	ldr	r2, [sp, #12]
   c4b4c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c4b50:	3304      	adds	r3, #4
   c4b52:	f1b9 0f00 	cmp.w	r9, #0
   c4b56:	d020      	beq.n	c4b9a <__multiply+0x142>
   c4b58:	6829      	ldr	r1, [r5, #0]
   c4b5a:	f104 0c14 	add.w	ip, r4, #20
   c4b5e:	46ae      	mov	lr, r5
   c4b60:	f04f 0a00 	mov.w	sl, #0
   c4b64:	f8bc b000 	ldrh.w	fp, [ip]
   c4b68:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c4b6c:	fb09 220b 	mla	r2, r9, fp, r2
   c4b70:	4492      	add	sl, r2
   c4b72:	b289      	uxth	r1, r1
   c4b74:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c4b78:	f84e 1b04 	str.w	r1, [lr], #4
   c4b7c:	f85c 2b04 	ldr.w	r2, [ip], #4
   c4b80:	f8be 1000 	ldrh.w	r1, [lr]
   c4b84:	0c12      	lsrs	r2, r2, #16
   c4b86:	fb09 1102 	mla	r1, r9, r2, r1
   c4b8a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c4b8e:	4567      	cmp	r7, ip
   c4b90:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c4b94:	d8e6      	bhi.n	c4b64 <__multiply+0x10c>
   c4b96:	9a01      	ldr	r2, [sp, #4]
   c4b98:	50a9      	str	r1, [r5, r2]
   c4b9a:	3504      	adds	r5, #4
   c4b9c:	e79a      	b.n	c4ad4 <__multiply+0x7c>
   c4b9e:	3e01      	subs	r6, #1
   c4ba0:	e79c      	b.n	c4adc <__multiply+0x84>
   c4ba2:	bf00      	nop
   c4ba4:	000c90c1 	.word	0x000c90c1
   c4ba8:	000c9148 	.word	0x000c9148

000c4bac <__pow5mult>:
   c4bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c4bb0:	4615      	mov	r5, r2
   c4bb2:	f012 0203 	ands.w	r2, r2, #3
   c4bb6:	4606      	mov	r6, r0
   c4bb8:	460f      	mov	r7, r1
   c4bba:	d007      	beq.n	c4bcc <__pow5mult+0x20>
   c4bbc:	4c25      	ldr	r4, [pc, #148]	; (c4c54 <__pow5mult+0xa8>)
   c4bbe:	3a01      	subs	r2, #1
   c4bc0:	2300      	movs	r3, #0
   c4bc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c4bc6:	f7ff fe51 	bl	c486c <__multadd>
   c4bca:	4607      	mov	r7, r0
   c4bcc:	10ad      	asrs	r5, r5, #2
   c4bce:	d03d      	beq.n	c4c4c <__pow5mult+0xa0>
   c4bd0:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c4bd2:	b97c      	cbnz	r4, c4bf4 <__pow5mult+0x48>
   c4bd4:	2010      	movs	r0, #16
   c4bd6:	f7fa f9fb 	bl	befd0 <malloc>
   c4bda:	4602      	mov	r2, r0
   c4bdc:	6270      	str	r0, [r6, #36]	; 0x24
   c4bde:	b928      	cbnz	r0, c4bec <__pow5mult+0x40>
   c4be0:	4b1d      	ldr	r3, [pc, #116]	; (c4c58 <__pow5mult+0xac>)
   c4be2:	481e      	ldr	r0, [pc, #120]	; (c4c5c <__pow5mult+0xb0>)
   c4be4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c4be8:	f7fa fa2a 	bl	bf040 <__assert_func>
   c4bec:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c4bf0:	6004      	str	r4, [r0, #0]
   c4bf2:	60c4      	str	r4, [r0, #12]
   c4bf4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c4bf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c4bfc:	b94c      	cbnz	r4, c4c12 <__pow5mult+0x66>
   c4bfe:	f240 2171 	movw	r1, #625	; 0x271
   c4c02:	4630      	mov	r0, r6
   c4c04:	f7ff ff12 	bl	c4a2c <__i2b>
   c4c08:	2300      	movs	r3, #0
   c4c0a:	f8c8 0008 	str.w	r0, [r8, #8]
   c4c0e:	4604      	mov	r4, r0
   c4c10:	6003      	str	r3, [r0, #0]
   c4c12:	f04f 0900 	mov.w	r9, #0
   c4c16:	07eb      	lsls	r3, r5, #31
   c4c18:	d50a      	bpl.n	c4c30 <__pow5mult+0x84>
   c4c1a:	4639      	mov	r1, r7
   c4c1c:	4622      	mov	r2, r4
   c4c1e:	4630      	mov	r0, r6
   c4c20:	f7ff ff1a 	bl	c4a58 <__multiply>
   c4c24:	4639      	mov	r1, r7
   c4c26:	4680      	mov	r8, r0
   c4c28:	4630      	mov	r0, r6
   c4c2a:	f7ff fdfd 	bl	c4828 <_Bfree>
   c4c2e:	4647      	mov	r7, r8
   c4c30:	106d      	asrs	r5, r5, #1
   c4c32:	d00b      	beq.n	c4c4c <__pow5mult+0xa0>
   c4c34:	6820      	ldr	r0, [r4, #0]
   c4c36:	b938      	cbnz	r0, c4c48 <__pow5mult+0x9c>
   c4c38:	4622      	mov	r2, r4
   c4c3a:	4621      	mov	r1, r4
   c4c3c:	4630      	mov	r0, r6
   c4c3e:	f7ff ff0b 	bl	c4a58 <__multiply>
   c4c42:	6020      	str	r0, [r4, #0]
   c4c44:	f8c0 9000 	str.w	r9, [r0]
   c4c48:	4604      	mov	r4, r0
   c4c4a:	e7e4      	b.n	c4c16 <__pow5mult+0x6a>
   c4c4c:	4638      	mov	r0, r7
   c4c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c4c52:	bf00      	nop
   c4c54:	000c9298 	.word	0x000c9298
   c4c58:	000c8ef8 	.word	0x000c8ef8
   c4c5c:	000c9148 	.word	0x000c9148

000c4c60 <__lshift>:
   c4c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c4c64:	460c      	mov	r4, r1
   c4c66:	6849      	ldr	r1, [r1, #4]
   c4c68:	6923      	ldr	r3, [r4, #16]
   c4c6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c4c6e:	68a3      	ldr	r3, [r4, #8]
   c4c70:	4607      	mov	r7, r0
   c4c72:	4691      	mov	r9, r2
   c4c74:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c4c78:	f108 0601 	add.w	r6, r8, #1
   c4c7c:	42b3      	cmp	r3, r6
   c4c7e:	db0b      	blt.n	c4c98 <__lshift+0x38>
   c4c80:	4638      	mov	r0, r7
   c4c82:	f7ff fd91 	bl	c47a8 <_Balloc>
   c4c86:	4605      	mov	r5, r0
   c4c88:	b948      	cbnz	r0, c4c9e <__lshift+0x3e>
   c4c8a:	4602      	mov	r2, r0
   c4c8c:	4b2a      	ldr	r3, [pc, #168]	; (c4d38 <__lshift+0xd8>)
   c4c8e:	482b      	ldr	r0, [pc, #172]	; (c4d3c <__lshift+0xdc>)
   c4c90:	f240 11d9 	movw	r1, #473	; 0x1d9
   c4c94:	f7fa f9d4 	bl	bf040 <__assert_func>
   c4c98:	3101      	adds	r1, #1
   c4c9a:	005b      	lsls	r3, r3, #1
   c4c9c:	e7ee      	b.n	c4c7c <__lshift+0x1c>
   c4c9e:	2300      	movs	r3, #0
   c4ca0:	f100 0114 	add.w	r1, r0, #20
   c4ca4:	f100 0210 	add.w	r2, r0, #16
   c4ca8:	4618      	mov	r0, r3
   c4caa:	4553      	cmp	r3, sl
   c4cac:	db37      	blt.n	c4d1e <__lshift+0xbe>
   c4cae:	6920      	ldr	r0, [r4, #16]
   c4cb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c4cb4:	f104 0314 	add.w	r3, r4, #20
   c4cb8:	f019 091f 	ands.w	r9, r9, #31
   c4cbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c4cc0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c4cc4:	d02f      	beq.n	c4d26 <__lshift+0xc6>
   c4cc6:	f1c9 0e20 	rsb	lr, r9, #32
   c4cca:	468a      	mov	sl, r1
   c4ccc:	f04f 0c00 	mov.w	ip, #0
   c4cd0:	681a      	ldr	r2, [r3, #0]
   c4cd2:	fa02 f209 	lsl.w	r2, r2, r9
   c4cd6:	ea42 020c 	orr.w	r2, r2, ip
   c4cda:	f84a 2b04 	str.w	r2, [sl], #4
   c4cde:	f853 2b04 	ldr.w	r2, [r3], #4
   c4ce2:	4298      	cmp	r0, r3
   c4ce4:	fa22 fc0e 	lsr.w	ip, r2, lr
   c4ce8:	d8f2      	bhi.n	c4cd0 <__lshift+0x70>
   c4cea:	1b03      	subs	r3, r0, r4
   c4cec:	3b15      	subs	r3, #21
   c4cee:	f023 0303 	bic.w	r3, r3, #3
   c4cf2:	3304      	adds	r3, #4
   c4cf4:	f104 0215 	add.w	r2, r4, #21
   c4cf8:	4290      	cmp	r0, r2
   c4cfa:	bf38      	it	cc
   c4cfc:	2304      	movcc	r3, #4
   c4cfe:	f841 c003 	str.w	ip, [r1, r3]
   c4d02:	f1bc 0f00 	cmp.w	ip, #0
   c4d06:	d001      	beq.n	c4d0c <__lshift+0xac>
   c4d08:	f108 0602 	add.w	r6, r8, #2
   c4d0c:	3e01      	subs	r6, #1
   c4d0e:	4638      	mov	r0, r7
   c4d10:	612e      	str	r6, [r5, #16]
   c4d12:	4621      	mov	r1, r4
   c4d14:	f7ff fd88 	bl	c4828 <_Bfree>
   c4d18:	4628      	mov	r0, r5
   c4d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c4d1e:	f842 0f04 	str.w	r0, [r2, #4]!
   c4d22:	3301      	adds	r3, #1
   c4d24:	e7c1      	b.n	c4caa <__lshift+0x4a>
   c4d26:	3904      	subs	r1, #4
   c4d28:	f853 2b04 	ldr.w	r2, [r3], #4
   c4d2c:	f841 2f04 	str.w	r2, [r1, #4]!
   c4d30:	4298      	cmp	r0, r3
   c4d32:	d8f9      	bhi.n	c4d28 <__lshift+0xc8>
   c4d34:	e7ea      	b.n	c4d0c <__lshift+0xac>
   c4d36:	bf00      	nop
   c4d38:	000c90c1 	.word	0x000c90c1
   c4d3c:	000c9148 	.word	0x000c9148

000c4d40 <__mcmp>:
   c4d40:	b530      	push	{r4, r5, lr}
   c4d42:	6902      	ldr	r2, [r0, #16]
   c4d44:	690c      	ldr	r4, [r1, #16]
   c4d46:	1b12      	subs	r2, r2, r4
   c4d48:	d10e      	bne.n	c4d68 <__mcmp+0x28>
   c4d4a:	f100 0314 	add.w	r3, r0, #20
   c4d4e:	3114      	adds	r1, #20
   c4d50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c4d54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c4d58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c4d5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c4d60:	42a5      	cmp	r5, r4
   c4d62:	d003      	beq.n	c4d6c <__mcmp+0x2c>
   c4d64:	d305      	bcc.n	c4d72 <__mcmp+0x32>
   c4d66:	2201      	movs	r2, #1
   c4d68:	4610      	mov	r0, r2
   c4d6a:	bd30      	pop	{r4, r5, pc}
   c4d6c:	4283      	cmp	r3, r0
   c4d6e:	d3f3      	bcc.n	c4d58 <__mcmp+0x18>
   c4d70:	e7fa      	b.n	c4d68 <__mcmp+0x28>
   c4d72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c4d76:	e7f7      	b.n	c4d68 <__mcmp+0x28>

000c4d78 <__mdiff>:
   c4d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c4d7c:	460c      	mov	r4, r1
   c4d7e:	4606      	mov	r6, r0
   c4d80:	4611      	mov	r1, r2
   c4d82:	4620      	mov	r0, r4
   c4d84:	4690      	mov	r8, r2
   c4d86:	f7ff ffdb 	bl	c4d40 <__mcmp>
   c4d8a:	1e05      	subs	r5, r0, #0
   c4d8c:	d110      	bne.n	c4db0 <__mdiff+0x38>
   c4d8e:	4629      	mov	r1, r5
   c4d90:	4630      	mov	r0, r6
   c4d92:	f7ff fd09 	bl	c47a8 <_Balloc>
   c4d96:	b930      	cbnz	r0, c4da6 <__mdiff+0x2e>
   c4d98:	4b3a      	ldr	r3, [pc, #232]	; (c4e84 <__mdiff+0x10c>)
   c4d9a:	4602      	mov	r2, r0
   c4d9c:	f240 2132 	movw	r1, #562	; 0x232
   c4da0:	4839      	ldr	r0, [pc, #228]	; (c4e88 <__mdiff+0x110>)
   c4da2:	f7fa f94d 	bl	bf040 <__assert_func>
   c4da6:	2301      	movs	r3, #1
   c4da8:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c4dac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c4db0:	bfa4      	itt	ge
   c4db2:	4643      	movge	r3, r8
   c4db4:	46a0      	movge	r8, r4
   c4db6:	4630      	mov	r0, r6
   c4db8:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c4dbc:	bfa6      	itte	ge
   c4dbe:	461c      	movge	r4, r3
   c4dc0:	2500      	movge	r5, #0
   c4dc2:	2501      	movlt	r5, #1
   c4dc4:	f7ff fcf0 	bl	c47a8 <_Balloc>
   c4dc8:	b920      	cbnz	r0, c4dd4 <__mdiff+0x5c>
   c4dca:	4b2e      	ldr	r3, [pc, #184]	; (c4e84 <__mdiff+0x10c>)
   c4dcc:	4602      	mov	r2, r0
   c4dce:	f44f 7110 	mov.w	r1, #576	; 0x240
   c4dd2:	e7e5      	b.n	c4da0 <__mdiff+0x28>
   c4dd4:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c4dd8:	6926      	ldr	r6, [r4, #16]
   c4dda:	60c5      	str	r5, [r0, #12]
   c4ddc:	f104 0914 	add.w	r9, r4, #20
   c4de0:	f108 0514 	add.w	r5, r8, #20
   c4de4:	f100 0e14 	add.w	lr, r0, #20
   c4de8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c4dec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c4df0:	f108 0210 	add.w	r2, r8, #16
   c4df4:	46f2      	mov	sl, lr
   c4df6:	2100      	movs	r1, #0
   c4df8:	f859 3b04 	ldr.w	r3, [r9], #4
   c4dfc:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c4e00:	fa1f f883 	uxth.w	r8, r3
   c4e04:	fa11 f18b 	uxtah	r1, r1, fp
   c4e08:	0c1b      	lsrs	r3, r3, #16
   c4e0a:	eba1 0808 	sub.w	r8, r1, r8
   c4e0e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c4e12:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c4e16:	fa1f f888 	uxth.w	r8, r8
   c4e1a:	1419      	asrs	r1, r3, #16
   c4e1c:	454e      	cmp	r6, r9
   c4e1e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c4e22:	f84a 3b04 	str.w	r3, [sl], #4
   c4e26:	d8e7      	bhi.n	c4df8 <__mdiff+0x80>
   c4e28:	1b33      	subs	r3, r6, r4
   c4e2a:	3b15      	subs	r3, #21
   c4e2c:	f023 0303 	bic.w	r3, r3, #3
   c4e30:	3304      	adds	r3, #4
   c4e32:	3415      	adds	r4, #21
   c4e34:	42a6      	cmp	r6, r4
   c4e36:	bf38      	it	cc
   c4e38:	2304      	movcc	r3, #4
   c4e3a:	441d      	add	r5, r3
   c4e3c:	4473      	add	r3, lr
   c4e3e:	469e      	mov	lr, r3
   c4e40:	462e      	mov	r6, r5
   c4e42:	4566      	cmp	r6, ip
   c4e44:	d30e      	bcc.n	c4e64 <__mdiff+0xec>
   c4e46:	f10c 0203 	add.w	r2, ip, #3
   c4e4a:	1b52      	subs	r2, r2, r5
   c4e4c:	f022 0203 	bic.w	r2, r2, #3
   c4e50:	3d03      	subs	r5, #3
   c4e52:	45ac      	cmp	ip, r5
   c4e54:	bf38      	it	cc
   c4e56:	2200      	movcc	r2, #0
   c4e58:	441a      	add	r2, r3
   c4e5a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c4e5e:	b17b      	cbz	r3, c4e80 <__mdiff+0x108>
   c4e60:	6107      	str	r7, [r0, #16]
   c4e62:	e7a3      	b.n	c4dac <__mdiff+0x34>
   c4e64:	f856 8b04 	ldr.w	r8, [r6], #4
   c4e68:	fa11 f288 	uxtah	r2, r1, r8
   c4e6c:	1414      	asrs	r4, r2, #16
   c4e6e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c4e72:	b292      	uxth	r2, r2
   c4e74:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c4e78:	f84e 2b04 	str.w	r2, [lr], #4
   c4e7c:	1421      	asrs	r1, r4, #16
   c4e7e:	e7e0      	b.n	c4e42 <__mdiff+0xca>
   c4e80:	3f01      	subs	r7, #1
   c4e82:	e7ea      	b.n	c4e5a <__mdiff+0xe2>
   c4e84:	000c90c1 	.word	0x000c90c1
   c4e88:	000c9148 	.word	0x000c9148

000c4e8c <__ulp>:
   c4e8c:	b082      	sub	sp, #8
   c4e8e:	ed8d 0b00 	vstr	d0, [sp]
   c4e92:	9b01      	ldr	r3, [sp, #4]
   c4e94:	4912      	ldr	r1, [pc, #72]	; (c4ee0 <__ulp+0x54>)
   c4e96:	4019      	ands	r1, r3
   c4e98:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c4e9c:	2900      	cmp	r1, #0
   c4e9e:	dd05      	ble.n	c4eac <__ulp+0x20>
   c4ea0:	2200      	movs	r2, #0
   c4ea2:	460b      	mov	r3, r1
   c4ea4:	ec43 2b10 	vmov	d0, r2, r3
   c4ea8:	b002      	add	sp, #8
   c4eaa:	4770      	bx	lr
   c4eac:	4249      	negs	r1, r1
   c4eae:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c4eb2:	ea4f 5021 	mov.w	r0, r1, asr #20
   c4eb6:	f04f 0200 	mov.w	r2, #0
   c4eba:	f04f 0300 	mov.w	r3, #0
   c4ebe:	da04      	bge.n	c4eca <__ulp+0x3e>
   c4ec0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c4ec4:	fa41 f300 	asr.w	r3, r1, r0
   c4ec8:	e7ec      	b.n	c4ea4 <__ulp+0x18>
   c4eca:	f1a0 0114 	sub.w	r1, r0, #20
   c4ece:	291e      	cmp	r1, #30
   c4ed0:	bfda      	itte	le
   c4ed2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c4ed6:	fa20 f101 	lsrle.w	r1, r0, r1
   c4eda:	2101      	movgt	r1, #1
   c4edc:	460a      	mov	r2, r1
   c4ede:	e7e1      	b.n	c4ea4 <__ulp+0x18>
   c4ee0:	7ff00000 	.word	0x7ff00000

000c4ee4 <__b2d>:
   c4ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c4ee6:	6905      	ldr	r5, [r0, #16]
   c4ee8:	f100 0714 	add.w	r7, r0, #20
   c4eec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c4ef0:	1f2e      	subs	r6, r5, #4
   c4ef2:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c4ef6:	4620      	mov	r0, r4
   c4ef8:	f7ff fd48 	bl	c498c <__hi0bits>
   c4efc:	f1c0 0320 	rsb	r3, r0, #32
   c4f00:	280a      	cmp	r0, #10
   c4f02:	f8df c07c 	ldr.w	ip, [pc, #124]	; c4f80 <__b2d+0x9c>
   c4f06:	600b      	str	r3, [r1, #0]
   c4f08:	dc14      	bgt.n	c4f34 <__b2d+0x50>
   c4f0a:	f1c0 0e0b 	rsb	lr, r0, #11
   c4f0e:	fa24 f10e 	lsr.w	r1, r4, lr
   c4f12:	42b7      	cmp	r7, r6
   c4f14:	ea41 030c 	orr.w	r3, r1, ip
   c4f18:	bf34      	ite	cc
   c4f1a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c4f1e:	2100      	movcs	r1, #0
   c4f20:	3015      	adds	r0, #21
   c4f22:	fa04 f000 	lsl.w	r0, r4, r0
   c4f26:	fa21 f10e 	lsr.w	r1, r1, lr
   c4f2a:	ea40 0201 	orr.w	r2, r0, r1
   c4f2e:	ec43 2b10 	vmov	d0, r2, r3
   c4f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c4f34:	42b7      	cmp	r7, r6
   c4f36:	bf3a      	itte	cc
   c4f38:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c4f3c:	f1a5 0608 	subcc.w	r6, r5, #8
   c4f40:	2100      	movcs	r1, #0
   c4f42:	380b      	subs	r0, #11
   c4f44:	d017      	beq.n	c4f76 <__b2d+0x92>
   c4f46:	f1c0 0c20 	rsb	ip, r0, #32
   c4f4a:	fa04 f500 	lsl.w	r5, r4, r0
   c4f4e:	42be      	cmp	r6, r7
   c4f50:	fa21 f40c 	lsr.w	r4, r1, ip
   c4f54:	ea45 0504 	orr.w	r5, r5, r4
   c4f58:	bf8c      	ite	hi
   c4f5a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c4f5e:	2400      	movls	r4, #0
   c4f60:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c4f64:	fa01 f000 	lsl.w	r0, r1, r0
   c4f68:	fa24 f40c 	lsr.w	r4, r4, ip
   c4f6c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c4f70:	ea40 0204 	orr.w	r2, r0, r4
   c4f74:	e7db      	b.n	c4f2e <__b2d+0x4a>
   c4f76:	ea44 030c 	orr.w	r3, r4, ip
   c4f7a:	460a      	mov	r2, r1
   c4f7c:	e7d7      	b.n	c4f2e <__b2d+0x4a>
   c4f7e:	bf00      	nop
   c4f80:	3ff00000 	.word	0x3ff00000

000c4f84 <__d2b>:
   c4f84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c4f88:	4689      	mov	r9, r1
   c4f8a:	2101      	movs	r1, #1
   c4f8c:	ec57 6b10 	vmov	r6, r7, d0
   c4f90:	4690      	mov	r8, r2
   c4f92:	f7ff fc09 	bl	c47a8 <_Balloc>
   c4f96:	4604      	mov	r4, r0
   c4f98:	b930      	cbnz	r0, c4fa8 <__d2b+0x24>
   c4f9a:	4602      	mov	r2, r0
   c4f9c:	4b25      	ldr	r3, [pc, #148]	; (c5034 <__d2b+0xb0>)
   c4f9e:	4826      	ldr	r0, [pc, #152]	; (c5038 <__d2b+0xb4>)
   c4fa0:	f240 310a 	movw	r1, #778	; 0x30a
   c4fa4:	f7fa f84c 	bl	bf040 <__assert_func>
   c4fa8:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c4fac:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c4fb0:	bb35      	cbnz	r5, c5000 <__d2b+0x7c>
   c4fb2:	2e00      	cmp	r6, #0
   c4fb4:	9301      	str	r3, [sp, #4]
   c4fb6:	d028      	beq.n	c500a <__d2b+0x86>
   c4fb8:	4668      	mov	r0, sp
   c4fba:	9600      	str	r6, [sp, #0]
   c4fbc:	f7ff fd06 	bl	c49cc <__lo0bits>
   c4fc0:	9900      	ldr	r1, [sp, #0]
   c4fc2:	b300      	cbz	r0, c5006 <__d2b+0x82>
   c4fc4:	9a01      	ldr	r2, [sp, #4]
   c4fc6:	f1c0 0320 	rsb	r3, r0, #32
   c4fca:	fa02 f303 	lsl.w	r3, r2, r3
   c4fce:	430b      	orrs	r3, r1
   c4fd0:	40c2      	lsrs	r2, r0
   c4fd2:	6163      	str	r3, [r4, #20]
   c4fd4:	9201      	str	r2, [sp, #4]
   c4fd6:	9b01      	ldr	r3, [sp, #4]
   c4fd8:	61a3      	str	r3, [r4, #24]
   c4fda:	2b00      	cmp	r3, #0
   c4fdc:	bf14      	ite	ne
   c4fde:	2202      	movne	r2, #2
   c4fe0:	2201      	moveq	r2, #1
   c4fe2:	6122      	str	r2, [r4, #16]
   c4fe4:	b1d5      	cbz	r5, c501c <__d2b+0x98>
   c4fe6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c4fea:	4405      	add	r5, r0
   c4fec:	f8c9 5000 	str.w	r5, [r9]
   c4ff0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c4ff4:	f8c8 0000 	str.w	r0, [r8]
   c4ff8:	4620      	mov	r0, r4
   c4ffa:	b003      	add	sp, #12
   c4ffc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c5000:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c5004:	e7d5      	b.n	c4fb2 <__d2b+0x2e>
   c5006:	6161      	str	r1, [r4, #20]
   c5008:	e7e5      	b.n	c4fd6 <__d2b+0x52>
   c500a:	a801      	add	r0, sp, #4
   c500c:	f7ff fcde 	bl	c49cc <__lo0bits>
   c5010:	9b01      	ldr	r3, [sp, #4]
   c5012:	6163      	str	r3, [r4, #20]
   c5014:	2201      	movs	r2, #1
   c5016:	6122      	str	r2, [r4, #16]
   c5018:	3020      	adds	r0, #32
   c501a:	e7e3      	b.n	c4fe4 <__d2b+0x60>
   c501c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c5020:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c5024:	f8c9 0000 	str.w	r0, [r9]
   c5028:	6918      	ldr	r0, [r3, #16]
   c502a:	f7ff fcaf 	bl	c498c <__hi0bits>
   c502e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c5032:	e7df      	b.n	c4ff4 <__d2b+0x70>
   c5034:	000c90c1 	.word	0x000c90c1
   c5038:	000c9148 	.word	0x000c9148

000c503c <__ratio>:
   c503c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c5040:	4688      	mov	r8, r1
   c5042:	4669      	mov	r1, sp
   c5044:	4681      	mov	r9, r0
   c5046:	f7ff ff4d 	bl	c4ee4 <__b2d>
   c504a:	a901      	add	r1, sp, #4
   c504c:	4640      	mov	r0, r8
   c504e:	ec55 4b10 	vmov	r4, r5, d0
   c5052:	f7ff ff47 	bl	c4ee4 <__b2d>
   c5056:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c505a:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c505e:	eba3 0c02 	sub.w	ip, r3, r2
   c5062:	e9dd 3200 	ldrd	r3, r2, [sp]
   c5066:	1a9b      	subs	r3, r3, r2
   c5068:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c506c:	ec51 0b10 	vmov	r0, r1, d0
   c5070:	2b00      	cmp	r3, #0
   c5072:	bfd6      	itet	le
   c5074:	460a      	movle	r2, r1
   c5076:	462a      	movgt	r2, r5
   c5078:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c507c:	468b      	mov	fp, r1
   c507e:	462f      	mov	r7, r5
   c5080:	bfd4      	ite	le
   c5082:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c5086:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c508a:	4620      	mov	r0, r4
   c508c:	ee10 2a10 	vmov	r2, s0
   c5090:	465b      	mov	r3, fp
   c5092:	4639      	mov	r1, r7
   c5094:	f7ef faaa 	bl	b45ec <__aeabi_ddiv>
   c5098:	ec41 0b10 	vmov	d0, r0, r1
   c509c:	b003      	add	sp, #12
   c509e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c50a2 <__copybits>:
   c50a2:	3901      	subs	r1, #1
   c50a4:	b570      	push	{r4, r5, r6, lr}
   c50a6:	1149      	asrs	r1, r1, #5
   c50a8:	6914      	ldr	r4, [r2, #16]
   c50aa:	3101      	adds	r1, #1
   c50ac:	f102 0314 	add.w	r3, r2, #20
   c50b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c50b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c50b8:	1f05      	subs	r5, r0, #4
   c50ba:	42a3      	cmp	r3, r4
   c50bc:	d30c      	bcc.n	c50d8 <__copybits+0x36>
   c50be:	1aa3      	subs	r3, r4, r2
   c50c0:	3b11      	subs	r3, #17
   c50c2:	f023 0303 	bic.w	r3, r3, #3
   c50c6:	3211      	adds	r2, #17
   c50c8:	42a2      	cmp	r2, r4
   c50ca:	bf88      	it	hi
   c50cc:	2300      	movhi	r3, #0
   c50ce:	4418      	add	r0, r3
   c50d0:	2300      	movs	r3, #0
   c50d2:	4288      	cmp	r0, r1
   c50d4:	d305      	bcc.n	c50e2 <__copybits+0x40>
   c50d6:	bd70      	pop	{r4, r5, r6, pc}
   c50d8:	f853 6b04 	ldr.w	r6, [r3], #4
   c50dc:	f845 6f04 	str.w	r6, [r5, #4]!
   c50e0:	e7eb      	b.n	c50ba <__copybits+0x18>
   c50e2:	f840 3b04 	str.w	r3, [r0], #4
   c50e6:	e7f4      	b.n	c50d2 <__copybits+0x30>

000c50e8 <__any_on>:
   c50e8:	f100 0214 	add.w	r2, r0, #20
   c50ec:	6900      	ldr	r0, [r0, #16]
   c50ee:	114b      	asrs	r3, r1, #5
   c50f0:	4298      	cmp	r0, r3
   c50f2:	b510      	push	{r4, lr}
   c50f4:	db11      	blt.n	c511a <__any_on+0x32>
   c50f6:	dd0a      	ble.n	c510e <__any_on+0x26>
   c50f8:	f011 011f 	ands.w	r1, r1, #31
   c50fc:	d007      	beq.n	c510e <__any_on+0x26>
   c50fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c5102:	fa24 f001 	lsr.w	r0, r4, r1
   c5106:	fa00 f101 	lsl.w	r1, r0, r1
   c510a:	428c      	cmp	r4, r1
   c510c:	d10b      	bne.n	c5126 <__any_on+0x3e>
   c510e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c5112:	4293      	cmp	r3, r2
   c5114:	d803      	bhi.n	c511e <__any_on+0x36>
   c5116:	2000      	movs	r0, #0
   c5118:	bd10      	pop	{r4, pc}
   c511a:	4603      	mov	r3, r0
   c511c:	e7f7      	b.n	c510e <__any_on+0x26>
   c511e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c5122:	2900      	cmp	r1, #0
   c5124:	d0f5      	beq.n	c5112 <__any_on+0x2a>
   c5126:	2001      	movs	r0, #1
   c5128:	e7f6      	b.n	c5118 <__any_on+0x30>

000c512a <__ascii_wctomb>:
   c512a:	b149      	cbz	r1, c5140 <__ascii_wctomb+0x16>
   c512c:	2aff      	cmp	r2, #255	; 0xff
   c512e:	bf85      	ittet	hi
   c5130:	238a      	movhi	r3, #138	; 0x8a
   c5132:	6003      	strhi	r3, [r0, #0]
   c5134:	700a      	strbls	r2, [r1, #0]
   c5136:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c513a:	bf98      	it	ls
   c513c:	2001      	movls	r0, #1
   c513e:	4770      	bx	lr
   c5140:	4608      	mov	r0, r1
   c5142:	4770      	bx	lr

000c5144 <link_code_end>:
   c5144:	0000000a 	.word	0x0000000a
   c5148:	0000000a 	.word	0x0000000a
   c514c:	0000000a 	.word	0x0000000a

000c5150 <dynalib_user>:
   c5150:	000b4e2d 000b4e69 000b4e91 000b4e95     -N..iN...N...N..
   c5160:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   c5170:	72697620 6c617574 61656d00 203a736e      virtual.means: 
   c5180:	69786100 25203a73 25000a69 76002066     .axis: %i..%f .v
   c5190:	2064696f 6f6e617b 6f6d796e 3a7d7375     oid {anonymous}:
   c51a0:	5f69653a 67696c61 5f64656e 65657266     :ei_aligned_free
   c51b0:	696f7628 00292a64 6573552f 652f7372     (void*)./Users/e
   c51c0:	2f636972 6e776f44 64616f6c 72502f73     ric/Downloads/Pr
   c51d0:	6d69786f 5f797469 74736547 5f657275     oximity_Gesture_
   c51e0:	65746544 6f697463 6e695f6e 65726566     Detection_infere
   c51f0:	6e69636e 732f2f67 652f6372 2d656764     ncing//src/edge-
   c5200:	75706d69 2d65736c 2f6b6473 73616c63     impulse-sdk/clas
   c5210:	69666973 652f7265 6c615f69 656e6769     sifier/ei_aligne
   c5220:	616d5f64 636f6c6c 2800682e 67696c61     d_malloc.h.(alig
   c5230:	2026206e 696c6128 2d206e67 29293120     n & (align - 1))
   c5240:	203d3d20 6f760030 202a6469 6f6e617b      == 0.void* {ano
   c5250:	6f6d796e 3a7d7375 5f69653a 67696c61     nymous}::ei_alig
   c5260:	5f64656e 6c6c6163 7328636f 5f657a69     ned_calloc(size_
   c5270:	73202c74 5f657a69 46002974 656c6961     t, size_t).Faile
   c5280:	6f742064 696e6920 6c616974 20657a69     d to initialize 
   c5290:	20656874 65646f6d 6528206c 726f7272     the model (error
   c52a0:	646f6320 64252065 6e000a29 69006e61      code %d)..nan.i
   c52b0:	6f00666e 76006676 6f746365 723a3a72     nf.ovf.vector::r
   c52c0:	72657365 76006576 6f746365 5f3a3a72     eserve.vector::_
   c52d0:	65725f4d 6f6c6c61 6e695f63 74726573     M_realloc_insert
   c52e0:	464e4900 5748004f 46465220 61662054     .INFO.HW RFFT fa
   c52f0:	64656c69 4646202c 69732054 6e20657a     iled, FFT size n
   c5300:	7320746f 6f707075 64657472 754d202e     ot supported. Mu
   c5310:	62207473 20612065 65776f70 666f2072     st be a power of
   c5320:	62203220 65777465 25206e65 6e612064      2 between %d an
   c5330:	64252064 7328202c 20657a69 20736177     d %d, (size was 
   c5340:	00296425 52205748 20544646 6c696166     %d).HW RFFT fail
   c5350:	202c6465 6c6c6166 20676e69 6b636162     ed, falling back
   c5360:	206f7420 63005753 6f6e6e61 72632074      to SW.cannot cr
   c5370:	65746165 64747320 65763a3a 726f7463     eate std::vector
   c5380:	72616c20 20726567 6e616874 78616d20      larger than max
   c5390:	7a69735f 00292865 3a525245 6e614320     _size().ERR: Can
   c53a0:	20746f6e 646e6168 6920656c 7475706e     not handle input
   c53b0:	70797420 25282065 000a2964 3a525245      type (%d)..ERR:
   c53c0:	706e6920 74207475 6f736e65 61682072      input tensor ha
   c53d0:	69732073 2520657a 79622064 2c736574     s size %d bytes,
   c53e0:	74756220 706e6920 6d207475 69727461      but input matri
   c53f0:	61682078 61682073 69732073 2520657a     x has has size %
   c5400:	79622064 0a736574 52524500 756f203a     d bytes..ERR: ou
   c5410:	74757074 6e657420 20726f73 20736168     tput tensor has 
   c5420:	657a6973 2c642520 74756220 706e6920     size %d, but inp
   c5430:	6d207475 69727461 61682078 61682073     ut matrix has ha
   c5440:	69732073 2520657a 45000a64 203a5252     s size %d..ERR: 
   c5450:	6e6e6143 6820746f 6c646e61 756f2065     Cannot handle ou
   c5460:	74757074 70797420 25282065 000a2964     tput type (%d)..
   c5470:	3a525245 626f4d20 4e656c69 53207465     ERR: MobileNet S
   c5480:	69204453 6f6e2073 75732074 726f7070     SD is not suppor
   c5490:	20646574 45206e69 6f204e4f 65542072     ted in EON or Te
   c54a0:	726f736e 776f6c46 74694c20 694d2065     nsorFlow Lite Mi
   c54b0:	0a6f7263 52524500 6e49203a 696c6176     cro..ERR: Invali
   c54c0:	756f2064 74757074 70797420 25282065     d output type (%
   c54d0:	66202964 5920726f 764f4c4f 616c2035     d) for YOLOv5 la
   c54e0:	6c207473 72657961 5245000a 59203a52     st layer..ERR: Y
   c54f0:	584f4c4f 656f6420 6f6e2073 75732074     OLOX does not su
   c5500:	726f7070 75712074 69746e61 2064657a     pport quantized 
   c5510:	65666e69 636e6572 45000a65 203a5252     inference..ERR: 
   c5520:	4f4c4f59 64203756 2073656f 20746f6e     YOLOV7 does not 
   c5530:	70707573 2074726f 6e617571 657a6974     support quantize
   c5540:	6e692064 65726566 0a65636e 52524500     d inference..ERR
   c5550:	6e49203a 696c6176 756f2064 74757074     : Invalid output
   c5560:	70797420 25282065 66202964 5420726f      type (%d) for T
   c5570:	6c204f41 20747361 6579616c 45000a72     AO last layer..E
   c5580:	203a5252 61766e49 2064696c 7074756f     RR: Invalid outp
   c5590:	74207475 20657079 29642528 726f6620     ut type (%d) for
   c55a0:	4f415420 4c4f5920 2033764f 6579616c      TAO YOLOv3 laye
   c55b0:	45000a72 203a5252 61766e49 2064696c     r..ERR: Invalid 
   c55c0:	7074756f 74207475 20657079 29642528     output type (%d)
   c55d0:	726f6620 4f415420 4c4f5920 2034764f      for TAO YOLOv4 
   c55e0:	6579616c 45000a72 203a5252 61766e49     layer..ERR: Inva
   c55f0:	2064696c 7074756f 74207475 20657079     lid output type 
   c5600:	29642528 726f6620 4c4f5920 5250204f     (%d) for YOLO PR
   c5610:	616c204f 0a726579 52524500 6e55203a     O layer..ERR: Un
   c5620:	70707573 6574726f 626f2064 7463656a     supported object
   c5630:	74656420 69746365 6c206e6f 20747361      detection last 
   c5640:	6579616c 25282072 000a2964 093a7325     layer (%d)..%s:.
   c5650:	65725000 74636964 736e6f69 69742820     .Predictions (ti
   c5660:	203a656d 6d206425 3a292e73 7247000a     me: %d ms.):..Gr
   c5670:	63737961 00656c61 74617473 65206369     ayscale.static e
   c5680:	65765f69 726f7463 746e693c 6965203e     i_vector<int> ei
   c5690:	70733a3a 72746365 3a3a6c61 74616566     ::spectral::feat
   c56a0:	3a657275 7465673a 7461725f 635f6f69     ure::get_ratio_c
   c56b0:	6f626d6f 746e6928 552f0029 73726573     ombo(int)./Users
   c56c0:	6972652f 6f442f63 6f6c6e77 2f736461     /eric/Downloads/
   c56d0:	786f7250 74696d69 65475f79 72757473     Proximity_Gestur
   c56e0:	65445f65 74636574 5f6e6f69 65666e69     e_Detection_infe
   c56f0:	636e6572 2f676e69 6372732f 6764652f     rencing//src/edg
   c5700:	6d692d65 736c7570 64732d65 73642f6b     e-impulse-sdk/ds
   c5710:	70732f70 72746365 662f6c61 75746165     p/spectral/featu
   c5720:	682e6572 45007070 203a5252 6c696146     re.hpp.ERR: Fail
   c5730:	74206465 7572206f 5344206e 72702050     ed to run DSP pr
   c5740:	7365636f 25282073 000a2964 74616546     ocess (%d)..Feat
   c5750:	73657275 64252820 2e736d20 00203a29     ures (%d ms.): .
   c5760:	3a525245 74754f20 20666f20 6f6d656d     ERR: Out of memo
   c5770:	202c7972 276e6163 6c612074 61636f6c     ry, can't alloca
   c5780:	66206574 75746165 0a736572 52524500     te features..ERR
   c5790:	754f203a 666f2074 6d656d20 2c79726f     : Out of memory,
   c57a0:	6e616320 61207427 636f6c6c 20657461      can't allocate 
   c57b0:	7274616d 705f7869 0a737274 52524500     matrix_ptrs..ERR
   c57c0:	754f203a 666f2074 6d656d20 2c79726f     : Out of memory,
   c57d0:	6e616320 61207427 636f6c6c 20657461      can't allocate 
   c57e0:	7274616d 705f7869 5b737274 0a5d7525     matrix_ptrs[%u].
   c57f0:	52524500 6f57203a 20646c75 74697277     .ERR: Would writ
   c5800:	756f2065 64697374 65662065 72757461     e outside featur
   c5810:	75622065 72656666 6d49000a 736c7570     e buffer..Impuls
   c5820:	616d2065 61746e69 20736e69 74617473     e maintains stat
   c5830:	43202e65 206c6c61 5f6e7572 73616c63     e. Call run_clas
   c5840:	69666973 695f7265 2874696e 6f742029     sifier_init() to
   c5850:	73657220 73207465 65746174 2e652820      reset state (e.
   c5860:	69202e67 61642066 73206174 61657274     g. if data strea
   c5870:	7369206d 746e6920 75727265 64657470     m is interrupted
   c5880:	000a292e 6e6e7552 20676e69 75706d69     .)..Running impu
   c5890:	2e65736c 000a2e2e 6c6c754e 65686320     lse.....Null che
   c58a0:	66206b63 656c6961 45000a64 203a5252     ck failed..ERR: 
   c58b0:	6c696146 74206465 6373206f 20656c61     Failed to scale 
   c58c0:	6e676973 28206c61 0a296425 52524500     signal (%d)..ERR
   c58d0:	6146203a 64656c69 206f7420 6e617274     : Failed to tran
   c58e0:	736f7073 616d2065 78697274 64252820     spose matrix (%d
   c58f0:	6c000a29 6800776f 00686769 3a525245     )..low.high.ERR:
   c5900:	69614620 2064656c 63206f74 75636c61      Failed to calcu
   c5910:	6574616c 65707320 61727463 6566206c     late spectral fe
   c5920:	72757461 28207365 0a296425 74617200     atures (%d)..rat
   c5930:	3d206f69 2033203d 72207c7c 6f697461     io == 3 || ratio
   c5940:	203d3d20 73003031 69746174 69732063      == 10.static si
   c5950:	745f657a 3a696520 6570733a 61727463     ze_t ei::spectra
   c5960:	663a3a6c 75746165 3a3a6572 6365645f     l::feature::_dec
   c5970:	74616d69 69652865 616d3a3a 78697274     imate(ei::matrix
   c5980:	2c2a745f 3a696520 74616d3a 5f786972     _t*, ei::matrix_
   c5990:	202c2a74 657a6973 0029745f 5f6d756e     t*, size_t).num_
   c59a0:	74636573 736e6f69 30203e20 696f7600     sections > 0.voi
   c59b0:	69652064 69733a3a 6c616e67 6f733a3a     d ei::signal::so
   c59c0:	6c696673 723a3a74 63286e75 74736e6f     sfilt::run(const
   c59d0:	6f6c6620 2c2a7461 7a697320 2c745f65      float*, size_t,
   c59e0:	6f6c6620 292a7461 73552f00 2f737265      float*)./Users/
   c59f0:	63697265 776f442f 616f6c6e 502f7364     eric/Downloads/P
   c5a00:	69786f72 7974696d 7365475f 65727574     roximity_Gesture
   c5a10:	7465445f 69746365 695f6e6f 7265666e     _Detection_infer
   c5a20:	69636e65 2f2f676e 2f637273 65676465     encing//src/edge
   c5a30:	706d692d 65736c75 6b64732d 7073642f     -impulse-sdk/dsp
   c5a40:	6570732f 61727463 69732f6c 6c616e67     /spectral/signal
   c5a50:	7070682e 74756f00 5f747570 657a6973     .hpp.output_size
   c5a60:	203d3e20 65707865 64657463 7a69735f      >= expected_siz
   c5a70:	74730065 63697461 696f7620 69652064     e.static void ei
   c5a80:	69733a3a 6c616e67 65643a3a 616d6963     ::signal::decima
   c5a90:	735f6574 6c706d69 6f632865 2074736e     te_simple(const 
   c5aa0:	616f6c66 202c2a74 657a6973 202c745f     float*, size_t, 
   c5ab0:	616f6c66 202c2a74 657a6973 202c745f     float*, size_t, 
   c5ac0:	657a6973 202c745f 3a3a6965 6e676973     size_t, ei::sign
   c5ad0:	3a3a6c61 66736f73 26746c69 65760029     al::sosfilt&).ve
   c5ae0:	726f7463 4d5f3a3a 6665645f 746c7561     ctor::_M_default
   c5af0:	7070615f 00646e65 726f6962 00332e31     _append.bior1.3.
   c5b00:	726f6962 00352e31 726f6962 00322e32     bior1.5.bior2.2.
   c5b10:	726f6962 00342e32 726f6962 00362e32     bior2.4.bior2.6.
   c5b20:	726f6962 00382e32 726f6962 00312e33     bior2.8.bior3.1.
   c5b30:	726f6962 00332e33 726f6962 00352e33     bior3.3.bior3.5.
   c5b40:	726f6962 00372e33 726f6962 00392e33     bior3.7.bior3.9.
   c5b50:	726f6962 00342e34 726f6962 00352e35     bior4.4.bior5.5.
   c5b60:	726f6962 00382e36 66696f63 6f630031     bior6.8.coif1.co
   c5b70:	00326669 66696f63 62640033 62640032     if2.coif3.db2.db
   c5b80:	62640033 62640034 62640035 62640036     3.db4.db5.db6.db
   c5b90:	62640037 62640038 62640039 68003031     7.db8.db9.db10.h
   c5ba0:	00726161 6f696272 00332e31 6f696272     aar.rbio1.3.rbio
   c5bb0:	00352e31 6f696272 00322e32 6f696272     1.5.rbio2.2.rbio
   c5bc0:	00342e32 6f696272 00362e32 6f696272     2.4.rbio2.6.rbio
   c5bd0:	00382e32 6f696272 00312e33 6f696272     2.8.rbio3.1.rbio
   c5be0:	00332e33 6f696272 00352e33 6f696272     3.3.rbio3.5.rbio
   c5bf0:	00372e33 6f696272 00392e33 6f696272     3.7.rbio3.9.rbio
   c5c00:	00342e34 6f696272 00352e35 6f696272     4.4.rbio5.5.rbio
   c5c10:	00382e36 326d7973 6d797300 79730033     6.8.sym2.sym3.sy
   c5c20:	7300346d 00356d79 366d7973 6d797300     m4.sym5.sym6.sym
   c5c30:	79730037 7300386d 00396d79 316d7973     7.sym8.sym9.sym1
   c5c40:	74730030 63697461 696f7620 69652064     0.static void ei
   c5c50:	70733a3a 72746365 3a3a6c61 65766177     ::spectral::wave
   c5c60:	3a74656c 6e69663a 69665f64 7265746c     let::find_filter
   c5c70:	6e6f6328 63207473 2a726168 6965202c     (const char*, ei
   c5c80:	70733a3a 72746365 3a3a6c61 63657666     ::spectral::fvec
   c5c90:	65202c26 733a3a69 74636570 3a6c6172     &, ei::spectral:
   c5ca0:	6576663a 00292663 6573552f 652f7372     :fvec&)./Users/e
   c5cb0:	2f636972 6e776f44 64616f6c 72502f73     ric/Downloads/Pr
   c5cc0:	6d69786f 5f797469 74736547 5f657275     oximity_Gesture_
   c5cd0:	65746544 6f697463 6e695f6e 65726566     Detection_infere
   c5ce0:	6e69636e 732f2f67 652f6372 2d656764     ncing//src/edge-
   c5cf0:	75706d69 2d65736c 2f6b6473 2f707364     impulse-sdk/dsp/
   c5d00:	63657073 6c617274 7661772f 74656c65     spectral/wavelet
   c5d10:	7070682e 20686e00 32203d3c 26262030     .hpp.nh <= 20 &&
   c5d20:	20686e20 2030203e 6e202626 203e2078      nh > 0 && nx > 
   c5d30:	74730030 63697461 696f7620 69652064     0.static void ei
   c5d40:	70733a3a 72746365 3a3a6c61 65766177     ::spectral::wave
   c5d50:	3a74656c 7477643a 6e6f6328 66207473     let::dwt(const f
   c5d60:	74616f6c 73202c2a 5f657a69 63202c74     loat*, size_t, c
   c5d70:	74736e6f 6f6c6620 2c2a7461 6e6f6320     onst float*, con
   c5d80:	66207473 74616f6c 73202c2a 5f657a69     st float*, size_
   c5d90:	65202c74 733a3a69 74636570 3a6c6172     t, ei::spectral:
   c5da0:	6576663a 202c2663 3a3a6965 63657073     :fvec&, ei::spec
   c5db0:	6c617274 76663a3a 29266365 61747300     tral::fvec&).sta
   c5dc0:	20636974 64696f76 3a696520 6570733a     tic void ei::spe
   c5dd0:	61727463 773a3a6c 6c657661 3a3a7465     ctral::wavelet::
   c5de0:	72747865 5f746361 74616566 73657275     extract_features
   c5df0:	3a696528 6570733a 61727463 663a3a6c     (ei::spectral::f
   c5e00:	26636576 6965202c 70733a3a 72746365     vec&, ei::spectr
   c5e10:	3a3a6c61 63657666 6c002926 6c657665     al::fvec&).level
   c5e20:	30203e20 20262620 6576656c 203c206c      > 0 && level < 
   c5e30:	74730038 63697461 696f7620 69652064     8.static void ei
   c5e40:	70733a3a 72746365 3a3a6c61 65766177     ::spectral::wave
   c5e50:	3a74656c 7661773a 63656465 6165665f     let::wavedec_fea
   c5e60:	65727574 6f632873 2074736e 616f6c66     tures(const floa
   c5e70:	202c2a74 2c746e69 6e6f6320 63207473     t*, int, const c
   c5e80:	2a726168 6e69202c 65202c74 733a3a69     har*, int, ei::s
   c5e90:	74636570 3a6c6172 6576663a 00292663     pectral::fvec&).
   c5ea0:	6576656c 3d3c206c 73003720 69746174     level <= 7.stati
   c5eb0:	6e692063 69652074 70733a3a 72746365     c int ei::spectr
   c5ec0:	3a3a6c61 65766177 3a74656c 7477643a     al::wavelet::dwt
   c5ed0:	6165665f 65727574 6f632873 2074736e     _features(const 
   c5ee0:	616f6c66 202c2a74 2c746e69 6e6f6320     float*, int, con
   c5ef0:	63207473 2a726168 6e69202c 65202c74     st char*, int, e
   c5f00:	733a3a69 74636570 3a6c6172 6576663a     i::spectral::fve
   c5f10:	00292663 5f6d756e 74616566 73657275     c&).num_features
   c5f20:	203d3d20 7074756f 6d5f7475 69727461      == output_matri
   c5f30:	633e2d78 20736c6f 6e69202f 5f747570     x->cols / input_
   c5f40:	7274616d 3e2d7869 73776f72 61747300     matrix->rows.sta
   c5f50:	20636974 20746e69 3a3a6965 63657073     tic int ei::spec
   c5f60:	6c617274 61773a3a 656c6576 653a3a74     tral::wavelet::e
   c5f70:	61727478 775f7463 6c657661 665f7465     xtract_wavelet_f
   c5f80:	75746165 28736572 3a3a6965 7274616d     eatures(ei::matr
   c5f90:	745f7869 65202c2a 6d3a3a69 69727461     ix_t*, ei::matri
   c5fa0:	2a745f78 6965202c 7073645f 6e6f635f     x_t*, ei_dsp_con
   c5fb0:	5f676966 63657073 6c617274 616e615f     fig_spectral_ana
   c5fc0:	6973796c 2a745f73 6c66202c 2974616f     lysis_t*, float)
   c5fd0:	76615700 74656c65 54464600 726f4e00     .Wavelet.FFT.Nor
   c5fe0:	7250206d 203a786f 726f4e00 694c206d     m Prox: .Norm Li
   c5ff0:	3a746867 2d2d0020 2d2d2d2d 6d695400     ght: .------.Tim
   c6000:	3a676e69 50534420 20642520 202c736d     ing: DSP %d ms, 
   c6010:	65666e69 636e6572 64252065 2c736d20     inference %d ms,
   c6020:	6f6e6120 796c616d 20642520 0a0d736d      anomaly %d ms..
   c6030:	65725000 74636964 736e6f69 000a0d3a     .Predictions:...
   c6040:	73252020 2500203a 0d66352e 5245000a       %s: .%.5f...ER
   c6050:	46203a52 656c6961 6f742064 6e757220     R: Failed to run
   c6060:	616c6320 66697373 20726569 29642528      classifier (%d)
   c6070:	7572000a 6c635f6e 69737361 72656966     ..run_classifier
   c6080:	74657220 656e7275 25203a64 000a0d64      returned: %d...
   c6090:	6c756f43 74276e64 6e696620 43562064     Couldn't find VC
   c60a0:	30344c4e 63203034 00706968              NL4040 chip.

000c60ac <_ZTVN5spark10LogHandlerE>:
	...
   c60bc:	000b4eb9 000b5c63                       .N..c\..

000c60c4 <_ZTVN5spark16SerialLogHandlerE>:
	...
   c60cc:	000b64dd 000b6511 000c0435 000c05d9     .d...e..5.......
   c60dc:	63697245 65695020 776f7274 007a6369     Eric Pietrowicz.
   c60ec:	786f7250 74696d69 65472079 72757473     Proximity Gestur
   c60fc:	65442065 74636574 006e6f69 75706d49     e Detection.Impu
   c610c:	2065736c 70003123 69786f72 7974696d     lse #1.proximity
   c611c:	61202b20 6569626d 6c5f746e 74686769      + ambient_light
   c612c:	6e6f6e00 2e300065 30202c31 202c352e     .none.0.1, 0.5, 
   c613c:	2c302e31 302e3220 2e35202c 64690030     1.0, 2.0, 5.0.id
   c614c:	7700656c 00657661                       le.wave.

000c6154 <_ZL18ei_learning_blocks>:
   c6154:	00000003 00000000 000b8219 2003d0ac     ............... 
   c6164:	00000000 000c618c 00000001 00000002     .....a..........

000c6174 <_ZL24ei_config_tflite_graph_3>:
   c6174:	00000001 000bd27d 000bd431 000bd479     ....}...1...y...
   c6184:	000bd419 000bd425                       ....%...

000c618c <_ZL26ei_learning_block_3_inputs>:
   c618c:	00000002                                ....

000c6190 <_ZN2ei8spectralL3db2E>:
   c6190:	be0483ee 3e6585f8 3f5625ef 3ef746ea     ......e>.%V?.F.>
   c61a0:	bef746ea 3f5625ef be6585f8 be0483ee     .F...%V?..e.....

000c61b0 <_ZN2ei8spectralL3db3E>:
   c61b0:	3d104972 bdaefbd6 be0a4054 3eeb7510     rI.=....T@...u.>
   c61c0:	3f4e9071 3eaa53cb beaa53cb 3f4e9071     q.N?.S.>.S..q.N?
   c61d0:	beeb7510 be0a4054 3daefbd6 3d104972     .u..T@.....=rI.=

000c61e0 <_ZN2ei8spectralL3db4E>:
   c61e0:	bc2da0ba 3d06b056 3cfca711 be3f860e     ..-.V..=...<..?.
   c61f0:	bce53e38 3f218167 3f37002f 3e6be829     8>..g.!?/.7?).k>
   c6200:	be6be829 3f37002f bf218167 bce53e38     ).k./.7?g.!.8>..
   c6210:	3e3f860e 3cfca711 bd06b056 bc2da0ba     ..?>...<V.....-.

000c6220 <_ZN2ei8spectralL3db5E>:
   c6220:	3b5a9c2f bc4e1f80 bbcc856a 3d9eddce     /.Z;..N.j......=
   c6230:	bd041332 be781c27 3e0dc01c 3f396c49     2...'.x....>Il9?
   c6240:	3f1a948e 3e23f1e2 be23f1e2 3f1a948e     ...?..#>..#....?
   c6250:	bf396c49 3e0dc01c 3e781c27 bd041332     Il9....>'.x>2...
   c6260:	bd9eddce bbcc856a 3c4e1f80 3b5a9c2f     ....j.....N</.Z;

000c6270 <_ZN2ei8spectralL3db6E>:
   c6270:	ba8d343a 3b9c8a8a 3a112fb9 bd015c2b     :4.....;./.:+\..
   c6280:	3ce177a2 3dc7aeec be04e19b be67b1ef     .w.<...=......g.
   c6290:	3ea1687e 3f404a50 3efd3f58 3de46f79     ~h.>PJ@?X?.>yo.=
   c62a0:	bde46f79 3efd3f58 bf404a50 3ea1687e     yo..X?.>PJ@.~h.>
   c62b0:	3e67b1ef be04e19b bdc7aeec 3ce177a2     ..g>.........w.<
   c62c0:	3d015c2b 3a112fb9 bb9c8a8a ba8d343a     +\.=./.:....:4..

000c62d0 <_ZN2ei8spectralL3db7E>:
   c62d0:	39b972aa baec2508 39e138fb 3c4da2b4     .r.9.%...8.9..M<
   c62e0:	bc87c755 bd1bc547 3da51839 3d920a91     U...G...9..=...=
   c62f0:	be6569be be135c18 3ef0874e 3f3aa867     .ie..\..N..>g.:?
   c6300:	3ecb0734 3d9f70e6 bd9f70e6 3ecb0734     4..>.p.=.p..4..>
   c6310:	bf3aa867 3ef0874e 3e135c18 be6569be     g.:.N..>.\.>.ie.
   c6320:	bd920a91 3da51839 3d1bc547 bc87c755     ....9..=G..=U...
   c6330:	bc4da2b4 39e138fb 3aec2508 39b972aa     ..M..8.9.%.:.r.9

000c6340 <_ZN2ei8spectralL3db8E>:
   c6340:	b8f65dde 3a3110a4 b9cd6281 bb9f977b     .]....1:.b..{...
   c6350:	3c0f4bc7 3c6510ae bd3495e3 bc8e4a10     .K.<..e<..4..J..
   c6360:	3e03d65e 39f7b7ce be916a7c bc81ac0a     ^..>...9|j......
   c6370:	3f15d9ce 3f2cf623 3ea030b5 3d5ee325     ...?#.,?.0.>%.^=
   c6380:	bd5ee325 3ea030b5 bf2cf623 3f15d9ce     %.^..0.>#.,....?
   c6390:	3c81ac0a be916a7c b9f7b7ce 3e03d65e     ...<|j......^..>
   c63a0:	3c8e4a10 bd3495e3 bc6510ae 3c0f4bc7     .J.<..4...e..K.<
   c63b0:	3b9f977b b9cd6281 ba3110a4 b8f65dde     {..;.b....1..]..

000c63c0 <_ZN2ei8spectralL3db9E>:
   c63c0:	382508dd b98419ed 397193b5 3af22cbe     ..%8......q9.,.:
   c63d0:	bb8c4bdb bb9ac51d 3cb72fce 3983918d     .K......./.<...9
   c63e0:	bd8a8315 3cfbb46d 3e181b11 bdc65476     ....m..<...>vT..
   c63f0:	be9627fb 3e0864e5 3f284408 3f1ad5b0     .'...d.>.D(?...?
   c6400:	3e79afcc 3d1bf79f bd1bf79f 3e79afcc     ..y>...=......y>
   c6410:	bf1ad5b0 3f284408 be0864e5 be9627fb     .....D(?.d...'..
   c6420:	3dc65476 3e181b11 bcfbb46d bd8a8315     vT.=...>m.......
   c6430:	b983918d 3cb72fce 3b9ac51d bb8c4bdb     ...../.<...;.K..
   c6440:	baf22cbe 397193b5 398419ed 382508dd     .,....q9...9..%8

000c6450 <_ZN2ei8spectralL4db10E>:
   c6450:	b75e8951 38c44509 b8f43fab ba33cb10     Q.^..E.8.?....3.
   c6460:	3b029304 3ab6e43c bc2fda33 3b6c5bee     ...;<..:3./..[l;
   c6470:	3d080a03 bcf150ef bd923718 3dbe94dc     ...=.P...7.....=
   c6480:	3e026d1c be48a624 be7fd7be 3e8ff5d2     .m.>$.H........>
   c6490:	3f303eda 3f06f6a8 3e40b16b 3cda7b2a     .>0?...?k.@>*{.<
   c64a0:	bcda7b2a 3e40b16b bf06f6a8 3f303eda     *{..k.@>.....>0?
   c64b0:	be8ff5d2 be7fd7be 3e48a624 3e026d1c     ........$.H>.m.>
   c64c0:	bdbe94dc bd923718 3cf150ef 3d080a03     .....7...P.<...=
   c64d0:	bb6c5bee bc2fda33 bab6e43c 3b029304     .[l.3./.<......;
   c64e0:	3a33cb10 b8f43fab b8c44509 b75e8951     ..3:.?...E..Q.^.

000c64f0 <_ZN2ei8spectralL4sym4E>:
   c64f0:	bd9b2b0e bcf2c635 3efec7e0 3f4dc1d3     .+..5......>..M?
   c6500:	3e9880d1 bdcb339e bc4e80df 3d03fc5f     ...>.3....N._..=
   c6510:	bd03fc5f bc4e80df 3dcb339e 3e9880d1     _.....N..3.=...>
   c6520:	bf4dc1d3 3efec7e0 3cf2c635 bd9b2b0e     ..M....>5..<.+..

000c6530 <_ZN2ei8spectralL4sym5E>:
   c6530:	3cdfe999 3cf1d2dc bd204b3c 3e4c2ede     ...<...<<K ...L>
   c6540:	3f39313f 3f224c72 3c880124 be338935     ?19?rL"?$..<5.3.
   c6550:	bcacddc1 3ca01002 bca01002 bcacddc1     .......<........
   c6560:	3e338935 3c880124 bf224c72 3f39313f     5.3>$..<rL".?19?
   c6570:	be4c2ede bd204b3c bcf1d2dc 3cdfe999     ..L.<K ........<

000c6580 <_ZN2ei8spectralL4sym6E>:
   c6580:	3c7c6184 3b64c46e bdf1a4cd bd45e289     .a|<n.d;......E.
   c6590:	3efb6baf 3f49a2da 3ead0516 bd94c2fb     .k.>..I?...>....
   c65a0:	bcac86a2 3d373175 3ae7b291 bbff9d16     ....u17=...:....
   c65b0:	3bff9d16 3ae7b291 bd373175 bcac86a2     ...;...:u17.....
   c65c0:	3d94c2fb 3ead0516 bf49a2da 3efb6baf     ...=...>..I..k.>
   c65d0:	3d45e289 bdf1a4cd bb64c46e 3c7c6184     ..E=....n.d..a|<

000c65e0 <_ZN2ei8spectralL4sym7E>:
   c65e0:	3b2fc162 ba894868 bc4f087f 3cf9fbab     b./;hH....O....<
   c65f0:	3d8b0b53 bd4af7ea 3c8ee0f7 3f093dfa     S..=..J....<.=.?
   c6600:	3f448c34 3e93c743 be0f688b bddcca91     4.D?C..>.h......
   c6610:	3b83685f 3c283bdb bc283bdb 3b83685f     _h.;.;(<.;(._h.;
   c6620:	3ddcca91 be0f688b be93c743 3f448c34     ...=.h..C...4.D?
   c6630:	bf093dfa 3c8ee0f7 3d4af7ea 3d8b0b53     .=.....<..J=S..=
   c6640:	bcf9fbab bc4f087f 3a894868 3b2fc162     ......O.hH.:b./;

000c6650 <_ZN2ei8spectralL4sym8E>:
   c6650:	bb5dab86 ba0e1de3 3d01d2b5 3bf9483b     ..]........=;H.;
   c6660:	be12bbba bd7af9c6 3ef674c6 3f46f5a5     ......z..t.>..F?
   c6670:	3eba9821 bd54c529 bcdefa71 3d494411     !..>).T.q....DI=
   c6680:	3b799c41 bc74fa51 b99ed14e 3af7b836     A.y;Q.t.N...6..:
   c6690:	baf7b836 b99ed14e 3c74fa51 3b799c41     6...N...Q.t<A.y;
   c66a0:	bd494411 bcdefa71 3d54c529 3eba9821     .DI.q...).T=!..>
   c66b0:	bf46f5a5 3ef674c6 3d7af9c6 be12bbba     ..F..t.>..z=....
   c66c0:	bbf9483b 3d01d2b5 3a0e1de3 bb5dab86     ;H.....=...:..].

000c66d0 <_ZN2ei8spectralL4sym9E>:
   c66d0:	3ab79eed 3a2278cb bc5972ab bc3ce0d1     ...:.x":.rY...<.
   c66e0:	3cf79a2a 3a18f386 bd5f83b3 3e747dbe     *..<...:.._..}t>
   c66f0:	3f37c81a 3f1e09e5 3d1079e2 be4425e7     ..7?...?.y.=.%D.
   c6700:	bc955efd 3d7e4548 3c112676 bc282a9b     .^..HE~=v&.<.*(.
   c6710:	b9f811b9 3a8c2e21 ba8c2e21 b9f811b9     ....!..:!.......
   c6720:	3c282a9b 3c112676 bd7e4548 bc955efd     .*(<v&.<HE~..^..
   c6730:	3e4425e7 3d1079e2 bf1e09e5 3f37c81a     .%D>.y.=......7?
   c6740:	be747dbe bd5f83b3 ba18f386 3cf79a2a     .}t..._.....*..<
   c6750:	3c3ce0d1 bc5972ab ba2278cb 3ab79eed     ..<<.rY..x"....:

000c6760 <_ZN2ei8spectralL5coif1E>:
   c6760:	bc804071 bd94f4d7 3ec50d01 3f5a4229     q@.........>)BZ?
   c6770:	3ead00ec bd94f4d7 3d94f4d7 3ead00ec     ...>.......=...>
   c6780:	bf5a4229 3ec50d01 3d94f4d7 bc804071     )BZ....>...=q@..

000c6790 <_ZN2ei8spectralL5coif2E>:
   c6790:	ba3ce341 baeef8bd 3bb7e021 3cc1fcec     A.<.....!..;...<
   c67a0:	bd737181 bd9ca60e 3ed581b4 3f500ea8     .qs........>..P?
   c67b0:	3ec5b038 bd89fa9f bd29d723 3c863ebc     8..>....#.)..>.<
   c67c0:	bc863ebc bd29d723 3d89fa9f 3ec5b038     .>..#.)....=8..>
   c67d0:	bf500ea8 3ed581b4 3d9ca60e bd737181     ..P....>...=.qs.
   c67e0:	bcc1fcec 3bb7e021 3aeef8bd ba3ce341     ....!..;...:A.<.

000c67f0 <_ZN2ei8spectralL5coif3E>:
   c67f0:	b8111f39 b894dcdf 39f46e95 3a9279b5     9........n.9.y.:
   c6800:	bb28b93d bc139631 3c8217eb 3d0d8993     =.(.1......<...=
   c6810:	bda88dea bd930bc9 3edb6230 3f4b34fc     ........0b.>.4K?
   c6820:	3ecf7359 bd7a5c85 bd86b36c 3cc01fde     Ys.>.\z.l......<
   c6830:	3bff0527 bb789c96 3b789c96 3bff0527     '..;..x...x;'..;
   c6840:	bcc01fde bd86b36c 3d7a5c85 3ecf7359     ....l....\z=Ys.>
   c6850:	bf4b34fc 3edb6230 3d930bc9 bda88dea     .4K.0b.>...=....
   c6860:	bd0d8993 3c8217eb 3c139631 bb28b93d     .......<1..<=.(.
   c6870:	ba9279b5 39f46e95 3894dcdf b8111f39     .y...n.9...89...

000c6880 <_ZN2ei8spectralL5sym10E>:
   c6880:	3a49e48d 38c88e66 bc0d943c bac01215     ..I:f..8<.......
   c6890:	3d3c1e33 3c3e376d be235278 bd9129d0     3.<=m7><xR#..)..
   c68a0:	3ef18170 3f44fe9c 3ec484f1 bd118ef9     p..>..D?...>....
   c68b0:	bd030802 3d4cc787 3bbce796 bca6bf67     ......L=...;g...
   c68c0:	ba52db9d 3b968255 386f3a07 b9f0d227     ..R.U..;.:o8'...
   c68d0:	39f0d227 386f3a07 bb968255 ba52db9d     '..9.:o8U.....R.
   c68e0:	3ca6bf67 3bbce796 bd4cc787 bd030802     g..<...;..L.....
   c68f0:	3d118ef9 3ec484f1 bf44fe9c 3ef18170     ...=...>..D.p..>
   c6900:	3d9129d0 be235278 bc3e376d 3d3c1e33     .).=xR#.m7>.3.<=
   c6910:	3ac01215 bc0d943c b8c88e66 3a49e48d     ...:<...f.....I:

000c6920 <_ZN2ei8spectralL7bior1p3E>:
   c6920:	bdb504f3 3db504f3 3f3504f3 3f3504f3     .......=..5?..5?
   c6930:	3db504f3 bdb504f3 80000000 00000000     ...=............
   c6940:	bf3504f3 3f3504f3 80000000 00000000     ..5...5?........

000c6950 <_ZN2ei8spectralL7bior1p5E>:
   c6950:	3c87c3b6 bc87c3b6 bdf8e6ce 3df8e6ce     ...<...........=
   c6960:	3f3504f3 3f3504f3 3df8e6ce bdf8e6ce     ..5?..5?...=....
   c6970:	bc87c3b6 3c87c3b6 80000000 00000000     .......<........
   c6980:	80000000 00000000 bf3504f3 3f3504f3     ..........5...5?
   c6990:	80000000 00000000 80000000 00000000     ................

000c69a0 <_ZN2ei8spectralL7bior2p2E>:
   c69a0:	00000000 be3504f3 3eb504f3 3f87c3b6     ......5....>...?
   c69b0:	3eb504f3 be3504f3 80000000 3eb504f3     ...>..5........>
   c69c0:	bf3504f3 3eb504f3 80000000 00000000     ..5....>........

000c69d0 <_ZN2ei8spectralL7bior2p4E>:
   c69d0:	00000000 3d07c3b6 bd87c3b6 be3504f3     .......=......5.
   c69e0:	3ed6f5e1 3f7e8ef6 3ed6f5e1 be3504f3     ...>..~?...>..5.
   c69f0:	bd87c3b6 3d07c3b6 80000000 00000000     .......=........
   c6a00:	80000000 3eb504f3 bf3504f3 3eb504f3     .......>..5....>
   c6a10:	80000000 00000000 80000000 00000000     ................

000c6a20 <_ZN2ei8spectralL7bior2p6E>:
   c6a20:	00000000 bbe24630 3c624630 3d405542     ....0F..0Fb<BU@=
   c6a30:	bddc9e08 be2df2c2 3ee51a44 3f777cc5     ......-.D..>.|w?
   c6a40:	3ee51a44 be2df2c2 bddc9e08 3d405542     D..>..-.....BU@=
   c6a50:	3c624630 bbe24630 80000000 00000000     0Fb<0F..........
   c6a60:	80000000 00000000 80000000 3eb504f3     ...............>
   c6a70:	bf3504f3 3eb504f3 80000000 00000000     ..5....>........
   c6a80:	80000000 00000000 80000000 00000000     ................

000c6a90 <_ZN2ei8spectralL7bior2p8E>:
   c6a90:	00000000 3ac5fd6a bb45fd6a bc5421cd     ....j..:j.E..!T.
   c6aa0:	3cece17a 3d5914f0 be0a26a7 be27c2d6     z..<..Y=.&....'.
   c6ab0:	3eecd62a 3f739ed1 3eecd62a be27c2d6     *..>..s?*..>..'.
   c6ac0:	be0a26a7 3d5914f0 3cece17a bc5421cd     .&....Y=z..<.!T.
   c6ad0:	bb45fd6a 3ac5fd6a 80000000 00000000     j.E.j..:........
   c6ae0:	80000000 00000000 80000000 00000000     ................
   c6af0:	80000000 3eb504f3 bf3504f3 3eb504f3     .......>..5....>
   c6b00:	80000000 00000000 80000000 00000000     ................
   c6b10:	80000000 00000000 80000000 00000000     ................

000c6b20 <_ZN2ei8spectralL7bior3p1E>:
   c6b20:	beb504f3 3f87c3b6 3f87c3b6 beb504f3     .......?...?....
   c6b30:	be3504f3 3f07c3b6 bf07c3b6 3e3504f3     ..5....?......5>

000c6b40 <_ZN2ei8spectralL7bior3p3E>:
   c6b40:	3d87c3b6 be4ba592 be1e6455 3f7e8ef6     ...=..K.Ud....~?
   c6b50:	3f7e8ef6 be1e6455 be4ba592 3d87c3b6     ..~?Ud....K....=
   c6b60:	80000000 00000000 be3504f3 3f07c3b6     ..........5....?
   c6b70:	bf07c3b6 3e3504f3 80000000 00000000     ......5>........

000c6b80 <_ZN2ei8spectralL7bior3p5E>:
   c6b80:	bc624630 3d29b4a4 3d56f5e1 be892dc0     0Fb...)=..V=.-..
   c6b90:	bd931406 3f777cc5 3f777cc5 bd931406     .....|w?.|w?....
   c6ba0:	be892dc0 3d56f5e1 3d29b4a4 bc624630     .-....V=..)=0Fb.
   c6bb0:	80000000 00000000 80000000 00000000     ................
   c6bc0:	be3504f3 3f07c3b6 bf07c3b6 3e3504f3     ..5....?......5>
   c6bd0:	80000000 00000000 80000000 00000000     ................

000c6be0 <_ZN2ei8spectralL7bior3p7E>:
   c6be0:	3b45fd6a bc147e10 bc89e2c5 3d98e96e     j.E;.~......n..=
   c6bf0:	3d005702 be9a3187 bcd914f0 3f739ed1     .W.=.1........s?
   c6c00:	3f739ed1 bcd914f0 be9a3187 3d005702     ..s?.....1...W.=
   c6c10:	3d98e96e bc89e2c5 bc147e10 3b45fd6a     n..=.....~..j.E;
   c6c20:	80000000 00000000 80000000 00000000     ................
   c6c30:	80000000 00000000 be3504f3 3f07c3b6     ..........5....?
   c6c40:	bf07c3b6 3e3504f3 80000000 00000000     ......5>........
   c6c50:	80000000 00000000 80000000 00000000     ................

000c6c60 <_ZN2ei8spectralL7bior3p9E>:
   c6c60:	ba3230df 3b05a4a8 3ba5d109 bca8e8fe     .02....;...;....
   c6c70:	bc673953 3dcb072d 3c498683 bea3f034     S9g.-..=..I<4...
   c6c80:	3b0659ad 3f712f26 3f712f26 3b0659ad     .Y.;&/q?&/q?.Y.;
   c6c90:	bea3f034 3c498683 3dcb072d bc673953     4.....I<-..=S9g.
   c6ca0:	bca8e8fe 3ba5d109 3b05a4a8 ba3230df     .......;...;.02.
   c6cb0:	80000000 00000000 80000000 00000000     ................
   c6cc0:	80000000 00000000 80000000 00000000     ................
   c6cd0:	be3504f3 3f07c3b6 bf07c3b6 3e3504f3     ..5....?......5>
   c6ce0:	80000000 00000000 80000000 00000000     ................
   c6cf0:	80000000 00000000 80000000 00000000     ................

000c6d00 <_ZN2ei8spectralL7bior4p4E>:
   c6d00:	00000000 3d1af203 bcc35ff4 bde28f0c     .......=._......
   c6d10:	3ec13af2 3f5a4a76 3ec13af2 bde28f0c     .:.>vJZ?.:.>....
   c6d20:	bcc35ff4 3d1af203 80000000 bd842cf6     ._.....=.....,..
   c6d30:	3d26a9f2 3ed61031 bf49da31 3ed61031     ..&=1..>1.I.1..>
   c6d40:	3d26a9f2 bd842cf6 80000000 00000000     ..&=.,..........

000c6d50 <_ZN2ei8spectralL7bior5p5E>:
	...
   c6d58:	3d228eee 3c0238c9 bd5f156c 3eb0f32d     .."=.8.<l._.-..>
   c6d68:	3f3c95c3 3eb0f32d bd5f156c 3c0238c9     ..<?-..>l._..8.<
   c6d78:	3d228eee 00000000 bc5c7988 bb309e0b     .."=.....y\...0.
   c6d88:	3e0bfcd0 bdbf7f64 bef41f8f 3f664608     ...>d........Ff?
   c6d98:	bef41f8f bdbf7f64 3e0bfcd0 bb309e0b     ....d......>..0.
   c6da8:	bc5c7988 00000000                       .y\.....

000c6db0 <_ZN2ei8spectralL7bior6p8E>:
   c6db0:	00000000 3afa31c4 bafae8c9 bc8b2ff4     .....1.:...../..
   c6dc0:	3c438932 3d4bb4bb bd9e3c28 bdc0a21d     2.C<..K=(<......
   c6dd0:	3ed7729c 3f536fb1 3ed7729c bdc0a21d     .r.>.oS?.r.>....
   c6de0:	bd9e3c28 3d4bb4bb 3c438932 bc8b2ff4     (<....K=2.C<./..
   c6df0:	bafae8c9 3afa31c4 80000000 00000000     .....1.:........
   c6e00:	80000000 3c6c5c37 bc6d091d bda13900     ....7\l<..m..9..
   c6e10:	3d2558e5 3ed5f052 bf4247c7 3ed5f052     .X%=R..>.GB.R..>
   c6e20:	3d2558e5 bda13900 bc6d091d 3c6c5c37     .X%=.9....m.7\l<
   c6e30:	80000000 00000000 80000000 00000000     ................

000c6e40 <_ZN2ei8spectralL7rbio1p3E>:
	...
   c6e48:	3f3504f3 3f3504f3 00000000 00000000     ..5?..5?........
   c6e58:	3db504f3 3db504f3 bf3504f3 3f3504f3     ...=...=..5...5?
   c6e68:	bdb504f3 bdb504f3                       ........

000c6e70 <_ZN2ei8spectralL7rbio1p5E>:
	...
   c6e80:	3f3504f3 3f3504f3 00000000 00000000     ..5?..5?........
	...
   c6e98:	bc87c3b6 bc87c3b6 3df8e6ce 3df8e6ce     ...........=...=
   c6ea8:	bf3504f3 3f3504f3 bdf8e6ce bdf8e6ce     ..5...5?........
   c6eb8:	3c87c3b6 3c87c3b6                       ...<...<

000c6ec0 <_ZN2ei8spectralL7rbio2p2E>:
	...
   c6ec8:	3eb504f3 3f3504f3 3eb504f3 00000000     ...>..5?...>....
   c6ed8:	3e3504f3 3eb504f3 bf87c3b6 3eb504f3     ..5>...>.......>
   c6ee8:	3e3504f3 00000000                       ..5>....

000c6ef0 <_ZN2ei8spectralL7rbio2p4E>:
	...
   c6f00:	3eb504f3 3f3504f3 3eb504f3 00000000     ...>..5?...>....
	...
   c6f18:	bd07c3b6 bd87c3b6 3e3504f3 3ed6f5e1     ..........5>...>
   c6f28:	bf7e8ef6 3ed6f5e1 3e3504f3 bd87c3b6     ..~....>..5>....
   c6f38:	bd07c3b6 00000000                       ........

000c6f40 <_ZN2ei8spectralL7rbio2p6E>:
	...
   c6f58:	3eb504f3 3f3504f3 3eb504f3 00000000     ...>..5?...>....
	...
   c6f78:	3be24630 3c624630 bd405542 bddc9e08     0F.;0Fb<BU@.....
   c6f88:	3e2df2c2 3ee51a44 bf777cc5 3ee51a44     ..->D..>.|w.D..>
   c6f98:	3e2df2c2 bddc9e08 bd405542 3c624630     ..->....BU@.0Fb<
   c6fa8:	3be24630 00000000                       0F.;....

000c6fb0 <_ZN2ei8spectralL7rbio2p8E>:
	...
   c6fd0:	3eb504f3 3f3504f3 3eb504f3 00000000     ...>..5?...>....
	...
   c6ff8:	bac5fd6a bb45fd6a 3c5421cd 3cece17a     j...j.E..!T<z..<
   c7008:	bd5914f0 be0a26a7 3e27c2d6 3eecd62a     ..Y..&....'>*..>
   c7018:	bf739ed1 3eecd62a 3e27c2d6 be0a26a7     ..s.*..>..'>.&..
   c7028:	bd5914f0 3cece17a 3c5421cd bb45fd6a     ..Y.z..<.!T<j.E.
   c7038:	bac5fd6a 00000000                       j.......

000c7040 <_ZN2ei8spectralL7rbio3p1E>:
   c7040:	3e3504f3 3f07c3b6 3f07c3b6 3e3504f3     ..5>...?...?..5>
   c7050:	3eb504f3 3f87c3b6 bf87c3b6 beb504f3     ...>...?........

000c7060 <_ZN2ei8spectralL7rbio3p3E>:
	...
   c7068:	3e3504f3 3f07c3b6 3f07c3b6 3e3504f3     ..5>...?...?..5>
	...
   c7080:	bd87c3b6 be4ba592 3e1e6455 3f7e8ef6     ......K.Ud.>..~?
   c7090:	bf7e8ef6 be1e6455 3e4ba592 3d87c3b6     ..~.Ud....K>...=

000c70a0 <_ZN2ei8spectralL7rbio3p5E>:
	...
   c70b0:	3e3504f3 3f07c3b6 3f07c3b6 3e3504f3     ..5>...?...?..5>
	...
   c70d0:	3c624630 3d29b4a4 bd56f5e1 be892dc0     0Fb<..)=..V..-..
   c70e0:	3d931406 3f777cc5 bf777cc5 bd931406     ...=.|w?.|w.....
   c70f0:	3e892dc0 3d56f5e1 bd29b4a4 bc624630     .-.>..V=..).0Fb.

000c7100 <_ZN2ei8spectralL7rbio3p7E>:
	...
   c7118:	3e3504f3 3f07c3b6 3f07c3b6 3e3504f3     ..5>...?...?..5>
	...
   c7140:	bb45fd6a bc147e10 3c89e2c5 3d98e96e     j.E..~.....<n..=
   c7150:	bd005702 be9a3187 3cd914f0 3f739ed1     .W...1.....<..s?
   c7160:	bf739ed1 bcd914f0 3e9a3187 3d005702     ..s......1.>.W.=
   c7170:	bd98e96e bc89e2c5 3c147e10 3b45fd6a     n........~.<j.E;

000c7180 <_ZN2ei8spectralL7rbio3p9E>:
	...
   c71a0:	3e3504f3 3f07c3b6 3f07c3b6 3e3504f3     ..5>...?...?..5>
	...
   c71d0:	3a3230df 3b05a4a8 bba5d109 bca8e8fe     .02:...;........
   c71e0:	3c673953 3dcb072d bc498683 bea3f034     S9g<-..=..I.4...
   c71f0:	bb0659ad 3f712f26 bf712f26 3b0659ad     .Y..&/q?&/q..Y.;
   c7200:	3ea3f034 3c498683 bdcb072d bc673953     4..>..I<-...S9g.
   c7210:	3ca8e8fe 3ba5d109 bb05a4a8 ba3230df     ...<...;.....02.

000c7220 <_ZN2ei8spectralL7rbio4p4E>:
	...
   c7228:	bd842cf6 bd26a9f2 3ed61031 3f49da31     .,....&.1..>1.I?
   c7238:	3ed61031 bd26a9f2 bd842cf6 00000000     1..>..&..,......
   c7248:	bd1af203 bcc35ff4 3de28f0c 3ec13af2     ....._.....=.:.>
   c7258:	bf5a4a76 3ec13af2 3de28f0c bcc35ff4     vJZ..:.>...=._..
   c7268:	bd1af203 00000000                       ........

000c7270 <_ZN2ei8spectralL7rbio5p5E>:
   c7270:	00000000 3c5c7988 bb309e0b be0bfcd0     .....y\<..0.....
   c7280:	bdbf7f64 3ef41f8f 3f664608 3ef41f8f     d......>.Ff?...>
   c7290:	bdbf7f64 be0bfcd0 bb309e0b 3c5c7988     d.........0..y\<
   c72a0:	80000000 3d228eee bc0238c9 bd5f156c     ......"=.8..l._.
   c72b0:	beb0f32d 3f3c95c3 beb0f32d bd5f156c     -.....<?-...l._.
   c72c0:	bc0238c9 3d228eee 80000000 00000000     .8...."=........

000c72d0 <_ZN2ei8spectralL7rbio6p8E>:
	...
   c72e0:	3c6c5c37 3c6d091d bda13900 bd2558e5     7\l<..m<.9...X%.
   c72f0:	3ed5f052 3f4247c7 3ed5f052 bd2558e5     R..>.GB?R..>.X%.
   c7300:	bda13900 3c6d091d 3c6c5c37 00000000     .9....m<7\l<....
	...
   c7318:	bafa31c4 bafae8c9 3c8b2ff4 3c438932     .1......./.<2.C<
   c7328:	bd4bb4bb bd9e3c28 3dc0a21d 3ed7729c     ..K.(<.....=.r.>
   c7338:	bf536fb1 3ed7729c 3dc0a21d bd9e3c28     .oS..r.>...=(<..
   c7348:	bd4bb4bb 3c438932 3c8b2ff4 bafae8c9     ..K.2.C<./.<....
   c7358:	bafa31c4 00000000 20544646 676e656c     .1......FFT leng
   c7368:	6d206874 20747375 65206562 0a6e6576     th must be even.
   c7378:	73696b00 66662073 73752074 20656761     .kiss fft usage 
   c7388:	6f727265 69203a72 6f72706d 20726570     error: improper 
   c7398:	6f6c6c61 55000a63 6f6e6b6e 74206e77     alloc..Unknown t
   c73a8:	00657079 59544f4e 46004550 54414f4c     ype.NOTYPE.FLOAT
   c73b8:	55003233 38544e49 52545300 00474e49     32.UINT8.STRING.
   c73c8:	4c4f4f42 4d4f4300 58454c50 46003436     BOOL.COMPLEX64.F
   c73d8:	54414f4c 46003631 54414f4c 43003436     LOAT16.FLOAT64.C
   c73e8:	4c504d4f 32315845 49550038 3436544e     OMPLEX128.UINT64
   c73f8:	53455200 4352554f 41560045 4e414952     .RESOURCE.VARIAN
   c7408:	49550054 3233544e 4e495500 00363154     T.UINT32.UINT16.
   c7418:	34544e49 00000000                       INT4....

000c7420 <CSWTCH.28>:
   c7420:	000c73ac 000c73b3 000c740b 000c73bb     .s...s...t...s..
   c7430:	000c73f3 000c73c1 000c73c8 000c7412     .s...s...s...t..
   c7440:	000c73cd 000c73bc 000c73d7 000c73df     .s...s...s...s..
   c7450:	000c73e7 000c73f2 000c73f9 000c7402     .s...s...s...t..
   c7460:	000c740a 000c7411 000c7418 6573552f     .t...t...t../Use
   c7470:	652f7372 2f636972 6e776f44 64616f6c     rs/eric/Download
   c7480:	72502f73 6d69786f 5f797469 74736547     s/Proximity_Gest
   c7490:	5f657275 65746544 6f697463 6e695f6e     ure_Detection_in
   c74a0:	65726566 6e69636e 732f2f67 652f6372     ferencing//src/e
   c74b0:	2d656764 75706d69 2d65736c 2f6b6473     dge-impulse-sdk/
   c74c0:	736e6574 6c66726f 6c2f776f 2f657469     tensorflow/lite/
   c74d0:	6e72656b 2f736c65 6e72656b 755f6c65     kernels/kernel_u
   c74e0:	5f6c6974 6574696c 7070632e 3a732500     til_lite.cpp.%s:
   c74f0:	25206425 61772073 6f6e2073 72742074     %d %s was not tr
   c7500:	002e6575 695f6f6e 6765746e 6f5f7265     ue..no_integer_o
   c7510:	66726576 5f776f6c 6d6f7266 6175715f     verflow_from_qua
   c7520:	7a69746e 6f697461 6e69006e 5f747570     ntization.input_
   c7530:	646f7270 5f746375 6c616373 3d3e2065     product_scale >=
   c7540:	73003020 656c6163 6669645f 202f2066      0.scale_diff / 
   c7550:	7074756f 735f7475 656c6163 203d3c20     output_scale <= 
   c7560:	32302e30 6c616600 00006573              0.02.false..

000c756c <_ZTVN6tflite12MicroContextE>:
	...
   c7574:	000bc4e7 000bc531 000bc4e9 000bc53f     ....1.......?...
   c7584:	000bc4f1 000bc4f9 000bc57d 000bc5a3     ........}.......
   c7594:	000bc5c9 000bc515 000bc51d 6573552f     ............/Use
   c75a4:	652f7372 2f636972 6e776f44 64616f6c     rs/eric/Download
   c75b4:	72502f73 6d69786f 5f797469 74736547     s/Proximity_Gest
   c75c4:	5f657275 65746544 6f697463 6e695f6e     ure_Detection_in
   c75d4:	65726566 6e69636e 732f2f67 652f6372     ferencing//src/e
   c75e4:	2d656764 75706d69 2d65736c 2f6b6473     dge-impulse-sdk/
   c75f4:	736e6574 6c66726f 6c2f776f 2f657469     tensorflow/lite/
   c7604:	7263696d 656b2f6f 6c656e72 75662f73     micro/kernels/fu
   c7614:	5f796c6c 6e6e6f63 65746365 70632e64     lly_connected.cp
   c7624:	73250070 2064253a 21207325 7325203d     p.%s:%d %s != %s
   c7634:	64252820 203d2120 00296425 5f4d5241      (%d != %d).ARM_
   c7644:	49534d43 4e4e5f53 4355535f 53534543     CMSIS_NN_SUCCESS
   c7654:	6d726100 6c75665f 635f796c 656e6e6f     .arm_fully_conne
   c7664:	64657463 2838735f 74632620 26202c78     cted_s8( &ctx, &
   c7674:	705f6366 6d617261 26202c73 6e617571     fc_params, &quan
   c7684:	61705f74 736d6172 6926202c 7475706e     t_params, &input
   c7694:	6d69645f 74202c73 74696c66 6d3a3a65     _dims, tflite::m
   c76a4:	6f726369 65473a3a 6e655474 44726f73     icro::GetTensorD
   c76b4:	3c617461 38746e69 283e745f 75706e69     ata<int8_t>(inpu
   c76c4:	202c2974 6c696626 5f726574 736d6964     t), &filter_dims
   c76d4:	6674202c 6574696c 696d3a3a 3a6f7263     , tflite::micro:
   c76e4:	7465473a 736e6554 6144726f 693c6174     :GetTensorData<i
   c76f4:	5f38746e 66283e74 65746c69 202c2972     nt8_t>(filter), 
   c7704:	61696226 69645f73 202c736d 73616962     &bias_dims, bias
   c7714:	7461645f 26202c61 7074756f 645f7475     _data, &output_d
   c7724:	2c736d69 6c667420 3a657469 63696d3a     ims, tflite::mic
   c7734:	3a3a6f72 54746547 6f736e65 74614472     ro::GetTensorDat
   c7744:	6e693c61 745f3874 756f283e 74757074     a<int8_t>(output
   c7754:	69002929 7475706e 203d2120 6c6c756e     )).input != null
   c7764:	00727470 746c6966 21207265 756e203d     ptr.filter != nu
   c7774:	74706c6c 756f0072 74757074 203d2120     llptr.output != 
   c7784:	6c6c756e 00727470 253a7325 73252064     nullptr.%s:%d %s
   c7794:	203d2120 28207325 21207325 7325203d      != %s (%s != %s
   c77a4:	756f0029 74757074 79743e2d 69006570     ).output->type.i
   c77b4:	7475706e 79743e2d 00006570              nput->type..

000c77c0 <_ZN6tflite25kFullyConnectedBiasTensorE>:
   c77c0:	00000002                                ....

000c77c4 <_ZN6tflite26kFullyConnectedInputTensorE>:
   c77c4:	00000000                                ....

000c77c8 <_ZN6tflite27kFullyConnectedOutputTensorE>:
   c77c8:	00000000                                ....

000c77cc <_ZN6tflite28kFullyConnectedWeightsTensorE>:
   c77cc:	00000001 6573552f 652f7372 2f636972     ..../Users/eric/
   c77dc:	6e776f44 64616f6c 72502f73 6d69786f     Downloads/Proxim
   c77ec:	5f797469 74736547 5f657275 65746544     ity_Gesture_Dete
   c77fc:	6f697463 6e695f6e 65726566 6e69636e     ction_inferencin
   c780c:	732f2f67 652f6372 2d656764 75706d69     g//src/edge-impu
   c781c:	2d65736c 2f6b6473 736e6574 6c66726f     lse-sdk/tensorfl
   c782c:	6c2f776f 2f657469 7263696d 656b2f6f     ow/lite/micro/ke
   c783c:	6c656e72 6f732f73 616d7466 70632e78     rnels/softmax.cp
   c784c:	754e0070 706e496d 28737475 65646f6e     p.NumInputs(node
   c785c:	754e0029 74754f6d 73747570 646f6e28     ).NumOutputs(nod
   c786c:	4e002965 69446d75 736e656d 736e6f69     e).NumDimensions
   c787c:	706e6928 20297475 31203d3e 646f6e00     (input) >= 1.nod
   c788c:	753e2d65 5f726573 61746164 203d2120     e->user_data != 
   c789c:	6c6c756e 00727470 65707954 20732520     nullptr.Type %s 
   c78ac:	29642528 746f6e20 70757320 74726f70     (%d) not support
   c78bc:	002e6465 6573552f 652f7372 2f636972     ed../Users/eric/
   c78cc:	6e776f44 64616f6c 72502f73 6d69786f     Downloads/Proxim
   c78dc:	5f797469 74736547 5f657275 65746544     ity_Gesture_Dete
   c78ec:	6f697463 6e695f6e 65726566 6e69636e     ction_inferencin
   c78fc:	732f2f67 652f6372 2d656764 75706d69     g//src/edge-impu
   c790c:	2d65736c 2f6b6473 736e6574 6c66726f     lse-sdk/tensorfl
   c791c:	6c2f776f 2f657469 7263696d 656b2f6f     ow/lite/micro/ke
   c792c:	6c656e72 6f732f73 616d7466 6f635f78     rnels/softmax_co
   c793c:	6e6f6d6d 7070632e 32332d00 00383637     mmon.cpp.-32768.
   c794c:	7074756f 3e2d7475 61726170 7a2e736d     output->params.z
   c795c:	5f6f7265 6e696f70 73250074 2064253a     ero_point.%s:%d 
   c796c:	6e207325 6e20746f 20726165 28207325     %s not near %s (
   c797c:	21206625 6625203d 2e310029 202f2066     %f != %f).1.f / 
   c798c:	33353536 756f0036 74757074 61703e2d     65536.output->pa
   c799c:	736d6172 6163732e 6b00656c 694c6654     rams.scale.kTfLi
   c79ac:	6e496574 2d003874 00383231 7074756f     teInt8.-128.outp
   c79bc:	3e2d7475 61726170 732e736d 656c6163     ut->params.scale
   c79cc:	203d3d20 20662e31 3532202f 52450036      == 1.f / 256.ER
   c79dc:	47203a52 65547465 726f736e 6c616320     R: GetTensor cal
   c79ec:	2064656c 6f796562 4d20646e 545f5841     led beyond MAX_T
   c79fc:	455f4c46 5f4c4156 4e554f43 25282054     FL_EVAL_COUNT (%
   c7a0c:	000a2964 3a525245 74654720 736e6554     d)..ERR: GetTens
   c7a1c:	6320726f 656c6c61 65622064 646e6f79     or called beyond
   c7a2c:	58414d20 4c46545f 4e45545f 5f524f53      MAX_TFL_TENSOR_
   c7a3c:	4e554f43 25282054 000a2964 3a525245     COUNT (%d)..ERR:
   c7a4c:	69614620 2064656c 61206f74 636f6c6c      Failed to alloc
   c7a5c:	20657461 73726570 65747369 6220746e     ate persistent b
   c7a6c:	65666675 666f2072 7a697320 64252065     uffer of size %d
   c7a7c:	6f64202c 6e207365 6620746f 69207469     , does not fit i
   c7a8c:	6574206e 726f736e 65726120 6120616e     n tensor arena a
   c7a9c:	7220646e 68636165 45206465 414d5f49     nd reached EI_MA
   c7aac:	564f5f58 4c465245 425f574f 45464655     X_OVERFLOW_BUFFE
   c7abc:	4f435f52 0a544e55 52524500 6146203a     R_COUNT..ERR: Fa
   c7acc:	64656c69 206f7420 6f6c6c61 65746163     iled to allocate
   c7adc:	72657020 74736973 20746e65 66667562      persistent buff
   c7aec:	6f207265 69732066 2520657a 45000a64     er of size %d..E
   c7afc:	203a5252 6c696146 74206465 6c61206f     RR: Failed to al
   c7b0c:	61636f6c 73206574 74617263 62206863     locate scratch b
   c7b1c:	65666675 666f2072 7a697320 64252065     uffer of size %d
   c7b2c:	6572202c 65686361 49452064 58414d5f     , reached EI_MAX
   c7b3c:	5243535f 48435441 4655425f 5f524546     _SCRATCH_BUFFER_
   c7b4c:	4e554f43 45000a54 203a5252 6c696146     COUNT..ERR: Fail
   c7b5c:	74206465 6c61206f 61636f6c 73206574     ed to allocate s
   c7b6c:	74617263 62206863 65666675 666f2072     cratch buffer of
   c7b7c:	7a697320 64252065 5245000a 66203a52      size %d..ERR: f
   c7b8c:	656c6961 6f742064 6c6c6120 7461636f     ailed to allocat
   c7b9c:	65742065 726f736e 65726120 000a616e     e tensor arena..
   c7bac:	3a525245 6e657420 20726f73 6e657261     ERR: tensor aren
   c7bbc:	73692061 6f6f7420 616d7320 202c6c6c     a is too small, 
   c7bcc:	73656f64 746f6e20 74696620 646f6d20     does not fit mod
   c7bdc:	2d206c65 65766520 6977206e 756f6874     el - even withou
   c7bec:	63732074 63746172 75622068 72656666     t scratch buffer
   c7bfc:	00000a73                                s...

000c7c00 <_ZN12_GLOBAL__N_12g0L11quant0_zeroE>:
   c7c00:	00000001 ffffffb0                       ........

000c7c08 <_ZN12_GLOBAL__N_12g0L11quant1_zeroE>:
   c7c08:	00000001 00000000                       ........

000c7c10 <_ZN12_GLOBAL__N_12g0L11quant2_zeroE>:
   c7c10:	00000001 00000000                       ........

000c7c18 <_ZN12_GLOBAL__N_12g0L11quant3_zeroE>:
   c7c18:	00000001 00000000                       ........

000c7c20 <_ZN12_GLOBAL__N_12g0L11quant4_zeroE>:
   c7c20:	00000001 00000000                       ........

000c7c28 <_ZN12_GLOBAL__N_12g0L11quant5_zeroE>:
   c7c28:	00000001 00000000                       ........

000c7c30 <_ZN12_GLOBAL__N_12g0L11quant6_zeroE>:
   c7c30:	00000001 00000000                       ........

000c7c38 <_ZN12_GLOBAL__N_12g0L11quant7_zeroE>:
   c7c38:	00000001 ffffff80                       ........

000c7c40 <_ZN12_GLOBAL__N_12g0L11quant8_zeroE>:
   c7c40:	00000001 ffffff80                       ........

000c7c48 <_ZN12_GLOBAL__N_12g0L11quant9_zeroE>:
   c7c48:	00000001 0000000d                       ........

000c7c50 <_ZN12_GLOBAL__N_12g0L12quant0_scaleE>:
   c7c50:	00000001 3e578745                       ....E.W>

000c7c58 <_ZN12_GLOBAL__N_12g0L12quant10_zeroE>:
   c7c58:	00000001 ffffff80                       ........

000c7c60 <_ZN12_GLOBAL__N_12g0L12quant1_scaleE>:
   c7c60:	00000001 39a74185                       .....A.9

000c7c68 <_ZN12_GLOBAL__N_12g0L12quant2_scaleE>:
   c7c68:	00000001 3bac9d01                       .......;

000c7c70 <_ZN12_GLOBAL__N_12g0L12quant3_scaleE>:
   c7c70:	00000001 394307e3                       ......C9

000c7c78 <_ZN12_GLOBAL__N_12g0L12quant4_scaleE>:
   c7c78:	00000001 3b72fb23                       ....#.r;

000c7c80 <_ZN12_GLOBAL__N_12g0L12quant5_scaleE>:
   c7c80:	00000001 3a2aeb77                       ....w.*:

000c7c88 <_ZN12_GLOBAL__N_12g0L12quant6_scaleE>:
   c7c88:	00000001 3b4b03cd                       ......K;

000c7c90 <_ZN12_GLOBAL__N_12g0L12quant7_scaleE>:
   c7c90:	00000001 3d4d7b0a                       .....{M=

000c7c98 <_ZN12_GLOBAL__N_12g0L12quant8_scaleE>:
   c7c98:	00000001 3d780df9                       ......x=

000c7ca0 <_ZN12_GLOBAL__N_12g0L12quant9_scaleE>:
   c7ca0:	00000001 3d2c1b9a                       ......,=

000c7ca8 <_ZN12_GLOBAL__N_12g0L12tensor_data1E>:
   c7ca8:	ffffffa5 0000005b                       ....[...

000c7cb0 <_ZN12_GLOBAL__N_12g0L12tensor_data2E>:
   c7cb0:	714c8d48 89cda97f 164f5806 029ee8e8     H.Lq.....XO.....
   c7cc0:	2ca14088 00000000 00000000 00000000     .@.,............

000c7cd0 <_ZN12_GLOBAL__N_12g0L12tensor_data3E>:
   c7cd0:	0000000f 000000be 00000000 ffffffb1     ................
   c7ce0:	ffffff68 00000061 ffffff68 0000009f     h...a...h.......
   c7cf0:	ffffff52 ffffff58 00000000 00000000     R...X...........

000c7d00 <_ZN12_GLOBAL__N_12g0L12tensor_data4E>:
   c7d00:	0db6b029 94750f68 1316c3fe a931743f     )...h.u.....?t1.
   c7d10:	19b6e6fb 454592ce 9ccadd41 d3ca14ab     ......EEA.......
   c7d20:	623d0f47 e0d92dca 6dfd9ce9 15dbc3ce     G.=b.-.....m....
   c7d30:	3421f4d6 b8f2a7ea ad999b57 04640839     ..!4....W...9.d.
   c7d40:	d1c54cb6 2c6252dc cf08a8b4 556ac3ee     .L...Rb,......jU
   c7d50:	d49936cb 1cdc42a0 33574398 97243ce5     .6...B...CW3.<$.
   c7d60:	3a4460d5 35b84da8 51f98ce6 4255d08d     .`D:.M.5...Q..UB
   c7d70:	bae741d0 06bf45da afc62959 de0c4b4b     .A...E..Y)..KK..
   c7d80:	233a07dc e915deb0 dae9e647 3f2d65f7     ..:#....G....e-?
   c7d90:	8e5a5ffd 7ccadc7f 398ddb4b 59150e4f     ._Z....|K..9O..Y
   c7da0:	2a342339 e5901b52 0e5c05d8 59dc94f2     9#4*R.....\....Y
   c7db0:	dcc7419e feeaaf26 0bec614a 2bbc9b47     .A..&...Ja..G..+
   c7dc0:	e341ceaa 4efb54f1 00000000 00000000     ..A..T.N........

000c7dd0 <_ZN12_GLOBAL__N_12g0L12tensor_data5E>:
   c7dd0:	ffffffda ffffffe0 00000004 00000000     ................
   c7de0:	00000018 ffffffdb fffffffb 00000000     ................
   c7df0:	00000034 fffffff7 ffffffd8 ffffffe6     4...............
   c7e00:	0000002c 00000007 00000037 00000030     ,.......7...0...
   c7e10:	00000020 ffffffd1 ffffffe4 fffffff1      ...............

000c7e20 <_ZN12_GLOBAL__N_12g0L12tensor_data6E>:
   c7e20:	56dfe7f6 ba233524 2e01a92b 5defaca2     ...V$5#.+......]
   c7e30:	cdc44a14 1a65e768 f2894e9d 1adf0758     .J..h.e..N..X...
   c7e40:	7139292b 0e1637bd 3253bc4d fbf3c27a     +)9q.7..M.S2z...
   c7e50:	3e41f165 afa3f753 664cca2f 18aefb73     e.A>S.../.Lfs...
   c7e60:	54b93fad 37084125 aa449a78 3ca1e713     .?.T%A.7x.D....<
   c7e70:	43f644c3 9f396ff5 47385c5e c8a8e631     .D.C.o9.^\8G1...
   c7e80:	2fb54926 3a46d5b6 b91c2169 ec69b49a     &I./..F:i!....i.
   c7e90:	1ce54bd0 46a8d7b6 ec004a46 f3ee71fa     .K.....FFJ...q..
   c7ea0:	4ed50ae0 a1e1f40c 1ed8760c 2d96db99     ...N.....v.....-
   c7eb0:	1a90f61c a6ab0ed9 e85accfb c0d6e038     ..........Z.8...
   c7ec0:	53db90ba f8fc0bd8 ef2e4202 5a72c4d1     ...S.....B....rZ
   c7ed0:	4ccd17ca 8e55f6d3 21646220 60db2f1f     ...L..U. bd!./.`
   c7ee0:	2dd76fe7 c2d991b4 b65f6bb2 6ee6fdc2     .o.-.....k_....n
   c7ef0:	f850794b b1e83d94 3cfde3ec d908e138     KyP..=.....<8...
   c7f00:	0d68d63b 245c435f 2c973f3c 3bc4f897     ;.h._C\$<?.,...;
   c7f10:	85baf88e da8baa96 46f354bd 42e1af47     .........T.FG..B
   c7f20:	486e6611 892c1367 1b4cdaad 2bb12f01     .fnHg.,...L../.+
   c7f30:	b53f9e27 2231f7f6 639e3ea6 22ebf468     '.?...1".>.ch.."
   c7f40:	9facd761 eb5bd879 644f7069 d2cb2fdb     a...y.[.ipOd./..
   c7f50:	edec096e 33290a74 e40b9cd6 8fbda33d     n...t.)3....=...
   c7f60:	91e3359f 5ece4814 de67e118 42b23e32     .5...H.^..g.2>.B
   c7f70:	8b26d634 7070ffc5 1bef6b9e 2a661e15     4.&...pp.k....f*
   c7f80:	f38fa9ef a5a8d5a3 8ccfdafa 21caa36a     ............j..!
   c7f90:	1bc0af12 81631a2a e0857791 99351aa5     ....*.c..w....5.
   c7fa0:	48ba6455 6e0daf87 219c9eb6 20240eef     Ud.H...n...!..$ 
   c7fb0:	42b627f4 3f1e632d 5d92402c fc152d9b     .'.B-c.?,@.].-..
   c7fc0:	fedbbf0c b0deec5b de9e9c2c 32cf4218     ....[...,....B.2
   c7fd0:	df3bcaab d12ec1a2 2fe0dc32 e45c485d     ..;.....2../]H\.
   c7fe0:	fa316adc 48e17ae1 13a5d0b7 d948cb73     .j1..z.H....s.H.
   c7ff0:	b0cc7cb4 8b36db96 f1af0242 d293d5fb     .|....6.B.......
   c8000:	bcb1a6a2 2ab8ba02 5bc25ec5 54f99bce     .......*.^.[...T
   c8010:	ddefc403 5257f426 fb535fa6 a1face01     ....&.WR._S.....
   c8020:	98d723c5 06fca85e                       .#..^...

000c8028 <_ZN12_GLOBAL__N_12g0L13quant10_scaleE>:
   c8028:	00000001 3b800000                       .......;

000c8030 <_ZN12_GLOBAL__N_12g0L17tensor_dimension0E>:
   c8030:	00000002 00000001 0000001a              ............

000c803c <_ZN12_GLOBAL__N_12g0L17tensor_dimension1E>:
   c803c:	00000001 00000002                       ........

000c8044 <_ZN12_GLOBAL__N_12g0L17tensor_dimension2E>:
   c8044:	00000002 00000002 0000000a              ............

000c8050 <_ZN12_GLOBAL__N_12g0L17tensor_dimension3E>:
   c8050:	00000001 0000000a                       ........

000c8058 <_ZN12_GLOBAL__N_12g0L17tensor_dimension4E>:
   c8058:	00000002 0000000a 00000014              ............

000c8064 <_ZN12_GLOBAL__N_12g0L17tensor_dimension5E>:
   c8064:	00000001 00000014                       ........

000c806c <_ZN12_GLOBAL__N_12g0L17tensor_dimension6E>:
   c806c:	00000002 00000014 0000001a              ............

000c8078 <_ZN12_GLOBAL__N_12g0L17tensor_dimension7E>:
   c8078:	00000002 00000001 00000014              ............

000c8084 <_ZN12_GLOBAL__N_12g0L17tensor_dimension8E>:
   c8084:	00000002 00000001 0000000a              ............

000c8090 <_ZN12_GLOBAL__N_12g0L17tensor_dimension9E>:
   c8090:	00000002 00000001 00000002              ............

000c809c <_ZN12_GLOBAL__N_12g0L18tensor_dimension10E>:
   c809c:	00000002 00000001 00000002              ............

000c80a8 <_ZN12_GLOBAL__N_12g0L6quant0E>:
   c80a8:	000c7c50 000c7c00 00000000              P|...|......

000c80b4 <_ZN12_GLOBAL__N_12g0L6quant1E>:
   c80b4:	000c7c60 000c7c08 00000000              `|...|......

000c80c0 <_ZN12_GLOBAL__N_12g0L6quant2E>:
   c80c0:	000c7c68 000c7c10 00000000              h|...|......

000c80cc <_ZN12_GLOBAL__N_12g0L6quant3E>:
   c80cc:	000c7c70 000c7c18 00000000              p|...|......

000c80d8 <_ZN12_GLOBAL__N_12g0L6quant4E>:
   c80d8:	000c7c78 000c7c20 00000000              x|.. |......

000c80e4 <_ZN12_GLOBAL__N_12g0L6quant5E>:
   c80e4:	000c7c80 000c7c28 00000000              .|..(|......

000c80f0 <_ZN12_GLOBAL__N_12g0L6quant6E>:
   c80f0:	000c7c88 000c7c30 00000000              .|..0|......

000c80fc <_ZN12_GLOBAL__N_12g0L6quant7E>:
   c80fc:	000c7c90 000c7c38 00000000              .|..8|......

000c8108 <_ZN12_GLOBAL__N_12g0L6quant8E>:
   c8108:	000c7c98 000c7c40 00000000              .|..@|......

000c8114 <_ZN12_GLOBAL__N_12g0L6quant9E>:
   c8114:	000c7ca0 000c7c48 00000000              .|..H|......

000c8120 <_ZN12_GLOBAL__N_12g0L7inputs0E>:
   c8120:	00000003 00000000 00000006 00000005     ................

000c8130 <_ZN12_GLOBAL__N_12g0L7inputs1E>:
   c8130:	00000003 00000007 00000004 00000003     ................

000c8140 <_ZN12_GLOBAL__N_12g0L7inputs2E>:
   c8140:	00000003 00000008 00000002 00000001     ................

000c8150 <_ZN12_GLOBAL__N_12g0L7inputs3E>:
   c8150:	00000001 00000009                       ........

000c8158 <_ZN12_GLOBAL__N_12g0L7opdata0E>:
   c8158:	00000001                                ....

000c815c <_ZN12_GLOBAL__N_12g0L7opdata1E>:
   c815c:	00000001                                ....

000c8160 <_ZN12_GLOBAL__N_12g0L7opdata2E>:
   c8160:	00000000                                ....

000c8164 <_ZN12_GLOBAL__N_12g0L7opdata3E>:
   c8164:	3f800000                                ...?

000c8168 <_ZN12_GLOBAL__N_12g0L7quant10E>:
   c8168:	000c8028 000c7c58 00000000              (...X|......

000c8174 <_ZN12_GLOBAL__N_12g0L8outputs0E>:
   c8174:	00000001 00000007                       ........

000c817c <_ZN12_GLOBAL__N_12g0L8outputs1E>:
   c817c:	00000001 00000008                       ........

000c8184 <_ZN12_GLOBAL__N_12g0L8outputs2E>:
   c8184:	00000001 00000009                       ........

000c818c <_ZN12_GLOBAL__N_12g0L8outputs3E>:
   c818c:	00000001 0000000a                       ........

000c8194 <_ZN12_GLOBAL__N_18used_opsE>:
   c8194:	01000000                                ....

000c8198 <_ZN12_GLOBAL__N_1L25tflTensors_subgraph_indexE>:
   c8198:	00000000 0000000b                       ........

000c81a0 <_ZTVN12_GLOBAL__N_115EonMicroContextE>:
	...
   c81a8:	000bd201 000bd215 000bd1f9 000bd275     ............u...
   c81b8:	000bd065 000bd165 000bc57d 000bc5a3     e...e...}.......
   c81c8:	000bc5c9 000bd06b 000bd0f5              ....k.......

000c81d4 <_ZL4font>:
   c81d4:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   c81e4:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   c81f4:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   c8204:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   c8214:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   c8224:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   c8234:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   c8244:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   c8254:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   c8264:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   c8274:	00000000 5f000000 07000000 14000700     ......._........
   c8284:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   c8294:	00502056 00030708 41221c00 22410000     V P......."A..A"
   c82a4:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   c82b4:	08080800 00000808 20006060 02040810     ........``. ....
   c82c4:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   c82d4:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   c82e4:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   c82f4:	00001e29 00000014 00003440 22140800     ).......@4....."
   c8304:	14141441 41001414 02081422 06095901     A......A"....Y..
   c8314:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   c8324:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   c8334:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   c8344:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   c8354:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   c8364:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   c8374:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   c8384:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   c8394:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   c83a4:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   c83b4:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   c83c4:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   c83d4:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   c83e4:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   c83f4:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   c8404:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   c8414:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   c8424:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   c8434:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   c8444:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   c8454:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   c8464:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   c8474:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   c8484:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   c8494:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   c84a4:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   c84b4:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   c84c4:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   c84d4:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   c84e4:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   c84f4:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   c8504:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   c8514:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   c8524:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   c8534:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   c8544:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   c8554:	00ff0000 ff101010 14141400 101000ff     ................
   c8564:	10ff00ff f010f010 fc141414 f7141400     ................
   c8574:	0000ff00 14ff00ff fc04f414 10171414     ................
   c8584:	1f10101f 14141f10 10001f14 00f01010     ................
   c8594:	1f000000 10101010 1010101f 0010f010     ................
   c85a4:	10ff0000 10101010 10101010 000010ff     ................
   c85b4:	0014ff00 ff00ff00 101f0000 fc000017     ................
   c85c4:	1414f404 14171017 f404f414 00ff0000     ................
   c85d4:	141414f7 14141414 14f700f7 14171414     ................
   c85e4:	101f1010 1414141f 101014f4 00f010f0     ................
   c85f4:	1f101f00 1f000000 00000014 000014fc     ................
   c8604:	10f010f0 ff10ff10 ff141414 10101014     ................
   c8614:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   c8624:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   c8634:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   c8644:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   c8654:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   c8664:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   c8674:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   c8684:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   c8694:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   c86a4:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   c86b4:	00000018 30001010 0101ff40 01011f00     .......0@.......
   c86c4:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....

000c86d4 <_ZTV12Adafruit_GFX>:
	...
   c86e4:	000be13d 000c091d 000b4eb9 000bdb45     =........N..E...
   c86f4:	000bdb47 000bdb79 000bdb55 000bdb67     G...y...U...g...
   c8704:	000bda87 000bdb45 000bdd71 000bdd6f     ....E...q...o...
   c8714:	000bdb91 000bdbcf 000bdc09 000bdc4f     ............O...
   c8724:	000bdc6b 000bdcef                       k.......

000c872c <_ZTV17Adafruit_GrayOLED>:
	...
   c873c:	000be13d 000c091d 000be24b 000bdb45     =.......K...E...
   c874c:	000bdb47 000bdb79 000bdb55 000bdb67     G...y...U...g...
   c875c:	000bda87 000bdb45 000bdd71 000be447     ....E...q...G...
   c876c:	000bdb91 000bdbcf 000bdc09 000bdc4f     ............O...
   c877c:	000bdc6b 000bdcef 000b4eb9              k........N..

000c8788 <_ZL12splash2_data>:
   c8788:	00600000 00000000 00000000 00000000     ..`.............
   c8798:	0000e000 00000000 00000000 01000000     ................
   c87a8:	000000e0 00000000 00000000 f0010000     ................
	...
   c87c4:	00f00300 00000000 00000000 00000000     ................
   c87d4:	0000f007 00000000 00000000 07000000     ................
   c87e4:	000000f8 00000000 00000000 f80f0000     ................
   c87f4:	03000000 007e00c0 00e00100 00f80f7f     ......~.........
   c8804:	c0030000 0000fe00 ff00e001 0000f8ef     ................
   c8814:	00c00300 010000fe ffff00e0 000000f8     ................
   c8824:	f000c003 0f000000 7ffe7f00 030000c0     ................
   c8834:	00f000c0 000f0000 f87ffe3f cffbf13f     ........?...?...
   c8844:	bcf3fefc 1fe0ef3d 7fff7ffe fedffffb     ....=...........
   c8854:	3dbcfffe c61fe0ef fb7fffff fefedfff     ...=............
   c8864:	ef3dbcff c7e30fe0 c37b78fe fff01ede     ..=......x{.....
   c8874:	00ef3dbc fc87ff07 dec37b78 3cf8f01e     .=......x{.....<
   c8884:	0100ef3d 00f0ffff 1ec0c37b 3d3cf0f0     =.......{.....<=
   c8894:	f30100ef fb3fe07f f0fecfc3 ef3d3cf0     ......?......<=.
   c88a4:	3fe30300 c3fb7f80 f0f0fedf 00ef3d3c     ...?........<=..
   c88b4:	003ce707 dec37b78 3cf0f01e 0700ef3d     ..<.x{.....<=...
   c88c4:	7800beff 1edec37b 3d3cf0f0 ff0700ef     ...x{.....<=....
   c88d4:	7b7800fe f01edec3 ef3d3cf0 feff0f00     ..x{.....<=.....
   c88e4:	fffb7f00 f0f0fedf e0effd3f 00ffff0f     ........?.......
   c88f4:	dffffb7f 3ff0f0fe 0fe0effd 3e00fff9     .......?.......>
   c8904:	9ecff979 3d1ff0f0 f11fe0e7 000000ff     y......=........
	...
   c891c:	ff801f00 ffff7f00 ffffffff e0ffffff     ................
   c892c:	007f001c ffffff7f 886db4fe 00e0188d     ..........m.....
   c893c:	7f001f00 feffffff b57dad95 0000e077     ..........}.w...
   c894c:	ff7f000f a5feffff 198d9dad 060000e0     ................
   c895c:	ffff7f00 adb5feff e07eb5ed              ..........~.

000c8968 <_ZTV15Adafruit_SH1107>:
	...
   c8970:	000be5b9 000be5cd 000be13d 000c091d     ........=.......
   c8980:	000be24b 000bdb45 000bdb47 000bdb79     K...E...G...y...
   c8990:	000bdb55 000bdb67 000bda87 000bdb45     U...g.......E...
   c89a0:	000bdd71 000be447 000bdb91 000bdbcf     q...G...........
   c89b0:	000bdc09 000bdc4f 000bdc6b 000bdcef     ....O...k.......
   c89c0:	000be6ed                                ....

000c89c4 <_ZZN15Adafruit_SH11075beginEhbE12init_128x128>:
   c89c4:	7fa800d3                                ....

000c89c8 <_ZZN15Adafruit_SH11075beginEhbE4init>:
   c89c8:	2051d5ae 8aad4f81 00dcc0a0 22d960d3     ..Q .O.......`."
   c89d8:	3fa835db 0000a6a4                       .5.?....

000c89e0 <_ZTV15Adafruit_SH110X>:
	...
   c89e8:	000b4eb9 000b4eb9 000be13d 000c091d     .N...N..=.......
   c89f8:	000be24b 000bdb45 000bdb47 000bdb79     K...E...G...y...
   c8a08:	000bdb55 000bdb67 000bda87 000bdb45     U...g.......E...
   c8a18:	000bdd71 000be447 000bdb91 000bdbcf     q...G...........
   c8a28:	000bdc09 000bdc4f 000bdc6b 000bdcef     ....O...k.......
   c8a38:	000be6ed                                ....

000c8a3c <_ZTVN5spark13CellularClassE>:
	...
   c8a44:	000bf16f 000bf165 000bf15b 000bf111     o...e...[.......
   c8a54:	000bf14f 000bf143 000c07c5 000c07cd     O...C...........
   c8a64:	000bf137 000bf12f 000bf125 000bf11b     7.../...%.......
   c8a74:	000c08f5 000c07fd 000c0805              ............

000c8a80 <_ZTVN5spark13EthernetClassE>:
	...
   c8a88:	000bf217 000bf20d 000bf203 000bf1f9     ................
   c8a98:	000bf1ed 000bf1e1 000c07c5 000c07cd     ................
   c8aa8:	000bf1d5 000bf1cd 000bf1c3 000bf1b9     ................
   c8ab8:	000c08f5 000c07fd 000c0805              ............

000c8ac4 <_ZTV7TwoWire>:
	...
   c8acc:	000bf235 000bf27f 000bf257 000bf237     5.......W...7...
   c8adc:	000bf25f 000bf267 000bf26f 000bf277     _...g...o...w...
   c8aec:	000c0b99                                ....

000c8af0 <_ZTV9IPAddress>:
	...
   c8af8:	000bf379 000bf369 000bf36b 25006425     y...i...k...%d.%
   c8b08:	25750075 00783430 64756162 72655300     u.u%04x.baud.Ser
   c8b18:	006c6169 69726553 00316c61 4e4f534a     ial.Serial1.JSON
   c8b28:	65727453 6f4c6d61 6e614867 72656c64     StreamLogHandler
   c8b38:	70706100 31302500 00207530 2c00205d     .app.%010u .] .,
   c8b48:	29280020 2000203a 6f63005b 3d206564      .(): . [.code =
   c8b58:	69250020 74656400 736c6961 00203d20      .%i.details = .
   c8b68:	6e6c006d 006e6600 65646f63 74656400     m.ln.fn.code.det
   c8b78:	006c6961                                ail.

000c8b7c <_ZTVN5spark16JSONStreamWriterE>:
	...
   c8b84:	000bf8b5 000bf8db 000bf88d 000bf487     ................

000c8b94 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c8b9c:	000bfd3d 000bfd55 000c0435 000c05d9     =...U...5.......

000c8bac <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c8bb4:	000bfd69 000bfd7d 000c0611 000bf8a1     i...}...........

000c8bc4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c8bcc:	000bf8b3 000bf8e9 000c0399 000bf8a3     ................

000c8bdc <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c8be4:	000bf8b1 000bf8f7 000bfca5 000bf919     ................

000c8bf4 <CSWTCH.153>:
   c8bf4:	2003df1c 2003dee0 2003df70 2003df98     ... ... p.. ... 

000c8c04 <_ZTVN5spark12NetworkClassE>:
	...
   c8c0c:	000c0785 000c078f 000c0799 000c07a3     ................
   c8c1c:	000c07ad 000c07b9 000c07c5 000c07cd     ................
   c8c2c:	000c07d5 000c07e1 000c07e9 000c07f3     ................
   c8c3c:	000c08f5 000c07fd 000c0805              ............

000c8c48 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c8c48:	18100800 38302820                       .... (08

000c8c50 <_ZTVN8particle11TetherClassE>:
	...
   c8c58:	000c0d63 000c0d59 000c0d4f 000c0d45     c...Y...O...E...
   c8c68:	000c0d39 000c0d2d 000c07c5 000c07cd     9...-...........
   c8c78:	000c0d21 000c0d19 000c0d0f 000c0d05     !...............
   c8c88:	000c08f5 000c07fd 000c0805 252d5925     ............%Y-%
   c8c98:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
   c8ca8:	74637361 00656d69                       asctime.

000c8cb0 <_ZTV11USARTSerial>:
	...
   c8cb8:	000c0d95 000c0e01 000c0dd9 000c091d     ................
   c8cc8:	000c0da9 000c0dc5 000c0db7 000c0dd3     ................
   c8cd8:	000c0b99 000c0d97 000c0d9b              ............

000c8ce4 <_ZTV9USBSerial>:
	...
   c8cec:	000c0e53 000c0ebb 000c0e91 000c091d     S...............
   c8cfc:	000c0e83 000c0e55 000c0e65 000c0eb5     ....U...e.......
   c8d0c:	000c0b99 000c0e75 000c0e4d              ....u...M...

000c8d18 <_ZSt7nothrow>:
	...

000c8d20 <npio2_hw>:
   c8d20:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
   c8d30:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
   c8d40:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
   c8d50:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
   c8d60:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
   c8d70:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
   c8d80:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
   c8d90:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

000c8da0 <two_over_pi>:
   c8da0:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
   c8db0:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
   c8dc0:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
   c8dd0:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
   c8de0:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
   c8df0:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
   c8e00:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
   c8e10:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
   c8e20:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
   c8e30:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
   c8e40:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
   c8e50:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
   c8e60:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
   c8e70:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
   c8e80:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
   c8e90:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
   c8ea0:	0060e27b 00c08c6b                       {.`.k...

000c8ea8 <PIo2>:
   c8ea8:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
   c8eb8:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
   c8ec8:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
   c8ed8:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

000c8ee8 <init_jk>:
   c8ee8:	00000002 00000003 00000004 00000006     ................
   c8ef8:	4e454552 616d2054 636f6c6c 63757320     REENT malloc suc
   c8f08:	64656563 2f006465 2f706d74 6b6e656a     ceeded./tmp/jenk
   c8f18:	2d736e69 2d434347 702d3031 6c657069     ins-GCC-10-pipel
   c8f28:	2d656e69 325f3834 31303230 5f343231     ine-48_20201124_
   c8f38:	36303631 36303831 732f3933 6e2f6372     1606180639/src/n
   c8f48:	696c7765 656e2f62 62696c77 62696c2f     ewlib/newlib/lib
   c8f58:	74732f63 62696c64 6e61722f 00632e64     c/stdlib/rand.c.
   c8f68:	74696e69 00000079                       inity...

000c8f70 <fpi.1>:
   c8f70:	00000035 fffffbce 000003cb 00000001     5...............
   c8f80:	00000000                                ....

000c8f84 <fpinan.0>:
   c8f84:	00000034 fffffbce 000003cb 00000001     4...............
   c8f94:	00000000                                ....

000c8f98 <tinytens>:
   c8f98:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   c8fa8:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   c8fb8:	64ac6f43 11680628                       Co.d(.h.

000c8fc0 <_ctype_>:
   c8fc0:	20202000 20202020 28282020 20282828     .         ((((( 
   c8fd0:	20202020 20202020 20202020 20202020                     
   c8fe0:	10108820 10101010 10101010 10101010      ...............
   c8ff0:	04040410 04040404 10040404 10101010     ................
   c9000:	41411010 41414141 01010101 01010101     ..AAAAAA........
   c9010:	01010101 01010101 01010101 10101010     ................
   c9020:	42421010 42424242 02020202 02020202     ..BBBBBB........
   c9030:	02020202 02020202 02020202 10101010     ................
   c9040:	00000020 00000000 00000000 00000000      ...............
	...
   c90c0:	6c614200 20636f6c 63637573 65646565     .Balloc succeede
   c90d0:	742f0064 6a2f706d 696b6e65 472d736e     d./tmp/jenkins-G
   c90e0:	312d4343 69702d30 696c6570 342d656e     CC-10-pipeline-4
   c90f0:	30325f38 31313032 315f3432 31363036     8_20201124_16061
   c9100:	33363038 72732f39 656e2f63 62696c77     80639/src/newlib
   c9110:	77656e2f 2f62696c 6362696c 6474732f     /newlib/libc/std
   c9120:	2f62696c 6f746467 65672d61 78656874     lib/gdtoa-gethex
   c9130:	0000632e                                .c..

000c9134 <_C_numeric_locale>:
   c9134:	000c78be 000c5650 2003d2e8 4f500043     .x..PV..... C.PO
   c9144:	00584953 706d742f 6e656a2f 736e696b     SIX./tmp/jenkins
   c9154:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   c9164:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   c9174:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   c9184:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   c9194:	696c6474 706d2f62 2e636572 00000063     tdlib/mprec.c...
   c91a4:	00000000                                ....

000c91a8 <__mprec_bigtens>:
   c91a8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   c91b8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   c91c8:	7f73bf3c 75154fdd                       <.s..O.u

000c91d0 <__mprec_tens>:
   c91d0:	00000000 3ff00000 00000000 40240000     .......?......$@
   c91e0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   c91f0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   c9200:	00000000 412e8480 00000000 416312d0     .......A......cA
   c9210:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   c9220:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   c9230:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   c9240:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   c9250:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   c9260:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   c9270:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   c9280:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   c9290:	79d99db4 44ea7843                       ...yCx.D

000c9298 <p05.0>:
   c9298:	00000005 00000019 0000007d              ........}...

000c92a4 <link_const_data_end>:
   c92a4:	000baee9 	.word	0x000baee9
   c92a8:	000bd4b5 	.word	0x000bd4b5
   c92ac:	000bf101 	.word	0x000bf101
   c92b0:	000bf179 	.word	0x000bf179
   c92b4:	000bf1a9 	.word	0x000bf1a9
   c92b8:	000bf221 	.word	0x000bf221
   c92bc:	000bf34d 	.word	0x000bf34d
   c92c0:	000c0425 	.word	0x000c0425
   c92c4:	000c0909 	.word	0x000c0909
   c92c8:	000c09e5 	.word	0x000c09e5
   c92cc:	000c0ce1 	.word	0x000c0ce1
   c92d0:	000c0d6d 	.word	0x000c0d6d
   c92d4:	000c0d81 	.word	0x000c0d81
